// Generated from /Users/kongtong.ouyang/IdeaProjects/gumiho/gumiho/src/main/resources/grammars/sql/dialect/drds/DRDSSQLStatementParser.g4 by ANTLR 4.7
package com.aliyun.gumiho.sql.dialect.drds.parser;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DRDSSQLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACES=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ANALYZE=8, AND=9, AS=10, ASC=11, BEFORE=12, BETWEEN=13, 
		BOTH=14, BROADCAST=15, BY=16, CALL=17, CASCADE=18, CASE=19, CAST=20, CHANGE=21, 
		CHARACTER=22, CHECK=23, COLLATE=24, COLUMN=25, CONDITION=26, CONSTRAINT=27, 
		CONTINUE=28, CONVERT=29, CREATE=30, CROSS=31, CURRENT_USER=32, CURSOR=33, 
		DATABASE=34, DATABASES=35, DBPARTITION=36, DECLARE=37, DEFAULT=38, DELAYED=39, 
		DELETE=40, DESC=41, DESCRIBE=42, DETERMINISTIC=43, DD=44, DISTINCT=45, 
		DISTINCTROW=46, DIV=47, DROP=48, EACH=49, ELSE=50, ELSEIF=51, ENCLOSED=52, 
		ESCAPED=53, EXISTS=54, EXIT=55, EXPLAIN=56, FALSE=57, FETCH=58, FOR=59, 
		FORCE=60, FOREIGN=61, FROM=62, FULLTEXT=63, GRANT=64, GROUP=65, HAVING=66, 
		HIGH_PRIORITY=67, IF=68, IGNORE=69, IN=70, INDEX=71, INFILE=72, INNER=73, 
		INOUT=74, INVISIBLE=75, INSERT=76, INTERVAL=77, INTO=78, IS=79, ITERATE=80, 
		JOIN=81, KEY=82, KEYS=83, KILL=84, LEADING=85, LEAVE=86, LEFT=87, LIKE=88, 
		LIMIT=89, LINEAR=90, LINES=91, LOAD=92, LOCK=93, LOCKED=94, LOOP=95, LOW_PRIORITY=96, 
		MASTER_BIND=97, MASTER_SSL_VERIFY_SERVER_CERT=98, MATCH=99, MAXVALUE=100, 
		MM=101, MMDD=102, MODIFIES=103, NATIONAL=104, NATURAL=105, NEW=106, NOWAIT=107, 
		NOT=108, NO_WRITE_TO_BINLOG=109, NULL_LITERAL=110, OF=111, OLD=112, ON=113, 
		OPTIMIZE=114, OPTION=115, OPTIONALLY=116, OR=117, ORDER=118, OUT=119, 
		OUTER=120, OUTFILE=121, PARTITION=122, PERSIST=123, PERSIST_ONLY=124, 
		PRIMARY=125, PROCEDURE=126, PURGE=127, RANGE=128, RANGE_HASH=129, READ=130, 
		READS=131, REFERENCES=132, REGEXP=133, RELEASE=134, RENAME=135, REPEAT=136, 
		REPLACE=137, REQUIRE=138, RESTRICT=139, RETURN=140, REVOKE=141, ROLE=142, 
		RIGHT=143, RLIKE=144, SCHEMA=145, SCHEMAS=146, SELECT=147, SET=148, SEPARATOR=149, 
		SHOW=150, SKIP_=151, SPATIAL=152, SQL=153, SQLEXCEPTION=154, SQLSTATE=155, 
		SQLWARNING=156, SQL_BIG_RESULT=157, SQL_CALC_FOUND_ROWS=158, SQL_SMALL_RESULT=159, 
		SSL=160, STARTING=161, STRAIGHT_JOIN=162, TABLE=163, TBPARTITION=164, 
		TBPARTITIONS=165, TERMINATED=166, THEN=167, TO=168, TRAILING=169, TRIGGER=170, 
		TRUE=171, UNDO=172, UNION=173, UNIQUE=174, UNLOCK=175, UNSIGNED=176, UPDATE=177, 
		USAGE=178, USE=179, USING=180, VALUES=181, VISIBLE=182, WHEN=183, WHERE=184, 
		WHILE=185, WITH=186, WRITE=187, XOR=188, ZEROFILL=189, TINYINT=190, SMALLINT=191, 
		MEDIUMINT=192, INT=193, INTEGER=194, BIGINT=195, REAL=196, DOUBLE=197, 
		FLOAT=198, DECIMAL=199, DEC=200, NUMERIC=201, DATE=202, TIME=203, TIMESTAMP=204, 
		DATETIME=205, YEAR=206, CHAR=207, VARCHAR=208, BINARY=209, VARBINARY=210, 
		TINYBLOB=211, BLOB=212, MEDIUMBLOB=213, LONGBLOB=214, TINYTEXT=215, TEXT=216, 
		MEDIUMTEXT=217, LONGTEXT=218, ENUM=219, AVG=220, BIT_AND=221, BIT_OR=222, 
		BIT_XOR=223, COUNT=224, GROUP_CONCAT=225, MAX=226, MIN=227, STD=228, STDDEV=229, 
		STDDEV_POP=230, STDDEV_SAMP=231, SUM=232, VAR_POP=233, VAR_SAMP=234, VARIANCE=235, 
		CURRENT_DATE=236, CURRENT_TIME=237, CURRENT_TIMESTAMP=238, LOCALTIME=239, 
		EXTRACT=240, LOCALTIMESTAMP=241, POSITION=242, SUBSTR=243, SUBSTRING=244, 
		TRIM=245, UTC_DATE=246, UTC_TIME=247, UTC_TIMESTAMP=248, ACCOUNT=249, 
		ACTION=250, AFTER=251, AGAINST=252, AGGREGATE=253, ALGORITHM=254, ANY=255, 
		AT=256, AUTHORS=257, AUTOCOMMIT=258, AUTOEXTEND_SIZE=259, AUTO_INCREMENT=260, 
		AVG_ROW_LENGTH=261, BEGIN=262, BINLOG=263, BIT=264, BLOCK=265, BOOL=266, 
		BOOLEAN=267, BTREE=268, CACHE=269, CASCADED=270, CHAIN=271, CHANGED=272, 
		CHANNEL=273, CHECKSUM=274, CIPHER=275, CLIENT=276, CLOSE=277, COALESCE=278, 
		CODE=279, COLUMNS=280, COLUMN_FORMAT=281, COMMENT=282, COMMIT=283, COMPACT=284, 
		COMPLETION=285, COMPRESSED=286, COMPRESSION=287, CONCURRENT=288, CONNECTION=289, 
		CONSISTENT=290, CONTAINS=291, CONTEXT=292, CONTRIBUTORS=293, COPY=294, 
		CPU=295, DATA=296, DATAFILE=297, DEALLOCATE=298, DEFAULT_AUTH=299, DEFINER=300, 
		DELAY_KEY_WRITE=301, DES_KEY_FILE=302, DIRECTORY=303, DISABLE=304, DISCARD=305, 
		DISK=306, DO=307, DUMPFILE=308, DUPLICATE=309, DYNAMIC=310, ENABLE=311, 
		ENCRYPTION=312, END=313, ENDS=314, ENGINE=315, ENGINES=316, ERROR=317, 
		ERRORS=318, ESCAPE=319, EVEN=320, EVENT=321, EVENTS=322, EVERY=323, EXCHANGE=324, 
		EXCLUSIVE=325, EXPANSION=326, EXPIRE=327, EXPORT=328, EXTENDED=329, EXTENT_SIZE=330, 
		FAST=331, FAULTS=332, FIELDS=333, FILE_BLOCK_SIZE=334, FILTER=335, FIRST=336, 
		FIXED=337, FLUSH=338, FOLLOWS=339, FOUND=340, FULL=341, FUNCTION=342, 
		GENERAL=343, GLOBAL=344, GRANTS=345, GROUP_REPLICATION=346, HANDLER=347, 
		HASH=348, HELP=349, HOST=350, HOSTS=351, IDENTIFIED=352, IGNORE_SERVER_IDS=353, 
		IMPORT=354, INDEXES=355, INITIAL_SIZE=356, INPLACE=357, INSERT_METHOD=358, 
		INSTALL=359, INSTANCE=360, INVOKER=361, IO=362, IO_THREAD=363, IPC=364, 
		ISOLATION=365, ISSUER=366, JSON=367, KEY_BLOCK_SIZE=368, LANGUAGE=369, 
		LAST=370, LEAVES=371, LESS=372, LEVEL=373, LIST=374, LOCAL=375, LOGFILE=376, 
		LOGS=377, MASTER=378, MASTER_AUTO_POSITION=379, MASTER_CONNECT_RETRY=380, 
		MASTER_DELAY=381, MASTER_HEARTBEAT_PERIOD=382, MASTER_HOST=383, MASTER_LOG_FILE=384, 
		MASTER_LOG_POS=385, MASTER_PASSWORD=386, MASTER_PORT=387, MASTER_RETRY_COUNT=388, 
		MASTER_SSL=389, MASTER_SSL_CA=390, MASTER_SSL_CAPATH=391, MASTER_SSL_CERT=392, 
		MASTER_SSL_CIPHER=393, MASTER_SSL_CRL=394, MASTER_SSL_CRLPATH=395, MASTER_SSL_KEY=396, 
		MASTER_TLS_VERSION=397, MASTER_USER=398, MAX_CONNECTIONS_PER_HOUR=399, 
		MAX_QUERIES_PER_HOUR=400, MAX_ROWS=401, MAX_SIZE=402, MAX_UPDATES_PER_HOUR=403, 
		MAX_USER_CONNECTIONS=404, MEDIUM=405, MERGE=406, MIGRATE=407, MIN_ROWS=408, 
		MODE=409, MODIFY=410, MUTEX=411, MYSQL=412, NAME=413, NAMES=414, NCHAR=415, 
		NEVER=416, NEXT=417, NO=418, NODEGROUP=419, NONE=420, OFFLINE=421, OFFSET=422, 
		OJ=423, OLD_PASSWORD=424, ONE=425, ONLINE=426, ONLY=427, OPEN=428, OPTIMIZER_COSTS=429, 
		OPTIONS=430, OWNER=431, PACK_KEYS=432, PAGE=433, PARSER=434, PARTIAL=435, 
		PARTITIONING=436, PARTITIONS=437, PASSWORD=438, PHASE=439, PLUGIN=440, 
		PLUGIN_DIR=441, PLUGINS=442, PORT=443, PRECEDES=444, PRECISION=445, PREPARE=446, 
		PRESERVE=447, PREV=448, PROCESSLIST=449, PROFILE=450, PROFILES=451, PROXY=452, 
		QUERY=453, QUICK=454, REBUILD=455, RECOVER=456, REDO_BUFFER_SIZE=457, 
		REDUNDANT=458, RELAY=459, RELAY_LOG_FILE=460, RELAY_LOG_POS=461, RELAYLOG=462, 
		REMOVE=463, REORGANIZE=464, REPAIR=465, REPLICATE_DO_DB=466, REPLICATE_DO_TABLE=467, 
		REPLICATE_IGNORE_DB=468, REPLICATE_IGNORE_TABLE=469, REPLICATE_REWRITE_DB=470, 
		REPLICATE_WILD_DO_TABLE=471, REPLICATE_WILD_IGNORE_TABLE=472, REPLICATION=473, 
		RESET=474, RESUME=475, RETURNS=476, ROLLBACK=477, ROLLUP=478, ROTATE=479, 
		ROW=480, ROWS=481, ROW_FORMAT=482, SAVEPOINT=483, SCHEDULE=484, SECURITY=485, 
		SERVER=486, SESSION=487, SHARE=488, SHARED=489, SIGNED=490, SIMPLE=491, 
		SLAVE=492, SLOW=493, SNAPSHOT=494, SOCKET=495, SOME=496, SONAME=497, SOUNDS=498, 
		SOURCE=499, SQL_AFTER_GTIDS=500, SQL_AFTER_MTS_GAPS=501, SQL_BEFORE_GTIDS=502, 
		SQL_BUFFER_RESULT=503, SQL_CACHE=504, SQL_NO_CACHE=505, SQL_THREAD=506, 
		START=507, STARTS=508, STATS_AUTO_RECALC=509, STATS_PERSISTENT=510, STATS_SAMPLE_PAGES=511, 
		STATUS=512, STOP=513, STORAGE=514, STRING=515, SUBJECT=516, SUBPARTITION=517, 
		SUBPARTITIONS=518, SUSPEND=519, SWAPS=520, SWITCHES=521, TABLESPACE=522, 
		TEMPORARY=523, TEMPTABLE=524, THAN=525, TRADITIONAL=526, TRANSACTION=527, 
		TRIGGERS=528, TRUNCATE=529, UNDEFINED=530, UNDOFILE=531, UNDO_BUFFER_SIZE=532, 
		UNINSTALL=533, UNKNOWN=534, UNTIL=535, UPGRADE=536, USER=537, USE_FRM=538, 
		USER_RESOURCES=539, VALIDATION=540, VALUE=541, VARIABLES=542, VIEW=543, 
		WAIT=544, WARNINGS=545, WITHOUT=546, WORK=547, WRAPPER=548, X509=549, 
		XA=550, XML=551, EUR=552, USA=553, JIS=554, ISO=555, INTERNAL=556, YEAR_MONTH=557, 
		DAY_HOUR=558, DAY_MINUTE=559, DAY_SECOND=560, HOUR_MINUTE=561, HOUR_SECOND=562, 
		MINUTE_SECOND=563, SECOND_MICROSECOND=564, MINUTE_MICROSECOND=565, HOUR_MICROSECOND=566, 
		DAY_MICROSECOND=567, QUARTER=568, MONTH=569, DAY=570, HOUR=571, MINUTE=572, 
		WEEK=573, SECOND=574, MICROSECOND=575, TABLES=576, ROUTINE=577, EXECUTE=578, 
		FILE=579, PROCESS=580, RELOAD=581, SHUTDOWN=582, SUPER=583, PRIVILEGES=584, 
		ARMSCII8=585, ASCII=586, BIG5=587, CP1250=588, CP1251=589, CP1256=590, 
		CP1257=591, CP850=592, CP852=593, CP866=594, CP932=595, DEC8=596, EUCJPMS=597, 
		EUCKR=598, GB2312=599, GBK=600, GEOSTD8=601, GREEK=602, HEBREW=603, HP8=604, 
		KEYBCS2=605, KOI8R=606, KOI8U=607, LATIN1=608, LATIN2=609, LATIN5=610, 
		LATIN7=611, MACCE=612, MACROMAN=613, SJIS=614, SWE7=615, TIS620=616, UCS2=617, 
		UJIS=618, UTF16=619, UTF16LE=620, UTF32=621, UTF8=622, UTF8MB3=623, UTF8MB4=624, 
		ARCHIVE=625, BLACKHOLE=626, CSV=627, FEDERATED=628, INNODB=629, MEMORY=630, 
		MRG_MYISAM=631, MYISAM=632, NDB=633, NDBCLUSTER=634, PERFOMANCE_SCHEMA=635, 
		REPEATABLE=636, COMMITTED=637, UNCOMMITTED=638, SERIALIZABLE=639, GEOMETRY=640, 
		GEOMETRYCOLLECTION=641, LINESTRING=642, MULTILINESTRING=643, MULTIPOINT=644, 
		MULTIPOLYGON=645, POINT=646, POLYGON=647, CHARSET=648, GET_FORMAT=649, 
		MOD=650, REVERSE=651, WEIGHT_STRING=652, ASSIGN_OP=653, PLUS_ASSIGN=654, 
		MINUS_ASSIGN=655, MULT_ASSIGN=656, DIV_ASSIGN=657, MOD_ASSIGN=658, AND_ASSIGN=659, 
		XOR_ASSIGN=660, OR_ASSIGN=661, PLUS_SIGN=662, MINUS_SIGN=663, ASTERISK=664, 
		DIVIDE=665, LESS_THAN_LESS_THAN_OP=666, GREATER_THAN_GREATER_THAN_OP=667, 
		LOGIC_AND_OP=668, LOGIC_OR_OP=669, MINUSMINUS=670, EQUALS_OP=671, LESS_THAN_OP=672, 
		GREATER_THAN_OP=673, LESS_THAN_OR_EQUALS_OP=674, GREATER_THAN_OR_EQUALS_OP=675, 
		NOT_EQUAL_OP=676, LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP=677, EXCLAMATION_OP=678, 
		BIT_NOT_OP=679, BIT_OR_OP=680, BIT_AND_OP=681, BIT_XOR_OP=682, PERIOD=683, 
		LEFT_PAREN=684, RIGHT_PAREN=685, LEFT_BRACE=686, RIGHT_BRACE=687, COMMA=688, 
		SEMI=689, AT_SIGN=690, SINGLE_QUOTE_SYMB=691, DOUBLE_QUOTE_SYMB=692, REVERSE_QUOTE_SYMB=693, 
		COLON=694, PERCENT=695, QUESTION_MARK=696, CHARSET_REVERSE_QOUTE_STRING=697, 
		NULL_SPEC_LITERAL=698, REGULAR_ID=699, DELIMITED_ID=700, REVERSE_QUOTE_ID=701, 
		CHAR_STRING=702, NCHAR_STRING=703, STRING_CHARSET_NAME=704, UNSIGNED_INTEGER=705, 
		APPROXIMATE_NUM_LIT=706, HEXADECIMAL_LITERAL=707, BIT_STRING=708, STRING_USER_NAME=709, 
		INNER_JOIN=710, CROSS_JOIN=711, NATURAL_JOIN=712, NATURAL_INNER_JOIN=713, 
		LEFT_JOIN=714, LEFT_OUTER_JOIN=715, NATURAL_LEFT_JOIN=716, NATURAL_LEFT_OUTER_JOIN=717, 
		RIGHT_JOIN=718, RIGHT_OUTER_JOIN=719, NATURAL_RIGHT_JOIN=720, NATURAL_RIGHT_OUTER_JOIN=721, 
		ERROR_RECONGNIGION=722, COLLATION=723, FORMAT=724, LOCAL_ID=725, MID=726, 
		TREAT=727, REF=728, COST=729, MODEL=730, AUTO=731, STRICT=732, JSON_TABLE=733, 
		JSON_ARRAY=734, JSON_ARRAYAGG=735, JSON_OBJECT=736, JSON_OBJECTAGG=737, 
		NULL=738, ABSENT=739, RETURNING=740, PRETTY=741, ARRAY=742, UNCONDITIONAL=743, 
		CONDITIONAL=744, EMPTY=745, OBJECT=746, PATH=747, NESTED=748, ORDINALITY=749, 
		APPROX_COUNT=750, APPROX_COUNT_DISTINCT=751, APPROX_COUNT_DISTINCT_AGG=752, 
		APPROX_COUNT_DISTINCT_DETAIL=753, APPROX_MEDIAN=754, APPROX_PERCENTILE=755, 
		APPROX_PERCENTILE_AGG=756, APPROX_PERCENTILE_DETAIL=757, APPROX_RANK=758, 
		APPROX_SUM=759, COLLECT=760, CORR=761, CORR_S=762, CORR_K=763, COVAR_POP=764, 
		COVAR_SAMP=765, CUME_DIST=766, DENSE_RANK=767, GROUP_ID=768, GROUPING=769, 
		GROUPING_ID=770, MEDIAN=771, PERCENT_RANK=772, PERCENTILE_CONT=773, PERCENTILE_DISC=774, 
		RANK=775, REGR_SLOPE=776, REGR_INTERCEPT=777, REGR_COUNT=778, REGR_R2=779, 
		REGR_AVGX=780, REGR_AVGY=781, REGR_SXX=782, REGR_SYY=783, REGR_SXY=784, 
		STATS_BINOMIAL_TEST=785, STATS_CROSSTAB=786, STATS_F_TEST=787, STATS_KS_TEST=788, 
		STATS_MODE=789, STATS_MW_TEST=790, STATS_ONE_WAY_ANOVA=791, STATS_T_TEST_ONE=792, 
		STATS_T_TEST_PAIRED=793, STATS_T_TEST_INDEP=794, STATS_T_TEST_INDEPU=795, 
		STATS_WSR_TEST=796, SYS_OP_ZONE_ID=797, SYS_XMLAGG=798, TO_APPROX_COUNT_DISTINCT=799, 
		TO_APPROX_PERCENTILE=800, XMLAGG=801, WITHIN=802, KEEP=803, LISTAGG=804, 
		OVERFLOW=805, RESPECT=806, NULLS=807, OVER=808, UNBOUNDED=809, PRECEDING=810, 
		CURRENT=811, FOLLOWING=812, CUBE_TABLE=813, SINGLE_QUOTE=814, HIERARCHY=815, 
		HRR=816;
	public static final int
		RULE_parse = 0, RULE_statement = 1, RULE_ddlStatement = 2, RULE_dmlStatement = 3, 
		RULE_transactionStatement = 4, RULE_replicationStatement = 5, RULE_preparedStatement = 6, 
		RULE_compoundStatement = 7, RULE_administrationStatement = 8, RULE_utilityStatement = 9, 
		RULE_createDatabaseStatement = 10, RULE_createSchemaStatement = 11, RULE_createEventStatement = 12, 
		RULE_createIndexStatement = 13, RULE_createIndexStatementColumn = 14, 
		RULE_createIndexStatementOption = 15, RULE_algorithmOptionExpr = 16, RULE_lockOptionExpr = 17, 
		RULE_createLogfileGroupStatement = 18, RULE_createProcedureStatement = 19, 
		RULE_createFunctionStatement = 20, RULE_createServerStatement = 21, RULE_serverOption = 22, 
		RULE_createTableStatement = 23, RULE_tableElement = 24, RULE_columnDefinition = 25, 
		RULE_likeClause = 26, RULE_columnConstraint = 27, RULE_tableConstraint = 28, 
		RULE_constraintColumn = 29, RULE_matchType = 30, RULE_referenceTriggerAction = 31, 
		RULE_referenceControlType = 32, RULE_tableOption = 33, RULE_iDBPartitionBy = 34, 
		RULE_iTBPartitionBy = 35, RULE_createTablespaceStatement = 36, RULE_createTablespaceInnodb = 37, 
		RULE_createTablespaceNdb = 38, RULE_createTriggerStatement = 39, RULE_definerOptionExpr = 40, 
		RULE_triggerOrderingClause = 41, RULE_createViewStatement = 42, RULE_withCheckOption = 43, 
		RULE_createDatabaseOption = 44, RULE_scheduleexpr = 45, RULE_timestampValue = 46, 
		RULE_enableType = 47, RULE_indexOption = 48, RULE_indexOptionKeyBlockSize = 49, 
		RULE_indexOptionUsingBtree = 50, RULE_indexOptionUsingHash = 51, RULE_indexOptionWithParser = 52, 
		RULE_indexAttributeVisible = 53, RULE_indexAttributeInvisible = 54, RULE_indexOptionCommentOption = 55, 
		RULE_parameterDeclaration = 56, RULE_routineOption = 57, RULE_alterDatabaseStatement = 58, 
		RULE_alterSchemaStatement = 59, RULE_alterEventStatement = 60, RULE_alterFunctionStatement = 61, 
		RULE_alterInstanceStatement = 62, RULE_alterLogfileGroupStatement = 63, 
		RULE_alterProcedureStatement = 64, RULE_alterServerStatement = 65, RULE_alterTableStatement = 66, 
		RULE_alterTableItem = 67, RULE_alterColumnAction = 68, RULE_alterTablePartitionItem = 69, 
		RULE_alterTablespaceStatement = 70, RULE_alterViewStatement = 71, RULE_dropDatabaseStatement = 72, 
		RULE_dropSchemaStatement = 73, RULE_dropEventStatement = 74, RULE_dropIndexStatement = 75, 
		RULE_dropIndexStatementOption = 76, RULE_dropLogfileGroupStatement = 77, 
		RULE_dropProcedureStatement = 78, RULE_dropFunctionStatement = 79, RULE_dropServerStatement = 80, 
		RULE_dropTableStatement = 81, RULE_dropTablespaceStatement = 82, RULE_dropTriggerStatement = 83, 
		RULE_dropViewStatement = 84, RULE_renameTableStatement = 85, RULE_renameTableClause = 86, 
		RULE_truncateTableStatement = 87, RULE_selectStatement = 88, RULE_iSelectQuery = 89, 
		RULE_selectQueryBasic = 90, RULE_selectQuery = 91, RULE_selectQueryCache = 92, 
		RULE_selectParenQuery = 93, RULE_selectUnionQuery = 94, RULE_setQuantifier = 95, 
		RULE_unionOperator = 96, RULE_selectItem = 97, RULE_selectItemAlias = 98, 
		RULE_fromClause = 99, RULE_iTableReference = 100, RULE_tableReferenceBasic = 101, 
		RULE_joinTableReference = 102, RULE_partitionClause = 103, RULE_iIndexHint = 104, 
		RULE_indexHintType = 105, RULE_joinType = 106, RULE_rightJoinClause = 107, 
		RULE_iJoinCondition = 108, RULE_whereClause = 109, RULE_groupByClause = 110, 
		RULE_havingClause = 111, RULE_groupByItem = 112, RULE_orderByClause = 113, 
		RULE_orderByItem = 114, RULE_limitOffsetClause = 115, RULE_iSelectQueryIntoClause = 116, 
		RULE_iLockClause = 117, RULE_forUpdateOption = 118, RULE_selectIntoStatement = 119, 
		RULE_selectTargetItem = 120, RULE_insertStatement = 121, RULE_iValueClause = 122, 
		RULE_valuesClause = 123, RULE_valuesClauseItem = 124, RULE_onDuplicateKeyUpdateClause = 125, 
		RULE_updateStatement = 126, RULE_updateSetClause = 127, RULE_updateSetItemClause = 128, 
		RULE_deleteStatement = 129, RULE_deleteStatementUsingClause = 130, RULE_replaceStatement = 131, 
		RULE_replaceStatementValuseClause = 132, RULE_callStatement = 133, RULE_loadDataInfileStatement = 134, 
		RULE_loadXmlStatement = 135, RULE_doStatement = 136, RULE_handlerStatement = 137, 
		RULE_handlerOpenStatement = 138, RULE_handlerReadStatement = 139, RULE_handlerCloseStatement = 140, 
		RULE_selectFieldsInto = 141, RULE_selectLinesInto = 142, RULE_startTransaction = 143, 
		RULE_transactionMode = 144, RULE_beginWork = 145, RULE_commitWork = 146, 
		RULE_rollbackWork = 147, RULE_savepointStatement = 148, RULE_rollbackStatement = 149, 
		RULE_releaseStatement = 150, RULE_lockTablesStatement = 151, RULE_lockTableItem = 152, 
		RULE_lockAction = 153, RULE_unlockTablesStatement = 154, RULE_setAutoCommitStatement = 155, 
		RULE_transactionOption = 156, RULE_transactionLevel = 157, RULE_changeMaster = 158, 
		RULE_changeReplicationFilter = 159, RULE_purgeBinaryLogs = 160, RULE_resetMaster = 161, 
		RULE_resetSlave = 162, RULE_startSlave = 163, RULE_stopSlave = 164, RULE_startGroupReplication = 165, 
		RULE_stopGroupReplication = 166, RULE_masterOption = 167, RULE_stringMasterOption = 168, 
		RULE_decimalMasterOption = 169, RULE_boolMasterOption = 170, RULE_channelOption = 171, 
		RULE_replicationFilter = 172, RULE_tablePair = 173, RULE_threadType = 174, 
		RULE_untilOption = 175, RULE_connectionOption = 176, RULE_gtnameIdentifierSet = 177, 
		RULE_xaStartTransaction = 178, RULE_xaEndTransaction = 179, RULE_xaPrepareStatement = 180, 
		RULE_xaCommitWork = 181, RULE_xaRollbackWork = 182, RULE_xaRecoverWork = 183, 
		RULE_prepareStatement = 184, RULE_executeStatement = 185, RULE_deallocatePrepare = 186, 
		RULE_statementItem = 187, RULE_body = 188, RULE_bodyItem = 189, RULE_bodyItemStatement = 190, 
		RULE_caseStatement = 191, RULE_caseStatementWhenItem = 192, RULE_caseStatementElseClause = 193, 
		RULE_ifStatement = 194, RULE_elseIf = 195, RULE_iterateStatement = 196, 
		RULE_leaveStatement = 197, RULE_loopStatement = 198, RULE_repeatStatement = 199, 
		RULE_returnStatement = 200, RULE_whileStatement = 201, RULE_cursorStatement = 202, 
		RULE_conditionHandling = 203, RULE_declareVariable = 204, RULE_declareCondition = 205, 
		RULE_declareCursor = 206, RULE_declareHandler = 207, RULE_handlerConditionValue = 208, 
		RULE_alterUserStatement = 209, RULE_createUserStatement = 210, RULE_dropUserStatement = 211, 
		RULE_grantStatement = 212, RULE_grantProxy = 213, RULE_renameUser = 214, 
		RULE_revokeStatement = 215, RULE_revokeProxy = 216, RULE_userSpecification = 217, 
		RULE_userAuthOption = 218, RULE_tlsOption = 219, RULE_userResourceOption = 220, 
		RULE_userPasswordOption = 221, RULE_userLockOption = 222, RULE_privelegeClause = 223, 
		RULE_privilege = 224, RULE_privilegeLevel = 225, RULE_renameUserClause = 226, 
		RULE_analyzeTable = 227, RULE_checkTable = 228, RULE_checksumTable = 229, 
		RULE_optimizeTable = 230, RULE_repairTable = 231, RULE_checkTableOption = 232, 
		RULE_createUdfunction = 233, RULE_installPlugin = 234, RULE_uninstallPlugin = 235, 
		RULE_setStatement = 236, RULE_setDefaultRole = 237, RULE_showStatement = 238, 
		RULE_showCommonEntity = 239, RULE_showFilter = 240, RULE_showGlobalInfoClause = 241, 
		RULE_showSchemaEntity = 242, RULE_showProfileType = 243, RULE_binlogStatement = 244, 
		RULE_cacheIndexStatement = 245, RULE_flushStatement = 246, RULE_killStatement = 247, 
		RULE_loadIndexIntoCache = 248, RULE_resetStatement = 249, RULE_shutdownStatement = 250, 
		RULE_tableIndexes = 251, RULE_flushOption = 252, RULE_flushTableOption = 253, 
		RULE_loadedTableIndexes = 254, RULE_simpleDescribeStatement = 255, RULE_fullDescribeStatement = 256, 
		RULE_helpStatement = 257, RULE_useStatement = 258, RULE_describeObjectClause = 259, 
		RULE_engineName = 260, RULE_unameIdentifierSet = 261, RULE_xid = 262, 
		RULE_xnameIdentifierStringId = 263, RULE_authPlugin = 264, RULE_null_ = 265, 
		RULE_notNull = 266, RULE_convertedDataType = 267, RULE_lengthOneDimension = 268, 
		RULE_lengthTwoDimension = 269, RULE_lengthTwoOptionalDimension = 270, 
		RULE_simpleStrings = 271, RULE_userVariables = 272, RULE_levelsInWeightString = 273, 
		RULE_levelInWeightListElement = 274, RULE_aggregateWindowedFunction = 275, 
		RULE_charsetNameBase = 276, RULE_transactionLevelBase = 277, RULE_privilegesBase = 278, 
		RULE_dataTypeBase = 279, RULE_keywordsCanBeId = 280, RULE_allTokens = 281, 
		RULE_dataType = 282, RULE_iNumericDatatype = 283, RULE_iStringDataType = 284, 
		RULE_iDateTimeDataType = 285, RULE_spatialDataType = 286, RULE_iBoolDataType = 287, 
		RULE_iJsonDataType = 288, RULE_otherDataType = 289, RULE_identifier = 290, 
		RULE_nameIdentifier = 291, RULE_literal = 292, RULE_intervalType = 293, 
		RULE_unaryOperatorExpr = 294, RULE_unaryOperator = 295, RULE_variableExpr = 296, 
		RULE_localVariableExpr = 297, RULE_globalVariableExpr = 298, RULE_globalGlobalVariableExpr = 299, 
		RULE_sessionGlobalVariableExpr = 300, RULE_persistGlobalVariableExpr = 301, 
		RULE_persistOnlyGlobalVariableExpr = 302, RULE_rowExpr = 303, RULE_selectQueryExpr = 304, 
		RULE_matchExpr = 305, RULE_searchModifier = 306, RULE_caseExpr = 307, 
		RULE_caseExprWhenItem = 308, RULE_caseExprElseClause = 309, RULE_listExpr = 310, 
		RULE_exprBasic = 311, RULE_expr = 312, RULE_comparisonOp = 313, RULE_defaultClause = 314, 
		RULE_autoIncrementOptionExpr = 315, RULE_avgRowLengthOptionExpr = 316, 
		RULE_characterSetOptionExpr = 317, RULE_charsetOptionExpr = 318, RULE_checksumOptionExpr = 319, 
		RULE_collateOptionExpr = 320, RULE_commentOptionExpr = 321, RULE_compressionOptionExpr = 322, 
		RULE_connectionOptionExpr = 323, RULE_dataDirectoryOptionExpr = 324, RULE_indexDirectoryOptionExpr = 325, 
		RULE_delayKeyWriteOptionExpr = 326, RULE_encryptionOptionExpr = 327, RULE_engineOptionExpr = 328, 
		RULE_insertMethodOptionExpr = 329, RULE_keyBlockSizeOptionExpr = 330, 
		RULE_maxRowsOptionExpr = 331, RULE_minRowsOptionExpr = 332, RULE_packKeysOptionExpr = 333, 
		RULE_passwordOptionExpr = 334, RULE_rowFormatOptionExpr = 335, RULE_statsAutoRecalcOptionExpr = 336, 
		RULE_statsPersistentOptionExpr = 337, RULE_statsSamplePageOptionExpr = 338, 
		RULE_tablespaceOptionExpr = 339, RULE_unionOptionExpr = 340, RULE_broadcastExpr = 341, 
		RULE_assignmentExpr = 342, RULE_defaultLiteral = 343, RULE_allLiteral = 344, 
		RULE_noneLiteral = 345, RULE_maxValueLiteral = 346, RULE_condition = 347, 
		RULE_notCondition = 348, RULE_formatJson = 349, RULE_exprAsObjectExpr = 350, 
		RULE_existsCondition = 351, RULE_specificFunction = 352, RULE_function = 353, 
		RULE_noArgumentFunctionName = 354, RULE_positionFunction = 355, RULE_subStrFromFunction = 356, 
		RULE_subStringFunction = 357, RULE_trimFunction = 358, RULE_weightStringFunction = 359, 
		RULE_extractFunction = 360, RULE_treatFunction = 361, RULE_convertUsingFunction = 362, 
		RULE_costMatrixClause = 363, RULE_jsonFunction = 364, RULE_jsonFunctionName = 365, 
		RULE_jsonFunctionArgument = 366, RULE_jsonFormatJsonArgumentExpr = 367, 
		RULE_jsonKeyValueArgumentExpr = 368, RULE_jsonOnNullClause = 369, RULE_jsonReturningClause = 370, 
		RULE_withUniqueKeys = 371, RULE_jsonWrapperClause = 372, RULE_jsonOnErrorClause = 373, 
		RULE_jsonOnEmptyClause = 374, RULE_jsonColumnsClause = 375, RULE_jsonColumnDefinition = 376, 
		RULE_aggregateFunction = 377, RULE_aggregateFunctionName = 378, RULE_withinGroupSpecification = 379, 
		RULE_firstFunction = 380, RULE_lastFunction = 381, RULE_listAggFunction = 382, 
		RULE_listaggOverflowClause = 383, RULE_windowFunction = 384, RULE_windowFunctionNullsOption = 385, 
		RULE_windowFunctionFromOption = 386, RULE_overClause = 387, RULE_analyticClause = 388, 
		RULE_partitionByClause = 389, RULE_windowFrameClause = 390, RULE_windowFrameUnit = 391, 
		RULE_windowFrameExtent = 392, RULE_windowFrameExtentItem = 393, RULE_cubeTableFunction = 394, 
		RULE_cubeTableOptionExpr = 395, RULE_orReplace = 396, RULE_ifExists = 397, 
		RULE_ifNotExists = 398, RULE_withRollup = 399, RULE_orderingSpecification = 400, 
		RULE_intimeAction = 401, RULE_indexCategory = 402, RULE_indexFormat = 403, 
		RULE_indexType = 404, RULE_withType = 405, RULE_visibleType = 406, RULE_priority = 407;
	public static final String[] ruleNames = {
		"parse", "statement", "ddlStatement", "dmlStatement", "transactionStatement", 
		"replicationStatement", "preparedStatement", "compoundStatement", "administrationStatement", 
		"utilityStatement", "createDatabaseStatement", "createSchemaStatement", 
		"createEventStatement", "createIndexStatement", "createIndexStatementColumn", 
		"createIndexStatementOption", "algorithmOptionExpr", "lockOptionExpr", 
		"createLogfileGroupStatement", "createProcedureStatement", "createFunctionStatement", 
		"createServerStatement", "serverOption", "createTableStatement", "tableElement", 
		"columnDefinition", "likeClause", "columnConstraint", "tableConstraint", 
		"constraintColumn", "matchType", "referenceTriggerAction", "referenceControlType", 
		"tableOption", "iDBPartitionBy", "iTBPartitionBy", "createTablespaceStatement", 
		"createTablespaceInnodb", "createTablespaceNdb", "createTriggerStatement", 
		"definerOptionExpr", "triggerOrderingClause", "createViewStatement", "withCheckOption", 
		"createDatabaseOption", "scheduleexpr", "timestampValue", "enableType", 
		"indexOption", "indexOptionKeyBlockSize", "indexOptionUsingBtree", "indexOptionUsingHash", 
		"indexOptionWithParser", "indexAttributeVisible", "indexAttributeInvisible", 
		"indexOptionCommentOption", "parameterDeclaration", "routineOption", "alterDatabaseStatement", 
		"alterSchemaStatement", "alterEventStatement", "alterFunctionStatement", 
		"alterInstanceStatement", "alterLogfileGroupStatement", "alterProcedureStatement", 
		"alterServerStatement", "alterTableStatement", "alterTableItem", "alterColumnAction", 
		"alterTablePartitionItem", "alterTablespaceStatement", "alterViewStatement", 
		"dropDatabaseStatement", "dropSchemaStatement", "dropEventStatement", 
		"dropIndexStatement", "dropIndexStatementOption", "dropLogfileGroupStatement", 
		"dropProcedureStatement", "dropFunctionStatement", "dropServerStatement", 
		"dropTableStatement", "dropTablespaceStatement", "dropTriggerStatement", 
		"dropViewStatement", "renameTableStatement", "renameTableClause", "truncateTableStatement", 
		"selectStatement", "iSelectQuery", "selectQueryBasic", "selectQuery", 
		"selectQueryCache", "selectParenQuery", "selectUnionQuery", "setQuantifier", 
		"unionOperator", "selectItem", "selectItemAlias", "fromClause", "iTableReference", 
		"tableReferenceBasic", "joinTableReference", "partitionClause", "iIndexHint", 
		"indexHintType", "joinType", "rightJoinClause", "iJoinCondition", "whereClause", 
		"groupByClause", "havingClause", "groupByItem", "orderByClause", "orderByItem", 
		"limitOffsetClause", "iSelectQueryIntoClause", "iLockClause", "forUpdateOption", 
		"selectIntoStatement", "selectTargetItem", "insertStatement", "iValueClause", 
		"valuesClause", "valuesClauseItem", "onDuplicateKeyUpdateClause", "updateStatement", 
		"updateSetClause", "updateSetItemClause", "deleteStatement", "deleteStatementUsingClause", 
		"replaceStatement", "replaceStatementValuseClause", "callStatement", "loadDataInfileStatement", 
		"loadXmlStatement", "doStatement", "handlerStatement", "handlerOpenStatement", 
		"handlerReadStatement", "handlerCloseStatement", "selectFieldsInto", "selectLinesInto", 
		"startTransaction", "transactionMode", "beginWork", "commitWork", "rollbackWork", 
		"savepointStatement", "rollbackStatement", "releaseStatement", "lockTablesStatement", 
		"lockTableItem", "lockAction", "unlockTablesStatement", "setAutoCommitStatement", 
		"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
		"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
		"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
		"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
		"tablePair", "threadType", "untilOption", "connectionOption", "gtnameIdentifierSet", 
		"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
		"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
		"deallocatePrepare", "statementItem", "body", "bodyItem", "bodyItemStatement", 
		"caseStatement", "caseStatementWhenItem", "caseStatementElseClause", "ifStatement", 
		"elseIf", "iterateStatement", "leaveStatement", "loopStatement", "repeatStatement", 
		"returnStatement", "whileStatement", "cursorStatement", "conditionHandling", 
		"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
		"handlerConditionValue", "alterUserStatement", "createUserStatement", 
		"dropUserStatement", "grantStatement", "grantProxy", "renameUser", "revokeStatement", 
		"revokeProxy", "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
		"userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
		"privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
		"optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "setDefaultRole", 
		"showStatement", "showCommonEntity", "showFilter", "showGlobalInfoClause", 
		"showSchemaEntity", "showProfileType", "binlogStatement", "cacheIndexStatement", 
		"flushStatement", "killStatement", "loadIndexIntoCache", "resetStatement", 
		"shutdownStatement", "tableIndexes", "flushOption", "flushTableOption", 
		"loadedTableIndexes", "simpleDescribeStatement", "fullDescribeStatement", 
		"helpStatement", "useStatement", "describeObjectClause", "engineName", 
		"unameIdentifierSet", "xid", "xnameIdentifierStringId", "authPlugin", 
		"null_", "notNull", "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
		"lengthTwoOptionalDimension", "simpleStrings", "userVariables", "levelsInWeightString", 
		"levelInWeightListElement", "aggregateWindowedFunction", "charsetNameBase", 
		"transactionLevelBase", "privilegesBase", "dataTypeBase", "keywordsCanBeId", 
		"allTokens", "dataType", "iNumericDatatype", "iStringDataType", "iDateTimeDataType", 
		"spatialDataType", "iBoolDataType", "iJsonDataType", "otherDataType", 
		"identifier", "nameIdentifier", "literal", "intervalType", "unaryOperatorExpr", 
		"unaryOperator", "variableExpr", "localVariableExpr", "globalVariableExpr", 
		"globalGlobalVariableExpr", "sessionGlobalVariableExpr", "persistGlobalVariableExpr", 
		"persistOnlyGlobalVariableExpr", "rowExpr", "selectQueryExpr", "matchExpr", 
		"searchModifier", "caseExpr", "caseExprWhenItem", "caseExprElseClause", 
		"listExpr", "exprBasic", "expr", "comparisonOp", "defaultClause", "autoIncrementOptionExpr", 
		"avgRowLengthOptionExpr", "characterSetOptionExpr", "charsetOptionExpr", 
		"checksumOptionExpr", "collateOptionExpr", "commentOptionExpr", "compressionOptionExpr", 
		"connectionOptionExpr", "dataDirectoryOptionExpr", "indexDirectoryOptionExpr", 
		"delayKeyWriteOptionExpr", "encryptionOptionExpr", "engineOptionExpr", 
		"insertMethodOptionExpr", "keyBlockSizeOptionExpr", "maxRowsOptionExpr", 
		"minRowsOptionExpr", "packKeysOptionExpr", "passwordOptionExpr", "rowFormatOptionExpr", 
		"statsAutoRecalcOptionExpr", "statsPersistentOptionExpr", "statsSamplePageOptionExpr", 
		"tablespaceOptionExpr", "unionOptionExpr", "broadcastExpr", "assignmentExpr", 
		"defaultLiteral", "allLiteral", "noneLiteral", "maxValueLiteral", "condition", 
		"notCondition", "formatJson", "exprAsObjectExpr", "existsCondition", "specificFunction", 
		"function", "noArgumentFunctionName", "positionFunction", "subStrFromFunction", 
		"subStringFunction", "trimFunction", "weightStringFunction", "extractFunction", 
		"treatFunction", "convertUsingFunction", "costMatrixClause", "jsonFunction", 
		"jsonFunctionName", "jsonFunctionArgument", "jsonFormatJsonArgumentExpr", 
		"jsonKeyValueArgumentExpr", "jsonOnNullClause", "jsonReturningClause", 
		"withUniqueKeys", "jsonWrapperClause", "jsonOnErrorClause", "jsonOnEmptyClause", 
		"jsonColumnsClause", "jsonColumnDefinition", "aggregateFunction", "aggregateFunctionName", 
		"withinGroupSpecification", "firstFunction", "lastFunction", "listAggFunction", 
		"listaggOverflowClause", "windowFunction", "windowFunctionNullsOption", 
		"windowFunctionFromOption", "overClause", "analyticClause", "partitionByClause", 
		"windowFrameClause", "windowFrameUnit", "windowFrameExtent", "windowFrameExtentItem", 
		"cubeTableFunction", "cubeTableOptionExpr", "orReplace", "ifExists", "ifNotExists", 
		"withRollup", "orderingSpecification", "intimeAction", "indexCategory", 
		"indexFormat", "indexType", "withType", "visibleType", "priority"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", 
		"'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BROADCAST'", 
		"'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", 
		"'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
		"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
		"'DATABASES'", "'DBPARTITION'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", 
		"'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DD'", "'DISTINCT'", 
		"'DISTINCTROW'", "'DIV'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", 
		"'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", 
		"'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GRANT'", "'GROUP'", 
		"'HAVING'", "'HIGH_PRIORITY'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'", 
		"'INFILE'", "'INNER'", "'INOUT'", "'INVISIBLE'", "'INSERT'", "'INTERVAL'", 
		"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
		"'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
		"'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
		"'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MM'", "'MMDD'", 
		"'MODIFIES'", "'NATIONAL'", "'NATURAL'", "'NEW'", "'NOWAIT'", "'NOT'", 
		"'NO_WRITE_TO_BINLOG'", "'NULL'", "'OF'", "'OLD'", "'ON'", "'OPTIMIZE'", 
		"'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", 
		"'PARTITION'", "'PERSIST'", "'PERSIST_ONLY'", "'PRIMARY'", "'PROCEDURE'", 
		"'PURGE'", "'RANGE'", "'RANGE_HASH'", "'READ'", "'READS'", "'REFERENCES'", 
		"'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", 
		"'RESTRICT'", "'RETURN'", "'REVOKE'", "'ROLE'", "'RIGHT'", "'RLIKE'", 
		"'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", 
		"'SKIP'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", 
		"'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", 
		"'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TBPARTITION'", "'TBPARTITIONS'", 
		"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
		"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'VISIBLE'", "'WHEN'", "'WHERE'", 
		"'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", 
		"'FLOAT'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
		"'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", "'BINARY'", "'VARBINARY'", 
		"'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
		"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'AVG'", "'BIT_AND'", "'BIT_OR'", 
		"'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", 
		"'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", 
		"'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", 
		"'EXTRACT'", "'LOCALTIMESTAMP'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", 
		"'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", 
		"'ACTION'", "'AFTER'", "'AGAINST'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", 
		"'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", 
		"'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
		"'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", 
		"'CHANNEL'", "'CHECKSUM'", "'CIPHER'", "'CLIENT'", "'CLOSE'", "'COALESCE'", 
		"'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
		"'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECTION'", 
		"'CONSISTENT'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
		"'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", 
		"'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", 
		"'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", 
		"'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
		"'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
		"'EXCLUSIVE'", "'EXPANSION'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
		"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
		"'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", 
		"'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
		"'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", 
		"'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", 
		"'INSTALL'", "'INSTANCE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", 
		"'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
		"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", 
		"'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MIGRATE'", "'MIN_ROWS'", 
		"'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'NAME'", "'NAMES'", "'NCHAR'", 
		"'NEVER'", "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", "'OFFSET'", 
		"'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
		"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", 
		"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", 
		"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECISION'", "'PREPARE'", 
		"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
		"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", 
		"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
		"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESUME'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
		"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
		"'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", 
		"'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STRING'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLESPACE'", 
		"'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
		"'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
		"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
		"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
		"'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
		"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'YEAR_MONTH'", 
		"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
		"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
		"'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", 
		"'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", 
		"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
		"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
		"'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
		"'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
		"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", 
		"'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
		"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
		"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", 
		"'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRY'", 
		"'GEOMETRYCOLLECTION'", "'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", 
		"'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'CHARSET'", "'GET_FORMAT'", 
		"'MOD'", "'REVERSE'", "'WEIGHT_STRING'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'+'", "'-'", "'*'", "'/'", "'<<'", 
		"'>>'", "'&&'", "'||'", "'--'", "'='", "'<'", "'>'", "'<='", "'>='", null, 
		"'<=>'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", null, null, "'{'", 
		"'}'", "','", "';'", "'@'", "'''", "'\"'", "'`'", "':'", "'%'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "SPACES", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
		"BOTH", "BROADCAST", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
		"CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
		"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", 
		"DATABASES", "DBPARTITION", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
		"DESC", "DESCRIBE", "DETERMINISTIC", "DD", "DISTINCT", "DISTINCTROW", 
		"DIV", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", 
		"EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", 
		"FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "IF", "IGNORE", 
		"IN", "INDEX", "INFILE", "INNER", "INOUT", "INVISIBLE", "INSERT", "INTERVAL", 
		"INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
		"LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOCKED", 
		"LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MATCH", "MAXVALUE", "MM", "MMDD", "MODIFIES", "NATIONAL", "NATURAL", 
		"NEW", "NOWAIT", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "OF", "OLD", 
		"ON", "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", 
		"OUTFILE", "PARTITION", "PERSIST", "PERSIST_ONLY", "PRIMARY", "PROCEDURE", 
		"PURGE", "RANGE", "RANGE_HASH", "READ", "READS", "REFERENCES", "REGEXP", 
		"RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESTRICT", "RETURN", 
		"REVOKE", "ROLE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
		"SEPARATOR", "SHOW", "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
		"SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		"SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TBPARTITION", "TBPARTITIONS", 
		"TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", 
		"UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", 
		"VISIBLE", "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", 
		"TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", "BIGINT", "REAL", 
		"DOUBLE", "FLOAT", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", 
		"DATETIME", "YEAR", "CHAR", "VARCHAR", "BINARY", "VARBINARY", "TINYBLOB", 
		"BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", 
		"ENUM", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", 
		"MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", 
		"VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"LOCALTIME", "EXTRACT", "LOCALTIMESTAMP", "POSITION", "SUBSTR", "SUBSTRING", 
		"TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
		"AFTER", "AGAINST", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", 
		"AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
		"BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", 
		"CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", 
		"COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
		"CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
		"DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
		"DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
		"DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPANSION", "EXPIRE", "EXPORT", "EXTENDED", 
		"EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", 
		"FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", 
		"GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", 
		"HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
		"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
		"MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		"MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		"MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MIGRATE", "MIN_ROWS", "MODE", 
		"MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", "NEXT", 
		"NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
		"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
		"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
		"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
		"PRECISION", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", 
		"PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
		"REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", 
		"REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
		"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
		"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
		"SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", "TEMPTABLE", 
		"THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
		"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		"VIEW", "WAIT", "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
		"XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "YEAR_MONTH", "DAY_HOUR", 
		"DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		"SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		"QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
		"TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", 
		"SUPER", "PRIVILEGES", "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", 
		"CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
		"EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", 
		"KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
		"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
		"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
		"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", 
		"REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRY", 
		"GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"POINT", "POLYGON", "CHARSET", "GET_FORMAT", "MOD", "REVERSE", "WEIGHT_STRING", 
		"ASSIGN_OP", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "PLUS_SIGN", "MINUS_SIGN", 
		"ASTERISK", "DIVIDE", "LESS_THAN_LESS_THAN_OP", "GREATER_THAN_GREATER_THAN_OP", 
		"LOGIC_AND_OP", "LOGIC_OR_OP", "MINUSMINUS", "EQUALS_OP", "LESS_THAN_OP", 
		"GREATER_THAN_OP", "LESS_THAN_OR_EQUALS_OP", "GREATER_THAN_OR_EQUALS_OP", 
		"NOT_EQUAL_OP", "LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP", "EXCLAMATION_OP", 
		"BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "PERIOD", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "COMMA", "SEMI", "AT_SIGN", 
		"SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON", 
		"PERCENT", "QUESTION_MARK", "CHARSET_REVERSE_QOUTE_STRING", "NULL_SPEC_LITERAL", 
		"REGULAR_ID", "DELIMITED_ID", "REVERSE_QUOTE_ID", "CHAR_STRING", "NCHAR_STRING", 
		"STRING_CHARSET_NAME", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", "HEXADECIMAL_LITERAL", 
		"BIT_STRING", "STRING_USER_NAME", "INNER_JOIN", "CROSS_JOIN", "NATURAL_JOIN", 
		"NATURAL_INNER_JOIN", "LEFT_JOIN", "LEFT_OUTER_JOIN", "NATURAL_LEFT_JOIN", 
		"NATURAL_LEFT_OUTER_JOIN", "RIGHT_JOIN", "RIGHT_OUTER_JOIN", "NATURAL_RIGHT_JOIN", 
		"NATURAL_RIGHT_OUTER_JOIN", "ERROR_RECONGNIGION", "COLLATION", "FORMAT", 
		"LOCAL_ID", "MID", "TREAT", "REF", "COST", "MODEL", "AUTO", "STRICT", 
		"JSON_TABLE", "JSON_ARRAY", "JSON_ARRAYAGG", "JSON_OBJECT", "JSON_OBJECTAGG", 
		"NULL", "ABSENT", "RETURNING", "PRETTY", "ARRAY", "UNCONDITIONAL", "CONDITIONAL", 
		"EMPTY", "OBJECT", "PATH", "NESTED", "ORDINALITY", "APPROX_COUNT", "APPROX_COUNT_DISTINCT", 
		"APPROX_COUNT_DISTINCT_AGG", "APPROX_COUNT_DISTINCT_DETAIL", "APPROX_MEDIAN", 
		"APPROX_PERCENTILE", "APPROX_PERCENTILE_AGG", "APPROX_PERCENTILE_DETAIL", 
		"APPROX_RANK", "APPROX_SUM", "COLLECT", "CORR", "CORR_S", "CORR_K", "COVAR_POP", 
		"COVAR_SAMP", "CUME_DIST", "DENSE_RANK", "GROUP_ID", "GROUPING", "GROUPING_ID", 
		"MEDIAN", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"REGR_SLOPE", "REGR_INTERCEPT", "REGR_COUNT", "REGR_R2", "REGR_AVGX", 
		"REGR_AVGY", "REGR_SXX", "REGR_SYY", "REGR_SXY", "STATS_BINOMIAL_TEST", 
		"STATS_CROSSTAB", "STATS_F_TEST", "STATS_KS_TEST", "STATS_MODE", "STATS_MW_TEST", 
		"STATS_ONE_WAY_ANOVA", "STATS_T_TEST_ONE", "STATS_T_TEST_PAIRED", "STATS_T_TEST_INDEP", 
		"STATS_T_TEST_INDEPU", "STATS_WSR_TEST", "SYS_OP_ZONE_ID", "SYS_XMLAGG", 
		"TO_APPROX_COUNT_DISTINCT", "TO_APPROX_PERCENTILE", "XMLAGG", "WITHIN", 
		"KEEP", "LISTAGG", "OVERFLOW", "RESPECT", "NULLS", "OVER", "UNBOUNDED", 
		"PRECEDING", "CURRENT", "FOLLOWING", "CUBE_TABLE", "SINGLE_QUOTE", "HIERARCHY", 
		"HRR"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DRDSSQLStatementParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DRDSSQLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ParseContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(DRDSSQLStatementParser.EOF, 0); }
		public List<TerminalNode> MINUSMINUS() { return getTokens(DRDSSQLStatementParser.MINUSMINUS); }
		public TerminalNode MINUSMINUS(int i) {
			return getToken(DRDSSQLStatementParser.MINUSMINUS, i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(DRDSSQLStatementParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(DRDSSQLStatementParser.SEMI, i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parse; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitParse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParseContext parse() throws RecognitionException {
		ParseContext _localctx = new ParseContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(826);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(819);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
					case 1:
						{
						setState(816);
						statement();
						}
						break;
					case 2:
						{
						setState(817);
						expr(0);
						}
						break;
					case 3:
						{
						setState(818);
						match(MINUSMINUS);
						}
						break;
					}
					setState(822);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SEMI) {
						{
						setState(821);
						match(SEMI);
						}
					}

					}
					} 
				}
				setState(828);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			}
			setState(830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUSMINUS) {
				{
				setState(829);
				match(MINUSMINUS);
				}
			}

			setState(832);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			setState(842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(834);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(835);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(836);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(837);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(838);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(839);
				compoundStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(840);
				administrationStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(841);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseStatementContext createDatabaseStatement() {
			return getRuleContext(CreateDatabaseStatementContext.class,0);
		}
		public AlterDatabaseStatementContext alterDatabaseStatement() {
			return getRuleContext(AlterDatabaseStatementContext.class,0);
		}
		public DropDatabaseStatementContext dropDatabaseStatement() {
			return getRuleContext(DropDatabaseStatementContext.class,0);
		}
		public CreateSchemaStatementContext createSchemaStatement() {
			return getRuleContext(CreateSchemaStatementContext.class,0);
		}
		public AlterSchemaStatementContext alterSchemaStatement() {
			return getRuleContext(AlterSchemaStatementContext.class,0);
		}
		public DropSchemaStatementContext dropSchemaStatement() {
			return getRuleContext(DropSchemaStatementContext.class,0);
		}
		public CreateEventStatementContext createEventStatement() {
			return getRuleContext(CreateEventStatementContext.class,0);
		}
		public AlterEventStatementContext alterEventStatement() {
			return getRuleContext(AlterEventStatementContext.class,0);
		}
		public DropEventStatementContext dropEventStatement() {
			return getRuleContext(DropEventStatementContext.class,0);
		}
		public CreateFunctionStatementContext createFunctionStatement() {
			return getRuleContext(CreateFunctionStatementContext.class,0);
		}
		public AlterFunctionStatementContext alterFunctionStatement() {
			return getRuleContext(AlterFunctionStatementContext.class,0);
		}
		public DropFunctionStatementContext dropFunctionStatement() {
			return getRuleContext(DropFunctionStatementContext.class,0);
		}
		public CreateIndexStatementContext createIndexStatement() {
			return getRuleContext(CreateIndexStatementContext.class,0);
		}
		public DropIndexStatementContext dropIndexStatement() {
			return getRuleContext(DropIndexStatementContext.class,0);
		}
		public CreateLogfileGroupStatementContext createLogfileGroupStatement() {
			return getRuleContext(CreateLogfileGroupStatementContext.class,0);
		}
		public AlterLogfileGroupStatementContext alterLogfileGroupStatement() {
			return getRuleContext(AlterLogfileGroupStatementContext.class,0);
		}
		public DropLogfileGroupStatementContext dropLogfileGroupStatement() {
			return getRuleContext(DropLogfileGroupStatementContext.class,0);
		}
		public CreateProcedureStatementContext createProcedureStatement() {
			return getRuleContext(CreateProcedureStatementContext.class,0);
		}
		public AlterProcedureStatementContext alterProcedureStatement() {
			return getRuleContext(AlterProcedureStatementContext.class,0);
		}
		public DropProcedureStatementContext dropProcedureStatement() {
			return getRuleContext(DropProcedureStatementContext.class,0);
		}
		public CreateServerStatementContext createServerStatement() {
			return getRuleContext(CreateServerStatementContext.class,0);
		}
		public AlterServerStatementContext alterServerStatement() {
			return getRuleContext(AlterServerStatementContext.class,0);
		}
		public DropServerStatementContext dropServerStatement() {
			return getRuleContext(DropServerStatementContext.class,0);
		}
		public CreateTableStatementContext createTableStatement() {
			return getRuleContext(CreateTableStatementContext.class,0);
		}
		public AlterTableStatementContext alterTableStatement() {
			return getRuleContext(AlterTableStatementContext.class,0);
		}
		public DropTableStatementContext dropTableStatement() {
			return getRuleContext(DropTableStatementContext.class,0);
		}
		public CreateTablespaceStatementContext createTablespaceStatement() {
			return getRuleContext(CreateTablespaceStatementContext.class,0);
		}
		public AlterTablespaceStatementContext alterTablespaceStatement() {
			return getRuleContext(AlterTablespaceStatementContext.class,0);
		}
		public DropTablespaceStatementContext dropTablespaceStatement() {
			return getRuleContext(DropTablespaceStatementContext.class,0);
		}
		public CreateTriggerStatementContext createTriggerStatement() {
			return getRuleContext(CreateTriggerStatementContext.class,0);
		}
		public DropTriggerStatementContext dropTriggerStatement() {
			return getRuleContext(DropTriggerStatementContext.class,0);
		}
		public CreateViewStatementContext createViewStatement() {
			return getRuleContext(CreateViewStatementContext.class,0);
		}
		public AlterViewStatementContext alterViewStatement() {
			return getRuleContext(AlterViewStatementContext.class,0);
		}
		public DropViewStatementContext dropViewStatement() {
			return getRuleContext(DropViewStatementContext.class,0);
		}
		public AlterInstanceStatementContext alterInstanceStatement() {
			return getRuleContext(AlterInstanceStatementContext.class,0);
		}
		public CreateUserStatementContext createUserStatement() {
			return getRuleContext(CreateUserStatementContext.class,0);
		}
		public AlterUserStatementContext alterUserStatement() {
			return getRuleContext(AlterUserStatementContext.class,0);
		}
		public DropUserStatementContext dropUserStatement() {
			return getRuleContext(DropUserStatementContext.class,0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return getRuleContext(RenameTableStatementContext.class,0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return getRuleContext(TruncateTableStatementContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_ddlStatement);
		try {
			setState(884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(844);
				createDatabaseStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(845);
				alterDatabaseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(846);
				dropDatabaseStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(847);
				createSchemaStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(848);
				alterSchemaStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(849);
				dropSchemaStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(850);
				createEventStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(851);
				alterEventStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(852);
				dropEventStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(853);
				createFunctionStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(854);
				alterFunctionStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(855);
				dropFunctionStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(856);
				createIndexStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(857);
				dropIndexStatement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(858);
				createLogfileGroupStatement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(859);
				alterLogfileGroupStatement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(860);
				dropLogfileGroupStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(861);
				createProcedureStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(862);
				alterProcedureStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(863);
				dropProcedureStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(864);
				createServerStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(865);
				alterServerStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(866);
				dropServerStatement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(867);
				createTableStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(868);
				alterTableStatement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(869);
				dropTableStatement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(870);
				createTablespaceStatement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(871);
				alterTablespaceStatement();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(872);
				dropTablespaceStatement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(873);
				createTriggerStatement();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(874);
				dropTriggerStatement();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(875);
				createViewStatement();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(876);
				alterViewStatement();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(877);
				dropViewStatement();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(878);
				alterInstanceStatement();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(879);
				createUserStatement();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(880);
				alterUserStatement();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(881);
				dropUserStatement();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(882);
				renameTableStatement();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(883);
				truncateTableStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SelectIntoStatementContext selectIntoStatement() {
			return getRuleContext(SelectIntoStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataInfileStatementContext loadDataInfileStatement() {
			return getRuleContext(LoadDataInfileStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_dmlStatement);
		try {
			setState(897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(886);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(887);
				selectIntoStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(888);
				insertStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(889);
				updateStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(890);
				deleteStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(891);
				replaceStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(892);
				callStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(893);
				loadDataInfileStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(894);
				loadXmlStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(895);
				doStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(896);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesStatementContext lockTablesStatement() {
			return getRuleContext(LockTablesStatementContext.class,0);
		}
		public UnlockTablesStatementContext unlockTablesStatement() {
			return getRuleContext(UnlockTablesStatementContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_transactionStatement);
		try {
			setState(914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(899);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(900);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(901);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(902);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(903);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(904);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(905);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(906);
				lockTablesStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(907);
				unlockTablesStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(908);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(909);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(910);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(911);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(912);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(913);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_replicationStatement);
		try {
			setState(925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(916);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(917);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(918);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(919);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(920);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(921);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(922);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(923);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(924);
				stopGroupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_preparedStatement);
		try {
			setState(930);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(927);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(928);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(929);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_compoundStatement);
		try {
			setState(942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(932);
				body();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(933);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(934);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(935);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(936);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(937);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(938);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(939);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(940);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(941);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserStatementContext alterUserStatement() {
			return getRuleContext(AlterUserStatementContext.class,0);
		}
		public CreateUserStatementContext createUserStatement() {
			return getRuleContext(CreateUserStatementContext.class,0);
		}
		public DropUserStatementContext dropUserStatement() {
			return getRuleContext(DropUserStatementContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_administrationStatement);
		try {
			setState(969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(944);
				alterUserStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(945);
				createUserStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(946);
				dropUserStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(947);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(948);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(949);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(950);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(951);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(952);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(953);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(954);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(955);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(956);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(957);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(958);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(959);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(960);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(961);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(962);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(963);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(964);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(965);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(966);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(967);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(968);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_utilityStatement);
		try {
			setState(975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(971);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(972);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(973);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(974);
				useStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(DRDSSQLStatementParser.DATABASE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseStatementContext createDatabaseStatement() throws RecognitionException {
		CreateDatabaseStatementContext _localctx = new CreateDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_createDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(977);
			match(CREATE);
			setState(978);
			match(DATABASE);
			setState(980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(979);
				ifNotExists();
				}
			}

			setState(982);
			nameIdentifier();
			setState(986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0)) {
				{
				{
				setState(983);
				createDatabaseOption();
				}
				}
				setState(988);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(DRDSSQLStatementParser.SCHEMA, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateSchemaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaStatementContext createSchemaStatement() throws RecognitionException {
		CreateSchemaStatementContext _localctx = new CreateSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_createSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(989);
			match(CREATE);
			setState(990);
			match(SCHEMA);
			setState(992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(991);
				ifNotExists();
				}
			}

			setState(994);
			nameIdentifier();
			setState(998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0)) {
				{
				{
				setState(995);
				createDatabaseOption();
				}
				}
				setState(1000);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(DRDSSQLStatementParser.EVENT, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(DRDSSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DRDSSQLStatementParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(DRDSSQLStatementParser.SCHEDULE, 0); }
		public ScheduleexprContext scheduleexpr() {
			return getRuleContext(ScheduleexprContext.class,0);
		}
		public TerminalNode DO() { return getToken(DRDSSQLStatementParser.DO, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(DRDSSQLStatementParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(DRDSSQLStatementParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public CreateEventStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEventStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateEventStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventStatementContext createEventStatement() throws RecognitionException {
		CreateEventStatementContext _localctx = new CreateEventStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createEventStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1001);
			match(CREATE);
			setState(1003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1002);
				definerOptionExpr();
				}
			}

			setState(1005);
			match(EVENT);
			setState(1007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1006);
				ifNotExists();
				}
			}

			setState(1009);
			nameIdentifier();
			setState(1010);
			match(ON);
			setState(1011);
			match(SCHEDULE);
			setState(1012);
			scheduleexpr();
			setState(1019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1013);
				match(ON);
				setState(1014);
				match(COMPLETION);
				setState(1016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1015);
					match(NOT);
					}
				}

				setState(1018);
				match(PRESERVE);
				}
			}

			setState(1022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1021);
				enableType();
				}
			}

			setState(1026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1024);
				match(COMMENT);
				setState(1025);
				expr(0);
				}
			}

			setState(1028);
			match(DO);
			setState(1029);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<CreateIndexStatementColumnContext> createIndexStatementColumn() {
			return getRuleContexts(CreateIndexStatementColumnContext.class);
		}
		public CreateIndexStatementColumnContext createIndexStatementColumn(int i) {
			return getRuleContext(CreateIndexStatementColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public IntimeActionContext intimeAction() {
			return getRuleContext(IntimeActionContext.class,0);
		}
		public IndexCategoryContext indexCategory() {
			return getRuleContext(IndexCategoryContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<CreateIndexStatementOptionContext> createIndexStatementOption() {
			return getRuleContexts(CreateIndexStatementOptionContext.class);
		}
		public CreateIndexStatementOptionContext createIndexStatementOption(int i) {
			return getRuleContext(CreateIndexStatementOptionContext.class,i);
		}
		public CreateIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementContext createIndexStatement() throws RecognitionException {
		CreateIndexStatementContext _localctx = new CreateIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createIndexStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1031);
			match(CREATE);
			setState(1033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(1032);
				intimeAction();
				}
			}

			setState(1036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(1035);
				indexCategory();
				}
			}

			setState(1038);
			match(INDEX);
			setState(1039);
			nameIdentifier();
			setState(1041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1040);
				indexType();
				}
			}

			setState(1043);
			match(ON);
			setState(1044);
			iTableReference();
			setState(1045);
			match(LEFT_PAREN);
			setState(1046);
			createIndexStatementColumn();
			setState(1051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1047);
				match(COMMA);
				setState(1048);
				createIndexStatementColumn();
				}
				}
				setState(1053);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1054);
			match(RIGHT_PAREN);
			setState(1058);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1055);
					createIndexStatementOption();
					}
					} 
				}
				setState(1060);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementColumnContext extends ParserRuleContext {
		public ExprContext column;
		public ExprContext len;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public OrderingSpecificationContext orderingSpecification() {
			return getRuleContext(OrderingSpecificationContext.class,0);
		}
		public CreateIndexStatementColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatementColumn; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateIndexStatementColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementColumnContext createIndexStatementColumn() throws RecognitionException {
		CreateIndexStatementColumnContext _localctx = new CreateIndexStatementColumnContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndexStatementColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1061);
			((CreateIndexStatementColumnContext)_localctx).column = expr(0);
			setState(1066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1062);
				match(LEFT_PAREN);
				setState(1063);
				((CreateIndexStatementColumnContext)_localctx).len = expr(0);
				setState(1064);
				match(RIGHT_PAREN);
				}
			}

			setState(1069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1068);
				orderingSpecification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementOptionContext extends ParserRuleContext {
		public IndexOptionContext indexOption() {
			return getRuleContext(IndexOptionContext.class,0);
		}
		public AlgorithmOptionExprContext algorithmOptionExpr() {
			return getRuleContext(AlgorithmOptionExprContext.class,0);
		}
		public LockOptionExprContext lockOptionExpr() {
			return getRuleContext(LockOptionExprContext.class,0);
		}
		public CreateIndexStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatementOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateIndexStatementOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementOptionContext createIndexStatementOption() throws RecognitionException {
		CreateIndexStatementOptionContext _localctx = new CreateIndexStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createIndexStatementOption);
		try {
			setState(1074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVISIBLE:
			case USING:
			case VISIBLE:
			case WITH:
			case COMMENT:
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1071);
				indexOption();
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(1072);
				algorithmOptionExpr();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 3);
				{
				setState(1073);
				lockOptionExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmOptionExprContext extends ParserRuleContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(DRDSSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(DRDSSQLStatementParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(DRDSSQLStatementParser.COPY, 0); }
		public TerminalNode UNDEFINED() { return getToken(DRDSSQLStatementParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(DRDSSQLStatementParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(DRDSSQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public AlgorithmOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithmOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlgorithmOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlgorithmOptionExprContext algorithmOptionExpr() throws RecognitionException {
		AlgorithmOptionExprContext _localctx = new AlgorithmOptionExprContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_algorithmOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1076);
			match(ALGORITHM);
			setState(1078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(1077);
				match(EQUALS_OP);
				}
			}

			setState(1080);
			((AlgorithmOptionExprContext)_localctx).algType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
				((AlgorithmOptionExprContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockOptionExprContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(DRDSSQLStatementParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(DRDSSQLStatementParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(DRDSSQLStatementParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DRDSSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public LockOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLockOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockOptionExprContext lockOptionExpr() throws RecognitionException {
		LockOptionExprContext _localctx = new LockOptionExprContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_lockOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1082);
			match(LOCK);
			setState(1084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(1083);
				match(EQUALS_OP);
				}
			}

			setState(1086);
			((LockOptionExprContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
				((LockOptionExprContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupStatementContext extends ParserRuleContext {
		public ExprContext undoFile;
		public ExprContext initSize;
		public ExprContext undoSize;
		public ExprContext redoSize;
		public ExprContext comment;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(DRDSSQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(DRDSSQLStatementParser.GROUP, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode ADD() { return getToken(DRDSSQLStatementParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(DRDSSQLStatementParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(DRDSSQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(DRDSSQLStatementParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(DRDSSQLStatementParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(DRDSSQLStatementParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(DRDSSQLStatementParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(DRDSSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(DRDSSQLStatementParser.EQUALS_OP, i);
		}
		public CreateLogfileGroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroupStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateLogfileGroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupStatementContext createLogfileGroupStatement() throws RecognitionException {
		CreateLogfileGroupStatementContext _localctx = new CreateLogfileGroupStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createLogfileGroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1088);
			match(CREATE);
			setState(1089);
			match(LOGFILE);
			setState(1090);
			match(GROUP);
			setState(1091);
			nameIdentifier();
			setState(1092);
			match(ADD);
			setState(1093);
			match(UNDOFILE);
			setState(1094);
			((CreateLogfileGroupStatementContext)_localctx).undoFile = expr(0);
			setState(1100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1095);
				match(INITIAL_SIZE);
				setState(1097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1096);
					match(EQUALS_OP);
					}
				}

				setState(1099);
				((CreateLogfileGroupStatementContext)_localctx).initSize = expr(0);
				}
			}

			setState(1107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(1102);
				match(UNDO_BUFFER_SIZE);
				setState(1104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1103);
					match(EQUALS_OP);
					}
				}

				setState(1106);
				((CreateLogfileGroupStatementContext)_localctx).undoSize = expr(0);
				}
			}

			setState(1114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(1109);
				match(REDO_BUFFER_SIZE);
				setState(1111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1110);
					match(EQUALS_OP);
					}
				}

				setState(1113);
				((CreateLogfileGroupStatementContext)_localctx).redoSize = expr(0);
				}
			}

			setState(1121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1116);
				match(NODEGROUP);
				setState(1118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1117);
					match(EQUALS_OP);
					}
				}

				setState(1120);
				nameIdentifier();
				}
			}

			setState(1124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1123);
				match(WAIT);
				}
			}

			setState(1131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1126);
				match(COMMENT);
				setState(1128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1127);
					match(EQUALS_OP);
					}
				}

				setState(1130);
				((CreateLogfileGroupStatementContext)_localctx).comment = expr(0);
				}
			}

			setState(1133);
			match(ENGINE);
			setState(1135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(1134);
				match(EQUALS_OP);
				}
			}

			setState(1137);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(DRDSSQLStatementParser.PROCEDURE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public List<ParameterDeclarationContext> parameterDeclaration() {
			return getRuleContexts(ParameterDeclarationContext.class);
		}
		public ParameterDeclarationContext parameterDeclaration(int i) {
			return getRuleContext(ParameterDeclarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedureStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureStatementContext createProcedureStatement() throws RecognitionException {
		CreateProcedureStatementContext _localctx = new CreateProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createProcedureStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1139);
			match(CREATE);
			setState(1141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1140);
				definerOptionExpr();
				}
			}

			setState(1143);
			match(PROCEDURE);
			setState(1144);
			nameIdentifier();
			setState(1145);
			match(LEFT_PAREN);
			setState(1147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (IN - 70)) | (1L << (INOUT - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (OUT - 70)))) != 0) || _la==REPLACE || _la==RIGHT || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (DATE - 202)) | (1L << (TIME - 202)) | (1L << (TIMESTAMP - 202)) | (1L << (DATETIME - 202)) | (1L << (YEAR - 202)) | (1L << (TEXT - 202)) | (1L << (ENUM - 202)) | (1L << (SUM - 202)) | (1L << (SUBSTR - 202)) | (1L << (SUBSTRING - 202)) | (1L << (ACCOUNT - 202)) | (1L << (ACTION - 202)) | (1L << (AFTER - 202)) | (1L << (AGGREGATE - 202)) | (1L << (ALGORITHM - 202)) | (1L << (ANY - 202)) | (1L << (AT - 202)) | (1L << (AUTHORS - 202)) | (1L << (AUTOCOMMIT - 202)) | (1L << (AUTOEXTEND_SIZE - 202)) | (1L << (AUTO_INCREMENT - 202)) | (1L << (AVG_ROW_LENGTH - 202)) | (1L << (BEGIN - 202)) | (1L << (BINLOG - 202)) | (1L << (BIT - 202)) | (1L << (BLOCK - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (BOOL - 266)) | (1L << (BOOLEAN - 266)) | (1L << (BTREE - 266)) | (1L << (CASCADED - 266)) | (1L << (CHAIN - 266)) | (1L << (CHANNEL - 266)) | (1L << (CHECKSUM - 266)) | (1L << (CIPHER - 266)) | (1L << (CLIENT - 266)) | (1L << (COALESCE - 266)) | (1L << (CODE - 266)) | (1L << (COLUMNS - 266)) | (1L << (COLUMN_FORMAT - 266)) | (1L << (COMMENT - 266)) | (1L << (COMMIT - 266)) | (1L << (COMPACT - 266)) | (1L << (COMPLETION - 266)) | (1L << (COMPRESSED - 266)) | (1L << (COMPRESSION - 266)) | (1L << (CONCURRENT - 266)) | (1L << (CONNECTION - 266)) | (1L << (CONSISTENT - 266)) | (1L << (CONTAINS - 266)) | (1L << (CONTEXT - 266)) | (1L << (CONTRIBUTORS - 266)) | (1L << (COPY - 266)) | (1L << (CPU - 266)) | (1L << (DATA - 266)) | (1L << (DATAFILE - 266)) | (1L << (DEALLOCATE - 266)) | (1L << (DEFAULT_AUTH - 266)) | (1L << (DEFINER - 266)) | (1L << (DELAY_KEY_WRITE - 266)) | (1L << (DIRECTORY - 266)) | (1L << (DISABLE - 266)) | (1L << (DISCARD - 266)) | (1L << (DISK - 266)) | (1L << (DO - 266)) | (1L << (DUMPFILE - 266)) | (1L << (DUPLICATE - 266)) | (1L << (DYNAMIC - 266)) | (1L << (ENABLE - 266)) | (1L << (ENCRYPTION - 266)) | (1L << (ENDS - 266)) | (1L << (ENGINE - 266)) | (1L << (ENGINES - 266)) | (1L << (ERROR - 266)) | (1L << (ERRORS - 266)) | (1L << (ESCAPE - 266)) | (1L << (EVEN - 266)) | (1L << (EVENT - 266)) | (1L << (EVENTS - 266)) | (1L << (EVERY - 266)) | (1L << (EXCHANGE - 266)) | (1L << (EXCLUSIVE - 266)) | (1L << (EXPIRE - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (EXTENT_SIZE - 330)) | (1L << (FAULTS - 330)) | (1L << (FIELDS - 330)) | (1L << (FILE_BLOCK_SIZE - 330)) | (1L << (FILTER - 330)) | (1L << (FIRST - 330)) | (1L << (FIXED - 330)) | (1L << (FOLLOWS - 330)) | (1L << (FULL - 330)) | (1L << (FUNCTION - 330)) | (1L << (GLOBAL - 330)) | (1L << (GRANTS - 330)) | (1L << (GROUP_REPLICATION - 330)) | (1L << (HASH - 330)) | (1L << (HOST - 330)) | (1L << (IDENTIFIED - 330)) | (1L << (IGNORE_SERVER_IDS - 330)) | (1L << (IMPORT - 330)) | (1L << (INDEXES - 330)) | (1L << (INITIAL_SIZE - 330)) | (1L << (INPLACE - 330)) | (1L << (INSERT_METHOD - 330)) | (1L << (INSTANCE - 330)) | (1L << (INVOKER - 330)) | (1L << (IO - 330)) | (1L << (IO_THREAD - 330)) | (1L << (IPC - 330)) | (1L << (ISOLATION - 330)) | (1L << (ISSUER - 330)) | (1L << (KEY_BLOCK_SIZE - 330)) | (1L << (LANGUAGE - 330)) | (1L << (LAST - 330)) | (1L << (LEAVES - 330)) | (1L << (LESS - 330)) | (1L << (LEVEL - 330)) | (1L << (LIST - 330)) | (1L << (LOCAL - 330)) | (1L << (LOGFILE - 330)) | (1L << (LOGS - 330)) | (1L << (MASTER - 330)) | (1L << (MASTER_AUTO_POSITION - 330)) | (1L << (MASTER_CONNECT_RETRY - 330)) | (1L << (MASTER_DELAY - 330)) | (1L << (MASTER_HEARTBEAT_PERIOD - 330)) | (1L << (MASTER_HOST - 330)) | (1L << (MASTER_LOG_FILE - 330)) | (1L << (MASTER_LOG_POS - 330)) | (1L << (MASTER_PASSWORD - 330)) | (1L << (MASTER_PORT - 330)) | (1L << (MASTER_RETRY_COUNT - 330)) | (1L << (MASTER_SSL - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (MASTER_SSL_CAPATH - 330)) | (1L << (MASTER_SSL_CERT - 330)) | (1L << (MASTER_SSL_CIPHER - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MASTER_SSL_CRL - 394)) | (1L << (MASTER_SSL_CRLPATH - 394)) | (1L << (MASTER_SSL_KEY - 394)) | (1L << (MASTER_TLS_VERSION - 394)) | (1L << (MASTER_USER - 394)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 394)) | (1L << (MAX_QUERIES_PER_HOUR - 394)) | (1L << (MAX_ROWS - 394)) | (1L << (MAX_SIZE - 394)) | (1L << (MAX_UPDATES_PER_HOUR - 394)) | (1L << (MAX_USER_CONNECTIONS - 394)) | (1L << (MERGE - 394)) | (1L << (MIGRATE - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (MODIFY - 394)) | (1L << (MUTEX - 394)) | (1L << (MYSQL - 394)) | (1L << (NAME - 394)) | (1L << (NAMES - 394)) | (1L << (NCHAR - 394)) | (1L << (NEVER - 394)) | (1L << (NO - 394)) | (1L << (NODEGROUP - 394)) | (1L << (NONE - 394)) | (1L << (OFFLINE - 394)) | (1L << (OFFSET - 394)) | (1L << (OJ - 394)) | (1L << (OLD_PASSWORD - 394)) | (1L << (ONE - 394)) | (1L << (ONLINE - 394)) | (1L << (ONLY - 394)) | (1L << (OPTIMIZER_COSTS - 394)) | (1L << (OPTIONS - 394)) | (1L << (OWNER - 394)) | (1L << (PACK_KEYS - 394)) | (1L << (PAGE - 394)) | (1L << (PARSER - 394)) | (1L << (PARTIAL - 394)) | (1L << (PARTITIONING - 394)) | (1L << (PARTITIONS - 394)) | (1L << (PASSWORD - 394)) | (1L << (PHASE - 394)) | (1L << (PLUGIN_DIR - 394)) | (1L << (PLUGINS - 394)) | (1L << (PORT - 394)) | (1L << (PRECEDES - 394)) | (1L << (PREPARE - 394)) | (1L << (PRESERVE - 394)) | (1L << (PREV - 394)) | (1L << (PROCESSLIST - 394)) | (1L << (PROFILE - 394)) | (1L << (PROFILES - 394)) | (1L << (PROXY - 394)) | (1L << (QUERY - 394)) | (1L << (QUICK - 394)) | (1L << (REBUILD - 394)) | (1L << (RECOVER - 394)) | (1L << (REDO_BUFFER_SIZE - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (REDUNDANT - 458)) | (1L << (RELAY_LOG_FILE - 458)) | (1L << (RELAY_LOG_POS - 458)) | (1L << (RELAYLOG - 458)) | (1L << (REMOVE - 458)) | (1L << (REORGANIZE - 458)) | (1L << (REPAIR - 458)) | (1L << (REPLICATE_DO_DB - 458)) | (1L << (REPLICATE_DO_TABLE - 458)) | (1L << (REPLICATE_IGNORE_DB - 458)) | (1L << (REPLICATE_IGNORE_TABLE - 458)) | (1L << (REPLICATE_REWRITE_DB - 458)) | (1L << (REPLICATE_WILD_DO_TABLE - 458)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 458)) | (1L << (REPLICATION - 458)) | (1L << (RESUME - 458)) | (1L << (RETURNS - 458)) | (1L << (ROLLBACK - 458)) | (1L << (ROLLUP - 458)) | (1L << (ROTATE - 458)) | (1L << (ROW - 458)) | (1L << (ROWS - 458)) | (1L << (ROW_FORMAT - 458)) | (1L << (SAVEPOINT - 458)) | (1L << (SCHEDULE - 458)) | (1L << (SECURITY - 458)) | (1L << (SERVER - 458)) | (1L << (SESSION - 458)) | (1L << (SHARE - 458)) | (1L << (SHARED - 458)) | (1L << (SIGNED - 458)) | (1L << (SIMPLE - 458)) | (1L << (SLAVE - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOCKET - 458)) | (1L << (SOME - 458)) | (1L << (SOUNDS - 458)) | (1L << (SOURCE - 458)) | (1L << (SQL_AFTER_GTIDS - 458)) | (1L << (SQL_AFTER_MTS_GAPS - 458)) | (1L << (SQL_BEFORE_GTIDS - 458)) | (1L << (SQL_BUFFER_RESULT - 458)) | (1L << (SQL_CACHE - 458)) | (1L << (SQL_NO_CACHE - 458)) | (1L << (SQL_THREAD - 458)) | (1L << (START - 458)) | (1L << (STARTS - 458)) | (1L << (STATS_AUTO_RECALC - 458)) | (1L << (STATS_PERSISTENT - 458)) | (1L << (STATS_SAMPLE_PAGES - 458)) | (1L << (STATUS - 458)) | (1L << (STOP - 458)) | (1L << (STORAGE - 458)) | (1L << (STRING - 458)) | (1L << (SUBJECT - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBPARTITIONS - 458)) | (1L << (SUSPEND - 458)) | (1L << (SWAPS - 458)) | (1L << (SWITCHES - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TABLESPACE - 522)) | (1L << (TEMPORARY - 522)) | (1L << (TEMPTABLE - 522)) | (1L << (THAN - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRUNCATE - 522)) | (1L << (UNDEFINED - 522)) | (1L << (UNDOFILE - 522)) | (1L << (UNDO_BUFFER_SIZE - 522)) | (1L << (UNKNOWN - 522)) | (1L << (UPGRADE - 522)) | (1L << (USER - 522)) | (1L << (VALIDATION - 522)) | (1L << (VALUE - 522)) | (1L << (VARIABLES - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNINGS - 522)) | (1L << (WITHOUT - 522)) | (1L << (WORK - 522)) | (1L << (WRAPPER - 522)) | (1L << (X509 - 522)) | (1L << (XA - 522)) | (1L << (XML - 522)) | (1L << (TABLES - 522)) | (1L << (ROUTINE - 522)) | (1L << (EXECUTE - 522)) | (1L << (FILE - 522)) | (1L << (PROCESS - 522)) | (1L << (RELOAD - 522)) | (1L << (SHUTDOWN - 522)) | (1L << (SUPER - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (ARMSCII8 - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (ASCII - 586)) | (1L << (BIG5 - 586)) | (1L << (CP1250 - 586)) | (1L << (CP1251 - 586)) | (1L << (CP1256 - 586)) | (1L << (CP1257 - 586)) | (1L << (CP850 - 586)) | (1L << (CP852 - 586)) | (1L << (CP866 - 586)) | (1L << (CP932 - 586)) | (1L << (DEC8 - 586)) | (1L << (EUCJPMS - 586)) | (1L << (EUCKR - 586)) | (1L << (GB2312 - 586)) | (1L << (GBK - 586)) | (1L << (GEOSTD8 - 586)) | (1L << (GREEK - 586)) | (1L << (HEBREW - 586)) | (1L << (HP8 - 586)) | (1L << (KEYBCS2 - 586)) | (1L << (KOI8R - 586)) | (1L << (KOI8U - 586)) | (1L << (LATIN1 - 586)) | (1L << (LATIN2 - 586)) | (1L << (LATIN5 - 586)) | (1L << (LATIN7 - 586)) | (1L << (MACCE - 586)) | (1L << (MACROMAN - 586)) | (1L << (SJIS - 586)) | (1L << (SWE7 - 586)) | (1L << (TIS620 - 586)) | (1L << (UCS2 - 586)) | (1L << (UJIS - 586)) | (1L << (UTF16 - 586)) | (1L << (UTF16LE - 586)) | (1L << (UTF32 - 586)) | (1L << (UTF8 - 586)) | (1L << (UTF8MB3 - 586)) | (1L << (UTF8MB4 - 586)) | (1L << (ARCHIVE - 586)) | (1L << (BLACKHOLE - 586)) | (1L << (CSV - 586)) | (1L << (FEDERATED - 586)) | (1L << (INNODB - 586)) | (1L << (MEMORY - 586)) | (1L << (MRG_MYISAM - 586)) | (1L << (MYISAM - 586)) | (1L << (NDB - 586)) | (1L << (NDBCLUSTER - 586)) | (1L << (PERFOMANCE_SCHEMA - 586)) | (1L << (REPEATABLE - 586)) | (1L << (COMMITTED - 586)) | (1L << (UNCOMMITTED - 586)) | (1L << (SERIALIZABLE - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MOD - 650)) | (1L << (REVERSE - 650)) | (1L << (ASTERISK - 650)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 650)) | (1L << (REGULAR_ID - 650)) | (1L << (DELIMITED_ID - 650)) | (1L << (REVERSE_QUOTE_ID - 650)))) != 0) || _la==MID) {
				{
				setState(1146);
				parameterDeclaration();
				}
			}

			setState(1153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1149);
				match(COMMA);
				setState(1150);
				parameterDeclaration();
				}
				}
				setState(1155);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1156);
			match(RIGHT_PAREN);
			setState(1160);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1157);
					routineOption();
					}
					} 
				}
				setState(1162);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			setState(1163);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode RETURNS() { return getToken(DRDSSQLStatementParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public List<ParameterDeclarationContext> parameterDeclaration() {
			return getRuleContexts(ParameterDeclarationContext.class);
		}
		public ParameterDeclarationContext parameterDeclaration(int i) {
			return getRuleContext(ParameterDeclarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementContext createFunctionStatement() throws RecognitionException {
		CreateFunctionStatementContext _localctx = new CreateFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createFunctionStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1165);
			match(CREATE);
			setState(1167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1166);
				definerOptionExpr();
				}
			}

			setState(1169);
			match(FUNCTION);
			setState(1170);
			nameIdentifier();
			setState(1171);
			match(LEFT_PAREN);
			setState(1173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (IN - 70)) | (1L << (INOUT - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (OUT - 70)))) != 0) || _la==REPLACE || _la==RIGHT || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (DATE - 202)) | (1L << (TIME - 202)) | (1L << (TIMESTAMP - 202)) | (1L << (DATETIME - 202)) | (1L << (YEAR - 202)) | (1L << (TEXT - 202)) | (1L << (ENUM - 202)) | (1L << (SUM - 202)) | (1L << (SUBSTR - 202)) | (1L << (SUBSTRING - 202)) | (1L << (ACCOUNT - 202)) | (1L << (ACTION - 202)) | (1L << (AFTER - 202)) | (1L << (AGGREGATE - 202)) | (1L << (ALGORITHM - 202)) | (1L << (ANY - 202)) | (1L << (AT - 202)) | (1L << (AUTHORS - 202)) | (1L << (AUTOCOMMIT - 202)) | (1L << (AUTOEXTEND_SIZE - 202)) | (1L << (AUTO_INCREMENT - 202)) | (1L << (AVG_ROW_LENGTH - 202)) | (1L << (BEGIN - 202)) | (1L << (BINLOG - 202)) | (1L << (BIT - 202)) | (1L << (BLOCK - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (BOOL - 266)) | (1L << (BOOLEAN - 266)) | (1L << (BTREE - 266)) | (1L << (CASCADED - 266)) | (1L << (CHAIN - 266)) | (1L << (CHANNEL - 266)) | (1L << (CHECKSUM - 266)) | (1L << (CIPHER - 266)) | (1L << (CLIENT - 266)) | (1L << (COALESCE - 266)) | (1L << (CODE - 266)) | (1L << (COLUMNS - 266)) | (1L << (COLUMN_FORMAT - 266)) | (1L << (COMMENT - 266)) | (1L << (COMMIT - 266)) | (1L << (COMPACT - 266)) | (1L << (COMPLETION - 266)) | (1L << (COMPRESSED - 266)) | (1L << (COMPRESSION - 266)) | (1L << (CONCURRENT - 266)) | (1L << (CONNECTION - 266)) | (1L << (CONSISTENT - 266)) | (1L << (CONTAINS - 266)) | (1L << (CONTEXT - 266)) | (1L << (CONTRIBUTORS - 266)) | (1L << (COPY - 266)) | (1L << (CPU - 266)) | (1L << (DATA - 266)) | (1L << (DATAFILE - 266)) | (1L << (DEALLOCATE - 266)) | (1L << (DEFAULT_AUTH - 266)) | (1L << (DEFINER - 266)) | (1L << (DELAY_KEY_WRITE - 266)) | (1L << (DIRECTORY - 266)) | (1L << (DISABLE - 266)) | (1L << (DISCARD - 266)) | (1L << (DISK - 266)) | (1L << (DO - 266)) | (1L << (DUMPFILE - 266)) | (1L << (DUPLICATE - 266)) | (1L << (DYNAMIC - 266)) | (1L << (ENABLE - 266)) | (1L << (ENCRYPTION - 266)) | (1L << (ENDS - 266)) | (1L << (ENGINE - 266)) | (1L << (ENGINES - 266)) | (1L << (ERROR - 266)) | (1L << (ERRORS - 266)) | (1L << (ESCAPE - 266)) | (1L << (EVEN - 266)) | (1L << (EVENT - 266)) | (1L << (EVENTS - 266)) | (1L << (EVERY - 266)) | (1L << (EXCHANGE - 266)) | (1L << (EXCLUSIVE - 266)) | (1L << (EXPIRE - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (EXTENT_SIZE - 330)) | (1L << (FAULTS - 330)) | (1L << (FIELDS - 330)) | (1L << (FILE_BLOCK_SIZE - 330)) | (1L << (FILTER - 330)) | (1L << (FIRST - 330)) | (1L << (FIXED - 330)) | (1L << (FOLLOWS - 330)) | (1L << (FULL - 330)) | (1L << (FUNCTION - 330)) | (1L << (GLOBAL - 330)) | (1L << (GRANTS - 330)) | (1L << (GROUP_REPLICATION - 330)) | (1L << (HASH - 330)) | (1L << (HOST - 330)) | (1L << (IDENTIFIED - 330)) | (1L << (IGNORE_SERVER_IDS - 330)) | (1L << (IMPORT - 330)) | (1L << (INDEXES - 330)) | (1L << (INITIAL_SIZE - 330)) | (1L << (INPLACE - 330)) | (1L << (INSERT_METHOD - 330)) | (1L << (INSTANCE - 330)) | (1L << (INVOKER - 330)) | (1L << (IO - 330)) | (1L << (IO_THREAD - 330)) | (1L << (IPC - 330)) | (1L << (ISOLATION - 330)) | (1L << (ISSUER - 330)) | (1L << (KEY_BLOCK_SIZE - 330)) | (1L << (LANGUAGE - 330)) | (1L << (LAST - 330)) | (1L << (LEAVES - 330)) | (1L << (LESS - 330)) | (1L << (LEVEL - 330)) | (1L << (LIST - 330)) | (1L << (LOCAL - 330)) | (1L << (LOGFILE - 330)) | (1L << (LOGS - 330)) | (1L << (MASTER - 330)) | (1L << (MASTER_AUTO_POSITION - 330)) | (1L << (MASTER_CONNECT_RETRY - 330)) | (1L << (MASTER_DELAY - 330)) | (1L << (MASTER_HEARTBEAT_PERIOD - 330)) | (1L << (MASTER_HOST - 330)) | (1L << (MASTER_LOG_FILE - 330)) | (1L << (MASTER_LOG_POS - 330)) | (1L << (MASTER_PASSWORD - 330)) | (1L << (MASTER_PORT - 330)) | (1L << (MASTER_RETRY_COUNT - 330)) | (1L << (MASTER_SSL - 330)) | (1L << (MASTER_SSL_CA - 330)) | (1L << (MASTER_SSL_CAPATH - 330)) | (1L << (MASTER_SSL_CERT - 330)) | (1L << (MASTER_SSL_CIPHER - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MASTER_SSL_CRL - 394)) | (1L << (MASTER_SSL_CRLPATH - 394)) | (1L << (MASTER_SSL_KEY - 394)) | (1L << (MASTER_TLS_VERSION - 394)) | (1L << (MASTER_USER - 394)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 394)) | (1L << (MAX_QUERIES_PER_HOUR - 394)) | (1L << (MAX_ROWS - 394)) | (1L << (MAX_SIZE - 394)) | (1L << (MAX_UPDATES_PER_HOUR - 394)) | (1L << (MAX_USER_CONNECTIONS - 394)) | (1L << (MERGE - 394)) | (1L << (MIGRATE - 394)) | (1L << (MIN_ROWS - 394)) | (1L << (MODIFY - 394)) | (1L << (MUTEX - 394)) | (1L << (MYSQL - 394)) | (1L << (NAME - 394)) | (1L << (NAMES - 394)) | (1L << (NCHAR - 394)) | (1L << (NEVER - 394)) | (1L << (NO - 394)) | (1L << (NODEGROUP - 394)) | (1L << (NONE - 394)) | (1L << (OFFLINE - 394)) | (1L << (OFFSET - 394)) | (1L << (OJ - 394)) | (1L << (OLD_PASSWORD - 394)) | (1L << (ONE - 394)) | (1L << (ONLINE - 394)) | (1L << (ONLY - 394)) | (1L << (OPTIMIZER_COSTS - 394)) | (1L << (OPTIONS - 394)) | (1L << (OWNER - 394)) | (1L << (PACK_KEYS - 394)) | (1L << (PAGE - 394)) | (1L << (PARSER - 394)) | (1L << (PARTIAL - 394)) | (1L << (PARTITIONING - 394)) | (1L << (PARTITIONS - 394)) | (1L << (PASSWORD - 394)) | (1L << (PHASE - 394)) | (1L << (PLUGIN_DIR - 394)) | (1L << (PLUGINS - 394)) | (1L << (PORT - 394)) | (1L << (PRECEDES - 394)) | (1L << (PREPARE - 394)) | (1L << (PRESERVE - 394)) | (1L << (PREV - 394)) | (1L << (PROCESSLIST - 394)) | (1L << (PROFILE - 394)) | (1L << (PROFILES - 394)) | (1L << (PROXY - 394)) | (1L << (QUERY - 394)) | (1L << (QUICK - 394)) | (1L << (REBUILD - 394)) | (1L << (RECOVER - 394)) | (1L << (REDO_BUFFER_SIZE - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (REDUNDANT - 458)) | (1L << (RELAY_LOG_FILE - 458)) | (1L << (RELAY_LOG_POS - 458)) | (1L << (RELAYLOG - 458)) | (1L << (REMOVE - 458)) | (1L << (REORGANIZE - 458)) | (1L << (REPAIR - 458)) | (1L << (REPLICATE_DO_DB - 458)) | (1L << (REPLICATE_DO_TABLE - 458)) | (1L << (REPLICATE_IGNORE_DB - 458)) | (1L << (REPLICATE_IGNORE_TABLE - 458)) | (1L << (REPLICATE_REWRITE_DB - 458)) | (1L << (REPLICATE_WILD_DO_TABLE - 458)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 458)) | (1L << (REPLICATION - 458)) | (1L << (RESUME - 458)) | (1L << (RETURNS - 458)) | (1L << (ROLLBACK - 458)) | (1L << (ROLLUP - 458)) | (1L << (ROTATE - 458)) | (1L << (ROW - 458)) | (1L << (ROWS - 458)) | (1L << (ROW_FORMAT - 458)) | (1L << (SAVEPOINT - 458)) | (1L << (SCHEDULE - 458)) | (1L << (SECURITY - 458)) | (1L << (SERVER - 458)) | (1L << (SESSION - 458)) | (1L << (SHARE - 458)) | (1L << (SHARED - 458)) | (1L << (SIGNED - 458)) | (1L << (SIMPLE - 458)) | (1L << (SLAVE - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (SOCKET - 458)) | (1L << (SOME - 458)) | (1L << (SOUNDS - 458)) | (1L << (SOURCE - 458)) | (1L << (SQL_AFTER_GTIDS - 458)) | (1L << (SQL_AFTER_MTS_GAPS - 458)) | (1L << (SQL_BEFORE_GTIDS - 458)) | (1L << (SQL_BUFFER_RESULT - 458)) | (1L << (SQL_CACHE - 458)) | (1L << (SQL_NO_CACHE - 458)) | (1L << (SQL_THREAD - 458)) | (1L << (START - 458)) | (1L << (STARTS - 458)) | (1L << (STATS_AUTO_RECALC - 458)) | (1L << (STATS_PERSISTENT - 458)) | (1L << (STATS_SAMPLE_PAGES - 458)) | (1L << (STATUS - 458)) | (1L << (STOP - 458)) | (1L << (STORAGE - 458)) | (1L << (STRING - 458)) | (1L << (SUBJECT - 458)) | (1L << (SUBPARTITION - 458)) | (1L << (SUBPARTITIONS - 458)) | (1L << (SUSPEND - 458)) | (1L << (SWAPS - 458)) | (1L << (SWITCHES - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (TABLESPACE - 522)) | (1L << (TEMPORARY - 522)) | (1L << (TEMPTABLE - 522)) | (1L << (THAN - 522)) | (1L << (TRANSACTION - 522)) | (1L << (TRUNCATE - 522)) | (1L << (UNDEFINED - 522)) | (1L << (UNDOFILE - 522)) | (1L << (UNDO_BUFFER_SIZE - 522)) | (1L << (UNKNOWN - 522)) | (1L << (UPGRADE - 522)) | (1L << (USER - 522)) | (1L << (VALIDATION - 522)) | (1L << (VALUE - 522)) | (1L << (VARIABLES - 522)) | (1L << (VIEW - 522)) | (1L << (WAIT - 522)) | (1L << (WARNINGS - 522)) | (1L << (WITHOUT - 522)) | (1L << (WORK - 522)) | (1L << (WRAPPER - 522)) | (1L << (X509 - 522)) | (1L << (XA - 522)) | (1L << (XML - 522)) | (1L << (TABLES - 522)) | (1L << (ROUTINE - 522)) | (1L << (EXECUTE - 522)) | (1L << (FILE - 522)) | (1L << (PROCESS - 522)) | (1L << (RELOAD - 522)) | (1L << (SHUTDOWN - 522)) | (1L << (SUPER - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (ARMSCII8 - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (ASCII - 586)) | (1L << (BIG5 - 586)) | (1L << (CP1250 - 586)) | (1L << (CP1251 - 586)) | (1L << (CP1256 - 586)) | (1L << (CP1257 - 586)) | (1L << (CP850 - 586)) | (1L << (CP852 - 586)) | (1L << (CP866 - 586)) | (1L << (CP932 - 586)) | (1L << (DEC8 - 586)) | (1L << (EUCJPMS - 586)) | (1L << (EUCKR - 586)) | (1L << (GB2312 - 586)) | (1L << (GBK - 586)) | (1L << (GEOSTD8 - 586)) | (1L << (GREEK - 586)) | (1L << (HEBREW - 586)) | (1L << (HP8 - 586)) | (1L << (KEYBCS2 - 586)) | (1L << (KOI8R - 586)) | (1L << (KOI8U - 586)) | (1L << (LATIN1 - 586)) | (1L << (LATIN2 - 586)) | (1L << (LATIN5 - 586)) | (1L << (LATIN7 - 586)) | (1L << (MACCE - 586)) | (1L << (MACROMAN - 586)) | (1L << (SJIS - 586)) | (1L << (SWE7 - 586)) | (1L << (TIS620 - 586)) | (1L << (UCS2 - 586)) | (1L << (UJIS - 586)) | (1L << (UTF16 - 586)) | (1L << (UTF16LE - 586)) | (1L << (UTF32 - 586)) | (1L << (UTF8 - 586)) | (1L << (UTF8MB3 - 586)) | (1L << (UTF8MB4 - 586)) | (1L << (ARCHIVE - 586)) | (1L << (BLACKHOLE - 586)) | (1L << (CSV - 586)) | (1L << (FEDERATED - 586)) | (1L << (INNODB - 586)) | (1L << (MEMORY - 586)) | (1L << (MRG_MYISAM - 586)) | (1L << (MYISAM - 586)) | (1L << (NDB - 586)) | (1L << (NDBCLUSTER - 586)) | (1L << (PERFOMANCE_SCHEMA - 586)) | (1L << (REPEATABLE - 586)) | (1L << (COMMITTED - 586)) | (1L << (UNCOMMITTED - 586)) | (1L << (SERIALIZABLE - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MOD - 650)) | (1L << (REVERSE - 650)) | (1L << (ASTERISK - 650)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 650)) | (1L << (REGULAR_ID - 650)) | (1L << (DELIMITED_ID - 650)) | (1L << (REVERSE_QUOTE_ID - 650)))) != 0) || _la==MID) {
				{
				setState(1172);
				parameterDeclaration();
				}
			}

			setState(1179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1175);
				match(COMMA);
				setState(1176);
				parameterDeclaration();
				}
				}
				setState(1181);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1182);
			match(RIGHT_PAREN);
			setState(1183);
			match(RETURNS);
			setState(1184);
			dataType();
			setState(1188);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1185);
					routineOption();
					}
					} 
				}
				setState(1190);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			setState(1191);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerStatementContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext wrapper;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(DRDSSQLStatementParser.SERVER, 0); }
		public TerminalNode FOREIGN() { return getToken(DRDSSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DRDSSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DRDSSQLStatementParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(DRDSSQLStatementParser.OPTIONS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public CreateServerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateServerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerStatementContext createServerStatement() throws RecognitionException {
		CreateServerStatementContext _localctx = new CreateServerStatementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createServerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1193);
			match(CREATE);
			setState(1194);
			match(SERVER);
			setState(1195);
			((CreateServerStatementContext)_localctx).name = nameIdentifier();
			setState(1196);
			match(FOREIGN);
			setState(1197);
			match(DATA);
			setState(1198);
			match(WRAPPER);
			setState(1199);
			((CreateServerStatementContext)_localctx).wrapper = nameIdentifier();
			setState(1200);
			match(OPTIONS);
			setState(1201);
			match(LEFT_PAREN);
			setState(1202);
			serverOption();
			setState(1207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1203);
				match(COMMA);
				setState(1204);
				serverOption();
				}
				}
				setState(1209);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1210);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
	 
		public ServerOptionContext() { }
		public void copyFrom(ServerOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ServerPasswordOptionContext extends ServerOptionContext {
		public TerminalNode PASSWORD() { return getToken(DRDSSQLStatementParser.PASSWORD, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerPasswordOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitServerPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerSocketOptionContext extends ServerOptionContext {
		public TerminalNode SOCKET() { return getToken(DRDSSQLStatementParser.SOCKET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerSocketOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitServerSocketOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerOwnerOptionContext extends ServerOptionContext {
		public TerminalNode OWNER() { return getToken(DRDSSQLStatementParser.OWNER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerOwnerOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitServerOwnerOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerUserOptionContext extends ServerOptionContext {
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerUserOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitServerUserOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerHostOptionContext extends ServerOptionContext {
		public TerminalNode HOST() { return getToken(DRDSSQLStatementParser.HOST, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerHostOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitServerHostOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerPortOptionContext extends ServerOptionContext {
		public TerminalNode PORT() { return getToken(DRDSSQLStatementParser.PORT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerPortOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitServerPortOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerDatabaseOptionContext extends ServerOptionContext {
		public TerminalNode DATABASE() { return getToken(DRDSSQLStatementParser.DATABASE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerDatabaseOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitServerDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_serverOption);
		try {
			setState(1226);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				_localctx = new ServerHostOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1212);
				match(HOST);
				setState(1213);
				expr(0);
				}
				break;
			case DATABASE:
				_localctx = new ServerDatabaseOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1214);
				match(DATABASE);
				setState(1215);
				expr(0);
				}
				break;
			case USER:
				_localctx = new ServerUserOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1216);
				match(USER);
				setState(1217);
				expr(0);
				}
				break;
			case PASSWORD:
				_localctx = new ServerPasswordOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1218);
				match(PASSWORD);
				setState(1219);
				expr(0);
				}
				break;
			case SOCKET:
				_localctx = new ServerSocketOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1220);
				match(SOCKET);
				setState(1221);
				expr(0);
				}
				break;
			case OWNER:
				_localctx = new ServerOwnerOptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1222);
				match(OWNER);
				setState(1223);
				expr(0);
				}
				break;
			case PORT:
				_localctx = new ServerPortOptionContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1224);
				match(PORT);
				setState(1225);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableStatementContext extends ParserRuleContext {
		public Token tableElementsParen;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(DRDSSQLStatementParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public IDBPartitionByContext iDBPartitionBy() {
			return getRuleContext(IDBPartitionByContext.class,0);
		}
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public CreateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableStatementContext createTableStatement() throws RecognitionException {
		CreateTableStatementContext _localctx = new CreateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createTableStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1228);
			match(CREATE);
			setState(1230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(1229);
				match(TEMPORARY);
				}
			}

			setState(1232);
			match(TABLE);
			setState(1234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1233);
				ifNotExists();
				}
			}

			setState(1236);
			nameIdentifier();
			setState(1251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1237);
					((CreateTableStatementContext)_localctx).tableElementsParen = match(LEFT_PAREN);
					}
				}

				setState(1240);
				tableElement();
				setState(1245);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1241);
					match(COMMA);
					setState(1242);
					tableElement();
					}
					}
					setState(1247);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RIGHT_PAREN) {
					{
					setState(1248);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			}
			setState(1263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1253);
				tableOption();
				setState(1260);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1255);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1254);
							match(COMMA);
							}
						}

						setState(1257);
						tableOption();
						}
						} 
					}
					setState(1262);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
				}
				}
				break;
			}
			setState(1266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DBPARTITION) {
				{
				setState(1265);
				iDBPartitionBy();
				}
			}

			setState(1272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1268);
					match(AS);
					}
				}

				setState(1271);
				iSelectQuery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public LikeClauseContext likeClause() {
			return getRuleContext(LikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_tableElement);
		try {
			setState(1277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
			case LEFT:
			case REPLACE:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SUM:
			case SUBSTR:
			case SUBSTRING:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case MOD:
			case REVERSE:
			case ASTERISK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case MID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1274);
				columnDefinition();
				}
				break;
			case LIKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1275);
				likeClause();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case FULLTEXT:
			case INDEX:
			case KEY:
			case PRIMARY:
			case SPATIAL:
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1276);
				tableConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1279);
			nameIdentifier();
			setState(1281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				setState(1280);
				dataType();
				}
				break;
			}
			setState(1286);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1283);
					columnConstraint();
					}
					} 
				}
				setState(1288);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(DRDSSQLStatementParser.LIKE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeClauseContext likeClause() throws RecognitionException {
		LikeClauseContext _localctx = new LikeClauseContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_likeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1289);
			match(LIKE);
			setState(1290);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(DRDSSQLStatementParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(DRDSSQLStatementParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(DRDSSQLStatementParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentClauseContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CommentClauseContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCommentClause(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(DRDSSQLStatementParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(DRDSSQLStatementParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(DRDSSQLStatementParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferencesColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode REFERENCES() { return getToken(DRDSSQLStatementParser.REFERENCES, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode MATCH() { return getToken(DRDSSQLStatementParser.MATCH, 0); }
		public MatchTypeContext matchType() {
			return getRuleContext(MatchTypeContext.class,0);
		}
		public List<ReferenceTriggerActionContext> referenceTriggerAction() {
			return getRuleContexts(ReferenceTriggerActionContext.class);
		}
		public ReferenceTriggerActionContext referenceTriggerAction(int i) {
			return getRuleContext(ReferenceTriggerActionContext.class,i);
		}
		public ReferencesColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitReferencesColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(DRDSSQLStatementParser.AUTO_INCREMENT, 0); }
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(DRDSSQLStatementParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(DRDSSQLStatementParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public UniqueColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUniqueColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public Null_Context null_() {
			return getRuleContext(Null_Context.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotNullColumnConstraintContext extends ColumnConstraintContext {
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public NotNullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNotNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_columnConstraint);
		int _la;
		try {
			setState(1332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1292);
				null_();
				}
				break;
			case NOT:
				_localctx = new NotNullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1293);
				notNull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1294);
				defaultClause();
				}
				break;
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1295);
				match(AUTO_INCREMENT);
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1296);
					match(PRIMARY);
					}
				}

				setState(1299);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1300);
				match(UNIQUE);
				setState(1302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(1301);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentClauseContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1304);
				match(COMMENT);
				setState(1305);
				expr(0);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1306);
				match(COLUMN_FORMAT);
				setState(1307);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1308);
				match(STORAGE);
				setState(1309);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferencesColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1310);
				match(REFERENCES);
				setState(1311);
				nameIdentifier();
				setState(1312);
				match(LEFT_PAREN);
				setState(1313);
				constraintColumn();
				setState(1318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1314);
					match(COMMA);
					setState(1315);
					constraintColumn();
					}
					}
					setState(1320);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1321);
				match(RIGHT_PAREN);
				setState(1324);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
				case 1:
					{
					setState(1322);
					match(MATCH);
					setState(1323);
					matchType();
					}
					break;
				}
				setState(1329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(1326);
					referenceTriggerAction();
					}
					}
					setState(1331);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialTableConstraintContext extends TableConstraintContext {
		public TerminalNode SPATIAL() { return getToken(DRDSSQLStatementParser.SPATIAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SpatialTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSpatialTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexTableConstraintContext extends TableConstraintContext {
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public IndexTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueTableConstraintContext extends TableConstraintContext {
		public NameIdentifierContext name;
		public NameIdentifierContext index;
		public TerminalNode UNIQUE() { return getToken(DRDSSQLStatementParser.UNIQUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DRDSSQLStatementParser.CONSTRAINT, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public UniqueTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUniqueTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class KeyTableConstraintContext extends TableConstraintContext {
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public KeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public TerminalNode CHECK() { return getToken(DRDSSQLStatementParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public NameIdentifierContext name;
		public TerminalNode PRIMARY() { return getToken(DRDSSQLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DRDSSQLStatementParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullTextTableConstraintContext extends TableConstraintContext {
		public TerminalNode FULLTEXT() { return getToken(DRDSSQLStatementParser.FULLTEXT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public FullTextTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFullTextTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public NameIdentifierContext name;
		public NameIdentifierContext index;
		public ConstraintColumnContext constraintColumn;
		public List<ConstraintColumnContext> referencingColumns = new ArrayList<ConstraintColumnContext>();
		public NameIdentifierContext referencedTable;
		public List<ConstraintColumnContext> referencedColumns = new ArrayList<ConstraintColumnContext>();
		public TerminalNode FOREIGN() { return getToken(DRDSSQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(DRDSSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(DRDSSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode REFERENCES() { return getToken(DRDSSQLStatementParser.REFERENCES, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(DRDSSQLStatementParser.CONSTRAINT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode MATCH() { return getToken(DRDSSQLStatementParser.MATCH, 0); }
		public MatchTypeContext matchType() {
			return getRuleContext(MatchTypeContext.class,0);
		}
		public List<ReferenceTriggerActionContext> referenceTriggerAction() {
			return getRuleContexts(ReferenceTriggerActionContext.class);
		}
		public ReferenceTriggerActionContext referenceTriggerAction(int i) {
			return getRuleContext(ReferenceTriggerActionContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_tableConstraint);
		int _la;
		try {
			int _alt;
			setState(1533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1334);
					match(CONSTRAINT);
					setState(1336);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
						{
						setState(1335);
						((PrimaryKeyTableConstraintContext)_localctx).name = nameIdentifier();
						}
					}

					}
				}

				setState(1340);
				match(PRIMARY);
				setState(1341);
				match(KEY);
				setState(1343);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1342);
					indexType();
					}
				}

				setState(1345);
				match(LEFT_PAREN);
				setState(1346);
				constraintColumn();
				setState(1351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1347);
					match(COMMA);
					setState(1348);
					constraintColumn();
					}
					}
					setState(1353);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1354);
				match(RIGHT_PAREN);
				setState(1358);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1355);
						indexOption();
						}
						} 
					}
					setState(1360);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new IndexTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1361);
				match(INDEX);
				setState(1363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(1362);
					nameIdentifier();
					}
				}

				setState(1366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1365);
					indexType();
					}
				}

				setState(1368);
				match(LEFT_PAREN);
				setState(1369);
				constraintColumn();
				setState(1374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1370);
					match(COMMA);
					setState(1371);
					constraintColumn();
					}
					}
					setState(1376);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1377);
				match(RIGHT_PAREN);
				setState(1381);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1378);
						indexOption();
						}
						} 
					}
					setState(1383);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
				}
				}
				break;
			case 3:
				_localctx = new KeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1384);
				match(KEY);
				setState(1386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(1385);
					nameIdentifier();
					}
				}

				setState(1389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1388);
					indexType();
					}
				}

				setState(1391);
				match(LEFT_PAREN);
				setState(1392);
				constraintColumn();
				setState(1397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1393);
					match(COMMA);
					setState(1394);
					constraintColumn();
					}
					}
					setState(1399);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1400);
				match(RIGHT_PAREN);
				setState(1404);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,88,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1401);
						indexOption();
						}
						} 
					}
					setState(1406);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,88,_ctx);
				}
				}
				break;
			case 4:
				_localctx = new UniqueTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1407);
					match(CONSTRAINT);
					setState(1409);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
						{
						setState(1408);
						((UniqueTableConstraintContext)_localctx).name = nameIdentifier();
						}
					}

					}
				}

				setState(1413);
				match(UNIQUE);
				setState(1415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INDEX - 71)) | (1L << (KEY - 71)) | (1L << (KEYS - 71)))) != 0)) {
					{
					setState(1414);
					indexFormat();
					}
				}

				setState(1418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(1417);
					((UniqueTableConstraintContext)_localctx).index = nameIdentifier();
					}
				}

				setState(1421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1420);
					indexType();
					}
				}

				setState(1423);
				match(LEFT_PAREN);
				setState(1424);
				constraintColumn();
				setState(1429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1425);
					match(COMMA);
					setState(1426);
					constraintColumn();
					}
					}
					setState(1431);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1432);
				match(RIGHT_PAREN);
				setState(1436);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,95,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1433);
						indexOption();
						}
						} 
					}
					setState(1438);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,95,_ctx);
				}
				}
				break;
			case 5:
				_localctx = new FullTextTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1439);
				match(FULLTEXT);
				setState(1441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INDEX - 71)) | (1L << (KEY - 71)) | (1L << (KEYS - 71)))) != 0)) {
					{
					setState(1440);
					indexFormat();
					}
				}

				setState(1444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(1443);
					nameIdentifier();
					}
				}

				setState(1446);
				match(LEFT_PAREN);
				setState(1447);
				constraintColumn();
				setState(1452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1448);
					match(COMMA);
					setState(1449);
					constraintColumn();
					}
					}
					setState(1454);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1455);
				match(RIGHT_PAREN);
				setState(1459);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1456);
						indexOption();
						}
						} 
					}
					setState(1461);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,99,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new SpatialTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1462);
				match(SPATIAL);
				setState(1464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INDEX - 71)) | (1L << (KEY - 71)) | (1L << (KEYS - 71)))) != 0)) {
					{
					setState(1463);
					indexFormat();
					}
				}

				setState(1467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(1466);
					nameIdentifier();
					}
				}

				setState(1469);
				match(LEFT_PAREN);
				setState(1470);
				constraintColumn();
				setState(1475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1471);
					match(COMMA);
					setState(1472);
					constraintColumn();
					}
					}
					setState(1477);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1478);
				match(RIGHT_PAREN);
				setState(1482);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,103,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1479);
						indexOption();
						}
						} 
					}
					setState(1484);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,103,_ctx);
				}
				}
				break;
			case 7:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1485);
					match(CONSTRAINT);
					setState(1487);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
						{
						setState(1486);
						((ForeignKeyTableConstraintContext)_localctx).name = nameIdentifier();
						}
					}

					}
				}

				setState(1491);
				match(FOREIGN);
				setState(1492);
				match(KEY);
				setState(1494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(1493);
					((ForeignKeyTableConstraintContext)_localctx).index = nameIdentifier();
					}
				}

				setState(1496);
				match(LEFT_PAREN);
				setState(1497);
				((ForeignKeyTableConstraintContext)_localctx).constraintColumn = constraintColumn();
				((ForeignKeyTableConstraintContext)_localctx).referencingColumns.add(((ForeignKeyTableConstraintContext)_localctx).constraintColumn);
				setState(1502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1498);
					match(COMMA);
					setState(1499);
					((ForeignKeyTableConstraintContext)_localctx).constraintColumn = constraintColumn();
					((ForeignKeyTableConstraintContext)_localctx).referencingColumns.add(((ForeignKeyTableConstraintContext)_localctx).constraintColumn);
					}
					}
					setState(1504);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1505);
				match(RIGHT_PAREN);
				setState(1506);
				match(REFERENCES);
				setState(1507);
				((ForeignKeyTableConstraintContext)_localctx).referencedTable = nameIdentifier();
				setState(1508);
				match(LEFT_PAREN);
				setState(1509);
				((ForeignKeyTableConstraintContext)_localctx).constraintColumn = constraintColumn();
				((ForeignKeyTableConstraintContext)_localctx).referencedColumns.add(((ForeignKeyTableConstraintContext)_localctx).constraintColumn);
				setState(1514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1510);
					match(COMMA);
					setState(1511);
					((ForeignKeyTableConstraintContext)_localctx).constraintColumn = constraintColumn();
					((ForeignKeyTableConstraintContext)_localctx).referencedColumns.add(((ForeignKeyTableConstraintContext)_localctx).constraintColumn);
					}
					}
					setState(1516);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1517);
				match(RIGHT_PAREN);
				setState(1520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
				case 1:
					{
					setState(1518);
					match(MATCH);
					setState(1519);
					matchType();
					}
					break;
				}
				setState(1525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(1522);
					referenceTriggerAction();
					}
					}
					setState(1527);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1528);
				match(CHECK);
				setState(1529);
				match(LEFT_PAREN);
				setState(1530);
				expr(0);
				setState(1531);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintColumnContext extends ParserRuleContext {
		public ExprContext name;
		public ExprContext length;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public OrderingSpecificationContext orderingSpecification() {
			return getRuleContext(OrderingSpecificationContext.class,0);
		}
		public ConstraintColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintColumn; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitConstraintColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintColumnContext constraintColumn() throws RecognitionException {
		ConstraintColumnContext _localctx = new ConstraintColumnContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_constraintColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1535);
			((ConstraintColumnContext)_localctx).name = expr(0);
			setState(1540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1536);
				match(LEFT_PAREN);
				setState(1537);
				((ConstraintColumnContext)_localctx).length = expr(0);
				setState(1538);
				match(RIGHT_PAREN);
				}
			}

			setState(1543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1542);
				orderingSpecification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchTypeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(DRDSSQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(DRDSSQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DRDSSQLStatementParser.SIMPLE, 0); }
		public MatchTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMatchType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchTypeContext matchType() throws RecognitionException {
		MatchTypeContext _localctx = new MatchTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_matchType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1545);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceTriggerActionContext extends ParserRuleContext {
		public ReferenceTriggerActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceTriggerAction; }
	 
		public ReferenceTriggerActionContext() { }
		public void copyFrom(ReferenceTriggerActionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OnDeleteActionContext extends ReferenceTriggerActionContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DRDSSQLStatementParser.DELETE, 0); }
		public ReferenceControlTypeContext referenceControlType() {
			return getRuleContext(ReferenceControlTypeContext.class,0);
		}
		public OnDeleteActionContext(ReferenceTriggerActionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOnDeleteAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OnUpdateActionContext extends ReferenceTriggerActionContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(DRDSSQLStatementParser.UPDATE, 0); }
		public ReferenceControlTypeContext referenceControlType() {
			return getRuleContext(ReferenceControlTypeContext.class,0);
		}
		public OnUpdateActionContext(ReferenceTriggerActionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOnUpdateAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceTriggerActionContext referenceTriggerAction() throws RecognitionException {
		ReferenceTriggerActionContext _localctx = new ReferenceTriggerActionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_referenceTriggerAction);
		try {
			setState(1553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				_localctx = new OnDeleteActionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1547);
				match(ON);
				setState(1548);
				match(DELETE);
				setState(1549);
				referenceControlType();
				}
				break;
			case 2:
				_localctx = new OnUpdateActionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1550);
				match(ON);
				setState(1551);
				match(UPDATE);
				setState(1552);
				referenceControlType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(DRDSSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DRDSSQLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(DRDSSQLStatementParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(DRDSSQLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DRDSSQLStatementParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_referenceControlType);
		try {
			setState(1561);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1555);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1556);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1557);
				match(SET);
				setState(1558);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1559);
				match(NO);
				setState(1560);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public AutoIncrementOptionExprContext autoIncrementOptionExpr() {
			return getRuleContext(AutoIncrementOptionExprContext.class,0);
		}
		public AvgRowLengthOptionExprContext avgRowLengthOptionExpr() {
			return getRuleContext(AvgRowLengthOptionExprContext.class,0);
		}
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CharsetOptionExprContext charsetOptionExpr() {
			return getRuleContext(CharsetOptionExprContext.class,0);
		}
		public ChecksumOptionExprContext checksumOptionExpr() {
			return getRuleContext(ChecksumOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public CommentOptionExprContext commentOptionExpr() {
			return getRuleContext(CommentOptionExprContext.class,0);
		}
		public CompressionOptionExprContext compressionOptionExpr() {
			return getRuleContext(CompressionOptionExprContext.class,0);
		}
		public ConnectionOptionExprContext connectionOptionExpr() {
			return getRuleContext(ConnectionOptionExprContext.class,0);
		}
		public DataDirectoryOptionExprContext dataDirectoryOptionExpr() {
			return getRuleContext(DataDirectoryOptionExprContext.class,0);
		}
		public IndexDirectoryOptionExprContext indexDirectoryOptionExpr() {
			return getRuleContext(IndexDirectoryOptionExprContext.class,0);
		}
		public DelayKeyWriteOptionExprContext delayKeyWriteOptionExpr() {
			return getRuleContext(DelayKeyWriteOptionExprContext.class,0);
		}
		public EncryptionOptionExprContext encryptionOptionExpr() {
			return getRuleContext(EncryptionOptionExprContext.class,0);
		}
		public EngineOptionExprContext engineOptionExpr() {
			return getRuleContext(EngineOptionExprContext.class,0);
		}
		public InsertMethodOptionExprContext insertMethodOptionExpr() {
			return getRuleContext(InsertMethodOptionExprContext.class,0);
		}
		public KeyBlockSizeOptionExprContext keyBlockSizeOptionExpr() {
			return getRuleContext(KeyBlockSizeOptionExprContext.class,0);
		}
		public MaxRowsOptionExprContext maxRowsOptionExpr() {
			return getRuleContext(MaxRowsOptionExprContext.class,0);
		}
		public MinRowsOptionExprContext minRowsOptionExpr() {
			return getRuleContext(MinRowsOptionExprContext.class,0);
		}
		public PackKeysOptionExprContext packKeysOptionExpr() {
			return getRuleContext(PackKeysOptionExprContext.class,0);
		}
		public PasswordOptionExprContext passwordOptionExpr() {
			return getRuleContext(PasswordOptionExprContext.class,0);
		}
		public RowFormatOptionExprContext rowFormatOptionExpr() {
			return getRuleContext(RowFormatOptionExprContext.class,0);
		}
		public StatsAutoRecalcOptionExprContext statsAutoRecalcOptionExpr() {
			return getRuleContext(StatsAutoRecalcOptionExprContext.class,0);
		}
		public StatsPersistentOptionExprContext statsPersistentOptionExpr() {
			return getRuleContext(StatsPersistentOptionExprContext.class,0);
		}
		public StatsSamplePageOptionExprContext statsSamplePageOptionExpr() {
			return getRuleContext(StatsSamplePageOptionExprContext.class,0);
		}
		public TablespaceOptionExprContext tablespaceOptionExpr() {
			return getRuleContext(TablespaceOptionExprContext.class,0);
		}
		public UnionOptionExprContext unionOptionExpr() {
			return getRuleContext(UnionOptionExprContext.class,0);
		}
		public BroadcastExprContext broadcastExpr() {
			return getRuleContext(BroadcastExprContext.class,0);
		}
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_tableOption);
		try {
			setState(1590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1563);
				autoIncrementOptionExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1564);
				avgRowLengthOptionExpr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1565);
				characterSetOptionExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1566);
				charsetOptionExpr();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1567);
				checksumOptionExpr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1568);
				collateOptionExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1569);
				commentOptionExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1570);
				compressionOptionExpr();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1571);
				connectionOptionExpr();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1572);
				dataDirectoryOptionExpr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1573);
				indexDirectoryOptionExpr();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1574);
				delayKeyWriteOptionExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1575);
				encryptionOptionExpr();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1576);
				engineOptionExpr();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1577);
				insertMethodOptionExpr();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1578);
				keyBlockSizeOptionExpr();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1579);
				maxRowsOptionExpr();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1580);
				minRowsOptionExpr();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1581);
				packKeysOptionExpr();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1582);
				passwordOptionExpr();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1583);
				rowFormatOptionExpr();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1584);
				statsAutoRecalcOptionExpr();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1585);
				statsPersistentOptionExpr();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1586);
				statsSamplePageOptionExpr();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1587);
				tablespaceOptionExpr();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1588);
				unionOptionExpr();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1589);
				broadcastExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IDBPartitionByContext extends ParserRuleContext {
		public IDBPartitionByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iDBPartitionBy; }
	 
		public IDBPartitionByContext() { }
		public void copyFrom(IDBPartitionByContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DBPartitionByHashContext extends IDBPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public TerminalNode DBPARTITION() { return getToken(DRDSSQLStatementParser.DBPARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode HASH() { return getToken(DRDSSQLStatementParser.HASH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ITBPartitionByContext iTBPartitionBy() {
			return getRuleContext(ITBPartitionByContext.class,0);
		}
		public DBPartitionByHashContext(IDBPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDBPartitionByHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DBPartitionByRangeHashContext extends IDBPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public TerminalNode DBPARTITION() { return getToken(DRDSSQLStatementParser.DBPARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode RANGE_HASH() { return getToken(DRDSSQLStatementParser.RANGE_HASH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ITBPartitionByContext iTBPartitionBy() {
			return getRuleContext(ITBPartitionByContext.class,0);
		}
		public DBPartitionByRangeHashContext(IDBPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDBPartitionByRangeHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IDBPartitionByContext iDBPartitionBy() throws RecognitionException {
		IDBPartitionByContext _localctx = new IDBPartitionByContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_iDBPartitionBy);
		int _la;
		try {
			setState(1610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				_localctx = new DBPartitionByHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1592);
				match(DBPARTITION);
				setState(1593);
				match(BY);
				setState(1594);
				match(HASH);
				setState(1595);
				match(LEFT_PAREN);
				setState(1596);
				((DBPartitionByHashContext)_localctx).expr = expr(0);
				((DBPartitionByHashContext)_localctx).columns.add(((DBPartitionByHashContext)_localctx).expr);
				setState(1597);
				match(RIGHT_PAREN);
				setState(1599);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBPARTITION) {
					{
					setState(1598);
					iTBPartitionBy();
					}
				}

				}
				break;
			case 2:
				_localctx = new DBPartitionByRangeHashContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1601);
				match(DBPARTITION);
				setState(1602);
				match(BY);
				setState(1603);
				match(RANGE_HASH);
				setState(1604);
				match(LEFT_PAREN);
				setState(1605);
				((DBPartitionByRangeHashContext)_localctx).expr = expr(0);
				((DBPartitionByRangeHashContext)_localctx).columns.add(((DBPartitionByRangeHashContext)_localctx).expr);
				setState(1606);
				match(RIGHT_PAREN);
				setState(1608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBPARTITION) {
					{
					setState(1607);
					iTBPartitionBy();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ITBPartitionByContext extends ParserRuleContext {
		public ITBPartitionByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iTBPartitionBy; }
	 
		public ITBPartitionByContext() { }
		public void copyFrom(ITBPartitionByContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TBPartitionByHashContext extends ITBPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext tbPartitionsNum;
		public TerminalNode TBPARTITION() { return getToken(DRDSSQLStatementParser.TBPARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode HASH() { return getToken(DRDSSQLStatementParser.HASH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TBPARTITIONS() { return getToken(DRDSSQLStatementParser.TBPARTITIONS, 0); }
		public TBPartitionByHashContext(ITBPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTBPartitionByHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TBPartitionByMMContext extends ITBPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext tbPartitionsNum;
		public TerminalNode TBPARTITION() { return getToken(DRDSSQLStatementParser.TBPARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode MM() { return getToken(DRDSSQLStatementParser.MM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TBPARTITIONS() { return getToken(DRDSSQLStatementParser.TBPARTITIONS, 0); }
		public TBPartitionByMMContext(ITBPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTBPartitionByMM(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TBPartitionByDDContext extends ITBPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext tbPartitionsNum;
		public TerminalNode TBPARTITION() { return getToken(DRDSSQLStatementParser.TBPARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode DD() { return getToken(DRDSSQLStatementParser.DD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TBPARTITIONS() { return getToken(DRDSSQLStatementParser.TBPARTITIONS, 0); }
		public TBPartitionByDDContext(ITBPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTBPartitionByDD(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TBPartitionByWeekContext extends ITBPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext tbPartitionsNum;
		public TerminalNode TBPARTITION() { return getToken(DRDSSQLStatementParser.TBPARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode WEEK() { return getToken(DRDSSQLStatementParser.WEEK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TBPARTITIONS() { return getToken(DRDSSQLStatementParser.TBPARTITIONS, 0); }
		public TBPartitionByWeekContext(ITBPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTBPartitionByWeek(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TBPartitionByRangeHashContext extends ITBPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext tbPartitionsNum;
		public TerminalNode TBPARTITION() { return getToken(DRDSSQLStatementParser.TBPARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode RANGE_HASH() { return getToken(DRDSSQLStatementParser.RANGE_HASH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TBPARTITIONS() { return getToken(DRDSSQLStatementParser.TBPARTITIONS, 0); }
		public TBPartitionByRangeHashContext(ITBPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTBPartitionByRangeHash(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TBPartitionByMMDDContext extends ITBPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext tbPartitionsNum;
		public TerminalNode TBPARTITION() { return getToken(DRDSSQLStatementParser.TBPARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode MMDD() { return getToken(DRDSSQLStatementParser.MMDD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TBPARTITIONS() { return getToken(DRDSSQLStatementParser.TBPARTITIONS, 0); }
		public TBPartitionByMMDDContext(ITBPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTBPartitionByMMDD(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ITBPartitionByContext iTBPartitionBy() throws RecognitionException {
		ITBPartitionByContext _localctx = new ITBPartitionByContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_iTBPartitionBy);
		int _la;
		try {
			setState(1672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				_localctx = new TBPartitionByHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1612);
				match(TBPARTITION);
				setState(1613);
				match(BY);
				setState(1614);
				match(HASH);
				setState(1615);
				match(LEFT_PAREN);
				setState(1616);
				((TBPartitionByHashContext)_localctx).expr = expr(0);
				((TBPartitionByHashContext)_localctx).columns.add(((TBPartitionByHashContext)_localctx).expr);
				setState(1617);
				match(RIGHT_PAREN);
				setState(1620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBPARTITIONS) {
					{
					setState(1618);
					match(TBPARTITIONS);
					setState(1619);
					((TBPartitionByHashContext)_localctx).tbPartitionsNum = expr(0);
					}
				}

				}
				break;
			case 2:
				_localctx = new TBPartitionByRangeHashContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1622);
				match(TBPARTITION);
				setState(1623);
				match(BY);
				setState(1624);
				match(RANGE_HASH);
				setState(1625);
				match(LEFT_PAREN);
				setState(1626);
				((TBPartitionByRangeHashContext)_localctx).expr = expr(0);
				((TBPartitionByRangeHashContext)_localctx).columns.add(((TBPartitionByRangeHashContext)_localctx).expr);
				setState(1627);
				match(RIGHT_PAREN);
				setState(1630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBPARTITIONS) {
					{
					setState(1628);
					match(TBPARTITIONS);
					setState(1629);
					((TBPartitionByRangeHashContext)_localctx).tbPartitionsNum = expr(0);
					}
				}

				}
				break;
			case 3:
				_localctx = new TBPartitionByMMContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1632);
				match(TBPARTITION);
				setState(1633);
				match(BY);
				setState(1634);
				match(MM);
				setState(1635);
				match(LEFT_PAREN);
				setState(1636);
				((TBPartitionByMMContext)_localctx).expr = expr(0);
				((TBPartitionByMMContext)_localctx).columns.add(((TBPartitionByMMContext)_localctx).expr);
				setState(1637);
				match(RIGHT_PAREN);
				setState(1640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBPARTITIONS) {
					{
					setState(1638);
					match(TBPARTITIONS);
					setState(1639);
					((TBPartitionByMMContext)_localctx).tbPartitionsNum = expr(0);
					}
				}

				}
				break;
			case 4:
				_localctx = new TBPartitionByDDContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1642);
				match(TBPARTITION);
				setState(1643);
				match(BY);
				setState(1644);
				match(DD);
				setState(1645);
				match(LEFT_PAREN);
				setState(1646);
				((TBPartitionByDDContext)_localctx).expr = expr(0);
				((TBPartitionByDDContext)_localctx).columns.add(((TBPartitionByDDContext)_localctx).expr);
				setState(1647);
				match(RIGHT_PAREN);
				setState(1650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBPARTITIONS) {
					{
					setState(1648);
					match(TBPARTITIONS);
					setState(1649);
					((TBPartitionByDDContext)_localctx).tbPartitionsNum = expr(0);
					}
				}

				}
				break;
			case 5:
				_localctx = new TBPartitionByWeekContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1652);
				match(TBPARTITION);
				setState(1653);
				match(BY);
				setState(1654);
				match(WEEK);
				setState(1655);
				match(LEFT_PAREN);
				setState(1656);
				((TBPartitionByWeekContext)_localctx).expr = expr(0);
				((TBPartitionByWeekContext)_localctx).columns.add(((TBPartitionByWeekContext)_localctx).expr);
				setState(1657);
				match(RIGHT_PAREN);
				setState(1660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBPARTITIONS) {
					{
					setState(1658);
					match(TBPARTITIONS);
					setState(1659);
					((TBPartitionByWeekContext)_localctx).tbPartitionsNum = expr(0);
					}
				}

				}
				break;
			case 6:
				_localctx = new TBPartitionByMMDDContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1662);
				match(TBPARTITION);
				setState(1663);
				match(BY);
				setState(1664);
				match(MMDD);
				setState(1665);
				match(LEFT_PAREN);
				setState(1666);
				((TBPartitionByMMDDContext)_localctx).expr = expr(0);
				((TBPartitionByMMDDContext)_localctx).columns.add(((TBPartitionByMMDDContext)_localctx).expr);
				setState(1667);
				match(RIGHT_PAREN);
				setState(1670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TBPARTITIONS) {
					{
					setState(1668);
					match(TBPARTITIONS);
					setState(1669);
					((TBPartitionByMMDDContext)_localctx).tbPartitionsNum = expr(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceStatementContext extends ParserRuleContext {
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceStatementContext createTablespaceStatement() throws RecognitionException {
		CreateTablespaceStatementContext _localctx = new CreateTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_createTablespaceStatement);
		try {
			setState(1676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1674);
				createTablespaceInnodb();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1675);
				createTablespaceNdb();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public ExprContext datafile;
		public ExprContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DRDSSQLStatementParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(DRDSSQLStatementParser.DATAFILE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(DRDSSQLStatementParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(DRDSSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(DRDSSQLStatementParser.EQUALS_OP, i);
		}
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1678);
			match(CREATE);
			setState(1679);
			match(TABLESPACE);
			setState(1680);
			nameIdentifier();
			setState(1681);
			match(ADD);
			setState(1682);
			match(DATAFILE);
			setState(1683);
			((CreateTablespaceInnodbContext)_localctx).datafile = expr(0);
			setState(1687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(1684);
				match(FILE_BLOCK_SIZE);
				setState(1685);
				match(EQUALS_OP);
				setState(1686);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = expr(0);
				}
				break;
			}
			setState(1694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1689);
				match(ENGINE);
				setState(1691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1690);
					match(EQUALS_OP);
					}
				}

				setState(1693);
				engineName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public ExprContext datafile;
		public ExprContext extentSize;
		public ExprContext initialSize;
		public ExprContext autoextendSize;
		public ExprContext maxSize;
		public ExprContext comment;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode ADD() { return getToken(DRDSSQLStatementParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(DRDSSQLStatementParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(DRDSSQLStatementParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(DRDSSQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(DRDSSQLStatementParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(DRDSSQLStatementParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(DRDSSQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(DRDSSQLStatementParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(DRDSSQLStatementParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(DRDSSQLStatementParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(DRDSSQLStatementParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(DRDSSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(DRDSSQLStatementParser.EQUALS_OP, i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1696);
			match(CREATE);
			setState(1697);
			match(TABLESPACE);
			setState(1698);
			nameIdentifier();
			setState(1699);
			match(ADD);
			setState(1700);
			match(DATAFILE);
			setState(1701);
			((CreateTablespaceNdbContext)_localctx).datafile = expr(0);
			setState(1702);
			match(USE);
			setState(1703);
			match(LOGFILE);
			setState(1704);
			match(GROUP);
			setState(1705);
			nameIdentifier();
			setState(1711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1706);
				match(EXTENT_SIZE);
				setState(1708);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1707);
					match(EQUALS_OP);
					}
				}

				setState(1710);
				((CreateTablespaceNdbContext)_localctx).extentSize = expr(0);
				}
			}

			setState(1718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1713);
				match(INITIAL_SIZE);
				setState(1715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1714);
					match(EQUALS_OP);
					}
				}

				setState(1717);
				((CreateTablespaceNdbContext)_localctx).initialSize = expr(0);
				}
			}

			setState(1725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(1720);
				match(AUTOEXTEND_SIZE);
				setState(1722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1721);
					match(EQUALS_OP);
					}
				}

				setState(1724);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = expr(0);
				}
			}

			setState(1732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(1727);
				match(MAX_SIZE);
				setState(1729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1728);
					match(EQUALS_OP);
					}
				}

				setState(1731);
				((CreateTablespaceNdbContext)_localctx).maxSize = expr(0);
				}
			}

			setState(1739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1734);
				match(NODEGROUP);
				setState(1736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1735);
					match(EQUALS_OP);
					}
				}

				setState(1738);
				nameIdentifier();
				}
			}

			setState(1742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1741);
				match(WAIT);
				}
			}

			setState(1749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1744);
				match(COMMENT);
				setState(1746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1745);
					match(EQUALS_OP);
					}
				}

				setState(1748);
				((CreateTablespaceNdbContext)_localctx).comment = expr(0);
				}
			}

			setState(1751);
			match(ENGINE);
			setState(1753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(1752);
				match(EQUALS_OP);
				}
			}

			setState(1755);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerStatementContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public Token triggerTime;
		public Token triggerEvent;
		public NameIdentifierContext onExpr;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(DRDSSQLStatementParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(DRDSSQLStatementParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(DRDSSQLStatementParser.ROW, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(DRDSSQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(DRDSSQLStatementParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(DRDSSQLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(DRDSSQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(DRDSSQLStatementParser.DELETE, 0); }
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public TriggerOrderingClauseContext triggerOrderingClause() {
			return getRuleContext(TriggerOrderingClauseContext.class,0);
		}
		public CreateTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTriggerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerStatementContext createTriggerStatement() throws RecognitionException {
		CreateTriggerStatementContext _localctx = new CreateTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_createTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1757);
			match(CREATE);
			setState(1759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1758);
				definerOptionExpr();
				}
			}

			setState(1761);
			match(TRIGGER);
			setState(1762);
			((CreateTriggerStatementContext)_localctx).name = nameIdentifier();
			setState(1763);
			((CreateTriggerStatementContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerStatementContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1764);
			((CreateTriggerStatementContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerStatementContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1765);
			match(ON);
			setState(1766);
			((CreateTriggerStatementContext)_localctx).onExpr = nameIdentifier();
			setState(1767);
			match(FOR);
			setState(1768);
			match(EACH);
			setState(1769);
			match(ROW);
			setState(1771);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				setState(1770);
				triggerOrderingClause();
				}
				break;
			}
			setState(1773);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinerOptionExprContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(DRDSSQLStatementParser.DEFINER, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DRDSSQLStatementParser.CURRENT_USER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public DefinerOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definerOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDefinerOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinerOptionExprContext definerOptionExpr() throws RecognitionException {
		DefinerOptionExprContext _localctx = new DefinerOptionExprContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_definerOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1775);
			match(DEFINER);
			setState(1776);
			match(EQUALS_OP);
			setState(1783);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_USER:
				{
				setState(1777);
				match(CURRENT_USER);
				setState(1780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1778);
					match(LEFT_PAREN);
					setState(1779);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case INSERT:
			case LEFT:
			case REPLACE:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SUM:
			case SUBSTR:
			case SUBSTRING:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case MOD:
			case REVERSE:
			case ASTERISK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case MID:
				{
				setState(1782);
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerOrderingClauseContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(DRDSSQLStatementParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(DRDSSQLStatementParser.PRECEDES, 0); }
		public TriggerOrderingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOrderingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTriggerOrderingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOrderingClauseContext triggerOrderingClause() throws RecognitionException {
		TriggerOrderingClauseContext _localctx = new TriggerOrderingClauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_triggerOrderingClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1785);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1786);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewStatementContext extends ParserRuleContext {
		public Token secContext;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(DRDSSQLStatementParser.VIEW, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public OrReplaceContext orReplace() {
			return getRuleContext(OrReplaceContext.class,0);
		}
		public AlgorithmOptionExprContext algorithmOptionExpr() {
			return getRuleContext(AlgorithmOptionExprContext.class,0);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public TerminalNode SQL() { return getToken(DRDSSQLStatementParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(DRDSSQLStatementParser.SECURITY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public WithCheckOptionContext withCheckOption() {
			return getRuleContext(WithCheckOptionContext.class,0);
		}
		public TerminalNode DEFINER() { return getToken(DRDSSQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(DRDSSQLStatementParser.INVOKER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public CreateViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createViewStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewStatementContext createViewStatement() throws RecognitionException {
		CreateViewStatementContext _localctx = new CreateViewStatementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_createViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1788);
			match(CREATE);
			setState(1790);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1789);
				orReplace();
				}
			}

			setState(1793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(1792);
				algorithmOptionExpr();
				}
			}

			setState(1796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1795);
				definerOptionExpr();
				}
			}

			setState(1801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(1798);
				match(SQL);
				setState(1799);
				match(SECURITY);
				setState(1800);
				((CreateViewStatementContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewStatementContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1803);
			match(VIEW);
			setState(1804);
			nameIdentifier();
			setState(1816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1805);
				match(LEFT_PAREN);
				setState(1806);
				columnDefinition();
				setState(1811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1807);
					match(COMMA);
					setState(1808);
					columnDefinition();
					}
					}
					setState(1813);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1814);
				match(RIGHT_PAREN);
				}
			}

			setState(1818);
			match(AS);
			setState(1819);
			iSelectQuery();
			setState(1821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1820);
				withCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithCheckOptionContext extends ParserRuleContext {
		public Token levels;
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(DRDSSQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(DRDSSQLStatementParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(DRDSSQLStatementParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public WithCheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withCheckOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWithCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithCheckOptionContext withCheckOption() throws RecognitionException {
		WithCheckOptionContext _localctx = new WithCheckOptionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_withCheckOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1823);
			match(WITH);
			setState(1825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED || _la==LOCAL) {
				{
				setState(1824);
				((WithCheckOptionContext)_localctx).levels = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADED || _la==LOCAL) ) {
					((WithCheckOptionContext)_localctx).levels = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1827);
			match(CHECK);
			setState(1828);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_createDatabaseOption);
		try {
			setState(1832);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1830);
				characterSetOptionExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1831);
				collateOptionExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleexprContext extends ParserRuleContext {
		public ScheduleexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleexpr; }
	 
		public ScheduleexprContext() { }
		public void copyFrom(ScheduleexprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleexprContext {
		public TerminalNode AT() { return getToken(DRDSSQLStatementParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleexprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleexprContext {
		public TimestampValueContext start;
		public ExprContext expr;
		public List<ExprContext> startIntervals = new ArrayList<ExprContext>();
		public TimestampValueContext end;
		public List<ExprContext> endIntervals = new ArrayList<ExprContext>();
		public TerminalNode EVERY() { return getToken(DRDSSQLStatementParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode STARTS() { return getToken(DRDSSQLStatementParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(DRDSSQLStatementParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public IntervalScheduleContext(ScheduleexprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleexprContext scheduleexpr() throws RecognitionException {
		ScheduleexprContext _localctx = new ScheduleexprContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_scheduleexpr);
		try {
			int _alt;
			setState(1868);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1834);
				match(AT);
				setState(1835);
				timestampValue();
				setState(1839);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1836);
						expr(0);
						}
						} 
					}
					setState(1841);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1842);
				match(EVERY);
				setState(1845);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
				case 1:
					{
					setState(1843);
					expr(0);
					}
					break;
				case 2:
					{
					setState(1844);
					expr(0);
					}
					break;
				}
				setState(1847);
				intervalType();
				setState(1856);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
				case 1:
					{
					setState(1848);
					match(STARTS);
					setState(1849);
					((IntervalScheduleContext)_localctx).start = timestampValue();
					setState(1853);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
					while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1850);
							((IntervalScheduleContext)_localctx).expr = expr(0);
							((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).expr);
							}
							} 
						}
						setState(1855);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,160,_ctx);
					}
					}
					break;
				}
				setState(1866);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					setState(1858);
					match(ENDS);
					setState(1859);
					((IntervalScheduleContext)_localctx).end = timestampValue();
					setState(1863);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
					while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1860);
							((IntervalScheduleContext)_localctx).expr = expr(0);
							((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).expr);
							}
							} 
						}
						setState(1865);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DRDSSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_timestampValue);
		try {
			setState(1874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1870);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1871);
				expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1872);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1873);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(DRDSSQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DRDSSQLStatementParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(DRDSSQLStatementParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_enableType);
		try {
			setState(1881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1876);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1877);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1878);
				match(DISABLE);
				setState(1879);
				match(ON);
				setState(1880);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public IndexOptionKeyBlockSizeContext indexOptionKeyBlockSize() {
			return getRuleContext(IndexOptionKeyBlockSizeContext.class,0);
		}
		public IndexOptionUsingBtreeContext indexOptionUsingBtree() {
			return getRuleContext(IndexOptionUsingBtreeContext.class,0);
		}
		public IndexOptionUsingHashContext indexOptionUsingHash() {
			return getRuleContext(IndexOptionUsingHashContext.class,0);
		}
		public IndexOptionWithParserContext indexOptionWithParser() {
			return getRuleContext(IndexOptionWithParserContext.class,0);
		}
		public IndexAttributeVisibleContext indexAttributeVisible() {
			return getRuleContext(IndexAttributeVisibleContext.class,0);
		}
		public IndexAttributeInvisibleContext indexAttributeInvisible() {
			return getRuleContext(IndexAttributeInvisibleContext.class,0);
		}
		public IndexOptionCommentOptionContext indexOptionCommentOption() {
			return getRuleContext(IndexOptionCommentOptionContext.class,0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_indexOption);
		try {
			setState(1890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1883);
				indexOptionKeyBlockSize();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1884);
				indexOptionUsingBtree();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1885);
				indexOptionUsingHash();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1886);
				indexOptionWithParser();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1887);
				indexAttributeVisible();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1888);
				indexAttributeInvisible();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1889);
				indexOptionCommentOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionKeyBlockSizeContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(DRDSSQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public IndexOptionKeyBlockSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionKeyBlockSize; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionKeyBlockSizeContext indexOptionKeyBlockSize() throws RecognitionException {
		IndexOptionKeyBlockSizeContext _localctx = new IndexOptionKeyBlockSizeContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_indexOptionKeyBlockSize);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1892);
			match(KEY_BLOCK_SIZE);
			setState(1894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(1893);
				match(EQUALS_OP);
				}
			}

			setState(1896);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionUsingBtreeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(DRDSSQLStatementParser.BTREE, 0); }
		public IndexOptionUsingBtreeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionUsingBtree; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionUsingBtree(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionUsingBtreeContext indexOptionUsingBtree() throws RecognitionException {
		IndexOptionUsingBtreeContext _localctx = new IndexOptionUsingBtreeContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_indexOptionUsingBtree);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1898);
			match(USING);
			setState(1899);
			match(BTREE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionUsingHashContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public TerminalNode HASH() { return getToken(DRDSSQLStatementParser.HASH, 0); }
		public IndexOptionUsingHashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionUsingHash; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionUsingHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionUsingHashContext indexOptionUsingHash() throws RecognitionException {
		IndexOptionUsingHashContext _localctx = new IndexOptionUsingHashContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_indexOptionUsingHash);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1901);
			match(USING);
			setState(1902);
			match(HASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionWithParserContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(DRDSSQLStatementParser.PARSER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IndexOptionWithParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionWithParser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionWithParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionWithParserContext indexOptionWithParser() throws RecognitionException {
		IndexOptionWithParserContext _localctx = new IndexOptionWithParserContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_indexOptionWithParser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1904);
			match(WITH);
			setState(1905);
			match(PARSER);
			setState(1906);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexAttributeVisibleContext extends ParserRuleContext {
		public TerminalNode VISIBLE() { return getToken(DRDSSQLStatementParser.VISIBLE, 0); }
		public IndexAttributeVisibleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexAttributeVisible; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexAttributeVisible(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexAttributeVisibleContext indexAttributeVisible() throws RecognitionException {
		IndexAttributeVisibleContext _localctx = new IndexAttributeVisibleContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_indexAttributeVisible);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1908);
			match(VISIBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexAttributeInvisibleContext extends ParserRuleContext {
		public TerminalNode INVISIBLE() { return getToken(DRDSSQLStatementParser.INVISIBLE, 0); }
		public IndexAttributeInvisibleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexAttributeInvisible; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexAttributeInvisible(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexAttributeInvisibleContext indexAttributeInvisible() throws RecognitionException {
		IndexAttributeInvisibleContext _localctx = new IndexAttributeInvisibleContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_indexAttributeInvisible);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1910);
			match(INVISIBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionCommentOptionContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IndexOptionCommentOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionCommentOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionCommentOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionCommentOptionContext indexOptionCommentOption() throws RecognitionException {
		IndexOptionCommentOptionContext _localctx = new IndexOptionCommentOptionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_indexOptionCommentOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1912);
			match(COMMENT);
			setState(1913);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclarationContext extends ParserRuleContext {
		public Token parameterModel;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(DRDSSQLStatementParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(DRDSSQLStatementParser.INOUT, 0); }
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitParameterDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclarationContext parameterDeclaration() throws RecognitionException {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_parameterDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (IN - 70)) | (1L << (INOUT - 70)) | (1L << (OUT - 70)))) != 0)) {
				{
				setState(1915);
				((ParameterDeclarationContext)_localctx).parameterModel = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (IN - 70)) | (1L << (INOUT - 70)) | (1L << (OUT - 70)))) != 0)) ) {
					((ParameterDeclarationContext)_localctx).parameterModel = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1918);
			nameIdentifier();
			setState(1919);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(DRDSSQLStatementParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(DRDSSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(DRDSSQLStatementParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(DRDSSQLStatementParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(DRDSSQLStatementParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(DRDSSQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(DRDSSQLStatementParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(DRDSSQLStatementParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(DRDSSQLStatementParser.SQL, 0); }
		public TerminalNode NO() { return getToken(DRDSSQLStatementParser.NO, 0); }
		public TerminalNode READS() { return getToken(DRDSSQLStatementParser.READS, 0); }
		public TerminalNode DATA() { return getToken(DRDSSQLStatementParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(DRDSSQLStatementParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_routineOption);
		int _la;
		try {
			setState(1944);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1921);
				match(COMMENT);
				setState(1922);
				expr(0);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1923);
				match(LANGUAGE);
				setState(1924);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1925);
					match(NOT);
					}
				}

				setState(1928);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1939);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(1929);
					match(CONTAINS);
					setState(1930);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(1931);
					match(NO);
					setState(1932);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(1933);
					match(READS);
					setState(1934);
					match(SQL);
					setState(1935);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(1936);
					match(MODIFIES);
					setState(1937);
					match(SQL);
					setState(1938);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1941);
				match(SQL);
				setState(1942);
				match(SECURITY);
				setState(1943);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStatementContext extends ParserRuleContext {
		public AlterDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStatement; }
	 
		public AlterDatabaseStatementContext() { }
		public void copyFrom(AlterDatabaseStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseStatementContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(DRDSSQLStatementParser.DATABASE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(DRDSSQLStatementParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(DRDSSQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(DRDSSQLStatementParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(DRDSSQLStatementParser.NAME, 0); }
		public AlterUpgradeNameContext(AlterDatabaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseStatementContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(DRDSSQLStatementParser.DATABASE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStatementContext alterDatabaseStatement() throws RecognitionException {
		AlterDatabaseStatementContext _localctx = new AlterDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterDatabaseStatement);
		int _la;
		try {
			setState(1964);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,175,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1946);
				match(ALTER);
				setState(1947);
				match(DATABASE);
				setState(1949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(1948);
					nameIdentifier();
					}
				}

				setState(1952); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1951);
					createDatabaseOption();
					}
					}
					setState(1954); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1956);
				match(ALTER);
				setState(1957);
				match(DATABASE);
				setState(1958);
				nameIdentifier();
				setState(1959);
				match(UPGRADE);
				setState(1960);
				match(DATA);
				setState(1961);
				match(DIRECTORY);
				setState(1962);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSchemaStatementContext extends ParserRuleContext {
		public AlterSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSchemaStatement; }
	 
		public AlterSchemaStatementContext() { }
		public void copyFrom(AlterSchemaStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterSchemaUpgradeNameContext extends AlterSchemaStatementContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(DRDSSQLStatementParser.SCHEMA, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(DRDSSQLStatementParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(DRDSSQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(DRDSSQLStatementParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(DRDSSQLStatementParser.NAME, 0); }
		public AlterSchemaUpgradeNameContext(AlterSchemaStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterSchemaUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleSchemaContext extends AlterSchemaStatementContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(DRDSSQLStatementParser.SCHEMA, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleSchemaContext(AlterSchemaStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterSimpleSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSchemaStatementContext alterSchemaStatement() throws RecognitionException {
		AlterSchemaStatementContext _localctx = new AlterSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterSchemaStatement);
		int _la;
		try {
			setState(1984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleSchemaContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1966);
				match(ALTER);
				setState(1967);
				match(SCHEMA);
				setState(1969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(1968);
					nameIdentifier();
					}
				}

				setState(1972); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1971);
					createDatabaseOption();
					}
					}
					setState(1974); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) );
				}
				break;
			case 2:
				_localctx = new AlterSchemaUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1976);
				match(ALTER);
				setState(1977);
				match(SCHEMA);
				setState(1978);
				nameIdentifier();
				setState(1979);
				match(UPGRADE);
				setState(1980);
				match(DATA);
				setState(1981);
				match(DIRECTORY);
				setState(1982);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(DRDSSQLStatementParser.EVENT, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(DRDSSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DRDSSQLStatementParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(DRDSSQLStatementParser.SCHEDULE, 0); }
		public ScheduleexprContext scheduleexpr() {
			return getRuleContext(ScheduleexprContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(DRDSSQLStatementParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(DRDSSQLStatementParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(DRDSSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(DRDSSQLStatementParser.DO, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public AlterEventStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterEventStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventStatementContext alterEventStatement() throws RecognitionException {
		AlterEventStatementContext _localctx = new AlterEventStatementContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterEventStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1986);
			match(ALTER);
			setState(1988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1987);
				definerOptionExpr();
				}
			}

			setState(1990);
			match(EVENT);
			setState(1991);
			nameIdentifier();
			setState(1995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(1992);
				match(ON);
				setState(1993);
				match(SCHEDULE);
				setState(1994);
				scheduleexpr();
				}
				break;
			}
			setState(2003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1997);
				match(ON);
				setState(1998);
				match(COMPLETION);
				setState(2000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1999);
					match(NOT);
					}
				}

				setState(2002);
				match(PRESERVE);
				}
			}

			setState(2008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				setState(2005);
				match(RENAME);
				setState(2006);
				match(TO);
				setState(2007);
				nameIdentifier();
				}
				break;
			}
			setState(2011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				setState(2010);
				enableType();
				}
				break;
			}
			setState(2015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				setState(2013);
				match(COMMENT);
				setState(2014);
				expr(0);
				}
				break;
			}
			setState(2019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2017);
				match(DO);
				setState(2018);
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStatementContext alterFunctionStatement() throws RecognitionException {
		AlterFunctionStatementContext _localctx = new AlterFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterFunctionStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2021);
			match(ALTER);
			setState(2022);
			match(FUNCTION);
			setState(2023);
			nameIdentifier();
			setState(2027);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2024);
					routineOption();
					}
					} 
				}
				setState(2029);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,187,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(DRDSSQLStatementParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(DRDSSQLStatementParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(DRDSSQLStatementParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(DRDSSQLStatementParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public AlterInstanceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstanceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterInstanceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceStatementContext alterInstanceStatement() throws RecognitionException {
		AlterInstanceStatementContext _localctx = new AlterInstanceStatementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterInstanceStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2030);
			match(ALTER);
			setState(2031);
			match(INSTANCE);
			setState(2032);
			match(ROTATE);
			setState(2033);
			match(INNODB);
			setState(2034);
			match(MASTER);
			setState(2035);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(DRDSSQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(DRDSSQLStatementParser.GROUP, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DRDSSQLStatementParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(DRDSSQLStatementParser.UNDOFILE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(DRDSSQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode WAIT() { return getToken(DRDSSQLStatementParser.WAIT, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(DRDSSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(DRDSSQLStatementParser.EQUALS_OP, i);
		}
		public AlterLogfileGroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterLogfileGroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupStatementContext alterLogfileGroupStatement() throws RecognitionException {
		AlterLogfileGroupStatementContext _localctx = new AlterLogfileGroupStatementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterLogfileGroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2037);
			match(ALTER);
			setState(2038);
			match(LOGFILE);
			setState(2039);
			match(GROUP);
			setState(2040);
			nameIdentifier();
			setState(2041);
			match(ADD);
			setState(2042);
			match(UNDOFILE);
			setState(2043);
			expr(0);
			setState(2049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2044);
				match(INITIAL_SIZE);
				setState(2046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2045);
					match(EQUALS_OP);
					}
				}

				setState(2048);
				expr(0);
				}
			}

			setState(2052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2051);
				match(WAIT);
				}
			}

			setState(2054);
			match(ENGINE);
			setState(2056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(2055);
				match(EQUALS_OP);
				}
			}

			setState(2058);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(DRDSSQLStatementParser.PROCEDURE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureStatementContext alterProcedureStatement() throws RecognitionException {
		AlterProcedureStatementContext _localctx = new AlterProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterProcedureStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			match(ALTER);
			setState(2061);
			match(PROCEDURE);
			setState(2062);
			nameIdentifier();
			setState(2066);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2063);
					routineOption();
					}
					} 
				}
				setState(2068);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,192,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(DRDSSQLStatementParser.SERVER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(DRDSSQLStatementParser.OPTIONS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterServerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterServerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerStatementContext alterServerStatement() throws RecognitionException {
		AlterServerStatementContext _localctx = new AlterServerStatementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterServerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2069);
			match(ALTER);
			setState(2070);
			match(SERVER);
			setState(2071);
			nameIdentifier();
			setState(2072);
			match(OPTIONS);
			setState(2073);
			match(LEFT_PAREN);
			setState(2074);
			serverOption();
			setState(2079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2075);
				match(COMMA);
				setState(2076);
				serverOption();
				}
				}
				setState(2081);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2082);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<AlterTableItemContext> alterTableItem() {
			return getRuleContexts(AlterTableItemContext.class);
		}
		public AlterTableItemContext alterTableItem(int i) {
			return getRuleContext(AlterTableItemContext.class,i);
		}
		public IntimeActionContext intimeAction() {
			return getRuleContext(IntimeActionContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(DRDSSQLStatementParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public IDBPartitionByContext iDBPartitionBy() {
			return getRuleContext(IDBPartitionByContext.class,0);
		}
		public AlterTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStatementContext alterTableStatement() throws RecognitionException {
		AlterTableStatementContext _localctx = new AlterTableStatementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2084);
			match(ALTER);
			setState(2086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2085);
				intimeAction();
				}
			}

			setState(2089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2088);
				match(IGNORE);
				}
			}

			setState(2091);
			match(TABLE);
			setState(2092);
			nameIdentifier();
			setState(2093);
			alterTableItem();
			setState(2098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2094);
				match(COMMA);
				setState(2095);
				alterTableItem();
				}
				}
				setState(2100);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DBPARTITION) {
				{
				setState(2101);
				iDBPartitionBy();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableItemContext extends ParserRuleContext {
		public AlterTableItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableItem; }
	 
		public AlterTableItemContext() { }
		public void copyFrom(AlterTableItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterTableDiscardPartitionActionContext extends AlterTableItemContext {
		public TerminalNode DISCARD() { return getToken(DRDSSQLStatementParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableDiscardPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDiscardPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableCheckPartitionActionContext extends AlterTableItemContext {
		public TerminalNode CHECK() { return getToken(DRDSSQLStatementParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableCheckPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableCheckPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableModifyColumnActionContext extends AlterTableItemContext {
		public TerminalNode MODIFY() { return getToken(DRDSSQLStatementParser.MODIFY, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DRDSSQLStatementParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(DRDSSQLStatementParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(DRDSSQLStatementParser.AFTER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableModifyColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableModifyColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRepairPartitionActionContext extends AlterTableItemContext {
		public TerminalNode REPAIR() { return getToken(DRDSSQLStatementParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableRepairPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRepairPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableOptimizePartitionActionContext extends AlterTableItemContext {
		public TerminalNode OPTIMIZE() { return getToken(DRDSSQLStatementParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableOptimizePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableOptimizePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropPrimaryKeyConstraintActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(DRDSSQLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public AlterTableDropPrimaryKeyConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropPrimaryKeyConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDisableKeysActionContext extends AlterTableItemContext {
		public TerminalNode DISABLE() { return getToken(DRDSSQLStatementParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(DRDSSQLStatementParser.KEYS, 0); }
		public AlterTableDisableKeysActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDisableKeysAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDiscardTablespaceActionContext extends AlterTableItemContext {
		public TerminalNode DISCARD() { return getToken(DRDSSQLStatementParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public AlterTableDiscardTablespaceActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDiscardTablespaceAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableCoalescePartitionActionContext extends AlterTableItemContext {
		public TerminalNode COALESCE() { return getToken(DRDSSQLStatementParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AlterTableCoalescePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableCoalescePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableUpgradePartitioningActionContext extends AlterTableItemContext {
		public TerminalNode UPGRADE() { return getToken(DRDSSQLStatementParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(DRDSSQLStatementParser.PARTITIONING, 0); }
		public AlterTableUpgradePartitioningActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableUpgradePartitioningAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAlgorithmActionContext extends AlterTableItemContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(DRDSSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(DRDSSQLStatementParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(DRDSSQLStatementParser.COPY, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public AlterTableAlgorithmActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAlgorithmAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRenameKeyConstraintActionContext extends AlterTableItemContext {
		public TerminalNode RENAME() { return getToken(DRDSSQLStatementParser.RENAME, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public AlterTableRenameKeyConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRenameKeyConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropIndexConstraintActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableDropIndexConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropIndexConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAlterColumnActionContext extends AlterTableItemContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterColumnActionContext alterColumnAction() {
			return getRuleContext(AlterColumnActionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DRDSSQLStatementParser.COLUMN, 0); }
		public AlterTableAlterColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAlterColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRenameColumnActionContext extends AlterTableItemContext {
		public TerminalNode RENAME() { return getToken(DRDSSQLStatementParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(DRDSSQLStatementParser.COLUMN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public AlterTableRenameColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRenameColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRenameTableActionContext extends AlterTableItemContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(DRDSSQLStatementParser.RENAME, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public AlterTableRenameTableActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRenameTableAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableWithValidateActionContext extends AlterTableItemContext {
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode VALIDATION() { return getToken(DRDSSQLStatementParser.VALIDATION, 0); }
		public AlterTableWithValidateActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableWithValidateAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRenameIndexConstraintActionContext extends AlterTableItemContext {
		public TerminalNode RENAME() { return getToken(DRDSSQLStatementParser.RENAME, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public AlterTableRenameIndexConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRenameIndexConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDefaultCharsetActionContext extends AlterTableItemContext {
		public TerminalNode CHARACTER() { return getToken(DRDSSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(DRDSSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(DRDSSQLStatementParser.EQUALS_OP, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(DRDSSQLStatementParser.COLLATE, 0); }
		public AlterTableDefaultCharsetActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDefaultCharsetAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableChangeColumnActionContext extends AlterTableItemContext {
		public NameIdentifierContext name;
		public TerminalNode CHANGE() { return getToken(DRDSSQLStatementParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DRDSSQLStatementParser.COLUMN, 0); }
		public AlterTableChangeColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableChangeColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableWithoutValidateActionContext extends AlterTableItemContext {
		public TerminalNode WITHOUT() { return getToken(DRDSSQLStatementParser.WITHOUT, 0); }
		public TerminalNode VALIDATION() { return getToken(DRDSSQLStatementParser.VALIDATION, 0); }
		public AlterTableWithoutValidateActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableWithoutValidateAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableImportPartitionActionContext extends AlterTableItemContext {
		public TerminalNode IMPORT() { return getToken(DRDSSQLStatementParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableImportPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableImportPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropColumnActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DRDSSQLStatementParser.COLUMN, 0); }
		public AlterTableDropColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterTableItemContext {
		public TableOptionContext tableOption() {
			return getRuleContext(TableOptionContext.class,0);
		}
		public AlterByTableOptionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableEnableKeysActionContext extends AlterTableItemContext {
		public TerminalNode ENABLE() { return getToken(DRDSSQLStatementParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(DRDSSQLStatementParser.KEYS, 0); }
		public AlterTableEnableKeysActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableEnableKeysAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableImportTablespaceActionContext extends AlterTableItemContext {
		public TerminalNode IMPORT() { return getToken(DRDSSQLStatementParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public AlterTableImportTablespaceActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableImportTablespaceAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropPartitionActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableDropPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAnalyzePartitiionActionContext extends AlterTableItemContext {
		public TerminalNode ANALYZE() { return getToken(DRDSSQLStatementParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableAnalyzePartitiionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAnalyzePartitiionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRebuildPartitionActionContext extends AlterTableItemContext {
		public TerminalNode REBUILD() { return getToken(DRDSSQLStatementParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableRebuildPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRebuildPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRemovePartitioningActionContext extends AlterTableItemContext {
		public TerminalNode REMOVE() { return getToken(DRDSSQLStatementParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(DRDSSQLStatementParser.PARTITIONING, 0); }
		public AlterTableRemovePartitioningActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRemovePartitioningAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAddColumnActionContext extends AlterTableItemContext {
		public TerminalNode ADD() { return getToken(DRDSSQLStatementParser.ADD, 0); }
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(DRDSSQLStatementParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(DRDSSQLStatementParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(DRDSSQLStatementParser.AFTER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableAddColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAddColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAlterIndexConstraintActionContext extends AlterTableItemContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public VisibleTypeContext visibleType() {
			return getRuleContext(VisibleTypeContext.class,0);
		}
		public AlterTableAlterIndexConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAlterIndexConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropForeignKeyConstraintActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(DRDSSQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableDropForeignKeyConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropForeignKeyConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableConvertCharsetActionContext extends AlterTableItemContext {
		public TerminalNode CONVERT() { return getToken(DRDSSQLStatementParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(DRDSSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COLLATE() { return getToken(DRDSSQLStatementParser.COLLATE, 0); }
		public AlterTableConvertCharsetActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableConvertCharsetAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropKeyConstraintActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableDropKeyConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropKeyConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableTruncatePartitionActionContext extends AlterTableItemContext {
		public TerminalNode TRUNCATE() { return getToken(DRDSSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableTruncatePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableTruncatePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableForceActionContext extends AlterTableItemContext {
		public TerminalNode FORCE() { return getToken(DRDSSQLStatementParser.FORCE, 0); }
		public AlterTableForceActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableForceAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableLockActionContext extends AlterTableItemContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(DRDSSQLStatementParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(DRDSSQLStatementParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(DRDSSQLStatementParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DRDSSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public AlterTableLockActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableLockAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAddTableConstraintActionContext extends AlterTableItemContext {
		public TerminalNode ADD() { return getToken(DRDSSQLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public AlterTableAddTableConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAddTableConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableOrderByColumnActionContext extends AlterTableItemContext {
		public TerminalNode ORDER() { return getToken(DRDSSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterTableOrderByColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableOrderByColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableExchangePartitionActionContext extends AlterTableItemContext {
		public NameIdentifierContext name;
		public NameIdentifierContext table;
		public TerminalNode EXCHANGE() { return getToken(DRDSSQLStatementParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public WithTypeContext withType() {
			return getRuleContext(WithTypeContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(DRDSSQLStatementParser.VALIDATION, 0); }
		public AlterTableExchangePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableExchangePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableItemContext alterTableItem() throws RecognitionException {
		AlterTableItemContext _localctx = new AlterTableItemContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterTableItem);
		int _la;
		try {
			int _alt;
			setState(2370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2104);
				tableOption();
				}
				break;
			case 2:
				_localctx = new AlterTableAddColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2105);
				match(ADD);
				setState(2107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2106);
					match(COLUMN);
					}
				}

				setState(2109);
				columnDefinition();
				setState(2113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					setState(2110);
					match(FIRST);
					}
					break;
				case 2:
					{
					setState(2111);
					match(AFTER);
					setState(2112);
					nameIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterTableAddColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2115);
				match(ADD);
				setState(2117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2116);
					match(COLUMN);
					}
				}

				setState(2119);
				match(LEFT_PAREN);
				setState(2120);
				columnDefinition();
				setState(2125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2121);
					match(COMMA);
					setState(2122);
					columnDefinition();
					}
					}
					setState(2127);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2128);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				_localctx = new AlterTableAddTableConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2130);
				match(ADD);
				setState(2131);
				tableConstraint();
				}
				break;
			case 5:
				_localctx = new AlterTableAlgorithmActionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2132);
				match(ALGORITHM);
				setState(2134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2133);
					match(EQUALS_OP);
					}
				}

				setState(2136);
				((AlterTableAlgorithmActionContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterTableAlgorithmActionContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new AlterTableAlterColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2137);
				match(ALTER);
				setState(2139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2138);
					match(COLUMN);
					}
				}

				setState(2141);
				nameIdentifier();
				setState(2142);
				alterColumnAction();
				}
				break;
			case 7:
				_localctx = new AlterTableAlterIndexConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2144);
				match(ALTER);
				setState(2145);
				match(INDEX);
				setState(2146);
				nameIdentifier();
				setState(2147);
				visibleType();
				}
				break;
			case 8:
				_localctx = new AlterTableChangeColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2149);
				match(CHANGE);
				setState(2151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2150);
					match(COLUMN);
					}
				}

				setState(2153);
				((AlterTableChangeColumnActionContext)_localctx).name = nameIdentifier();
				setState(2154);
				columnDefinition();
				setState(2156);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new AlterTableDefaultCharsetActionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2158);
					match(DEFAULT);
					}
				}

				setState(2161);
				match(CHARACTER);
				setState(2162);
				match(SET);
				setState(2163);
				match(EQUALS_OP);
				setState(2164);
				expr(0);
				setState(2168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2165);
					match(COLLATE);
					setState(2166);
					match(EQUALS_OP);
					setState(2167);
					expr(0);
					}
				}

				}
				break;
			case 10:
				_localctx = new AlterTableConvertCharsetActionContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2170);
				match(CONVERT);
				setState(2171);
				match(TO);
				setState(2172);
				match(CHARACTER);
				setState(2173);
				match(SET);
				setState(2174);
				expr(0);
				setState(2177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2175);
					match(COLLATE);
					setState(2176);
					expr(0);
					}
				}

				}
				break;
			case 11:
				_localctx = new AlterTableDisableKeysActionContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2179);
				match(DISABLE);
				setState(2180);
				match(KEYS);
				}
				break;
			case 12:
				_localctx = new AlterTableEnableKeysActionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2181);
				match(ENABLE);
				setState(2182);
				match(KEYS);
				}
				break;
			case 13:
				_localctx = new AlterTableDiscardTablespaceActionContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2183);
				match(DISCARD);
				setState(2184);
				match(TABLESPACE);
				}
				break;
			case 14:
				_localctx = new AlterTableImportTablespaceActionContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2185);
				match(IMPORT);
				setState(2186);
				match(TABLESPACE);
				}
				break;
			case 15:
				_localctx = new AlterTableDropColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2187);
				match(DROP);
				setState(2189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2188);
					match(COLUMN);
					}
				}

				setState(2191);
				nameIdentifier();
				}
				break;
			case 16:
				_localctx = new AlterTableDropIndexConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2192);
				match(DROP);
				setState(2193);
				match(INDEX);
				setState(2194);
				nameIdentifier();
				}
				break;
			case 17:
				_localctx = new AlterTableDropKeyConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2195);
				match(DROP);
				setState(2196);
				match(KEY);
				setState(2197);
				nameIdentifier();
				}
				break;
			case 18:
				_localctx = new AlterTableDropPrimaryKeyConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2198);
				match(DROP);
				setState(2199);
				match(PRIMARY);
				setState(2200);
				match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterTableDropForeignKeyConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2201);
				match(DROP);
				setState(2202);
				match(FOREIGN);
				setState(2203);
				match(KEY);
				setState(2204);
				nameIdentifier();
				}
				break;
			case 20:
				_localctx = new AlterTableForceActionContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2205);
				match(FORCE);
				}
				break;
			case 21:
				_localctx = new AlterTableLockActionContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2206);
				match(LOCK);
				setState(2208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2207);
					match(EQUALS_OP);
					}
				}

				setState(2210);
				((AlterTableLockActionContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterTableLockActionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new AlterTableModifyColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2211);
				match(MODIFY);
				setState(2213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2212);
					match(COLUMN);
					}
				}

				setState(2215);
				columnDefinition();
				setState(2219);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					setState(2216);
					match(FIRST);
					}
					break;
				case 2:
					{
					setState(2217);
					match(AFTER);
					setState(2218);
					nameIdentifier();
					}
					break;
				}
				}
				break;
			case 23:
				_localctx = new AlterTableOrderByColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2221);
				match(ORDER);
				setState(2222);
				match(BY);
				setState(2223);
				expr(0);
				setState(2228);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,213,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2224);
						match(COMMA);
						setState(2225);
						expr(0);
						}
						} 
					}
					setState(2230);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,213,_ctx);
				}
				}
				break;
			case 24:
				_localctx = new AlterTableRenameColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2231);
				match(RENAME);
				setState(2232);
				match(COLUMN);
				setState(2233);
				nameIdentifier();
				setState(2234);
				match(TO);
				setState(2235);
				nameIdentifier();
				}
				break;
			case 25:
				_localctx = new AlterTableRenameIndexConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2237);
				match(RENAME);
				setState(2238);
				match(INDEX);
				setState(2239);
				nameIdentifier();
				setState(2240);
				match(TO);
				setState(2241);
				nameIdentifier();
				}
				break;
			case 26:
				_localctx = new AlterTableRenameKeyConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2243);
				match(RENAME);
				setState(2244);
				match(KEY);
				setState(2245);
				nameIdentifier();
				setState(2246);
				match(TO);
				setState(2247);
				nameIdentifier();
				}
				break;
			case 27:
				_localctx = new AlterTableRenameTableActionContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2249);
				match(RENAME);
				setState(2251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2250);
					((AlterTableRenameTableActionContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterTableRenameTableActionContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2253);
				nameIdentifier();
				}
				break;
			case 28:
				_localctx = new AlterTableWithoutValidateActionContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2254);
				match(WITHOUT);
				setState(2255);
				match(VALIDATION);
				}
				break;
			case 29:
				_localctx = new AlterTableWithValidateActionContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2256);
				match(WITH);
				setState(2257);
				match(VALIDATION);
				}
				break;
			case 30:
				_localctx = new AlterTableDropPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2258);
				match(DROP);
				setState(2259);
				match(PARTITION);
				setState(2260);
				expr(0);
				setState(2265);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2261);
						match(COMMA);
						setState(2262);
						expr(0);
						}
						} 
					}
					setState(2267);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,215,_ctx);
				}
				}
				break;
			case 31:
				_localctx = new AlterTableDiscardPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2268);
				match(DISCARD);
				setState(2269);
				match(PARTITION);
				setState(2270);
				alterTablePartitionItem();
				setState(2275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2271);
					match(COMMA);
					setState(2272);
					alterTablePartitionItem();
					}
					}
					setState(2277);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2278);
				match(TABLESPACE);
				}
				break;
			case 32:
				_localctx = new AlterTableImportPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2280);
				match(IMPORT);
				setState(2281);
				match(PARTITION);
				setState(2282);
				alterTablePartitionItem();
				setState(2287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2283);
					match(COMMA);
					setState(2284);
					alterTablePartitionItem();
					}
					}
					setState(2289);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2290);
				match(TABLESPACE);
				}
				break;
			case 33:
				_localctx = new AlterTableTruncatePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2292);
				match(TRUNCATE);
				setState(2293);
				match(PARTITION);
				setState(2294);
				alterTablePartitionItem();
				setState(2299);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2295);
						match(COMMA);
						setState(2296);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2301);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,218,_ctx);
				}
				}
				break;
			case 34:
				_localctx = new AlterTableCoalescePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2302);
				match(COALESCE);
				setState(2303);
				match(PARTITION);
				setState(2304);
				expr(0);
				}
				break;
			case 35:
				_localctx = new AlterTableExchangePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2305);
				match(EXCHANGE);
				setState(2306);
				match(PARTITION);
				setState(2307);
				((AlterTableExchangePartitionActionContext)_localctx).name = nameIdentifier();
				setState(2308);
				match(WITH);
				setState(2309);
				match(TABLE);
				setState(2310);
				((AlterTableExchangePartitionActionContext)_localctx).table = nameIdentifier();
				setState(2314);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(2311);
					withType();
					setState(2312);
					match(VALIDATION);
					}
					break;
				}
				}
				break;
			case 36:
				_localctx = new AlterTableAnalyzePartitiionActionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2316);
				match(ANALYZE);
				setState(2317);
				match(PARTITION);
				setState(2318);
				alterTablePartitionItem();
				setState(2323);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2319);
						match(COMMA);
						setState(2320);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2325);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,220,_ctx);
				}
				}
				break;
			case 37:
				_localctx = new AlterTableCheckPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2326);
				match(CHECK);
				setState(2327);
				match(PARTITION);
				setState(2328);
				alterTablePartitionItem();
				setState(2333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2329);
						match(COMMA);
						setState(2330);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2335);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
				}
				}
				break;
			case 38:
				_localctx = new AlterTableOptimizePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2336);
				match(OPTIMIZE);
				setState(2337);
				match(PARTITION);
				setState(2338);
				alterTablePartitionItem();
				setState(2343);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2339);
						match(COMMA);
						setState(2340);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2345);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,222,_ctx);
				}
				}
				break;
			case 39:
				_localctx = new AlterTableRebuildPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2346);
				match(REBUILD);
				setState(2347);
				match(PARTITION);
				setState(2348);
				alterTablePartitionItem();
				setState(2353);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2349);
						match(COMMA);
						setState(2350);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2355);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
				}
				}
				break;
			case 40:
				_localctx = new AlterTableRepairPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2356);
				match(REPAIR);
				setState(2357);
				match(PARTITION);
				setState(2358);
				alterTablePartitionItem();
				setState(2363);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2359);
						match(COMMA);
						setState(2360);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2365);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,224,_ctx);
				}
				}
				break;
			case 41:
				_localctx = new AlterTableRemovePartitioningActionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2366);
				match(REMOVE);
				setState(2367);
				match(PARTITIONING);
				}
				break;
			case 42:
				_localctx = new AlterTableUpgradePartitioningActionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2368);
				match(UPGRADE);
				setState(2369);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnActionContext extends ParserRuleContext {
		public AlterColumnActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnAction; }
	 
		public AlterColumnActionContext() { }
		public void copyFrom(AlterColumnActionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterColumnSetDefaultActionContext extends AlterColumnActionContext {
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AlterColumnSetDefaultActionContext(AlterColumnActionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterColumnSetDefaultAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterColumnDropDefaultActionContext extends AlterColumnActionContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public AlterColumnDropDefaultActionContext(AlterColumnActionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterColumnDropDefaultAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnActionContext alterColumnAction() throws RecognitionException {
		AlterColumnActionContext _localctx = new AlterColumnActionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alterColumnAction);
		try {
			setState(2377);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				_localctx = new AlterColumnSetDefaultActionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2372);
				match(SET);
				setState(2373);
				match(DEFAULT);
				setState(2374);
				expr(0);
				}
				break;
			case DROP:
				_localctx = new AlterColumnDropDefaultActionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2375);
				match(DROP);
				setState(2376);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablePartitionItemContext extends ParserRuleContext {
		public AllLiteralContext allLiteral() {
			return getRuleContext(AllLiteralContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AlterTablePartitionItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablePartitionItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTablePartitionItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablePartitionItemContext alterTablePartitionItem() throws RecognitionException {
		AlterTablePartitionItemContext _localctx = new AlterTablePartitionItemContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alterTablePartitionItem);
		try {
			setState(2381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2379);
				allLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2380);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceStatementContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(DRDSSQLStatementParser.DATAFILE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DRDSSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(DRDSSQLStatementParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(DRDSSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(DRDSSQLStatementParser.EQUALS_OP, i);
		}
		public TerminalNode WAIT() { return getToken(DRDSSQLStatementParser.WAIT, 0); }
		public AlterTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceStatementContext alterTablespaceStatement() throws RecognitionException {
		AlterTablespaceStatementContext _localctx = new AlterTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alterTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2383);
			match(ALTER);
			setState(2384);
			match(TABLESPACE);
			setState(2385);
			nameIdentifier();
			setState(2386);
			((AlterTablespaceStatementContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceStatementContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2387);
			match(DATAFILE);
			setState(2388);
			expr(0);
			setState(2392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2389);
				match(INITIAL_SIZE);
				setState(2390);
				match(EQUALS_OP);
				setState(2391);
				expr(0);
				}
			}

			setState(2395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2394);
				match(WAIT);
				}
			}

			setState(2397);
			match(ENGINE);
			setState(2399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(2398);
				match(EQUALS_OP);
				}
			}

			setState(2401);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewStatementContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(DRDSSQLStatementParser.VIEW, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(DRDSSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public TerminalNode SQL() { return getToken(DRDSSQLStatementParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(DRDSSQLStatementParser.SECURITY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(DRDSSQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(DRDSSQLStatementParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(DRDSSQLStatementParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(DRDSSQLStatementParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(DRDSSQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(DRDSSQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(DRDSSQLStatementParser.INVOKER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode CASCADED() { return getToken(DRDSSQLStatementParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public AlterViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewStatementContext alterViewStatement() throws RecognitionException {
		AlterViewStatementContext _localctx = new AlterViewStatementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alterViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2403);
			match(ALTER);
			setState(2407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2404);
				match(ALGORITHM);
				setState(2405);
				match(EQUALS_OP);
				setState(2406);
				((AlterViewStatementContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewStatementContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2409);
				definerOptionExpr();
				}
			}

			setState(2415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2412);
				match(SQL);
				setState(2413);
				match(SECURITY);
				setState(2414);
				((AlterViewStatementContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewStatementContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2417);
			match(VIEW);
			setState(2418);
			nameIdentifier();
			setState(2430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2419);
				match(LEFT_PAREN);
				setState(2420);
				expr(0);
				setState(2425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2421);
					match(COMMA);
					setState(2422);
					expr(0);
					}
					}
					setState(2427);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2428);
				match(RIGHT_PAREN);
				}
			}

			setState(2432);
			match(AS);
			setState(2433);
			selectStatement();
			setState(2440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2434);
				match(WITH);
				setState(2436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2435);
					((AlterViewStatementContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewStatementContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2438);
				match(CHECK);
				setState(2439);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(DRDSSQLStatementParser.DATABASE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabaseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseStatementContext dropDatabaseStatement() throws RecognitionException {
		DropDatabaseStatementContext _localctx = new DropDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_dropDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2442);
			match(DROP);
			setState(2443);
			match(DATABASE);
			setState(2445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2444);
				ifExists();
				}
			}

			setState(2447);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSchemaStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(DRDSSQLStatementParser.SCHEMA, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSchemaStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropSchemaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSchemaStatementContext dropSchemaStatement() throws RecognitionException {
		DropSchemaStatementContext _localctx = new DropSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_dropSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2449);
			match(DROP);
			setState(2450);
			match(SCHEMA);
			setState(2452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2451);
				ifExists();
				}
			}

			setState(2454);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(DRDSSQLStatementParser.EVENT, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEventStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropEventStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventStatementContext dropEventStatement() throws RecognitionException {
		DropEventStatementContext _localctx = new DropEventStatementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_dropEventStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2456);
			match(DROP);
			setState(2457);
			match(EVENT);
			setState(2459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2458);
				ifExists();
				}
			}

			setState(2461);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexStatementContext extends ParserRuleContext {
		public NameIdentifierContext index;
		public NameIdentifierContext table;
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public IntimeActionContext intimeAction() {
			return getRuleContext(IntimeActionContext.class,0);
		}
		public List<DropIndexStatementOptionContext> dropIndexStatementOption() {
			return getRuleContexts(DropIndexStatementOptionContext.class);
		}
		public DropIndexStatementOptionContext dropIndexStatementOption(int i) {
			return getRuleContext(DropIndexStatementOptionContext.class,i);
		}
		public DropIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexStatementContext dropIndexStatement() throws RecognitionException {
		DropIndexStatementContext _localctx = new DropIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_dropIndexStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2463);
			match(DROP);
			setState(2464);
			match(INDEX);
			setState(2466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2465);
				intimeAction();
				}
				break;
			}
			setState(2468);
			((DropIndexStatementContext)_localctx).index = nameIdentifier();
			setState(2469);
			match(ON);
			setState(2470);
			((DropIndexStatementContext)_localctx).table = nameIdentifier();
			setState(2474);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2471);
					dropIndexStatementOption();
					}
					} 
				}
				setState(2476);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,242,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexStatementOptionContext extends ParserRuleContext {
		public AlgorithmOptionExprContext algorithmOptionExpr() {
			return getRuleContext(AlgorithmOptionExprContext.class,0);
		}
		public LockOptionExprContext lockOptionExpr() {
			return getRuleContext(LockOptionExprContext.class,0);
		}
		public DropIndexStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexStatementOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropIndexStatementOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexStatementOptionContext dropIndexStatementOption() throws RecognitionException {
		DropIndexStatementOptionContext _localctx = new DropIndexStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropIndexStatementOption);
		try {
			setState(2479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2477);
				algorithmOptionExpr();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2478);
				lockOptionExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(DRDSSQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(DRDSSQLStatementParser.GROUP, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroupStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropLogfileGroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupStatementContext dropLogfileGroupStatement() throws RecognitionException {
		DropLogfileGroupStatementContext _localctx = new DropLogfileGroupStatementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropLogfileGroupStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2481);
			match(DROP);
			setState(2482);
			match(LOGFILE);
			setState(2483);
			match(GROUP);
			setState(2484);
			nameIdentifier();
			setState(2485);
			match(ENGINE);
			setState(2486);
			match(EQUALS_OP);
			setState(2487);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(DRDSSQLStatementParser.PROCEDURE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedureStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureStatementContext dropProcedureStatement() throws RecognitionException {
		DropProcedureStatementContext _localctx = new DropProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2489);
			match(DROP);
			setState(2490);
			match(PROCEDURE);
			setState(2492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2491);
				ifExists();
				}
			}

			setState(2494);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunctionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionStatementContext dropFunctionStatement() throws RecognitionException {
		DropFunctionStatementContext _localctx = new DropFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2496);
			match(DROP);
			setState(2497);
			match(FUNCTION);
			setState(2499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2498);
				ifExists();
				}
			}

			setState(2501);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(DRDSSQLStatementParser.SERVER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropServerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerStatementContext dropServerStatement() throws RecognitionException {
		DropServerStatementContext _localctx = new DropServerStatementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dropServerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2503);
			match(DROP);
			setState(2504);
			match(SERVER);
			setState(2506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2505);
				ifExists();
				}
			}

			setState(2508);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableStatementContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(DRDSSQLStatementParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(DRDSSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DRDSSQLStatementParser.CASCADE, 0); }
		public DropTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableStatementContext dropTableStatement() throws RecognitionException {
		DropTableStatementContext _localctx = new DropTableStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dropTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2510);
			match(DROP);
			setState(2512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2511);
				match(TEMPORARY);
				}
			}

			setState(2514);
			match(TABLE);
			setState(2516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2515);
				ifExists();
				}
			}

			setState(2518);
			nameIdentifier();
			setState(2523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2519);
				match(COMMA);
				setState(2520);
				nameIdentifier();
				}
				}
				setState(2525);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2526);
				((DropTableStatementContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableStatementContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public DropTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceStatementContext dropTablespaceStatement() throws RecognitionException {
		DropTablespaceStatementContext _localctx = new DropTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_dropTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2529);
			match(DROP);
			setState(2530);
			match(TABLESPACE);
			setState(2531);
			nameIdentifier();
			setState(2537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2532);
				match(ENGINE);
				setState(2534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2533);
					match(EQUALS_OP);
					}
				}

				setState(2536);
				engineName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(DRDSSQLStatementParser.TRIGGER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTriggerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerStatementContext dropTriggerStatement() throws RecognitionException {
		DropTriggerStatementContext _localctx = new DropTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_dropTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2539);
			match(DROP);
			setState(2540);
			match(TRIGGER);
			setState(2542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2541);
				ifExists();
				}
			}

			setState(2544);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewStatementContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(DRDSSQLStatementParser.VIEW, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(DRDSSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DRDSSQLStatementParser.CASCADE, 0); }
		public DropViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropViewStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewStatementContext dropViewStatement() throws RecognitionException {
		DropViewStatementContext _localctx = new DropViewStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_dropViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2546);
			match(DROP);
			setState(2547);
			match(VIEW);
			setState(2549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2548);
				ifExists();
				}
			}

			setState(2551);
			nameIdentifier();
			setState(2556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2552);
				match(COMMA);
				setState(2553);
				nameIdentifier();
				}
				}
				setState(2558);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2559);
				((DropViewStatementContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewStatementContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableStatementContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DRDSSQLStatementParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRenameTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableStatementContext renameTableStatement() throws RecognitionException {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_renameTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2562);
			match(RENAME);
			setState(2563);
			match(TABLE);
			setState(2564);
			renameTableClause();
			setState(2569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2565);
				match(COMMA);
				setState(2566);
				renameTableClause();
				}
				}
				setState(2571);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			nameIdentifier();
			setState(2573);
			match(TO);
			setState(2574);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableStatementContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(DRDSSQLStatementParser.TRUNCATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTruncateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableStatementContext truncateTableStatement() throws RecognitionException {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_truncateTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2576);
			match(TRUNCATE);
			setState(2578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2577);
				match(TABLE);
				}
			}

			setState(2580);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_selectStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2582);
			iSelectQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ISelectQueryContext extends ParserRuleContext {
		public SelectQueryBasicContext selectQueryBasic() {
			return getRuleContext(SelectQueryBasicContext.class,0);
		}
		public SelectUnionQueryContext selectUnionQuery() {
			return getRuleContext(SelectUnionQueryContext.class,0);
		}
		public ISelectQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iSelectQuery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitISelectQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ISelectQueryContext iSelectQuery() throws RecognitionException {
		ISelectQueryContext _localctx = new ISelectQueryContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_iSelectQuery);
		try {
			setState(2586);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2584);
				selectQueryBasic();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2585);
				selectUnionQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryBasicContext extends ParserRuleContext {
		public SelectQueryContext selectQuery() {
			return getRuleContext(SelectQueryContext.class,0);
		}
		public SelectParenQueryContext selectParenQuery() {
			return getRuleContext(SelectParenQueryContext.class,0);
		}
		public SelectQueryBasicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryBasic; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryBasic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectQueryBasicContext selectQueryBasic() throws RecognitionException {
		SelectQueryBasicContext _localctx = new SelectQueryBasicContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_selectQueryBasic);
		try {
			setState(2590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2588);
				selectQuery();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2589);
				selectParenQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DRDSSQLStatementParser.SELECT, 0); }
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode HIGH_PRIORITY() { return getToken(DRDSSQLStatementParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(DRDSSQLStatementParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(DRDSSQLStatementParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(DRDSSQLStatementParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(DRDSSQLStatementParser.SQL_BUFFER_RESULT, 0); }
		public SelectQueryCacheContext selectQueryCache() {
			return getRuleContext(SelectQueryCacheContext.class,0);
		}
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(DRDSSQLStatementParser.SQL_CALC_FOUND_ROWS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public ISelectQueryIntoClauseContext iSelectQueryIntoClause() {
			return getRuleContext(ISelectQueryIntoClauseContext.class,0);
		}
		public ILockClauseContext iLockClause() {
			return getRuleContext(ILockClauseContext.class,0);
		}
		public SelectQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQuery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectQueryContext selectQuery() throws RecognitionException {
		SelectQueryContext _localctx = new SelectQueryContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_selectQuery);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			match(SELECT);
			setState(2594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(2593);
				setQuantifier();
				}
				break;
			}
			setState(2597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HIGH_PRIORITY) {
				{
				setState(2596);
				match(HIGH_PRIORITY);
				}
			}

			setState(2600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRAIGHT_JOIN) {
				{
				setState(2599);
				match(STRAIGHT_JOIN);
				}
			}

			setState(2603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SMALL_RESULT) {
				{
				setState(2602);
				match(SQL_SMALL_RESULT);
				}
			}

			setState(2606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_BIG_RESULT) {
				{
				setState(2605);
				match(SQL_BIG_RESULT);
				}
			}

			setState(2609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(2608);
				match(SQL_BUFFER_RESULT);
				}
				break;
			}
			setState(2612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				setState(2611);
				selectQueryCache();
				}
				break;
			}
			setState(2615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_CALC_FOUND_ROWS) {
				{
				setState(2614);
				match(SQL_CALC_FOUND_ROWS);
				}
			}

			setState(2617);
			selectItem();
			setState(2622);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2618);
					match(COMMA);
					setState(2619);
					selectItem();
					}
					} 
				}
				setState(2624);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			}
			setState(2626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2625);
				fromClause();
				}
				break;
			}
			setState(2629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(2628);
				whereClause();
				}
				break;
			}
			setState(2632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(2631);
				groupByClause();
				}
				break;
			}
			setState(2635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(2634);
				orderByClause();
				}
				break;
			}
			setState(2638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				setState(2637);
				limitOffsetClause();
				}
				break;
			}
			setState(2641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2640);
				iSelectQueryIntoClause();
				}
				break;
			}
			setState(2644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2643);
				iLockClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryCacheContext extends ParserRuleContext {
		public TerminalNode SQL_CACHE() { return getToken(DRDSSQLStatementParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(DRDSSQLStatementParser.SQL_NO_CACHE, 0); }
		public SelectQueryCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryCache; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectQueryCacheContext selectQueryCache() throws RecognitionException {
		SelectQueryCacheContext _localctx = new SelectQueryCacheContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_selectQueryCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2646);
			_la = _input.LA(1);
			if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectParenQueryContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public ILockClauseContext iLockClause() {
			return getRuleContext(ILockClauseContext.class,0);
		}
		public SelectParenQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectParenQuery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectParenQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectParenQueryContext selectParenQuery() throws RecognitionException {
		SelectParenQueryContext _localctx = new SelectParenQueryContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_selectParenQuery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			match(LEFT_PAREN);
			setState(2649);
			iSelectQuery();
			setState(2650);
			match(RIGHT_PAREN);
			setState(2652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				setState(2651);
				orderByClause();
				}
				break;
			}
			setState(2655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(2654);
				limitOffsetClause();
				}
				break;
			}
			setState(2658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(2657);
				iLockClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectUnionQueryContext extends ParserRuleContext {
		public List<SelectQueryBasicContext> selectQueryBasic() {
			return getRuleContexts(SelectQueryBasicContext.class);
		}
		public SelectQueryBasicContext selectQueryBasic(int i) {
			return getRuleContext(SelectQueryBasicContext.class,i);
		}
		public List<UnionOperatorContext> unionOperator() {
			return getRuleContexts(UnionOperatorContext.class);
		}
		public UnionOperatorContext unionOperator(int i) {
			return getRuleContext(UnionOperatorContext.class,i);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public ILockClauseContext iLockClause() {
			return getRuleContext(ILockClauseContext.class,0);
		}
		public SelectUnionQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectUnionQuery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectUnionQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectUnionQueryContext selectUnionQuery() throws RecognitionException {
		SelectUnionQueryContext _localctx = new SelectUnionQueryContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_selectUnionQuery);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2660);
			selectQueryBasic();
			setState(2664); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2661);
					unionOperator();
					setState(2662);
					selectQueryBasic();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2666); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,280,_ctx);
			} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
			setState(2669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(2668);
				orderByClause();
				}
				break;
			}
			setState(2672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(2671);
				limitOffsetClause();
				}
				break;
			}
			setState(2675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				setState(2674);
				iLockClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DRDSSQLStatementParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(DRDSSQLStatementParser.DISTINCTROW, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2677);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionOperatorContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(DRDSSQLStatementParser.UNION, 0); }
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DRDSSQLStatementParser.DISTINCT, 0); }
		public UnionOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUnionOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionOperatorContext unionOperator() throws RecognitionException {
		UnionOperatorContext _localctx = new UnionOperatorContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_unionOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			match(UNION);
			setState(2681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2680);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemContext extends ParserRuleContext {
		public ExprContext column;
		public SelectItemAliasContext alias;
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectItemAliasContext selectItemAlias() {
			return getRuleContext(SelectItemAliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_selectItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			((SelectItemContext)_localctx).column = expr(0);
			setState(2688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(2685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2684);
					match(AS);
					}
				}

				setState(2687);
				((SelectItemContext)_localctx).alias = selectItemAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemAliasContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public SelectItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemAlias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectItemAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemAliasContext selectItemAlias() throws RecognitionException {
		SelectItemAliasContext _localctx = new SelectItemAliasContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_selectItemAlias);
		try {
			setState(2692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2690);
				nameIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2691);
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2694);
			match(FROM);
			setState(2695);
			iTableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ITableReferenceContext extends ParserRuleContext {
		public TableReferenceBasicContext tableReferenceBasic() {
			return getRuleContext(TableReferenceBasicContext.class,0);
		}
		public JoinTableReferenceContext joinTableReference() {
			return getRuleContext(JoinTableReferenceContext.class,0);
		}
		public ITableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iTableReference; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitITableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ITableReferenceContext iTableReference() throws RecognitionException {
		ITableReferenceContext _localctx = new ITableReferenceContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_iTableReference);
		try {
			setState(2699);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2697);
				tableReferenceBasic();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2698);
				joinTableReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceBasicContext extends ParserRuleContext {
		public TableReferenceBasicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceBasic; }
	 
		public TableReferenceBasicContext() { }
		public void copyFrom(TableReferenceBasicContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ObjectNameTableReferenceContext extends TableReferenceBasicContext {
		public NameIdentifierContext tableName;
		public NameIdentifierContext alias;
		public IIndexHintContext iIndexHint;
		public List<IIndexHintContext> indexes = new ArrayList<IIndexHintContext>();
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public List<IIndexHintContext> iIndexHint() {
			return getRuleContexts(IIndexHintContext.class);
		}
		public IIndexHintContext iIndexHint(int i) {
			return getRuleContext(IIndexHintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ObjectNameTableReferenceContext(TableReferenceBasicContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitObjectNameTableReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OjTableReferenceContext extends TableReferenceBasicContext {
		public TerminalNode LEFT_BRACE() { return getToken(DRDSSQLStatementParser.LEFT_BRACE, 0); }
		public TerminalNode OJ() { return getToken(DRDSSQLStatementParser.OJ, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(DRDSSQLStatementParser.RIGHT_BRACE, 0); }
		public OjTableReferenceContext(TableReferenceBasicContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOjTableReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubQueryTableReferenceContext extends TableReferenceBasicContext {
		public NameIdentifierContext alias;
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public List<TerminalNode> LEFT_PAREN() { return getTokens(DRDSSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.LEFT_PAREN, i);
		}
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(DRDSSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.RIGHT_PAREN, i);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public SubQueryTableReferenceContext(TableReferenceBasicContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSubQueryTableReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenTableReferenceContext extends TableReferenceBasicContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public ParenTableReferenceContext(TableReferenceBasicContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitParenTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceBasicContext tableReferenceBasic() throws RecognitionException {
		TableReferenceBasicContext _localctx = new TableReferenceBasicContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_tableReferenceBasic);
		int _la;
		try {
			int _alt;
			setState(2750);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				_localctx = new ObjectNameTableReferenceContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2701);
				((ObjectNameTableReferenceContext)_localctx).tableName = nameIdentifier();
				setState(2703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2702);
					partitionClause();
					}
					break;
				}
				setState(2719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(2706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2705);
						match(AS);
						}
					}

					setState(2708);
					((ObjectNameTableReferenceContext)_localctx).alias = nameIdentifier();
					setState(2717);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
					case 1:
						{
						setState(2709);
						((ObjectNameTableReferenceContext)_localctx).iIndexHint = iIndexHint();
						((ObjectNameTableReferenceContext)_localctx).indexes.add(((ObjectNameTableReferenceContext)_localctx).iIndexHint);
						setState(2714);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,291,_ctx);
						while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(2710);
								match(COMMA);
								setState(2711);
								((ObjectNameTableReferenceContext)_localctx).iIndexHint = iIndexHint();
								((ObjectNameTableReferenceContext)_localctx).indexes.add(((ObjectNameTableReferenceContext)_localctx).iIndexHint);
								}
								} 
							}
							setState(2716);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,291,_ctx);
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubQueryTableReferenceContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2721);
				match(LEFT_PAREN);
				setState(2722);
				iSelectQuery();
				setState(2723);
				match(RIGHT_PAREN);
				setState(2725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2724);
					match(AS);
					}
				}

				setState(2727);
				((SubQueryTableReferenceContext)_localctx).alias = nameIdentifier();
				setState(2739);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					setState(2728);
					match(LEFT_PAREN);
					setState(2729);
					((SubQueryTableReferenceContext)_localctx).expr = expr(0);
					((SubQueryTableReferenceContext)_localctx).columns.add(((SubQueryTableReferenceContext)_localctx).expr);
					setState(2734);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2730);
						match(COMMA);
						setState(2731);
						((SubQueryTableReferenceContext)_localctx).expr = expr(0);
						((SubQueryTableReferenceContext)_localctx).columns.add(((SubQueryTableReferenceContext)_localctx).expr);
						}
						}
						setState(2736);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2737);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new OjTableReferenceContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2741);
				match(LEFT_BRACE);
				setState(2742);
				match(OJ);
				setState(2743);
				iTableReference();
				setState(2744);
				match(RIGHT_BRACE);
				}
				break;
			case 4:
				_localctx = new ParenTableReferenceContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2746);
				match(LEFT_PAREN);
				setState(2747);
				iTableReference();
				setState(2748);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTableReferenceContext extends ParserRuleContext {
		public TableReferenceBasicContext tableReferenceBasic() {
			return getRuleContext(TableReferenceBasicContext.class,0);
		}
		public List<RightJoinClauseContext> rightJoinClause() {
			return getRuleContexts(RightJoinClauseContext.class);
		}
		public RightJoinClauseContext rightJoinClause(int i) {
			return getRuleContext(RightJoinClauseContext.class,i);
		}
		public JoinTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinTableReference; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJoinTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTableReferenceContext joinTableReference() throws RecognitionException {
		JoinTableReferenceContext _localctx = new JoinTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_joinTableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2752);
			tableReferenceBasic();
			setState(2754); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2753);
					rightJoinClause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2756); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			match(PARTITION);
			setState(2759);
			match(LEFT_PAREN);
			setState(2760);
			expr(0);
			setState(2765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2761);
				match(COMMA);
				setState(2762);
				expr(0);
				}
				}
				setState(2767);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2768);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IIndexHintContext extends ParserRuleContext {
		public IIndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iIndexHint; }
	 
		public IIndexHintContext() { }
		public void copyFrom(IIndexHintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ForceKeyHintContext extends IIndexHintContext {
		public TerminalNode FORCE() { return getToken(DRDSSQLStatementParser.FORCE, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ForceKeyHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitForceKeyHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForceIndexHintContext extends IIndexHintContext {
		public TerminalNode FORCE() { return getToken(DRDSSQLStatementParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ForceIndexHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitForceIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseKeyHintContext extends IIndexHintContext {
		public TerminalNode USE() { return getToken(DRDSSQLStatementParser.USE, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public UseKeyHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUseKeyHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseIndexHintContext extends IIndexHintContext {
		public TerminalNode USE() { return getToken(DRDSSQLStatementParser.USE, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public UseIndexHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUseIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreKeyHintContext extends IIndexHintContext {
		public TerminalNode IGNORE() { return getToken(DRDSSQLStatementParser.IGNORE, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public IgnoreKeyHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIgnoreKeyHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreIndexHintContext extends IIndexHintContext {
		public TerminalNode IGNORE() { return getToken(DRDSSQLStatementParser.IGNORE, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public IgnoreIndexHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIgnoreIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IIndexHintContext iIndexHint() throws RecognitionException {
		IIndexHintContext _localctx = new IIndexHintContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_iIndexHint);
		int _la;
		try {
			setState(2872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				_localctx = new UseIndexHintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2770);
				match(USE);
				setState(2771);
				match(INDEX);
				setState(2774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2772);
					match(FOR);
					setState(2773);
					indexHintType();
					}
				}

				setState(2776);
				match(LEFT_PAREN);
				setState(2777);
				expr(0);
				setState(2782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2778);
					match(COMMA);
					setState(2779);
					expr(0);
					}
					}
					setState(2784);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2785);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new UseKeyHintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2787);
				match(USE);
				setState(2788);
				match(KEY);
				setState(2791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2789);
					match(FOR);
					setState(2790);
					indexHintType();
					}
				}

				setState(2793);
				match(LEFT_PAREN);
				setState(2794);
				expr(0);
				setState(2799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2795);
					match(COMMA);
					setState(2796);
					expr(0);
					}
					}
					setState(2801);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2802);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new IgnoreIndexHintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2804);
				match(IGNORE);
				setState(2805);
				match(INDEX);
				setState(2808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2806);
					match(FOR);
					setState(2807);
					indexHintType();
					}
				}

				setState(2810);
				match(LEFT_PAREN);
				setState(2811);
				expr(0);
				setState(2816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2812);
					match(COMMA);
					setState(2813);
					expr(0);
					}
					}
					setState(2818);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2819);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				_localctx = new IgnoreKeyHintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2821);
				match(IGNORE);
				setState(2822);
				match(KEY);
				setState(2825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2823);
					match(FOR);
					setState(2824);
					indexHintType();
					}
				}

				setState(2827);
				match(LEFT_PAREN);
				setState(2828);
				expr(0);
				setState(2833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2829);
					match(COMMA);
					setState(2830);
					expr(0);
					}
					}
					setState(2835);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2836);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				_localctx = new ForceIndexHintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2838);
				match(FORCE);
				setState(2839);
				match(INDEX);
				setState(2842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2840);
					match(FOR);
					setState(2841);
					indexHintType();
					}
				}

				setState(2844);
				match(LEFT_PAREN);
				setState(2845);
				expr(0);
				setState(2850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2846);
					match(COMMA);
					setState(2847);
					expr(0);
					}
					}
					setState(2852);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2853);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				_localctx = new ForceKeyHintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2855);
				match(FORCE);
				setState(2856);
				match(KEY);
				setState(2859);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2857);
					match(FOR);
					setState(2858);
					indexHintType();
					}
				}

				setState(2861);
				match(LEFT_PAREN);
				setState(2862);
				expr(0);
				setState(2867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2863);
					match(COMMA);
					setState(2864);
					expr(0);
					}
					}
					setState(2869);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2870);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(DRDSSQLStatementParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(DRDSSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(DRDSSQLStatementParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_indexHintType);
		try {
			setState(2879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2874);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2875);
				match(ORDER);
				setState(2876);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(2877);
				match(GROUP);
				setState(2878);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public TerminalNode INNER_JOIN() { return getToken(DRDSSQLStatementParser.INNER_JOIN, 0); }
		public TerminalNode CROSS_JOIN() { return getToken(DRDSSQLStatementParser.CROSS_JOIN, 0); }
		public TerminalNode NATURAL_JOIN() { return getToken(DRDSSQLStatementParser.NATURAL_JOIN, 0); }
		public TerminalNode NATURAL_INNER_JOIN() { return getToken(DRDSSQLStatementParser.NATURAL_INNER_JOIN, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(DRDSSQLStatementParser.STRAIGHT_JOIN, 0); }
		public TerminalNode LEFT_JOIN() { return getToken(DRDSSQLStatementParser.LEFT_JOIN, 0); }
		public TerminalNode LEFT_OUTER_JOIN() { return getToken(DRDSSQLStatementParser.LEFT_OUTER_JOIN, 0); }
		public TerminalNode NATURAL_LEFT_JOIN() { return getToken(DRDSSQLStatementParser.NATURAL_LEFT_JOIN, 0); }
		public TerminalNode NATURAL_LEFT_OUTER_JOIN() { return getToken(DRDSSQLStatementParser.NATURAL_LEFT_OUTER_JOIN, 0); }
		public TerminalNode RIGHT_JOIN() { return getToken(DRDSSQLStatementParser.RIGHT_JOIN, 0); }
		public TerminalNode RIGHT_OUTER_JOIN() { return getToken(DRDSSQLStatementParser.RIGHT_OUTER_JOIN, 0); }
		public TerminalNode NATURAL_RIGHT_JOIN() { return getToken(DRDSSQLStatementParser.NATURAL_RIGHT_JOIN, 0); }
		public TerminalNode NATURAL_RIGHT_OUTER_JOIN() { return getToken(DRDSSQLStatementParser.NATURAL_RIGHT_OUTER_JOIN, 0); }
		public TerminalNode JOIN() { return getToken(DRDSSQLStatementParser.JOIN, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_joinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2881);
			_la = _input.LA(1);
			if ( !(_la==JOIN || _la==STRAIGHT_JOIN || ((((_la - 688)) & ~0x3f) == 0 && ((1L << (_la - 688)) & ((1L << (COMMA - 688)) | (1L << (INNER_JOIN - 688)) | (1L << (CROSS_JOIN - 688)) | (1L << (NATURAL_JOIN - 688)) | (1L << (NATURAL_INNER_JOIN - 688)) | (1L << (LEFT_JOIN - 688)) | (1L << (LEFT_OUTER_JOIN - 688)) | (1L << (NATURAL_LEFT_JOIN - 688)) | (1L << (NATURAL_LEFT_OUTER_JOIN - 688)) | (1L << (RIGHT_JOIN - 688)) | (1L << (RIGHT_OUTER_JOIN - 688)) | (1L << (NATURAL_RIGHT_JOIN - 688)) | (1L << (NATURAL_RIGHT_OUTER_JOIN - 688)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RightJoinClauseContext extends ParserRuleContext {
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public TableReferenceBasicContext tableReferenceBasic() {
			return getRuleContext(TableReferenceBasicContext.class,0);
		}
		public IJoinConditionContext iJoinCondition() {
			return getRuleContext(IJoinConditionContext.class,0);
		}
		public RightJoinClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rightJoinClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRightJoinClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RightJoinClauseContext rightJoinClause() throws RecognitionException {
		RightJoinClauseContext _localctx = new RightJoinClauseContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_rightJoinClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2883);
			joinType();
			setState(2884);
			tableReferenceBasic();
			setState(2886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(2885);
				iJoinCondition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IJoinConditionContext extends ParserRuleContext {
		public IJoinConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iJoinCondition; }
	 
		public IJoinConditionContext() { }
		public void copyFrom(IJoinConditionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class JoinUsingConditionContext extends IJoinConditionContext {
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public JoinUsingConditionContext(IJoinConditionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJoinUsingCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JoinOnConditionContext extends IJoinConditionContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JoinOnConditionContext(IJoinConditionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJoinOnCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IJoinConditionContext iJoinCondition() throws RecognitionException {
		IJoinConditionContext _localctx = new IJoinConditionContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_iJoinCondition);
		int _la;
		try {
			setState(2902);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				_localctx = new JoinOnConditionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2888);
				match(ON);
				setState(2889);
				expr(0);
				}
				break;
			case USING:
				_localctx = new JoinUsingConditionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2890);
				match(USING);
				setState(2891);
				match(LEFT_PAREN);
				setState(2892);
				expr(0);
				setState(2897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2893);
					match(COMMA);
					setState(2894);
					expr(0);
					}
					}
					setState(2899);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2900);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DRDSSQLStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2904);
			match(WHERE);
			setState(2905);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DRDSSQLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public WithRollupContext withRollup() {
			return getRuleContext(WithRollupContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_groupByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(2907);
				match(GROUP);
				setState(2908);
				match(BY);
				setState(2909);
				groupByItem();
				setState(2914);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2910);
						match(COMMA);
						setState(2911);
						groupByItem();
						}
						} 
					}
					setState(2916);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
				}
				setState(2918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					setState(2917);
					withRollup();
					}
					break;
				}
				}
				break;
			}
			setState(2923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				setState(2922);
				havingClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DRDSSQLStatementParser.HAVING, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2925);
			match(HAVING);
			setState(2926);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_groupByItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2928);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DRDSSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public List<OrderByItemContext> orderByItem() {
			return getRuleContexts(OrderByItemContext.class);
		}
		public OrderByItemContext orderByItem(int i) {
			return getRuleContext(OrderByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public WithRollupContext withRollup() {
			return getRuleContext(WithRollupContext.class,0);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_orderByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2930);
			match(ORDER);
			setState(2931);
			match(BY);
			setState(2932);
			orderByItem();
			setState(2937);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,321,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2933);
					match(COMMA);
					setState(2934);
					orderByItem();
					}
					} 
				}
				setState(2939);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,321,_ctx);
			}
			setState(2941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(2940);
				withRollup();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByItemContext extends ParserRuleContext {
		public ExprContext sortKey;
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public OrderingSpecificationContext orderingSpecification() {
			return getRuleContext(OrderingSpecificationContext.class,0);
		}
		public OrderByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOrderByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByItemContext orderByItem() throws RecognitionException {
		OrderByItemContext _localctx = new OrderByItemContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_orderByItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2943);
			((OrderByItemContext)_localctx).sortKey = expr(0);
			setState(2945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2944);
				orderingSpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOffsetClauseContext extends ParserRuleContext {
		public ExprContext offset;
		public ExprContext limit;
		public TerminalNode LIMIT() { return getToken(DRDSSQLStatementParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(DRDSSQLStatementParser.OFFSET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public LimitOffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOffsetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLimitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitOffsetClauseContext limitOffsetClause() throws RecognitionException {
		LimitOffsetClauseContext _localctx = new LimitOffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_limitOffsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2947);
			match(LIMIT);
			setState(2958);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				setState(2951);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					setState(2948);
					((LimitOffsetClauseContext)_localctx).offset = expr(0);
					setState(2949);
					match(COMMA);
					}
					break;
				}
				setState(2953);
				((LimitOffsetClauseContext)_localctx).limit = expr(0);
				}
				break;
			case 2:
				{
				setState(2954);
				((LimitOffsetClauseContext)_localctx).limit = expr(0);
				setState(2955);
				match(OFFSET);
				setState(2956);
				((LimitOffsetClauseContext)_localctx).offset = expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ISelectQueryIntoClauseContext extends ParserRuleContext {
		public ISelectQueryIntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iSelectQueryIntoClause; }
	 
		public ISelectQueryIntoClauseContext() { }
		public void copyFrom(ISelectQueryIntoClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoTextFileContext extends ISelectQueryIntoClauseContext {
		public ExprContext filename;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(DRDSSQLStatementParser.OUTFILE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public TerminalNode LINES() { return getToken(DRDSSQLStatementParser.LINES, 0); }
		public TerminalNode FIELDS() { return getToken(DRDSSQLStatementParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(DRDSSQLStatementParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(ISelectQueryIntoClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectQueryIntoClauseContext extends ISelectQueryIntoClauseContext {
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public SelectQueryIntoClauseContext(ISelectQueryIntoClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectQueryIntoDumpFileClauseContext extends ISelectQueryIntoClauseContext {
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(DRDSSQLStatementParser.DUMPFILE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectQueryIntoDumpFileClauseContext(ISelectQueryIntoClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryIntoDumpFileClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ISelectQueryIntoClauseContext iSelectQueryIntoClause() throws RecognitionException {
		ISelectQueryIntoClauseContext _localctx = new ISelectQueryIntoClauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_iSelectQueryIntoClause);
		int _la;
		try {
			int _alt;
			setState(2994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				_localctx = new SelectQueryIntoClauseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2960);
				match(INTO);
				setState(2961);
				expr(0);
				setState(2966);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,326,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2962);
						match(COMMA);
						setState(2963);
						expr(0);
						}
						} 
					}
					setState(2968);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,326,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new SelectQueryIntoDumpFileClauseContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2969);
				match(INTO);
				setState(2970);
				match(DUMPFILE);
				setState(2971);
				expr(0);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2972);
				match(INTO);
				setState(2973);
				match(OUTFILE);
				setState(2974);
				((SelectIntoTextFileContext)_localctx).filename = expr(0);
				setState(2976);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					setState(2975);
					characterSetOptionExpr();
					}
					break;
				}
				setState(2984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(2978);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2980); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2979);
							selectFieldsInto();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2982); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
					} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				setState(2992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(2986);
					match(LINES);
					setState(2988); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2987);
							selectLinesInto();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2990); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,330,_ctx);
					} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ILockClauseContext extends ParserRuleContext {
		public ILockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iLockClause; }
	 
		public ILockClauseContext() { }
		public void copyFrom(ILockClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ForUpdateClauseContext extends ILockClauseContext {
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DRDSSQLStatementParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(DRDSSQLStatementParser.SHARE, 0); }
		public TerminalNode OF() { return getToken(DRDSSQLStatementParser.OF, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public ForUpdateOptionContext forUpdateOption() {
			return getRuleContext(ForUpdateOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ForUpdateClauseContext(ILockClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitForUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LockInShareModeClauseContext extends ILockClauseContext {
		public TerminalNode LOCK() { return getToken(DRDSSQLStatementParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(DRDSSQLStatementParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(DRDSSQLStatementParser.MODE, 0); }
		public LockInShareModeClauseContext(ILockClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLockInShareModeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ILockClauseContext iLockClause() throws RecognitionException {
		ILockClauseContext _localctx = new ILockClauseContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_iLockClause);
		int _la;
		try {
			int _alt;
			setState(3016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				_localctx = new ForUpdateClauseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2996);
				match(FOR);
				setState(2997);
				_la = _input.LA(1);
				if ( !(_la==UPDATE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(2998);
					match(OF);
					setState(2999);
					expr(0);
					setState(3004);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
					while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3000);
							match(COMMA);
							setState(3001);
							expr(0);
							}
							} 
						}
						setState(3006);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
					}
					}
					break;
				}
				setState(3010);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					setState(3009);
					forUpdateOption();
					}
					break;
				}
				}
				break;
			case LOCK:
				_localctx = new LockInShareModeClauseContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3012);
				match(LOCK);
				setState(3013);
				match(IN);
				setState(3014);
				match(SHARE);
				setState(3015);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForUpdateOptionContext extends ParserRuleContext {
		public ForUpdateOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forUpdateOption; }
	 
		public ForUpdateOptionContext() { }
		public void copyFrom(ForUpdateOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ForUpdateSkipLockedOptionContext extends ForUpdateOptionContext {
		public TerminalNode SKIP_() { return getToken(DRDSSQLStatementParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(DRDSSQLStatementParser.LOCKED, 0); }
		public ForUpdateSkipLockedOptionContext(ForUpdateOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitForUpdateSkipLockedOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForUpdateNoWaitOptionContext extends ForUpdateOptionContext {
		public TerminalNode NOWAIT() { return getToken(DRDSSQLStatementParser.NOWAIT, 0); }
		public ForUpdateNoWaitOptionContext(ForUpdateOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitForUpdateNoWaitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForUpdateOptionContext forUpdateOption() throws RecognitionException {
		ForUpdateOptionContext _localctx = new ForUpdateOptionContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_forUpdateOption);
		try {
			setState(3021);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				_localctx = new ForUpdateSkipLockedOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3018);
				match(SKIP_);
				setState(3019);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				_localctx = new ForUpdateNoWaitOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3020);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoStatementContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DRDSSQLStatementParser.SELECT, 0); }
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public List<SelectTargetItemContext> selectTargetItem() {
			return getRuleContexts(SelectTargetItemContext.class);
		}
		public SelectTargetItemContext selectTargetItem(int i) {
			return getRuleContext(SelectTargetItemContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode HIGH_PRIORITY() { return getToken(DRDSSQLStatementParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(DRDSSQLStatementParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(DRDSSQLStatementParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(DRDSSQLStatementParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(DRDSSQLStatementParser.SQL_BUFFER_RESULT, 0); }
		public SelectQueryCacheContext selectQueryCache() {
			return getRuleContext(SelectQueryCacheContext.class,0);
		}
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(DRDSSQLStatementParser.SQL_CALC_FOUND_ROWS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public ISelectQueryIntoClauseContext iSelectQueryIntoClause() {
			return getRuleContext(ISelectQueryIntoClauseContext.class,0);
		}
		public ILockClauseContext iLockClause() {
			return getRuleContext(ILockClauseContext.class,0);
		}
		public SelectIntoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectIntoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoStatementContext selectIntoStatement() throws RecognitionException {
		SelectIntoStatementContext _localctx = new SelectIntoStatementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_selectIntoStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3023);
			match(SELECT);
			setState(3025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(3024);
				setQuantifier();
				}
				break;
			}
			setState(3028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HIGH_PRIORITY) {
				{
				setState(3027);
				match(HIGH_PRIORITY);
				}
			}

			setState(3031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRAIGHT_JOIN) {
				{
				setState(3030);
				match(STRAIGHT_JOIN);
				}
			}

			setState(3034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SMALL_RESULT) {
				{
				setState(3033);
				match(SQL_SMALL_RESULT);
				}
			}

			setState(3037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_BIG_RESULT) {
				{
				setState(3036);
				match(SQL_BIG_RESULT);
				}
			}

			setState(3040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				{
				setState(3039);
				match(SQL_BUFFER_RESULT);
				}
				break;
			}
			setState(3043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				setState(3042);
				selectQueryCache();
				}
				break;
			}
			setState(3046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_CALC_FOUND_ROWS) {
				{
				setState(3045);
				match(SQL_CALC_FOUND_ROWS);
				}
			}

			setState(3048);
			selectItem();
			setState(3053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3049);
				match(COMMA);
				setState(3050);
				selectItem();
				}
				}
				setState(3055);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3056);
			match(INTO);
			setState(3057);
			selectTargetItem();
			setState(3062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3058);
				match(COMMA);
				setState(3059);
				selectTargetItem();
				}
				}
				setState(3064);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3065);
				fromClause();
				}
			}

			setState(3069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3068);
				whereClause();
				}
			}

			setState(3072);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
			case 1:
				{
				setState(3071);
				groupByClause();
				}
				break;
			}
			setState(3075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3074);
				orderByClause();
				}
			}

			setState(3078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3077);
				limitOffsetClause();
				}
			}

			setState(3081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3080);
				iSelectQueryIntoClause();
				}
			}

			setState(3084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				{
				setState(3083);
				iLockClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectTargetItemContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectTargetItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectTargetItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectTargetItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectTargetItemContext selectTargetItem() throws RecognitionException {
		SelectTargetItemContext _localctx = new SelectTargetItemContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_selectTargetItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3086);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public TerminalNode INSERT() { return getToken(DRDSSQLStatementParser.INSERT, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public IValueClauseContext iValueClause() {
			return getRuleContext(IValueClauseContext.class,0);
		}
		public PriorityContext priority() {
			return getRuleContext(PriorityContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(DRDSSQLStatementParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public OnDuplicateKeyUpdateClauseContext onDuplicateKeyUpdateClause() {
			return getRuleContext(OnDuplicateKeyUpdateClauseContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3088);
			match(INSERT);
			setState(3090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				setState(3089);
				priority();
				}
				break;
			}
			setState(3093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3092);
				match(IGNORE);
				}
			}

			setState(3096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3095);
				match(INTO);
				}
			}

			setState(3098);
			iTableReference();
			setState(3110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				{
				setState(3099);
				match(LEFT_PAREN);
				setState(3100);
				((InsertStatementContext)_localctx).expr = expr(0);
				((InsertStatementContext)_localctx).columns.add(((InsertStatementContext)_localctx).expr);
				setState(3105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3101);
					match(COMMA);
					setState(3102);
					((InsertStatementContext)_localctx).expr = expr(0);
					((InsertStatementContext)_localctx).columns.add(((InsertStatementContext)_localctx).expr);
					}
					}
					setState(3107);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3108);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3112);
			iValueClause();
			setState(3114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3113);
				onDuplicateKeyUpdateClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IValueClauseContext extends ParserRuleContext {
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public IValueClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iValueClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIValueClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IValueClauseContext iValueClause() throws RecognitionException {
		IValueClauseContext _localctx = new IValueClauseContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_iValueClause);
		try {
			setState(3119);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3116);
				valuesClause();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3117);
				updateSetClause();
				}
				break;
			case SELECT:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3118);
				iSelectQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public List<ValuesClauseItemContext> valuesClauseItem() {
			return getRuleContexts(ValuesClauseItemContext.class);
		}
		public ValuesClauseItemContext valuesClauseItem(int i) {
			return getRuleContext(ValuesClauseItemContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(DRDSSQLStatementParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(DRDSSQLStatementParser.VALUE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_valuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3121);
			_la = _input.LA(1);
			if ( !(_la==VALUES || _la==VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3122);
			valuesClauseItem();
			setState(3127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3123);
				match(COMMA);
				setState(3124);
				valuesClauseItem();
				}
				}
				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseItemContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ValuesClauseItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClauseItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitValuesClauseItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseItemContext valuesClauseItem() throws RecognitionException {
		ValuesClauseItemContext _localctx = new ValuesClauseItemContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_valuesClauseItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3130);
			match(LEFT_PAREN);
			setState(3131);
			expr(0);
			setState(3136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3132);
				match(COMMA);
				setState(3133);
				expr(0);
				}
				}
				setState(3138);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3139);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnDuplicateKeyUpdateClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(DRDSSQLStatementParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(DRDSSQLStatementParser.UPDATE, 0); }
		public List<AssignmentExprContext> assignmentExpr() {
			return getRuleContexts(AssignmentExprContext.class);
		}
		public AssignmentExprContext assignmentExpr(int i) {
			return getRuleContext(AssignmentExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public OnDuplicateKeyUpdateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onDuplicateKeyUpdateClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOnDuplicateKeyUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnDuplicateKeyUpdateClauseContext onDuplicateKeyUpdateClause() throws RecognitionException {
		OnDuplicateKeyUpdateClauseContext _localctx = new OnDuplicateKeyUpdateClauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_onDuplicateKeyUpdateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3141);
			match(ON);
			setState(3142);
			match(DUPLICATE);
			setState(3143);
			match(KEY);
			setState(3144);
			match(UPDATE);
			setState(3145);
			assignmentExpr();
			setState(3150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3146);
				match(COMMA);
				setState(3147);
				assignmentExpr();
				}
				}
				setState(3152);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DRDSSQLStatementParser.UPDATE, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(DRDSSQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode IGNORE() { return getToken(DRDSSQLStatementParser.IGNORE, 0); }
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_updateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3153);
			match(UPDATE);
			setState(3155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3154);
				match(LOW_PRIORITY);
				}
			}

			setState(3158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3157);
				match(IGNORE);
				}
			}

			setState(3160);
			iTableReference();
			setState(3162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				{
				setState(3161);
				updateSetClause();
				}
				break;
			}
			setState(3165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3164);
				whereClause();
				}
			}

			setState(3168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3167);
				orderByClause();
				}
			}

			setState(3171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3170);
				limitOffsetClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateSetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public List<UpdateSetItemClauseContext> updateSetItemClause() {
			return getRuleContexts(UpdateSetItemClauseContext.class);
		}
		public UpdateSetItemClauseContext updateSetItemClause(int i) {
			return getRuleContext(UpdateSetItemClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public UpdateSetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateSetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUpdateSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateSetClauseContext updateSetClause() throws RecognitionException {
		UpdateSetClauseContext _localctx = new UpdateSetClauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_updateSetClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3173);
			match(SET);
			setState(3174);
			updateSetItemClause();
			setState(3179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3175);
				match(COMMA);
				setState(3176);
				updateSetItemClause();
				}
				}
				setState(3181);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateSetItemClauseContext extends ParserRuleContext {
		public ExprContext column;
		public ExprContext value;
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public UpdateSetItemClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateSetItemClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUpdateSetItemClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateSetItemClauseContext updateSetItemClause() throws RecognitionException {
		UpdateSetItemClauseContext _localctx = new UpdateSetItemClauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_updateSetItemClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3182);
			((UpdateSetItemClauseContext)_localctx).column = expr(0);
			setState(3183);
			match(EQUALS_OP);
			setState(3184);
			((UpdateSetItemClauseContext)_localctx).value = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DRDSSQLStatementParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(DRDSSQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode QUICK() { return getToken(DRDSSQLStatementParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(DRDSSQLStatementParser.IGNORE, 0); }
		public DeleteStatementUsingClauseContext deleteStatementUsingClause() {
			return getRuleContext(DeleteStatementUsingClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_deleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3186);
			match(DELETE);
			setState(3188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3187);
				match(LOW_PRIORITY);
				}
			}

			setState(3191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3190);
				match(QUICK);
				}
			}

			setState(3194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3193);
				match(IGNORE);
				}
			}

			setState(3196);
			match(FROM);
			setState(3197);
			iTableReference();
			setState(3199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3198);
				deleteStatementUsingClause();
				}
			}

			setState(3202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3201);
				whereClause();
				}
			}

			setState(3205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3204);
				orderByClause();
				}
			}

			setState(3208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3207);
				limitOffsetClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementUsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public DeleteStatementUsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatementUsingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDeleteStatementUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementUsingClauseContext deleteStatementUsingClause() throws RecognitionException {
		DeleteStatementUsingClauseContext _localctx = new DeleteStatementUsingClauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_deleteStatementUsingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3210);
			match(USING);
			setState(3211);
			iTableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public TerminalNode REPLACE() { return getToken(DRDSSQLStatementParser.REPLACE, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public ReplaceStatementValuseClauseContext replaceStatementValuseClause() {
			return getRuleContext(ReplaceStatementValuseClauseContext.class,0);
		}
		public PriorityContext priority() {
			return getRuleContext(PriorityContext.class,0);
		}
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3213);
			match(REPLACE);
			setState(3215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(3214);
				priority();
				}
				break;
			}
			setState(3218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3217);
				match(INTO);
				}
			}

			setState(3220);
			iTableReference();
			setState(3232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3221);
				match(LEFT_PAREN);
				setState(3222);
				((ReplaceStatementContext)_localctx).expr = expr(0);
				((ReplaceStatementContext)_localctx).columns.add(((ReplaceStatementContext)_localctx).expr);
				setState(3227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3223);
					match(COMMA);
					setState(3224);
					((ReplaceStatementContext)_localctx).expr = expr(0);
					((ReplaceStatementContext)_localctx).columns.add(((ReplaceStatementContext)_localctx).expr);
					}
					}
					setState(3229);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3230);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3234);
			replaceStatementValuseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementValuseClauseContext extends ParserRuleContext {
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public ReplaceStatementValuseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatementValuseClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitReplaceStatementValuseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementValuseClauseContext replaceStatementValuseClause() throws RecognitionException {
		ReplaceStatementValuseClauseContext _localctx = new ReplaceStatementValuseClauseContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_replaceStatementValuseClause);
		try {
			setState(3239);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3236);
				valuesClause();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3237);
				updateSetClause();
				}
				break;
			case SELECT:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3238);
				iSelectQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(DRDSSQLStatementParser.CALL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3241);
			match(CALL);
			setState(3242);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataInfileStatementContext extends ParserRuleContext {
		public ExprContext fileName;
		public Token violation;
		public ExprContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(DRDSSQLStatementParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(DRDSSQLStatementParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(DRDSSQLStatementParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public PriorityContext priority() {
			return getRuleContext(PriorityContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(DRDSSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(DRDSSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode CHARACTER() { return getToken(DRDSSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public List<TerminalNode> LINES() { return getTokens(DRDSSQLStatementParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(DRDSSQLStatementParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(DRDSSQLStatementParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(DRDSSQLStatementParser.IGNORE, i);
		}
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(DRDSSQLStatementParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(DRDSSQLStatementParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(DRDSSQLStatementParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(DRDSSQLStatementParser.ROWS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public LoadDataInfileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataInfileStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLoadDataInfileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataInfileStatementContext loadDataInfileStatement() throws RecognitionException {
		LoadDataInfileStatementContext _localctx = new LoadDataInfileStatementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_loadDataInfileStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3244);
			match(LOAD);
			setState(3245);
			match(DATA);
			setState(3247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0) || _la==CONCURRENT) {
				{
				setState(3246);
				priority();
				}
			}

			setState(3250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3249);
				match(LOCAL);
				}
			}

			setState(3252);
			match(INFILE);
			setState(3253);
			((LoadDataInfileStatementContext)_localctx).fileName = expr(0);
			setState(3255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3254);
				((LoadDataInfileStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataInfileStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3257);
			match(INTO);
			setState(3258);
			match(TABLE);
			setState(3259);
			nameIdentifier();
			setState(3272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3260);
				match(PARTITION);
				setState(3261);
				match(LEFT_PAREN);
				setState(3262);
				expr(0);
				setState(3267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3263);
					match(COMMA);
					setState(3264);
					expr(0);
					}
					}
					setState(3269);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3270);
				match(RIGHT_PAREN);
				}
			}

			setState(3277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3274);
				match(CHARACTER);
				setState(3275);
				match(SET);
				setState(3276);
				((LoadDataInfileStatementContext)_localctx).charset = expr(0);
				}
			}

			setState(3285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3279);
				((LoadDataInfileStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataInfileStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3281); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3280);
					selectFieldsInto();
					}
					}
					setState(3283); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
				break;
			}
			setState(3293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(3287);
				match(LINES);
				setState(3289); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3288);
					selectLinesInto();
					}
					}
					setState(3291); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(3299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3295);
				match(IGNORE);
				setState(3296);
				expr(0);
				setState(3297);
				((LoadDataInfileStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataInfileStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3301);
				match(LEFT_PAREN);
				setState(3302);
				expr(0);
				setState(3307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3303);
					match(COMMA);
					setState(3304);
					expr(0);
					}
					}
					setState(3309);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3310);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3314);
				updateSetClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public ExprContext filename;
		public Token violation;
		public ExprContext charset;
		public ExprContext tag;
		public Token linesFormat;
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public TerminalNode LOAD() { return getToken(DRDSSQLStatementParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(DRDSSQLStatementParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(DRDSSQLStatementParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public PriorityContext priority() {
			return getRuleContext(PriorityContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(DRDSSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public List<TerminalNode> ROWS() { return getTokens(DRDSSQLStatementParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(DRDSSQLStatementParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(DRDSSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(DRDSSQLStatementParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(DRDSSQLStatementParser.IGNORE, i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(DRDSSQLStatementParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(DRDSSQLStatementParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3317);
			match(LOAD);
			setState(3318);
			match(XML);
			setState(3320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0) || _la==CONCURRENT) {
				{
				setState(3319);
				priority();
				}
			}

			setState(3323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3322);
				match(LOCAL);
				}
			}

			setState(3325);
			match(INFILE);
			setState(3326);
			((LoadXmlStatementContext)_localctx).filename = expr(0);
			setState(3328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3327);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3330);
			match(INTO);
			setState(3331);
			match(TABLE);
			setState(3332);
			nameIdentifier();
			setState(3336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3333);
				match(CHARACTER);
				setState(3334);
				match(SET);
				setState(3335);
				((LoadXmlStatementContext)_localctx).charset = expr(0);
				}
			}

			setState(3345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				setState(3338);
				match(ROWS);
				setState(3339);
				match(IDENTIFIED);
				setState(3340);
				match(BY);
				setState(3341);
				match(LESS_THAN_OP);
				setState(3342);
				((LoadXmlStatementContext)_localctx).tag = expr(0);
				setState(3343);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(3351);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3347);
				match(IGNORE);
				setState(3348);
				expr(0);
				setState(3349);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				setState(3353);
				match(LEFT_PAREN);
				setState(3354);
				((LoadXmlStatementContext)_localctx).expr = expr(0);
				((LoadXmlStatementContext)_localctx).columns.add(((LoadXmlStatementContext)_localctx).expr);
				setState(3359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3355);
					match(COMMA);
					setState(3356);
					((LoadXmlStatementContext)_localctx).expr = expr(0);
					((LoadXmlStatementContext)_localctx).columns.add(((LoadXmlStatementContext)_localctx).expr);
					}
					}
					setState(3361);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3362);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3366);
				updateSetClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(DRDSSQLStatementParser.DO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_doStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3369);
			match(DO);
			setState(3370);
			expr(0);
			setState(3375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3371);
				match(COMMA);
				setState(3372);
				expr(0);
				}
				}
				setState(3377);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_handlerStatement);
		try {
			setState(3381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3378);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3379);
				handlerReadStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3380);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext alias;
		public TerminalNode HANDLER() { return getToken(DRDSSQLStatementParser.HANDLER, 0); }
		public TerminalNode OPEN() { return getToken(DRDSSQLStatementParser.OPEN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3383);
			match(HANDLER);
			setState(3384);
			((HandlerOpenStatementContext)_localctx).name = nameIdentifier();
			setState(3385);
			match(OPEN);
			setState(3390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				setState(3387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3386);
					match(AS);
					}
				}

				setState(3389);
				((HandlerOpenStatementContext)_localctx).alias = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext index;
		public ExprContext expr;
		public List<ExprContext> values = new ArrayList<ExprContext>();
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(DRDSSQLStatementParser.HANDLER, 0); }
		public TerminalNode READ() { return getToken(DRDSSQLStatementParser.READ, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public ComparisonOpContext comparisonOp() {
			return getRuleContext(ComparisonOpContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FIRST() { return getToken(DRDSSQLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DRDSSQLStatementParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(DRDSSQLStatementParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(DRDSSQLStatementParser.LAST, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3392);
			match(HANDLER);
			setState(3393);
			((HandlerReadStatementContext)_localctx).name = nameIdentifier();
			setState(3394);
			match(READ);
			setState(3396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(3395);
				((HandlerReadStatementContext)_localctx).index = nameIdentifier();
				}
				break;
			}
			setState(3410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3398);
				comparisonOp();
				setState(3399);
				match(LEFT_PAREN);
				setState(3400);
				((HandlerReadStatementContext)_localctx).expr = expr(0);
				((HandlerReadStatementContext)_localctx).values.add(((HandlerReadStatementContext)_localctx).expr);
				setState(3405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3401);
					match(COMMA);
					setState(3402);
					((HandlerReadStatementContext)_localctx).expr = expr(0);
					((HandlerReadStatementContext)_localctx).values.add(((HandlerReadStatementContext)_localctx).expr);
					}
					}
					setState(3407);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3408);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(3412);
				((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3416);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3415);
				whereClause();
				}
			}

			setState(3419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3418);
				limitOffsetClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(DRDSSQLStatementParser.HANDLER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(DRDSSQLStatementParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			match(HANDLER);
			setState(3422);
			nameIdentifier();
			setState(3423);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public ExprContext terminationField;
		public ExprContext enclosion;
		public ExprContext escaping;
		public TerminalNode TERMINATED() { return getToken(DRDSSQLStatementParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ENCLOSED() { return getToken(DRDSSQLStatementParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(DRDSSQLStatementParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(DRDSSQLStatementParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3437);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3425);
				match(TERMINATED);
				setState(3426);
				match(BY);
				setState(3427);
				((SelectFieldsIntoContext)_localctx).terminationField = expr(0);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3428);
					match(OPTIONALLY);
					}
				}

				setState(3431);
				match(ENCLOSED);
				setState(3432);
				match(BY);
				setState(3433);
				((SelectFieldsIntoContext)_localctx).enclosion = expr(0);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3434);
				match(ESCAPED);
				setState(3435);
				match(BY);
				setState(3436);
				((SelectFieldsIntoContext)_localctx).escaping = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public ExprContext starting;
		public ExprContext terminationLine;
		public TerminalNode STARTING() { return getToken(DRDSSQLStatementParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode TERMINATED() { return getToken(DRDSSQLStatementParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_selectLinesInto);
		try {
			setState(3445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3439);
				match(STARTING);
				setState(3440);
				match(BY);
				setState(3441);
				((SelectLinesIntoContext)_localctx).starting = expr(0);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3442);
				match(TERMINATED);
				setState(3443);
				match(BY);
				setState(3444);
				((SelectLinesIntoContext)_localctx).terminationLine = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DRDSSQLStatementParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(DRDSSQLStatementParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3447);
			match(START);
			setState(3448);
			match(TRANSACTION);
			setState(3457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3449);
				transactionMode();
				setState(3454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3450);
					match(COMMA);
					setState(3451);
					transactionMode();
					}
					}
					setState(3456);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(DRDSSQLStatementParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DRDSSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(DRDSSQLStatementParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(DRDSSQLStatementParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(DRDSSQLStatementParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_transactionMode);
		try {
			setState(3466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3459);
				match(WITH);
				setState(3460);
				match(CONSISTENT);
				setState(3461);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3462);
				match(READ);
				setState(3463);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3464);
				match(READ);
				setState(3465);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(DRDSSQLStatementParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(DRDSSQLStatementParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_beginWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3468);
			match(BEGIN);
			setState(3470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				setState(3469);
				match(WORK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(DRDSSQLStatementParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(DRDSSQLStatementParser.WORK, 0); }
		public TerminalNode AND() { return getToken(DRDSSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(DRDSSQLStatementParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(DRDSSQLStatementParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(DRDSSQLStatementParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(DRDSSQLStatementParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3472);
			match(COMMIT);
			setState(3474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				setState(3473);
				match(WORK);
				}
				break;
			}
			setState(3481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3476);
				match(AND);
				setState(3478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3477);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3480);
				match(CHAIN);
				}
			}

			setState(3487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3483);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3486);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(DRDSSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(DRDSSQLStatementParser.WORK, 0); }
		public TerminalNode AND() { return getToken(DRDSSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(DRDSSQLStatementParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(DRDSSQLStatementParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(DRDSSQLStatementParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(DRDSSQLStatementParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3489);
			match(ROLLBACK);
			setState(3491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3490);
				match(WORK);
				}
				break;
			}
			setState(3498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3493);
				match(AND);
				setState(3495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3494);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3497);
				match(CHAIN);
				}
			}

			setState(3504);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3500);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3503);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(DRDSSQLStatementParser.SAVEPOINT, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3506);
			match(SAVEPOINT);
			setState(3507);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(DRDSSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode WORK() { return getToken(DRDSSQLStatementParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DRDSSQLStatementParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3509);
			match(ROLLBACK);
			setState(3511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3510);
				match(WORK);
				}
			}

			setState(3513);
			match(TO);
			setState(3515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3514);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3517);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(DRDSSQLStatementParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DRDSSQLStatementParser.SAVEPOINT, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3519);
			match(RELEASE);
			setState(3520);
			match(SAVEPOINT);
			setState(3521);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesStatementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(DRDSSQLStatementParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(DRDSSQLStatementParser.TABLES, 0); }
		public List<LockTableItemContext> lockTableItem() {
			return getRuleContexts(LockTableItemContext.class);
		}
		public LockTableItemContext lockTableItem(int i) {
			return getRuleContext(LockTableItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public LockTablesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTablesStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLockTablesStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesStatementContext lockTablesStatement() throws RecognitionException {
		LockTablesStatementContext _localctx = new LockTablesStatementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_lockTablesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3523);
			match(LOCK);
			setState(3524);
			match(TABLES);
			setState(3525);
			lockTableItem();
			setState(3530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3526);
				match(COMMA);
				setState(3527);
				lockTableItem();
				}
				}
				setState(3532);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableItemContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext alias;
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public LockTableItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLockTableItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableItemContext lockTableItem() throws RecognitionException {
		LockTableItemContext _localctx = new LockTableItemContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_lockTableItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3533);
			((LockTableItemContext)_localctx).name = nameIdentifier();
			setState(3538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
				{
				setState(3535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3534);
					match(AS);
					}
				}

				setState(3537);
				((LockTableItemContext)_localctx).alias = nameIdentifier();
				}
			}

			setState(3540);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(DRDSSQLStatementParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(DRDSSQLStatementParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(DRDSSQLStatementParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_lockAction);
		int _la;
		try {
			setState(3550);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3542);
				match(READ);
				setState(3544);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3543);
					match(LOCAL);
					}
					break;
				}
				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3546);
					match(LOW_PRIORITY);
					}
				}

				setState(3549);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesStatementContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(DRDSSQLStatementParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(DRDSSQLStatementParser.TABLES, 0); }
		public UnlockTablesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTablesStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUnlockTablesStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesStatementContext unlockTablesStatement() throws RecognitionException {
		UnlockTablesStatementContext _localctx = new UnlockTablesStatementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_unlockTablesStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3552);
			match(UNLOCK);
			setState(3553);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutoCommitStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(DRDSSQLStatementParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetAutoCommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutoCommitStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetAutoCommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutoCommitStatementContext setAutoCommitStatement() throws RecognitionException {
		SetAutoCommitStatementContext _localctx = new SetAutoCommitStatementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_setAutoCommitStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3555);
			match(SET);
			setState(3556);
			match(AUTOCOMMIT);
			setState(3557);
			match(EQUALS_OP);
			setState(3558);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(DRDSSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(DRDSSQLStatementParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(DRDSSQLStatementParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(DRDSSQLStatementParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(DRDSSQLStatementParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_transactionOption);
		try {
			setState(3567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3560);
				match(ISOLATION);
				setState(3561);
				match(LEVEL);
				setState(3562);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3563);
				match(READ);
				setState(3564);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3565);
				match(READ);
				setState(3566);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(DRDSSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(DRDSSQLStatementParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(DRDSSQLStatementParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DRDSSQLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DRDSSQLStatementParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_transactionLevel);
		try {
			setState(3576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3569);
				match(REPEATABLE);
				setState(3570);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3571);
				match(READ);
				setState(3572);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3573);
				match(READ);
				setState(3574);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3575);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(DRDSSQLStatementParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(DRDSSQLStatementParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3578);
			match(CHANGE);
			setState(3579);
			match(MASTER);
			setState(3580);
			match(TO);
			setState(3581);
			masterOption();
			setState(3586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3582);
				match(COMMA);
				setState(3583);
				masterOption();
				}
				}
				setState(3588);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3589);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(DRDSSQLStatementParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(DRDSSQLStatementParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(DRDSSQLStatementParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592);
			match(CHANGE);
			setState(3593);
			match(REPLICATION);
			setState(3594);
			match(FILTER);
			setState(3595);
			replicationFilter();
			setState(3600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3596);
				match(COMMA);
				setState(3597);
				replicationFilter();
				}
				}
				setState(3602);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public ExprContext fileName;
		public ExprContext timeValue;
		public TerminalNode PURGE() { return getToken(DRDSSQLStatementParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(DRDSSQLStatementParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(DRDSSQLStatementParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(DRDSSQLStatementParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(DRDSSQLStatementParser.BEFORE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			match(PURGE);
			setState(3604);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3605);
			match(LOGS);
			setState(3610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3606);
				match(TO);
				setState(3607);
				((PurgeBinaryLogsContext)_localctx).fileName = expr(0);
				}
				break;
			case BEFORE:
				{
				setState(3608);
				match(BEFORE);
				setState(3609);
				((PurgeBinaryLogsContext)_localctx).timeValue = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(DRDSSQLStatementParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(DRDSSQLStatementParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3612);
			match(RESET);
			setState(3613);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(DRDSSQLStatementParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(DRDSSQLStatementParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615);
			match(RESET);
			setState(3616);
			match(SLAVE);
			setState(3618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3617);
				match(ALL);
				}
				break;
			}
			setState(3621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3620);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DRDSSQLStatementParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(DRDSSQLStatementParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(DRDSSQLStatementParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_startSlave);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3623);
			match(START);
			setState(3624);
			match(SLAVE);
			setState(3633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				setState(3625);
				threadType();
				setState(3630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3626);
					match(COMMA);
					setState(3627);
					threadType();
					}
					}
					setState(3632);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3635);
				match(UNTIL);
				setState(3636);
				untilOption();
				}
			}

			setState(3642);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3639);
					connectionOption();
					}
					} 
				}
				setState(3644);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,453,_ctx);
			}
			setState(3646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3645);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(DRDSSQLStatementParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(DRDSSQLStatementParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3648);
			match(STOP);
			setState(3649);
			match(SLAVE);
			setState(3658);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3650);
				threadType();
				setState(3655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3651);
					match(COMMA);
					setState(3652);
					threadType();
					}
					}
					setState(3657);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DRDSSQLStatementParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(DRDSSQLStatementParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3660);
			match(START);
			setState(3661);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(DRDSSQLStatementParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(DRDSSQLStatementParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3663);
			match(STOP);
			setState(3664);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(DRDSSQLStatementParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(DRDSSQLStatementParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public MasterContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_masterOption);
		int _la;
		try {
			setState(3695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3666);
				stringMasterOption();
				setState(3667);
				match(EQUALS_OP);
				setState(3668);
				expr(0);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3670);
				decimalMasterOption();
				setState(3671);
				match(EQUALS_OP);
				setState(3672);
				expr(0);
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3674);
				boolMasterOption();
				setState(3675);
				match(EQUALS_OP);
				setState(3676);
				expr(0);
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3678);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(3679);
				match(EQUALS_OP);
				setState(3680);
				expr(0);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3681);
				match(IGNORE_SERVER_IDS);
				setState(3682);
				match(EQUALS_OP);
				setState(3683);
				match(LEFT_PAREN);
				setState(3692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
					{
					setState(3684);
					nameIdentifier();
					setState(3689);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3685);
						match(COMMA);
						setState(3686);
						nameIdentifier();
						}
						}
						setState(3691);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3694);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(DRDSSQLStatementParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(DRDSSQLStatementParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(DRDSSQLStatementParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(DRDSSQLStatementParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(DRDSSQLStatementParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(DRDSSQLStatementParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(DRDSSQLStatementParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(DRDSSQLStatementParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3697);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 383)) & ~0x3f) == 0 && ((1L << (_la - 383)) & ((1L << (MASTER_HOST - 383)) | (1L << (MASTER_LOG_FILE - 383)) | (1L << (MASTER_PASSWORD - 383)) | (1L << (MASTER_SSL_CA - 383)) | (1L << (MASTER_SSL_CAPATH - 383)) | (1L << (MASTER_SSL_CERT - 383)) | (1L << (MASTER_SSL_CIPHER - 383)) | (1L << (MASTER_SSL_CRL - 383)) | (1L << (MASTER_SSL_CRLPATH - 383)) | (1L << (MASTER_SSL_KEY - 383)) | (1L << (MASTER_TLS_VERSION - 383)) | (1L << (MASTER_USER - 383)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(DRDSSQLStatementParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(DRDSSQLStatementParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(DRDSSQLStatementParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(DRDSSQLStatementParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(DRDSSQLStatementParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(DRDSSQLStatementParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3699);
			_la = _input.LA(1);
			if ( !(((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (MASTER_CONNECT_RETRY - 380)) | (1L << (MASTER_DELAY - 380)) | (1L << (MASTER_LOG_POS - 380)) | (1L << (MASTER_PORT - 380)) | (1L << (MASTER_RETRY_COUNT - 380)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(DRDSSQLStatementParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(DRDSSQLStatementParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(DRDSSQLStatementParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3701);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(DRDSSQLStatementParser.CHANNEL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3703);
			match(FOR);
			setState(3704);
			match(CHANNEL);
			setState(3705);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(DRDSSQLStatementParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(DRDSSQLStatementParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(DRDSSQLStatementParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(DRDSSQLStatementParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(DRDSSQLStatementParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(DRDSSQLStatementParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(DRDSSQLStatementParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_replicationFilter);
		int _la;
		try {
			setState(3784);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3707);
				match(REPLICATE_DO_DB);
				setState(3708);
				match(EQUALS_OP);
				setState(3709);
				match(LEFT_PAREN);
				setState(3710);
				expr(0);
				setState(3715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3711);
					match(COMMA);
					setState(3712);
					expr(0);
					}
					}
					setState(3717);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3718);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3720);
				match(REPLICATE_IGNORE_DB);
				setState(3721);
				match(EQUALS_OP);
				setState(3722);
				match(LEFT_PAREN);
				setState(3723);
				expr(0);
				setState(3728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3724);
					match(COMMA);
					setState(3725);
					expr(0);
					}
					}
					setState(3730);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3731);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3733);
				match(REPLICATE_DO_TABLE);
				setState(3734);
				match(EQUALS_OP);
				setState(3735);
				match(LEFT_PAREN);
				setState(3736);
				expr(0);
				setState(3741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3737);
					match(COMMA);
					setState(3738);
					expr(0);
					}
					}
					setState(3743);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3744);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3746);
				match(REPLICATE_IGNORE_TABLE);
				setState(3747);
				match(EQUALS_OP);
				setState(3748);
				match(LEFT_PAREN);
				setState(3749);
				expr(0);
				setState(3754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3750);
					match(COMMA);
					setState(3751);
					expr(0);
					}
					}
					setState(3756);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3757);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3759);
				match(REPLICATE_WILD_DO_TABLE);
				setState(3760);
				match(EQUALS_OP);
				setState(3761);
				match(LEFT_PAREN);
				setState(3762);
				simpleStrings();
				setState(3763);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3765);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(3766);
				match(EQUALS_OP);
				setState(3767);
				match(LEFT_PAREN);
				setState(3768);
				simpleStrings();
				setState(3769);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(3771);
				match(REPLICATE_REWRITE_DB);
				setState(3772);
				match(EQUALS_OP);
				setState(3773);
				match(LEFT_PAREN);
				setState(3774);
				tablePair();
				setState(3779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3775);
					match(COMMA);
					setState(3776);
					tablePair();
					}
					}
					setState(3781);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3782);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public NameIdentifierContext firstTable;
		public NameIdentifierContext secondTable;
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3786);
			match(LEFT_PAREN);
			setState(3787);
			((TablePairContext)_localctx).firstTable = nameIdentifier();
			setState(3788);
			match(COMMA);
			setState(3789);
			((TablePairContext)_localctx).secondTable = nameIdentifier();
			setState(3790);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(DRDSSQLStatementParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(DRDSSQLStatementParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3792);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public GtnameIdentifierSetContext gtnameIdentifierSet() {
			return getRuleContext(GtnameIdentifierSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(DRDSSQLStatementParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(DRDSSQLStatementParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(DRDSSQLStatementParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(DRDSSQLStatementParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(DRDSSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(DRDSSQLStatementParser.EQUALS_OP, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(DRDSSQLStatementParser.MASTER_LOG_POS, 0); }
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(DRDSSQLStatementParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(DRDSSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(DRDSSQLStatementParser.EQUALS_OP, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(DRDSSQLStatementParser.RELAY_LOG_POS, 0); }
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_untilOption);
		int _la;
		try {
			setState(3814);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3794);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3795);
				match(EQUALS_OP);
				setState(3796);
				gtnameIdentifierSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3797);
				match(MASTER_LOG_FILE);
				setState(3798);
				match(EQUALS_OP);
				setState(3799);
				expr(0);
				setState(3800);
				match(COMMA);
				setState(3801);
				match(MASTER_LOG_POS);
				setState(3802);
				match(EQUALS_OP);
				setState(3803);
				expr(0);
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3805);
				match(RELAY_LOG_FILE);
				setState(3806);
				match(EQUALS_OP);
				setState(3807);
				expr(0);
				setState(3808);
				match(COMMA);
				setState(3809);
				match(RELAY_LOG_POS);
				setState(3810);
				match(EQUALS_OP);
				setState(3811);
				expr(0);
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3813);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public ExprContext conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(DRDSSQLStatementParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public ExprContext conOptUser;
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public ExprContext conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(DRDSSQLStatementParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public ExprContext conOptPassword;
		public TerminalNode PASSWORD() { return getToken(DRDSSQLStatementParser.PASSWORD, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_connectionOption);
		try {
			setState(3828);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3816);
				match(USER);
				setState(3817);
				match(EQUALS_OP);
				setState(3818);
				((UserConnectionOptionContext)_localctx).conOptUser = expr(0);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3819);
				match(PASSWORD);
				setState(3820);
				match(EQUALS_OP);
				setState(3821);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = expr(0);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3822);
				match(DEFAULT_AUTH);
				setState(3823);
				match(EQUALS_OP);
				setState(3824);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = expr(0);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3825);
				match(PLUGIN_DIR);
				setState(3826);
				match(EQUALS_OP);
				setState(3827);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtnameIdentifierSetContext extends ParserRuleContext {
		public List<UnameIdentifierSetContext> unameIdentifierSet() {
			return getRuleContexts(UnameIdentifierSetContext.class);
		}
		public UnameIdentifierSetContext unameIdentifierSet(int i) {
			return getRuleContext(UnameIdentifierSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public GtnameIdentifierSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtnameIdentifierSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGtnameIdentifierSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtnameIdentifierSetContext gtnameIdentifierSet() throws RecognitionException {
		GtnameIdentifierSetContext _localctx = new GtnameIdentifierSetContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_gtnameIdentifierSet);
		int _la;
		try {
			setState(3839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3830);
				unameIdentifierSet();
				setState(3835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3831);
					match(COMMA);
					setState(3832);
					unameIdentifierSet();
					}
					}
					setState(3837);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3838);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(DRDSSQLStatementParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(DRDSSQLStatementParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(DRDSSQLStatementParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(DRDSSQLStatementParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(DRDSSQLStatementParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			match(XA);
			setState(3842);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3843);
			xid();
			setState(3845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(3844);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(DRDSSQLStatementParser.XA, 0); }
		public TerminalNode END() { return getToken(DRDSSQLStatementParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(DRDSSQLStatementParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(DRDSSQLStatementParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3847);
			match(XA);
			setState(3848);
			match(END);
			setState(3849);
			xid();
			setState(3855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(3850);
				match(SUSPEND);
				setState(3853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3851);
					match(FOR);
					setState(3852);
					match(MIGRATE);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(DRDSSQLStatementParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(DRDSSQLStatementParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3857);
			match(XA);
			setState(3858);
			match(PREPARE);
			setState(3859);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(DRDSSQLStatementParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(DRDSSQLStatementParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(DRDSSQLStatementParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(DRDSSQLStatementParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_xaCommitWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3861);
			match(XA);
			setState(3862);
			match(COMMIT);
			setState(3863);
			xid();
			setState(3866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(3864);
				match(ONE);
				setState(3865);
				match(PHASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(DRDSSQLStatementParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(DRDSSQLStatementParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			match(XA);
			setState(3869);
			match(ROLLBACK);
			setState(3870);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(DRDSSQLStatementParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(DRDSSQLStatementParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(DRDSSQLStatementParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_xaRecoverWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3872);
			match(XA);
			setState(3873);
			match(RECOVER);
			setState(3876);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(3874);
				match(CONVERT);
				setState(3875);
				xid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(DRDSSQLStatementParser.PREPARE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3878);
			match(PREPARE);
			setState(3879);
			nameIdentifier();
			setState(3880);
			match(FROM);
			setState(3881);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(DRDSSQLStatementParser.EXECUTE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3883);
			match(EXECUTE);
			setState(3884);
			nameIdentifier();
			setState(3887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3885);
				match(USING);
				setState(3886);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(DRDSSQLStatementParser.PREPARE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(DRDSSQLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3889);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3890);
			match(PREPARE);
			setState(3891);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementItemContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(DRDSSQLStatementParser.SEMI, 0); }
		public TerminalNode EOF() { return getToken(DRDSSQLStatementParser.EOF, 0); }
		public StatementItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStatementItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementItemContext statementItem() throws RecognitionException {
		StatementItemContext _localctx = new StatementItemContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_statementItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3893);
			statement();
			setState(3894);
			_la = _input.LA(1);
			if ( !(_la==EOF || _la==SEMI) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public NameIdentifierContext beginName;
		public NameIdentifierContext endName;
		public TerminalNode BEGIN() { return getToken(DRDSSQLStatementParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(DRDSSQLStatementParser.END, 0); }
		public TerminalNode COLON() { return getToken(DRDSSQLStatementParser.COLON, 0); }
		public List<BodyItemContext> bodyItem() {
			return getRuleContexts(BodyItemContext.class);
		}
		public BodyItemContext bodyItem(int i) {
			return getRuleContext(BodyItemContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3899);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(3896);
				((BodyContext)_localctx).beginName = nameIdentifier();
				setState(3897);
				match(COLON);
				}
				break;
			}
			setState(3901);
			match(BEGIN);
			setState(3905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (ITERATE - 76)) | (1L << (KILL - 76)) | (1L << (LEAVE - 76)) | (1L << (LEFT - 76)) | (1L << (LOAD - 76)) | (1L << (LOCK - 76)) | (1L << (LOOP - 76)) | (1L << (OPTIMIZE - 76)) | (1L << (PURGE - 76)) | (1L << (RELEASE - 76)) | (1L << (RENAME - 76)) | (1L << (REPEAT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVOKE - 140)) | (1L << (RIGHT - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SHOW - 140)) | (1L << (UNLOCK - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WHILE - 140)) | (1L << (DATE - 140)) | (1L << (TIME - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (TIMESTAMP - 204)) | (1L << (DATETIME - 204)) | (1L << (YEAR - 204)) | (1L << (TEXT - 204)) | (1L << (ENUM - 204)) | (1L << (SUM - 204)) | (1L << (SUBSTR - 204)) | (1L << (SUBSTRING - 204)) | (1L << (ACCOUNT - 204)) | (1L << (ACTION - 204)) | (1L << (AFTER - 204)) | (1L << (AGGREGATE - 204)) | (1L << (ALGORITHM - 204)) | (1L << (ANY - 204)) | (1L << (AT - 204)) | (1L << (AUTHORS - 204)) | (1L << (AUTOCOMMIT - 204)) | (1L << (AUTOEXTEND_SIZE - 204)) | (1L << (AUTO_INCREMENT - 204)) | (1L << (AVG_ROW_LENGTH - 204)) | (1L << (BEGIN - 204)) | (1L << (BINLOG - 204)) | (1L << (BIT - 204)) | (1L << (BLOCK - 204)) | (1L << (BOOL - 204)) | (1L << (BOOLEAN - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (BTREE - 268)) | (1L << (CACHE - 268)) | (1L << (CASCADED - 268)) | (1L << (CHAIN - 268)) | (1L << (CHANNEL - 268)) | (1L << (CHECKSUM - 268)) | (1L << (CIPHER - 268)) | (1L << (CLIENT - 268)) | (1L << (CLOSE - 268)) | (1L << (COALESCE - 268)) | (1L << (CODE - 268)) | (1L << (COLUMNS - 268)) | (1L << (COLUMN_FORMAT - 268)) | (1L << (COMMENT - 268)) | (1L << (COMMIT - 268)) | (1L << (COMPACT - 268)) | (1L << (COMPLETION - 268)) | (1L << (COMPRESSED - 268)) | (1L << (COMPRESSION - 268)) | (1L << (CONCURRENT - 268)) | (1L << (CONNECTION - 268)) | (1L << (CONSISTENT - 268)) | (1L << (CONTAINS - 268)) | (1L << (CONTEXT - 268)) | (1L << (CONTRIBUTORS - 268)) | (1L << (COPY - 268)) | (1L << (CPU - 268)) | (1L << (DATA - 268)) | (1L << (DATAFILE - 268)) | (1L << (DEALLOCATE - 268)) | (1L << (DEFAULT_AUTH - 268)) | (1L << (DEFINER - 268)) | (1L << (DELAY_KEY_WRITE - 268)) | (1L << (DIRECTORY - 268)) | (1L << (DISABLE - 268)) | (1L << (DISCARD - 268)) | (1L << (DISK - 268)) | (1L << (DO - 268)) | (1L << (DUMPFILE - 268)) | (1L << (DUPLICATE - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ENABLE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDS - 268)) | (1L << (ENGINE - 268)) | (1L << (ENGINES - 268)) | (1L << (ERROR - 268)) | (1L << (ERRORS - 268)) | (1L << (ESCAPE - 268)) | (1L << (EVEN - 268)) | (1L << (EVENT - 268)) | (1L << (EVENTS - 268)) | (1L << (EVERY - 268)) | (1L << (EXCHANGE - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXPIRE - 268)) | (1L << (EXTENT_SIZE - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FAULTS - 332)) | (1L << (FIELDS - 332)) | (1L << (FILE_BLOCK_SIZE - 332)) | (1L << (FILTER - 332)) | (1L << (FIRST - 332)) | (1L << (FIXED - 332)) | (1L << (FLUSH - 332)) | (1L << (FOLLOWS - 332)) | (1L << (FULL - 332)) | (1L << (FUNCTION - 332)) | (1L << (GLOBAL - 332)) | (1L << (GRANTS - 332)) | (1L << (GROUP_REPLICATION - 332)) | (1L << (HANDLER - 332)) | (1L << (HASH - 332)) | (1L << (HELP - 332)) | (1L << (HOST - 332)) | (1L << (IDENTIFIED - 332)) | (1L << (IGNORE_SERVER_IDS - 332)) | (1L << (IMPORT - 332)) | (1L << (INDEXES - 332)) | (1L << (INITIAL_SIZE - 332)) | (1L << (INPLACE - 332)) | (1L << (INSERT_METHOD - 332)) | (1L << (INSTALL - 332)) | (1L << (INSTANCE - 332)) | (1L << (INVOKER - 332)) | (1L << (IO - 332)) | (1L << (IO_THREAD - 332)) | (1L << (IPC - 332)) | (1L << (ISOLATION - 332)) | (1L << (ISSUER - 332)) | (1L << (KEY_BLOCK_SIZE - 332)) | (1L << (LANGUAGE - 332)) | (1L << (LAST - 332)) | (1L << (LEAVES - 332)) | (1L << (LESS - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LOCAL - 332)) | (1L << (LOGFILE - 332)) | (1L << (LOGS - 332)) | (1L << (MASTER - 332)) | (1L << (MASTER_AUTO_POSITION - 332)) | (1L << (MASTER_CONNECT_RETRY - 332)) | (1L << (MASTER_DELAY - 332)) | (1L << (MASTER_HEARTBEAT_PERIOD - 332)) | (1L << (MASTER_HOST - 332)) | (1L << (MASTER_LOG_FILE - 332)) | (1L << (MASTER_LOG_POS - 332)) | (1L << (MASTER_PASSWORD - 332)) | (1L << (MASTER_PORT - 332)) | (1L << (MASTER_RETRY_COUNT - 332)) | (1L << (MASTER_SSL - 332)) | (1L << (MASTER_SSL_CA - 332)) | (1L << (MASTER_SSL_CAPATH - 332)) | (1L << (MASTER_SSL_CERT - 332)) | (1L << (MASTER_SSL_CIPHER - 332)) | (1L << (MASTER_SSL_CRL - 332)) | (1L << (MASTER_SSL_CRLPATH - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_SSL_KEY - 396)) | (1L << (MASTER_TLS_VERSION - 396)) | (1L << (MASTER_USER - 396)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 396)) | (1L << (MAX_QUERIES_PER_HOUR - 396)) | (1L << (MAX_ROWS - 396)) | (1L << (MAX_SIZE - 396)) | (1L << (MAX_UPDATES_PER_HOUR - 396)) | (1L << (MAX_USER_CONNECTIONS - 396)) | (1L << (MERGE - 396)) | (1L << (MIGRATE - 396)) | (1L << (MIN_ROWS - 396)) | (1L << (MODIFY - 396)) | (1L << (MUTEX - 396)) | (1L << (MYSQL - 396)) | (1L << (NAME - 396)) | (1L << (NAMES - 396)) | (1L << (NCHAR - 396)) | (1L << (NEVER - 396)) | (1L << (NO - 396)) | (1L << (NODEGROUP - 396)) | (1L << (NONE - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OJ - 396)) | (1L << (OLD_PASSWORD - 396)) | (1L << (ONE - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN - 396)) | (1L << (OPTIMIZER_COSTS - 396)) | (1L << (OPTIONS - 396)) | (1L << (OWNER - 396)) | (1L << (PACK_KEYS - 396)) | (1L << (PAGE - 396)) | (1L << (PARSER - 396)) | (1L << (PARTIAL - 396)) | (1L << (PARTITIONING - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PASSWORD - 396)) | (1L << (PHASE - 396)) | (1L << (PLUGIN_DIR - 396)) | (1L << (PLUGINS - 396)) | (1L << (PORT - 396)) | (1L << (PRECEDES - 396)) | (1L << (PREPARE - 396)) | (1L << (PRESERVE - 396)) | (1L << (PREV - 396)) | (1L << (PROCESSLIST - 396)) | (1L << (PROFILE - 396)) | (1L << (PROFILES - 396)) | (1L << (PROXY - 396)) | (1L << (QUERY - 396)) | (1L << (QUICK - 396)) | (1L << (REBUILD - 396)) | (1L << (RECOVER - 396)) | (1L << (REDO_BUFFER_SIZE - 396)) | (1L << (REDUNDANT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (RELAY_LOG_FILE - 460)) | (1L << (RELAY_LOG_POS - 460)) | (1L << (RELAYLOG - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPAIR - 460)) | (1L << (REPLICATE_DO_DB - 460)) | (1L << (REPLICATE_DO_TABLE - 460)) | (1L << (REPLICATE_IGNORE_DB - 460)) | (1L << (REPLICATE_IGNORE_TABLE - 460)) | (1L << (REPLICATE_REWRITE_DB - 460)) | (1L << (REPLICATE_WILD_DO_TABLE - 460)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 460)) | (1L << (REPLICATION - 460)) | (1L << (RESET - 460)) | (1L << (RESUME - 460)) | (1L << (RETURNS - 460)) | (1L << (ROLLBACK - 460)) | (1L << (ROLLUP - 460)) | (1L << (ROTATE - 460)) | (1L << (ROW - 460)) | (1L << (ROWS - 460)) | (1L << (ROW_FORMAT - 460)) | (1L << (SAVEPOINT - 460)) | (1L << (SCHEDULE - 460)) | (1L << (SECURITY - 460)) | (1L << (SERVER - 460)) | (1L << (SESSION - 460)) | (1L << (SHARE - 460)) | (1L << (SHARED - 460)) | (1L << (SIGNED - 460)) | (1L << (SIMPLE - 460)) | (1L << (SLAVE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (SOCKET - 460)) | (1L << (SOME - 460)) | (1L << (SOUNDS - 460)) | (1L << (SOURCE - 460)) | (1L << (SQL_AFTER_GTIDS - 460)) | (1L << (SQL_AFTER_MTS_GAPS - 460)) | (1L << (SQL_BEFORE_GTIDS - 460)) | (1L << (SQL_BUFFER_RESULT - 460)) | (1L << (SQL_CACHE - 460)) | (1L << (SQL_NO_CACHE - 460)) | (1L << (SQL_THREAD - 460)) | (1L << (START - 460)) | (1L << (STARTS - 460)) | (1L << (STATS_AUTO_RECALC - 460)) | (1L << (STATS_PERSISTENT - 460)) | (1L << (STATS_SAMPLE_PAGES - 460)) | (1L << (STATUS - 460)) | (1L << (STOP - 460)) | (1L << (STORAGE - 460)) | (1L << (STRING - 460)) | (1L << (SUBJECT - 460)) | (1L << (SUBPARTITION - 460)) | (1L << (SUBPARTITIONS - 460)) | (1L << (SUSPEND - 460)) | (1L << (SWAPS - 460)) | (1L << (SWITCHES - 460)) | (1L << (TABLESPACE - 460)) | (1L << (TEMPORARY - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (TEMPTABLE - 524)) | (1L << (THAN - 524)) | (1L << (TRANSACTION - 524)) | (1L << (TRUNCATE - 524)) | (1L << (UNDEFINED - 524)) | (1L << (UNDOFILE - 524)) | (1L << (UNDO_BUFFER_SIZE - 524)) | (1L << (UNINSTALL - 524)) | (1L << (UNKNOWN - 524)) | (1L << (UPGRADE - 524)) | (1L << (USER - 524)) | (1L << (VALIDATION - 524)) | (1L << (VALUE - 524)) | (1L << (VARIABLES - 524)) | (1L << (VIEW - 524)) | (1L << (WAIT - 524)) | (1L << (WARNINGS - 524)) | (1L << (WITHOUT - 524)) | (1L << (WORK - 524)) | (1L << (WRAPPER - 524)) | (1L << (X509 - 524)) | (1L << (XA - 524)) | (1L << (XML - 524)) | (1L << (TABLES - 524)) | (1L << (ROUTINE - 524)) | (1L << (EXECUTE - 524)) | (1L << (FILE - 524)) | (1L << (PROCESS - 524)) | (1L << (RELOAD - 524)) | (1L << (SHUTDOWN - 524)) | (1L << (SUPER - 524)) | (1L << (PRIVILEGES - 524)) | (1L << (ARMSCII8 - 524)) | (1L << (ASCII - 524)) | (1L << (BIG5 - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (CP1250 - 588)) | (1L << (CP1251 - 588)) | (1L << (CP1256 - 588)) | (1L << (CP1257 - 588)) | (1L << (CP850 - 588)) | (1L << (CP852 - 588)) | (1L << (CP866 - 588)) | (1L << (CP932 - 588)) | (1L << (DEC8 - 588)) | (1L << (EUCJPMS - 588)) | (1L << (EUCKR - 588)) | (1L << (GB2312 - 588)) | (1L << (GBK - 588)) | (1L << (GEOSTD8 - 588)) | (1L << (GREEK - 588)) | (1L << (HEBREW - 588)) | (1L << (HP8 - 588)) | (1L << (KEYBCS2 - 588)) | (1L << (KOI8R - 588)) | (1L << (KOI8U - 588)) | (1L << (LATIN1 - 588)) | (1L << (LATIN2 - 588)) | (1L << (LATIN5 - 588)) | (1L << (LATIN7 - 588)) | (1L << (MACCE - 588)) | (1L << (MACROMAN - 588)) | (1L << (SJIS - 588)) | (1L << (SWE7 - 588)) | (1L << (TIS620 - 588)) | (1L << (UCS2 - 588)) | (1L << (UJIS - 588)) | (1L << (UTF16 - 588)) | (1L << (UTF16LE - 588)) | (1L << (UTF32 - 588)) | (1L << (UTF8 - 588)) | (1L << (UTF8MB3 - 588)) | (1L << (UTF8MB4 - 588)) | (1L << (ARCHIVE - 588)) | (1L << (BLACKHOLE - 588)) | (1L << (CSV - 588)) | (1L << (FEDERATED - 588)) | (1L << (INNODB - 588)) | (1L << (MEMORY - 588)) | (1L << (MRG_MYISAM - 588)) | (1L << (MYISAM - 588)) | (1L << (NDB - 588)) | (1L << (NDBCLUSTER - 588)) | (1L << (PERFOMANCE_SCHEMA - 588)) | (1L << (REPEATABLE - 588)) | (1L << (COMMITTED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (SERIALIZABLE - 588)) | (1L << (MOD - 588)) | (1L << (REVERSE - 588)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (LEFT_PAREN - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
				{
				{
				setState(3902);
				bodyItem();
				}
				}
				setState(3907);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3908);
			match(END);
			setState(3910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(3909);
				((BodyContext)_localctx).endName = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyItemContext extends ParserRuleContext {
		public BodyItemStatementContext bodyItemStatement() {
			return getRuleContext(BodyItemStatementContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(DRDSSQLStatementParser.SEMI, 0); }
		public TerminalNode EOF() { return getToken(DRDSSQLStatementParser.EOF, 0); }
		public BodyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bodyItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBodyItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyItemContext bodyItem() throws RecognitionException {
		BodyItemContext _localctx = new BodyItemContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_bodyItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3912);
			bodyItemStatement();
			setState(3913);
			_la = _input.LA(1);
			if ( !(_la==EOF || _la==SEMI) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyItemStatementContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public BodyItemStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bodyItemStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBodyItemStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyItemStatementContext bodyItemStatement() throws RecognitionException {
		BodyItemStatementContext _localctx = new BodyItemStatementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_bodyItemStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(DRDSSQLStatementParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(DRDSSQLStatementParser.CASE, i);
		}
		public TerminalNode END() { return getToken(DRDSSQLStatementParser.END, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<CaseStatementWhenItemContext> caseStatementWhenItem() {
			return getRuleContexts(CaseStatementWhenItemContext.class);
		}
		public CaseStatementWhenItemContext caseStatementWhenItem(int i) {
			return getRuleContext(CaseStatementWhenItemContext.class,i);
		}
		public CaseStatementElseClauseContext caseStatementElseClause() {
			return getRuleContext(CaseStatementElseClauseContext.class,0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3917);
			match(CASE);
			setState(3919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
				{
				setState(3918);
				expr(0);
				}
			}

			setState(3922); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3921);
				caseStatementWhenItem();
				}
				}
				setState(3924); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3926);
				caseStatementElseClause();
				}
			}

			setState(3929);
			match(END);
			setState(3930);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementWhenItemContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DRDSSQLStatementParser.WHEN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(DRDSSQLStatementParser.THEN, 0); }
		public StatementItemContext statementItem() {
			return getRuleContext(StatementItemContext.class,0);
		}
		public CaseStatementWhenItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatementWhenItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCaseStatementWhenItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementWhenItemContext caseStatementWhenItem() throws RecognitionException {
		CaseStatementWhenItemContext _localctx = new CaseStatementWhenItemContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_caseStatementWhenItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3932);
			match(WHEN);
			setState(3933);
			expr(0);
			setState(3934);
			match(THEN);
			setState(3935);
			statementItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementElseClauseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(DRDSSQLStatementParser.ELSE, 0); }
		public List<StatementItemContext> statementItem() {
			return getRuleContexts(StatementItemContext.class);
		}
		public StatementItemContext statementItem(int i) {
			return getRuleContext(StatementItemContext.class,i);
		}
		public CaseStatementElseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatementElseClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCaseStatementElseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementElseClauseContext caseStatementElseClause() throws RecognitionException {
		CaseStatementElseClauseContext _localctx = new CaseStatementElseClauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_caseStatementElseClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3937);
			match(ELSE);
			setState(3939); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3938);
				statementItem();
				}
				}
				setState(3941); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (ITERATE - 76)) | (1L << (KILL - 76)) | (1L << (LEAVE - 76)) | (1L << (LEFT - 76)) | (1L << (LOAD - 76)) | (1L << (LOCK - 76)) | (1L << (LOOP - 76)) | (1L << (OPTIMIZE - 76)) | (1L << (PURGE - 76)) | (1L << (RELEASE - 76)) | (1L << (RENAME - 76)) | (1L << (REPEAT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVOKE - 140)) | (1L << (RIGHT - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SHOW - 140)) | (1L << (UNLOCK - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WHILE - 140)) | (1L << (DATE - 140)) | (1L << (TIME - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (TIMESTAMP - 204)) | (1L << (DATETIME - 204)) | (1L << (YEAR - 204)) | (1L << (TEXT - 204)) | (1L << (ENUM - 204)) | (1L << (SUM - 204)) | (1L << (SUBSTR - 204)) | (1L << (SUBSTRING - 204)) | (1L << (ACCOUNT - 204)) | (1L << (ACTION - 204)) | (1L << (AFTER - 204)) | (1L << (AGGREGATE - 204)) | (1L << (ALGORITHM - 204)) | (1L << (ANY - 204)) | (1L << (AT - 204)) | (1L << (AUTHORS - 204)) | (1L << (AUTOCOMMIT - 204)) | (1L << (AUTOEXTEND_SIZE - 204)) | (1L << (AUTO_INCREMENT - 204)) | (1L << (AVG_ROW_LENGTH - 204)) | (1L << (BEGIN - 204)) | (1L << (BINLOG - 204)) | (1L << (BIT - 204)) | (1L << (BLOCK - 204)) | (1L << (BOOL - 204)) | (1L << (BOOLEAN - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (BTREE - 268)) | (1L << (CACHE - 268)) | (1L << (CASCADED - 268)) | (1L << (CHAIN - 268)) | (1L << (CHANNEL - 268)) | (1L << (CHECKSUM - 268)) | (1L << (CIPHER - 268)) | (1L << (CLIENT - 268)) | (1L << (CLOSE - 268)) | (1L << (COALESCE - 268)) | (1L << (CODE - 268)) | (1L << (COLUMNS - 268)) | (1L << (COLUMN_FORMAT - 268)) | (1L << (COMMENT - 268)) | (1L << (COMMIT - 268)) | (1L << (COMPACT - 268)) | (1L << (COMPLETION - 268)) | (1L << (COMPRESSED - 268)) | (1L << (COMPRESSION - 268)) | (1L << (CONCURRENT - 268)) | (1L << (CONNECTION - 268)) | (1L << (CONSISTENT - 268)) | (1L << (CONTAINS - 268)) | (1L << (CONTEXT - 268)) | (1L << (CONTRIBUTORS - 268)) | (1L << (COPY - 268)) | (1L << (CPU - 268)) | (1L << (DATA - 268)) | (1L << (DATAFILE - 268)) | (1L << (DEALLOCATE - 268)) | (1L << (DEFAULT_AUTH - 268)) | (1L << (DEFINER - 268)) | (1L << (DELAY_KEY_WRITE - 268)) | (1L << (DIRECTORY - 268)) | (1L << (DISABLE - 268)) | (1L << (DISCARD - 268)) | (1L << (DISK - 268)) | (1L << (DO - 268)) | (1L << (DUMPFILE - 268)) | (1L << (DUPLICATE - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ENABLE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDS - 268)) | (1L << (ENGINE - 268)) | (1L << (ENGINES - 268)) | (1L << (ERROR - 268)) | (1L << (ERRORS - 268)) | (1L << (ESCAPE - 268)) | (1L << (EVEN - 268)) | (1L << (EVENT - 268)) | (1L << (EVENTS - 268)) | (1L << (EVERY - 268)) | (1L << (EXCHANGE - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXPIRE - 268)) | (1L << (EXTENT_SIZE - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FAULTS - 332)) | (1L << (FIELDS - 332)) | (1L << (FILE_BLOCK_SIZE - 332)) | (1L << (FILTER - 332)) | (1L << (FIRST - 332)) | (1L << (FIXED - 332)) | (1L << (FLUSH - 332)) | (1L << (FOLLOWS - 332)) | (1L << (FULL - 332)) | (1L << (FUNCTION - 332)) | (1L << (GLOBAL - 332)) | (1L << (GRANTS - 332)) | (1L << (GROUP_REPLICATION - 332)) | (1L << (HANDLER - 332)) | (1L << (HASH - 332)) | (1L << (HELP - 332)) | (1L << (HOST - 332)) | (1L << (IDENTIFIED - 332)) | (1L << (IGNORE_SERVER_IDS - 332)) | (1L << (IMPORT - 332)) | (1L << (INDEXES - 332)) | (1L << (INITIAL_SIZE - 332)) | (1L << (INPLACE - 332)) | (1L << (INSERT_METHOD - 332)) | (1L << (INSTALL - 332)) | (1L << (INSTANCE - 332)) | (1L << (INVOKER - 332)) | (1L << (IO - 332)) | (1L << (IO_THREAD - 332)) | (1L << (IPC - 332)) | (1L << (ISOLATION - 332)) | (1L << (ISSUER - 332)) | (1L << (KEY_BLOCK_SIZE - 332)) | (1L << (LANGUAGE - 332)) | (1L << (LAST - 332)) | (1L << (LEAVES - 332)) | (1L << (LESS - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LOCAL - 332)) | (1L << (LOGFILE - 332)) | (1L << (LOGS - 332)) | (1L << (MASTER - 332)) | (1L << (MASTER_AUTO_POSITION - 332)) | (1L << (MASTER_CONNECT_RETRY - 332)) | (1L << (MASTER_DELAY - 332)) | (1L << (MASTER_HEARTBEAT_PERIOD - 332)) | (1L << (MASTER_HOST - 332)) | (1L << (MASTER_LOG_FILE - 332)) | (1L << (MASTER_LOG_POS - 332)) | (1L << (MASTER_PASSWORD - 332)) | (1L << (MASTER_PORT - 332)) | (1L << (MASTER_RETRY_COUNT - 332)) | (1L << (MASTER_SSL - 332)) | (1L << (MASTER_SSL_CA - 332)) | (1L << (MASTER_SSL_CAPATH - 332)) | (1L << (MASTER_SSL_CERT - 332)) | (1L << (MASTER_SSL_CIPHER - 332)) | (1L << (MASTER_SSL_CRL - 332)) | (1L << (MASTER_SSL_CRLPATH - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_SSL_KEY - 396)) | (1L << (MASTER_TLS_VERSION - 396)) | (1L << (MASTER_USER - 396)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 396)) | (1L << (MAX_QUERIES_PER_HOUR - 396)) | (1L << (MAX_ROWS - 396)) | (1L << (MAX_SIZE - 396)) | (1L << (MAX_UPDATES_PER_HOUR - 396)) | (1L << (MAX_USER_CONNECTIONS - 396)) | (1L << (MERGE - 396)) | (1L << (MIGRATE - 396)) | (1L << (MIN_ROWS - 396)) | (1L << (MODIFY - 396)) | (1L << (MUTEX - 396)) | (1L << (MYSQL - 396)) | (1L << (NAME - 396)) | (1L << (NAMES - 396)) | (1L << (NCHAR - 396)) | (1L << (NEVER - 396)) | (1L << (NO - 396)) | (1L << (NODEGROUP - 396)) | (1L << (NONE - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OJ - 396)) | (1L << (OLD_PASSWORD - 396)) | (1L << (ONE - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN - 396)) | (1L << (OPTIMIZER_COSTS - 396)) | (1L << (OPTIONS - 396)) | (1L << (OWNER - 396)) | (1L << (PACK_KEYS - 396)) | (1L << (PAGE - 396)) | (1L << (PARSER - 396)) | (1L << (PARTIAL - 396)) | (1L << (PARTITIONING - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PASSWORD - 396)) | (1L << (PHASE - 396)) | (1L << (PLUGIN_DIR - 396)) | (1L << (PLUGINS - 396)) | (1L << (PORT - 396)) | (1L << (PRECEDES - 396)) | (1L << (PREPARE - 396)) | (1L << (PRESERVE - 396)) | (1L << (PREV - 396)) | (1L << (PROCESSLIST - 396)) | (1L << (PROFILE - 396)) | (1L << (PROFILES - 396)) | (1L << (PROXY - 396)) | (1L << (QUERY - 396)) | (1L << (QUICK - 396)) | (1L << (REBUILD - 396)) | (1L << (RECOVER - 396)) | (1L << (REDO_BUFFER_SIZE - 396)) | (1L << (REDUNDANT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (RELAY_LOG_FILE - 460)) | (1L << (RELAY_LOG_POS - 460)) | (1L << (RELAYLOG - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPAIR - 460)) | (1L << (REPLICATE_DO_DB - 460)) | (1L << (REPLICATE_DO_TABLE - 460)) | (1L << (REPLICATE_IGNORE_DB - 460)) | (1L << (REPLICATE_IGNORE_TABLE - 460)) | (1L << (REPLICATE_REWRITE_DB - 460)) | (1L << (REPLICATE_WILD_DO_TABLE - 460)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 460)) | (1L << (REPLICATION - 460)) | (1L << (RESET - 460)) | (1L << (RESUME - 460)) | (1L << (RETURNS - 460)) | (1L << (ROLLBACK - 460)) | (1L << (ROLLUP - 460)) | (1L << (ROTATE - 460)) | (1L << (ROW - 460)) | (1L << (ROWS - 460)) | (1L << (ROW_FORMAT - 460)) | (1L << (SAVEPOINT - 460)) | (1L << (SCHEDULE - 460)) | (1L << (SECURITY - 460)) | (1L << (SERVER - 460)) | (1L << (SESSION - 460)) | (1L << (SHARE - 460)) | (1L << (SHARED - 460)) | (1L << (SIGNED - 460)) | (1L << (SIMPLE - 460)) | (1L << (SLAVE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (SOCKET - 460)) | (1L << (SOME - 460)) | (1L << (SOUNDS - 460)) | (1L << (SOURCE - 460)) | (1L << (SQL_AFTER_GTIDS - 460)) | (1L << (SQL_AFTER_MTS_GAPS - 460)) | (1L << (SQL_BEFORE_GTIDS - 460)) | (1L << (SQL_BUFFER_RESULT - 460)) | (1L << (SQL_CACHE - 460)) | (1L << (SQL_NO_CACHE - 460)) | (1L << (SQL_THREAD - 460)) | (1L << (START - 460)) | (1L << (STARTS - 460)) | (1L << (STATS_AUTO_RECALC - 460)) | (1L << (STATS_PERSISTENT - 460)) | (1L << (STATS_SAMPLE_PAGES - 460)) | (1L << (STATUS - 460)) | (1L << (STOP - 460)) | (1L << (STORAGE - 460)) | (1L << (STRING - 460)) | (1L << (SUBJECT - 460)) | (1L << (SUBPARTITION - 460)) | (1L << (SUBPARTITIONS - 460)) | (1L << (SUSPEND - 460)) | (1L << (SWAPS - 460)) | (1L << (SWITCHES - 460)) | (1L << (TABLESPACE - 460)) | (1L << (TEMPORARY - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (TEMPTABLE - 524)) | (1L << (THAN - 524)) | (1L << (TRANSACTION - 524)) | (1L << (TRUNCATE - 524)) | (1L << (UNDEFINED - 524)) | (1L << (UNDOFILE - 524)) | (1L << (UNDO_BUFFER_SIZE - 524)) | (1L << (UNINSTALL - 524)) | (1L << (UNKNOWN - 524)) | (1L << (UPGRADE - 524)) | (1L << (USER - 524)) | (1L << (VALIDATION - 524)) | (1L << (VALUE - 524)) | (1L << (VARIABLES - 524)) | (1L << (VIEW - 524)) | (1L << (WAIT - 524)) | (1L << (WARNINGS - 524)) | (1L << (WITHOUT - 524)) | (1L << (WORK - 524)) | (1L << (WRAPPER - 524)) | (1L << (X509 - 524)) | (1L << (XA - 524)) | (1L << (XML - 524)) | (1L << (TABLES - 524)) | (1L << (ROUTINE - 524)) | (1L << (EXECUTE - 524)) | (1L << (FILE - 524)) | (1L << (PROCESS - 524)) | (1L << (RELOAD - 524)) | (1L << (SHUTDOWN - 524)) | (1L << (SUPER - 524)) | (1L << (PRIVILEGES - 524)) | (1L << (ARMSCII8 - 524)) | (1L << (ASCII - 524)) | (1L << (BIG5 - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (CP1250 - 588)) | (1L << (CP1251 - 588)) | (1L << (CP1256 - 588)) | (1L << (CP1257 - 588)) | (1L << (CP850 - 588)) | (1L << (CP852 - 588)) | (1L << (CP866 - 588)) | (1L << (CP932 - 588)) | (1L << (DEC8 - 588)) | (1L << (EUCJPMS - 588)) | (1L << (EUCKR - 588)) | (1L << (GB2312 - 588)) | (1L << (GBK - 588)) | (1L << (GEOSTD8 - 588)) | (1L << (GREEK - 588)) | (1L << (HEBREW - 588)) | (1L << (HP8 - 588)) | (1L << (KEYBCS2 - 588)) | (1L << (KOI8R - 588)) | (1L << (KOI8U - 588)) | (1L << (LATIN1 - 588)) | (1L << (LATIN2 - 588)) | (1L << (LATIN5 - 588)) | (1L << (LATIN7 - 588)) | (1L << (MACCE - 588)) | (1L << (MACROMAN - 588)) | (1L << (SJIS - 588)) | (1L << (SWE7 - 588)) | (1L << (TIS620 - 588)) | (1L << (UCS2 - 588)) | (1L << (UJIS - 588)) | (1L << (UTF16 - 588)) | (1L << (UTF16LE - 588)) | (1L << (UTF32 - 588)) | (1L << (UTF8 - 588)) | (1L << (UTF8MB3 - 588)) | (1L << (UTF8MB4 - 588)) | (1L << (ARCHIVE - 588)) | (1L << (BLACKHOLE - 588)) | (1L << (CSV - 588)) | (1L << (FEDERATED - 588)) | (1L << (INNODB - 588)) | (1L << (MEMORY - 588)) | (1L << (MRG_MYISAM - 588)) | (1L << (MYISAM - 588)) | (1L << (NDB - 588)) | (1L << (NDBCLUSTER - 588)) | (1L << (PERFOMANCE_SCHEMA - 588)) | (1L << (REPEATABLE - 588)) | (1L << (COMMITTED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (SERIALIZABLE - 588)) | (1L << (MOD - 588)) | (1L << (REVERSE - 588)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (LEFT_PAREN - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public StatementItemContext statementItem;
		public List<StatementItemContext> then = new ArrayList<StatementItemContext>();
		public List<StatementItemContext> else_ = new ArrayList<StatementItemContext>();
		public List<TerminalNode> IF() { return getTokens(DRDSSQLStatementParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(DRDSSQLStatementParser.IF, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(DRDSSQLStatementParser.THEN, 0); }
		public TerminalNode END() { return getToken(DRDSSQLStatementParser.END, 0); }
		public List<ElseIfContext> elseIf() {
			return getRuleContexts(ElseIfContext.class);
		}
		public ElseIfContext elseIf(int i) {
			return getRuleContext(ElseIfContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(DRDSSQLStatementParser.ELSE, 0); }
		public List<StatementItemContext> statementItem() {
			return getRuleContexts(StatementItemContext.class);
		}
		public StatementItemContext statementItem(int i) {
			return getRuleContext(StatementItemContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_ifStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3943);
			match(IF);
			setState(3944);
			expr(0);
			setState(3945);
			match(THEN);
			setState(3947); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3946);
				((IfStatementContext)_localctx).statementItem = statementItem();
				((IfStatementContext)_localctx).then.add(((IfStatementContext)_localctx).statementItem);
				}
				}
				setState(3949); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (ITERATE - 76)) | (1L << (KILL - 76)) | (1L << (LEAVE - 76)) | (1L << (LEFT - 76)) | (1L << (LOAD - 76)) | (1L << (LOCK - 76)) | (1L << (LOOP - 76)) | (1L << (OPTIMIZE - 76)) | (1L << (PURGE - 76)) | (1L << (RELEASE - 76)) | (1L << (RENAME - 76)) | (1L << (REPEAT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVOKE - 140)) | (1L << (RIGHT - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SHOW - 140)) | (1L << (UNLOCK - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WHILE - 140)) | (1L << (DATE - 140)) | (1L << (TIME - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (TIMESTAMP - 204)) | (1L << (DATETIME - 204)) | (1L << (YEAR - 204)) | (1L << (TEXT - 204)) | (1L << (ENUM - 204)) | (1L << (SUM - 204)) | (1L << (SUBSTR - 204)) | (1L << (SUBSTRING - 204)) | (1L << (ACCOUNT - 204)) | (1L << (ACTION - 204)) | (1L << (AFTER - 204)) | (1L << (AGGREGATE - 204)) | (1L << (ALGORITHM - 204)) | (1L << (ANY - 204)) | (1L << (AT - 204)) | (1L << (AUTHORS - 204)) | (1L << (AUTOCOMMIT - 204)) | (1L << (AUTOEXTEND_SIZE - 204)) | (1L << (AUTO_INCREMENT - 204)) | (1L << (AVG_ROW_LENGTH - 204)) | (1L << (BEGIN - 204)) | (1L << (BINLOG - 204)) | (1L << (BIT - 204)) | (1L << (BLOCK - 204)) | (1L << (BOOL - 204)) | (1L << (BOOLEAN - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (BTREE - 268)) | (1L << (CACHE - 268)) | (1L << (CASCADED - 268)) | (1L << (CHAIN - 268)) | (1L << (CHANNEL - 268)) | (1L << (CHECKSUM - 268)) | (1L << (CIPHER - 268)) | (1L << (CLIENT - 268)) | (1L << (CLOSE - 268)) | (1L << (COALESCE - 268)) | (1L << (CODE - 268)) | (1L << (COLUMNS - 268)) | (1L << (COLUMN_FORMAT - 268)) | (1L << (COMMENT - 268)) | (1L << (COMMIT - 268)) | (1L << (COMPACT - 268)) | (1L << (COMPLETION - 268)) | (1L << (COMPRESSED - 268)) | (1L << (COMPRESSION - 268)) | (1L << (CONCURRENT - 268)) | (1L << (CONNECTION - 268)) | (1L << (CONSISTENT - 268)) | (1L << (CONTAINS - 268)) | (1L << (CONTEXT - 268)) | (1L << (CONTRIBUTORS - 268)) | (1L << (COPY - 268)) | (1L << (CPU - 268)) | (1L << (DATA - 268)) | (1L << (DATAFILE - 268)) | (1L << (DEALLOCATE - 268)) | (1L << (DEFAULT_AUTH - 268)) | (1L << (DEFINER - 268)) | (1L << (DELAY_KEY_WRITE - 268)) | (1L << (DIRECTORY - 268)) | (1L << (DISABLE - 268)) | (1L << (DISCARD - 268)) | (1L << (DISK - 268)) | (1L << (DO - 268)) | (1L << (DUMPFILE - 268)) | (1L << (DUPLICATE - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ENABLE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDS - 268)) | (1L << (ENGINE - 268)) | (1L << (ENGINES - 268)) | (1L << (ERROR - 268)) | (1L << (ERRORS - 268)) | (1L << (ESCAPE - 268)) | (1L << (EVEN - 268)) | (1L << (EVENT - 268)) | (1L << (EVENTS - 268)) | (1L << (EVERY - 268)) | (1L << (EXCHANGE - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXPIRE - 268)) | (1L << (EXTENT_SIZE - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FAULTS - 332)) | (1L << (FIELDS - 332)) | (1L << (FILE_BLOCK_SIZE - 332)) | (1L << (FILTER - 332)) | (1L << (FIRST - 332)) | (1L << (FIXED - 332)) | (1L << (FLUSH - 332)) | (1L << (FOLLOWS - 332)) | (1L << (FULL - 332)) | (1L << (FUNCTION - 332)) | (1L << (GLOBAL - 332)) | (1L << (GRANTS - 332)) | (1L << (GROUP_REPLICATION - 332)) | (1L << (HANDLER - 332)) | (1L << (HASH - 332)) | (1L << (HELP - 332)) | (1L << (HOST - 332)) | (1L << (IDENTIFIED - 332)) | (1L << (IGNORE_SERVER_IDS - 332)) | (1L << (IMPORT - 332)) | (1L << (INDEXES - 332)) | (1L << (INITIAL_SIZE - 332)) | (1L << (INPLACE - 332)) | (1L << (INSERT_METHOD - 332)) | (1L << (INSTALL - 332)) | (1L << (INSTANCE - 332)) | (1L << (INVOKER - 332)) | (1L << (IO - 332)) | (1L << (IO_THREAD - 332)) | (1L << (IPC - 332)) | (1L << (ISOLATION - 332)) | (1L << (ISSUER - 332)) | (1L << (KEY_BLOCK_SIZE - 332)) | (1L << (LANGUAGE - 332)) | (1L << (LAST - 332)) | (1L << (LEAVES - 332)) | (1L << (LESS - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LOCAL - 332)) | (1L << (LOGFILE - 332)) | (1L << (LOGS - 332)) | (1L << (MASTER - 332)) | (1L << (MASTER_AUTO_POSITION - 332)) | (1L << (MASTER_CONNECT_RETRY - 332)) | (1L << (MASTER_DELAY - 332)) | (1L << (MASTER_HEARTBEAT_PERIOD - 332)) | (1L << (MASTER_HOST - 332)) | (1L << (MASTER_LOG_FILE - 332)) | (1L << (MASTER_LOG_POS - 332)) | (1L << (MASTER_PASSWORD - 332)) | (1L << (MASTER_PORT - 332)) | (1L << (MASTER_RETRY_COUNT - 332)) | (1L << (MASTER_SSL - 332)) | (1L << (MASTER_SSL_CA - 332)) | (1L << (MASTER_SSL_CAPATH - 332)) | (1L << (MASTER_SSL_CERT - 332)) | (1L << (MASTER_SSL_CIPHER - 332)) | (1L << (MASTER_SSL_CRL - 332)) | (1L << (MASTER_SSL_CRLPATH - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_SSL_KEY - 396)) | (1L << (MASTER_TLS_VERSION - 396)) | (1L << (MASTER_USER - 396)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 396)) | (1L << (MAX_QUERIES_PER_HOUR - 396)) | (1L << (MAX_ROWS - 396)) | (1L << (MAX_SIZE - 396)) | (1L << (MAX_UPDATES_PER_HOUR - 396)) | (1L << (MAX_USER_CONNECTIONS - 396)) | (1L << (MERGE - 396)) | (1L << (MIGRATE - 396)) | (1L << (MIN_ROWS - 396)) | (1L << (MODIFY - 396)) | (1L << (MUTEX - 396)) | (1L << (MYSQL - 396)) | (1L << (NAME - 396)) | (1L << (NAMES - 396)) | (1L << (NCHAR - 396)) | (1L << (NEVER - 396)) | (1L << (NO - 396)) | (1L << (NODEGROUP - 396)) | (1L << (NONE - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OJ - 396)) | (1L << (OLD_PASSWORD - 396)) | (1L << (ONE - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN - 396)) | (1L << (OPTIMIZER_COSTS - 396)) | (1L << (OPTIONS - 396)) | (1L << (OWNER - 396)) | (1L << (PACK_KEYS - 396)) | (1L << (PAGE - 396)) | (1L << (PARSER - 396)) | (1L << (PARTIAL - 396)) | (1L << (PARTITIONING - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PASSWORD - 396)) | (1L << (PHASE - 396)) | (1L << (PLUGIN_DIR - 396)) | (1L << (PLUGINS - 396)) | (1L << (PORT - 396)) | (1L << (PRECEDES - 396)) | (1L << (PREPARE - 396)) | (1L << (PRESERVE - 396)) | (1L << (PREV - 396)) | (1L << (PROCESSLIST - 396)) | (1L << (PROFILE - 396)) | (1L << (PROFILES - 396)) | (1L << (PROXY - 396)) | (1L << (QUERY - 396)) | (1L << (QUICK - 396)) | (1L << (REBUILD - 396)) | (1L << (RECOVER - 396)) | (1L << (REDO_BUFFER_SIZE - 396)) | (1L << (REDUNDANT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (RELAY_LOG_FILE - 460)) | (1L << (RELAY_LOG_POS - 460)) | (1L << (RELAYLOG - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPAIR - 460)) | (1L << (REPLICATE_DO_DB - 460)) | (1L << (REPLICATE_DO_TABLE - 460)) | (1L << (REPLICATE_IGNORE_DB - 460)) | (1L << (REPLICATE_IGNORE_TABLE - 460)) | (1L << (REPLICATE_REWRITE_DB - 460)) | (1L << (REPLICATE_WILD_DO_TABLE - 460)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 460)) | (1L << (REPLICATION - 460)) | (1L << (RESET - 460)) | (1L << (RESUME - 460)) | (1L << (RETURNS - 460)) | (1L << (ROLLBACK - 460)) | (1L << (ROLLUP - 460)) | (1L << (ROTATE - 460)) | (1L << (ROW - 460)) | (1L << (ROWS - 460)) | (1L << (ROW_FORMAT - 460)) | (1L << (SAVEPOINT - 460)) | (1L << (SCHEDULE - 460)) | (1L << (SECURITY - 460)) | (1L << (SERVER - 460)) | (1L << (SESSION - 460)) | (1L << (SHARE - 460)) | (1L << (SHARED - 460)) | (1L << (SIGNED - 460)) | (1L << (SIMPLE - 460)) | (1L << (SLAVE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (SOCKET - 460)) | (1L << (SOME - 460)) | (1L << (SOUNDS - 460)) | (1L << (SOURCE - 460)) | (1L << (SQL_AFTER_GTIDS - 460)) | (1L << (SQL_AFTER_MTS_GAPS - 460)) | (1L << (SQL_BEFORE_GTIDS - 460)) | (1L << (SQL_BUFFER_RESULT - 460)) | (1L << (SQL_CACHE - 460)) | (1L << (SQL_NO_CACHE - 460)) | (1L << (SQL_THREAD - 460)) | (1L << (START - 460)) | (1L << (STARTS - 460)) | (1L << (STATS_AUTO_RECALC - 460)) | (1L << (STATS_PERSISTENT - 460)) | (1L << (STATS_SAMPLE_PAGES - 460)) | (1L << (STATUS - 460)) | (1L << (STOP - 460)) | (1L << (STORAGE - 460)) | (1L << (STRING - 460)) | (1L << (SUBJECT - 460)) | (1L << (SUBPARTITION - 460)) | (1L << (SUBPARTITIONS - 460)) | (1L << (SUSPEND - 460)) | (1L << (SWAPS - 460)) | (1L << (SWITCHES - 460)) | (1L << (TABLESPACE - 460)) | (1L << (TEMPORARY - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (TEMPTABLE - 524)) | (1L << (THAN - 524)) | (1L << (TRANSACTION - 524)) | (1L << (TRUNCATE - 524)) | (1L << (UNDEFINED - 524)) | (1L << (UNDOFILE - 524)) | (1L << (UNDO_BUFFER_SIZE - 524)) | (1L << (UNINSTALL - 524)) | (1L << (UNKNOWN - 524)) | (1L << (UPGRADE - 524)) | (1L << (USER - 524)) | (1L << (VALIDATION - 524)) | (1L << (VALUE - 524)) | (1L << (VARIABLES - 524)) | (1L << (VIEW - 524)) | (1L << (WAIT - 524)) | (1L << (WARNINGS - 524)) | (1L << (WITHOUT - 524)) | (1L << (WORK - 524)) | (1L << (WRAPPER - 524)) | (1L << (X509 - 524)) | (1L << (XA - 524)) | (1L << (XML - 524)) | (1L << (TABLES - 524)) | (1L << (ROUTINE - 524)) | (1L << (EXECUTE - 524)) | (1L << (FILE - 524)) | (1L << (PROCESS - 524)) | (1L << (RELOAD - 524)) | (1L << (SHUTDOWN - 524)) | (1L << (SUPER - 524)) | (1L << (PRIVILEGES - 524)) | (1L << (ARMSCII8 - 524)) | (1L << (ASCII - 524)) | (1L << (BIG5 - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (CP1250 - 588)) | (1L << (CP1251 - 588)) | (1L << (CP1256 - 588)) | (1L << (CP1257 - 588)) | (1L << (CP850 - 588)) | (1L << (CP852 - 588)) | (1L << (CP866 - 588)) | (1L << (CP932 - 588)) | (1L << (DEC8 - 588)) | (1L << (EUCJPMS - 588)) | (1L << (EUCKR - 588)) | (1L << (GB2312 - 588)) | (1L << (GBK - 588)) | (1L << (GEOSTD8 - 588)) | (1L << (GREEK - 588)) | (1L << (HEBREW - 588)) | (1L << (HP8 - 588)) | (1L << (KEYBCS2 - 588)) | (1L << (KOI8R - 588)) | (1L << (KOI8U - 588)) | (1L << (LATIN1 - 588)) | (1L << (LATIN2 - 588)) | (1L << (LATIN5 - 588)) | (1L << (LATIN7 - 588)) | (1L << (MACCE - 588)) | (1L << (MACROMAN - 588)) | (1L << (SJIS - 588)) | (1L << (SWE7 - 588)) | (1L << (TIS620 - 588)) | (1L << (UCS2 - 588)) | (1L << (UJIS - 588)) | (1L << (UTF16 - 588)) | (1L << (UTF16LE - 588)) | (1L << (UTF32 - 588)) | (1L << (UTF8 - 588)) | (1L << (UTF8MB3 - 588)) | (1L << (UTF8MB4 - 588)) | (1L << (ARCHIVE - 588)) | (1L << (BLACKHOLE - 588)) | (1L << (CSV - 588)) | (1L << (FEDERATED - 588)) | (1L << (INNODB - 588)) | (1L << (MEMORY - 588)) | (1L << (MRG_MYISAM - 588)) | (1L << (MYISAM - 588)) | (1L << (NDB - 588)) | (1L << (NDBCLUSTER - 588)) | (1L << (PERFOMANCE_SCHEMA - 588)) | (1L << (REPEATABLE - 588)) | (1L << (COMMITTED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (SERIALIZABLE - 588)) | (1L << (MOD - 588)) | (1L << (REVERSE - 588)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (LEFT_PAREN - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0) );
			setState(3954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(3951);
				elseIf();
				}
				}
				setState(3956);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3957);
				match(ELSE);
				setState(3959); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3958);
					((IfStatementContext)_localctx).statementItem = statementItem();
					((IfStatementContext)_localctx).else_.add(((IfStatementContext)_localctx).statementItem);
					}
					}
					setState(3961); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (ITERATE - 76)) | (1L << (KILL - 76)) | (1L << (LEAVE - 76)) | (1L << (LEFT - 76)) | (1L << (LOAD - 76)) | (1L << (LOCK - 76)) | (1L << (LOOP - 76)) | (1L << (OPTIMIZE - 76)) | (1L << (PURGE - 76)) | (1L << (RELEASE - 76)) | (1L << (RENAME - 76)) | (1L << (REPEAT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVOKE - 140)) | (1L << (RIGHT - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SHOW - 140)) | (1L << (UNLOCK - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WHILE - 140)) | (1L << (DATE - 140)) | (1L << (TIME - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (TIMESTAMP - 204)) | (1L << (DATETIME - 204)) | (1L << (YEAR - 204)) | (1L << (TEXT - 204)) | (1L << (ENUM - 204)) | (1L << (SUM - 204)) | (1L << (SUBSTR - 204)) | (1L << (SUBSTRING - 204)) | (1L << (ACCOUNT - 204)) | (1L << (ACTION - 204)) | (1L << (AFTER - 204)) | (1L << (AGGREGATE - 204)) | (1L << (ALGORITHM - 204)) | (1L << (ANY - 204)) | (1L << (AT - 204)) | (1L << (AUTHORS - 204)) | (1L << (AUTOCOMMIT - 204)) | (1L << (AUTOEXTEND_SIZE - 204)) | (1L << (AUTO_INCREMENT - 204)) | (1L << (AVG_ROW_LENGTH - 204)) | (1L << (BEGIN - 204)) | (1L << (BINLOG - 204)) | (1L << (BIT - 204)) | (1L << (BLOCK - 204)) | (1L << (BOOL - 204)) | (1L << (BOOLEAN - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (BTREE - 268)) | (1L << (CACHE - 268)) | (1L << (CASCADED - 268)) | (1L << (CHAIN - 268)) | (1L << (CHANNEL - 268)) | (1L << (CHECKSUM - 268)) | (1L << (CIPHER - 268)) | (1L << (CLIENT - 268)) | (1L << (CLOSE - 268)) | (1L << (COALESCE - 268)) | (1L << (CODE - 268)) | (1L << (COLUMNS - 268)) | (1L << (COLUMN_FORMAT - 268)) | (1L << (COMMENT - 268)) | (1L << (COMMIT - 268)) | (1L << (COMPACT - 268)) | (1L << (COMPLETION - 268)) | (1L << (COMPRESSED - 268)) | (1L << (COMPRESSION - 268)) | (1L << (CONCURRENT - 268)) | (1L << (CONNECTION - 268)) | (1L << (CONSISTENT - 268)) | (1L << (CONTAINS - 268)) | (1L << (CONTEXT - 268)) | (1L << (CONTRIBUTORS - 268)) | (1L << (COPY - 268)) | (1L << (CPU - 268)) | (1L << (DATA - 268)) | (1L << (DATAFILE - 268)) | (1L << (DEALLOCATE - 268)) | (1L << (DEFAULT_AUTH - 268)) | (1L << (DEFINER - 268)) | (1L << (DELAY_KEY_WRITE - 268)) | (1L << (DIRECTORY - 268)) | (1L << (DISABLE - 268)) | (1L << (DISCARD - 268)) | (1L << (DISK - 268)) | (1L << (DO - 268)) | (1L << (DUMPFILE - 268)) | (1L << (DUPLICATE - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ENABLE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDS - 268)) | (1L << (ENGINE - 268)) | (1L << (ENGINES - 268)) | (1L << (ERROR - 268)) | (1L << (ERRORS - 268)) | (1L << (ESCAPE - 268)) | (1L << (EVEN - 268)) | (1L << (EVENT - 268)) | (1L << (EVENTS - 268)) | (1L << (EVERY - 268)) | (1L << (EXCHANGE - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXPIRE - 268)) | (1L << (EXTENT_SIZE - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FAULTS - 332)) | (1L << (FIELDS - 332)) | (1L << (FILE_BLOCK_SIZE - 332)) | (1L << (FILTER - 332)) | (1L << (FIRST - 332)) | (1L << (FIXED - 332)) | (1L << (FLUSH - 332)) | (1L << (FOLLOWS - 332)) | (1L << (FULL - 332)) | (1L << (FUNCTION - 332)) | (1L << (GLOBAL - 332)) | (1L << (GRANTS - 332)) | (1L << (GROUP_REPLICATION - 332)) | (1L << (HANDLER - 332)) | (1L << (HASH - 332)) | (1L << (HELP - 332)) | (1L << (HOST - 332)) | (1L << (IDENTIFIED - 332)) | (1L << (IGNORE_SERVER_IDS - 332)) | (1L << (IMPORT - 332)) | (1L << (INDEXES - 332)) | (1L << (INITIAL_SIZE - 332)) | (1L << (INPLACE - 332)) | (1L << (INSERT_METHOD - 332)) | (1L << (INSTALL - 332)) | (1L << (INSTANCE - 332)) | (1L << (INVOKER - 332)) | (1L << (IO - 332)) | (1L << (IO_THREAD - 332)) | (1L << (IPC - 332)) | (1L << (ISOLATION - 332)) | (1L << (ISSUER - 332)) | (1L << (KEY_BLOCK_SIZE - 332)) | (1L << (LANGUAGE - 332)) | (1L << (LAST - 332)) | (1L << (LEAVES - 332)) | (1L << (LESS - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LOCAL - 332)) | (1L << (LOGFILE - 332)) | (1L << (LOGS - 332)) | (1L << (MASTER - 332)) | (1L << (MASTER_AUTO_POSITION - 332)) | (1L << (MASTER_CONNECT_RETRY - 332)) | (1L << (MASTER_DELAY - 332)) | (1L << (MASTER_HEARTBEAT_PERIOD - 332)) | (1L << (MASTER_HOST - 332)) | (1L << (MASTER_LOG_FILE - 332)) | (1L << (MASTER_LOG_POS - 332)) | (1L << (MASTER_PASSWORD - 332)) | (1L << (MASTER_PORT - 332)) | (1L << (MASTER_RETRY_COUNT - 332)) | (1L << (MASTER_SSL - 332)) | (1L << (MASTER_SSL_CA - 332)) | (1L << (MASTER_SSL_CAPATH - 332)) | (1L << (MASTER_SSL_CERT - 332)) | (1L << (MASTER_SSL_CIPHER - 332)) | (1L << (MASTER_SSL_CRL - 332)) | (1L << (MASTER_SSL_CRLPATH - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_SSL_KEY - 396)) | (1L << (MASTER_TLS_VERSION - 396)) | (1L << (MASTER_USER - 396)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 396)) | (1L << (MAX_QUERIES_PER_HOUR - 396)) | (1L << (MAX_ROWS - 396)) | (1L << (MAX_SIZE - 396)) | (1L << (MAX_UPDATES_PER_HOUR - 396)) | (1L << (MAX_USER_CONNECTIONS - 396)) | (1L << (MERGE - 396)) | (1L << (MIGRATE - 396)) | (1L << (MIN_ROWS - 396)) | (1L << (MODIFY - 396)) | (1L << (MUTEX - 396)) | (1L << (MYSQL - 396)) | (1L << (NAME - 396)) | (1L << (NAMES - 396)) | (1L << (NCHAR - 396)) | (1L << (NEVER - 396)) | (1L << (NO - 396)) | (1L << (NODEGROUP - 396)) | (1L << (NONE - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OJ - 396)) | (1L << (OLD_PASSWORD - 396)) | (1L << (ONE - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN - 396)) | (1L << (OPTIMIZER_COSTS - 396)) | (1L << (OPTIONS - 396)) | (1L << (OWNER - 396)) | (1L << (PACK_KEYS - 396)) | (1L << (PAGE - 396)) | (1L << (PARSER - 396)) | (1L << (PARTIAL - 396)) | (1L << (PARTITIONING - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PASSWORD - 396)) | (1L << (PHASE - 396)) | (1L << (PLUGIN_DIR - 396)) | (1L << (PLUGINS - 396)) | (1L << (PORT - 396)) | (1L << (PRECEDES - 396)) | (1L << (PREPARE - 396)) | (1L << (PRESERVE - 396)) | (1L << (PREV - 396)) | (1L << (PROCESSLIST - 396)) | (1L << (PROFILE - 396)) | (1L << (PROFILES - 396)) | (1L << (PROXY - 396)) | (1L << (QUERY - 396)) | (1L << (QUICK - 396)) | (1L << (REBUILD - 396)) | (1L << (RECOVER - 396)) | (1L << (REDO_BUFFER_SIZE - 396)) | (1L << (REDUNDANT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (RELAY_LOG_FILE - 460)) | (1L << (RELAY_LOG_POS - 460)) | (1L << (RELAYLOG - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPAIR - 460)) | (1L << (REPLICATE_DO_DB - 460)) | (1L << (REPLICATE_DO_TABLE - 460)) | (1L << (REPLICATE_IGNORE_DB - 460)) | (1L << (REPLICATE_IGNORE_TABLE - 460)) | (1L << (REPLICATE_REWRITE_DB - 460)) | (1L << (REPLICATE_WILD_DO_TABLE - 460)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 460)) | (1L << (REPLICATION - 460)) | (1L << (RESET - 460)) | (1L << (RESUME - 460)) | (1L << (RETURNS - 460)) | (1L << (ROLLBACK - 460)) | (1L << (ROLLUP - 460)) | (1L << (ROTATE - 460)) | (1L << (ROW - 460)) | (1L << (ROWS - 460)) | (1L << (ROW_FORMAT - 460)) | (1L << (SAVEPOINT - 460)) | (1L << (SCHEDULE - 460)) | (1L << (SECURITY - 460)) | (1L << (SERVER - 460)) | (1L << (SESSION - 460)) | (1L << (SHARE - 460)) | (1L << (SHARED - 460)) | (1L << (SIGNED - 460)) | (1L << (SIMPLE - 460)) | (1L << (SLAVE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (SOCKET - 460)) | (1L << (SOME - 460)) | (1L << (SOUNDS - 460)) | (1L << (SOURCE - 460)) | (1L << (SQL_AFTER_GTIDS - 460)) | (1L << (SQL_AFTER_MTS_GAPS - 460)) | (1L << (SQL_BEFORE_GTIDS - 460)) | (1L << (SQL_BUFFER_RESULT - 460)) | (1L << (SQL_CACHE - 460)) | (1L << (SQL_NO_CACHE - 460)) | (1L << (SQL_THREAD - 460)) | (1L << (START - 460)) | (1L << (STARTS - 460)) | (1L << (STATS_AUTO_RECALC - 460)) | (1L << (STATS_PERSISTENT - 460)) | (1L << (STATS_SAMPLE_PAGES - 460)) | (1L << (STATUS - 460)) | (1L << (STOP - 460)) | (1L << (STORAGE - 460)) | (1L << (STRING - 460)) | (1L << (SUBJECT - 460)) | (1L << (SUBPARTITION - 460)) | (1L << (SUBPARTITIONS - 460)) | (1L << (SUSPEND - 460)) | (1L << (SWAPS - 460)) | (1L << (SWITCHES - 460)) | (1L << (TABLESPACE - 460)) | (1L << (TEMPORARY - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (TEMPTABLE - 524)) | (1L << (THAN - 524)) | (1L << (TRANSACTION - 524)) | (1L << (TRUNCATE - 524)) | (1L << (UNDEFINED - 524)) | (1L << (UNDOFILE - 524)) | (1L << (UNDO_BUFFER_SIZE - 524)) | (1L << (UNINSTALL - 524)) | (1L << (UNKNOWN - 524)) | (1L << (UPGRADE - 524)) | (1L << (USER - 524)) | (1L << (VALIDATION - 524)) | (1L << (VALUE - 524)) | (1L << (VARIABLES - 524)) | (1L << (VIEW - 524)) | (1L << (WAIT - 524)) | (1L << (WARNINGS - 524)) | (1L << (WITHOUT - 524)) | (1L << (WORK - 524)) | (1L << (WRAPPER - 524)) | (1L << (X509 - 524)) | (1L << (XA - 524)) | (1L << (XML - 524)) | (1L << (TABLES - 524)) | (1L << (ROUTINE - 524)) | (1L << (EXECUTE - 524)) | (1L << (FILE - 524)) | (1L << (PROCESS - 524)) | (1L << (RELOAD - 524)) | (1L << (SHUTDOWN - 524)) | (1L << (SUPER - 524)) | (1L << (PRIVILEGES - 524)) | (1L << (ARMSCII8 - 524)) | (1L << (ASCII - 524)) | (1L << (BIG5 - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (CP1250 - 588)) | (1L << (CP1251 - 588)) | (1L << (CP1256 - 588)) | (1L << (CP1257 - 588)) | (1L << (CP850 - 588)) | (1L << (CP852 - 588)) | (1L << (CP866 - 588)) | (1L << (CP932 - 588)) | (1L << (DEC8 - 588)) | (1L << (EUCJPMS - 588)) | (1L << (EUCKR - 588)) | (1L << (GB2312 - 588)) | (1L << (GBK - 588)) | (1L << (GEOSTD8 - 588)) | (1L << (GREEK - 588)) | (1L << (HEBREW - 588)) | (1L << (HP8 - 588)) | (1L << (KEYBCS2 - 588)) | (1L << (KOI8R - 588)) | (1L << (KOI8U - 588)) | (1L << (LATIN1 - 588)) | (1L << (LATIN2 - 588)) | (1L << (LATIN5 - 588)) | (1L << (LATIN7 - 588)) | (1L << (MACCE - 588)) | (1L << (MACROMAN - 588)) | (1L << (SJIS - 588)) | (1L << (SWE7 - 588)) | (1L << (TIS620 - 588)) | (1L << (UCS2 - 588)) | (1L << (UJIS - 588)) | (1L << (UTF16 - 588)) | (1L << (UTF16LE - 588)) | (1L << (UTF32 - 588)) | (1L << (UTF8 - 588)) | (1L << (UTF8MB3 - 588)) | (1L << (UTF8MB4 - 588)) | (1L << (ARCHIVE - 588)) | (1L << (BLACKHOLE - 588)) | (1L << (CSV - 588)) | (1L << (FEDERATED - 588)) | (1L << (INNODB - 588)) | (1L << (MEMORY - 588)) | (1L << (MRG_MYISAM - 588)) | (1L << (MYISAM - 588)) | (1L << (NDB - 588)) | (1L << (NDBCLUSTER - 588)) | (1L << (PERFOMANCE_SCHEMA - 588)) | (1L << (REPEATABLE - 588)) | (1L << (COMMITTED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (SERIALIZABLE - 588)) | (1L << (MOD - 588)) | (1L << (REVERSE - 588)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (LEFT_PAREN - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0) );
				}
			}

			setState(3965);
			match(END);
			setState(3966);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseIfContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(DRDSSQLStatementParser.ELSEIF, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(DRDSSQLStatementParser.THEN, 0); }
		public List<StatementItemContext> statementItem() {
			return getRuleContexts(StatementItemContext.class);
		}
		public StatementItemContext statementItem(int i) {
			return getRuleContext(StatementItemContext.class,i);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseIf; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitElseIf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElseIfContext elseIf() throws RecognitionException {
		ElseIfContext _localctx = new ElseIfContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_elseIf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3968);
			match(ELSEIF);
			setState(3969);
			expr(0);
			setState(3970);
			match(THEN);
			setState(3972); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3971);
				statementItem();
				}
				}
				setState(3974); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (ITERATE - 76)) | (1L << (KILL - 76)) | (1L << (LEAVE - 76)) | (1L << (LEFT - 76)) | (1L << (LOAD - 76)) | (1L << (LOCK - 76)) | (1L << (LOOP - 76)) | (1L << (OPTIMIZE - 76)) | (1L << (PURGE - 76)) | (1L << (RELEASE - 76)) | (1L << (RENAME - 76)) | (1L << (REPEAT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVOKE - 140)) | (1L << (RIGHT - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SHOW - 140)) | (1L << (UNLOCK - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WHILE - 140)) | (1L << (DATE - 140)) | (1L << (TIME - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (TIMESTAMP - 204)) | (1L << (DATETIME - 204)) | (1L << (YEAR - 204)) | (1L << (TEXT - 204)) | (1L << (ENUM - 204)) | (1L << (SUM - 204)) | (1L << (SUBSTR - 204)) | (1L << (SUBSTRING - 204)) | (1L << (ACCOUNT - 204)) | (1L << (ACTION - 204)) | (1L << (AFTER - 204)) | (1L << (AGGREGATE - 204)) | (1L << (ALGORITHM - 204)) | (1L << (ANY - 204)) | (1L << (AT - 204)) | (1L << (AUTHORS - 204)) | (1L << (AUTOCOMMIT - 204)) | (1L << (AUTOEXTEND_SIZE - 204)) | (1L << (AUTO_INCREMENT - 204)) | (1L << (AVG_ROW_LENGTH - 204)) | (1L << (BEGIN - 204)) | (1L << (BINLOG - 204)) | (1L << (BIT - 204)) | (1L << (BLOCK - 204)) | (1L << (BOOL - 204)) | (1L << (BOOLEAN - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (BTREE - 268)) | (1L << (CACHE - 268)) | (1L << (CASCADED - 268)) | (1L << (CHAIN - 268)) | (1L << (CHANNEL - 268)) | (1L << (CHECKSUM - 268)) | (1L << (CIPHER - 268)) | (1L << (CLIENT - 268)) | (1L << (CLOSE - 268)) | (1L << (COALESCE - 268)) | (1L << (CODE - 268)) | (1L << (COLUMNS - 268)) | (1L << (COLUMN_FORMAT - 268)) | (1L << (COMMENT - 268)) | (1L << (COMMIT - 268)) | (1L << (COMPACT - 268)) | (1L << (COMPLETION - 268)) | (1L << (COMPRESSED - 268)) | (1L << (COMPRESSION - 268)) | (1L << (CONCURRENT - 268)) | (1L << (CONNECTION - 268)) | (1L << (CONSISTENT - 268)) | (1L << (CONTAINS - 268)) | (1L << (CONTEXT - 268)) | (1L << (CONTRIBUTORS - 268)) | (1L << (COPY - 268)) | (1L << (CPU - 268)) | (1L << (DATA - 268)) | (1L << (DATAFILE - 268)) | (1L << (DEALLOCATE - 268)) | (1L << (DEFAULT_AUTH - 268)) | (1L << (DEFINER - 268)) | (1L << (DELAY_KEY_WRITE - 268)) | (1L << (DIRECTORY - 268)) | (1L << (DISABLE - 268)) | (1L << (DISCARD - 268)) | (1L << (DISK - 268)) | (1L << (DO - 268)) | (1L << (DUMPFILE - 268)) | (1L << (DUPLICATE - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ENABLE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDS - 268)) | (1L << (ENGINE - 268)) | (1L << (ENGINES - 268)) | (1L << (ERROR - 268)) | (1L << (ERRORS - 268)) | (1L << (ESCAPE - 268)) | (1L << (EVEN - 268)) | (1L << (EVENT - 268)) | (1L << (EVENTS - 268)) | (1L << (EVERY - 268)) | (1L << (EXCHANGE - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXPIRE - 268)) | (1L << (EXTENT_SIZE - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FAULTS - 332)) | (1L << (FIELDS - 332)) | (1L << (FILE_BLOCK_SIZE - 332)) | (1L << (FILTER - 332)) | (1L << (FIRST - 332)) | (1L << (FIXED - 332)) | (1L << (FLUSH - 332)) | (1L << (FOLLOWS - 332)) | (1L << (FULL - 332)) | (1L << (FUNCTION - 332)) | (1L << (GLOBAL - 332)) | (1L << (GRANTS - 332)) | (1L << (GROUP_REPLICATION - 332)) | (1L << (HANDLER - 332)) | (1L << (HASH - 332)) | (1L << (HELP - 332)) | (1L << (HOST - 332)) | (1L << (IDENTIFIED - 332)) | (1L << (IGNORE_SERVER_IDS - 332)) | (1L << (IMPORT - 332)) | (1L << (INDEXES - 332)) | (1L << (INITIAL_SIZE - 332)) | (1L << (INPLACE - 332)) | (1L << (INSERT_METHOD - 332)) | (1L << (INSTALL - 332)) | (1L << (INSTANCE - 332)) | (1L << (INVOKER - 332)) | (1L << (IO - 332)) | (1L << (IO_THREAD - 332)) | (1L << (IPC - 332)) | (1L << (ISOLATION - 332)) | (1L << (ISSUER - 332)) | (1L << (KEY_BLOCK_SIZE - 332)) | (1L << (LANGUAGE - 332)) | (1L << (LAST - 332)) | (1L << (LEAVES - 332)) | (1L << (LESS - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LOCAL - 332)) | (1L << (LOGFILE - 332)) | (1L << (LOGS - 332)) | (1L << (MASTER - 332)) | (1L << (MASTER_AUTO_POSITION - 332)) | (1L << (MASTER_CONNECT_RETRY - 332)) | (1L << (MASTER_DELAY - 332)) | (1L << (MASTER_HEARTBEAT_PERIOD - 332)) | (1L << (MASTER_HOST - 332)) | (1L << (MASTER_LOG_FILE - 332)) | (1L << (MASTER_LOG_POS - 332)) | (1L << (MASTER_PASSWORD - 332)) | (1L << (MASTER_PORT - 332)) | (1L << (MASTER_RETRY_COUNT - 332)) | (1L << (MASTER_SSL - 332)) | (1L << (MASTER_SSL_CA - 332)) | (1L << (MASTER_SSL_CAPATH - 332)) | (1L << (MASTER_SSL_CERT - 332)) | (1L << (MASTER_SSL_CIPHER - 332)) | (1L << (MASTER_SSL_CRL - 332)) | (1L << (MASTER_SSL_CRLPATH - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_SSL_KEY - 396)) | (1L << (MASTER_TLS_VERSION - 396)) | (1L << (MASTER_USER - 396)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 396)) | (1L << (MAX_QUERIES_PER_HOUR - 396)) | (1L << (MAX_ROWS - 396)) | (1L << (MAX_SIZE - 396)) | (1L << (MAX_UPDATES_PER_HOUR - 396)) | (1L << (MAX_USER_CONNECTIONS - 396)) | (1L << (MERGE - 396)) | (1L << (MIGRATE - 396)) | (1L << (MIN_ROWS - 396)) | (1L << (MODIFY - 396)) | (1L << (MUTEX - 396)) | (1L << (MYSQL - 396)) | (1L << (NAME - 396)) | (1L << (NAMES - 396)) | (1L << (NCHAR - 396)) | (1L << (NEVER - 396)) | (1L << (NO - 396)) | (1L << (NODEGROUP - 396)) | (1L << (NONE - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OJ - 396)) | (1L << (OLD_PASSWORD - 396)) | (1L << (ONE - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN - 396)) | (1L << (OPTIMIZER_COSTS - 396)) | (1L << (OPTIONS - 396)) | (1L << (OWNER - 396)) | (1L << (PACK_KEYS - 396)) | (1L << (PAGE - 396)) | (1L << (PARSER - 396)) | (1L << (PARTIAL - 396)) | (1L << (PARTITIONING - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PASSWORD - 396)) | (1L << (PHASE - 396)) | (1L << (PLUGIN_DIR - 396)) | (1L << (PLUGINS - 396)) | (1L << (PORT - 396)) | (1L << (PRECEDES - 396)) | (1L << (PREPARE - 396)) | (1L << (PRESERVE - 396)) | (1L << (PREV - 396)) | (1L << (PROCESSLIST - 396)) | (1L << (PROFILE - 396)) | (1L << (PROFILES - 396)) | (1L << (PROXY - 396)) | (1L << (QUERY - 396)) | (1L << (QUICK - 396)) | (1L << (REBUILD - 396)) | (1L << (RECOVER - 396)) | (1L << (REDO_BUFFER_SIZE - 396)) | (1L << (REDUNDANT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (RELAY_LOG_FILE - 460)) | (1L << (RELAY_LOG_POS - 460)) | (1L << (RELAYLOG - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPAIR - 460)) | (1L << (REPLICATE_DO_DB - 460)) | (1L << (REPLICATE_DO_TABLE - 460)) | (1L << (REPLICATE_IGNORE_DB - 460)) | (1L << (REPLICATE_IGNORE_TABLE - 460)) | (1L << (REPLICATE_REWRITE_DB - 460)) | (1L << (REPLICATE_WILD_DO_TABLE - 460)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 460)) | (1L << (REPLICATION - 460)) | (1L << (RESET - 460)) | (1L << (RESUME - 460)) | (1L << (RETURNS - 460)) | (1L << (ROLLBACK - 460)) | (1L << (ROLLUP - 460)) | (1L << (ROTATE - 460)) | (1L << (ROW - 460)) | (1L << (ROWS - 460)) | (1L << (ROW_FORMAT - 460)) | (1L << (SAVEPOINT - 460)) | (1L << (SCHEDULE - 460)) | (1L << (SECURITY - 460)) | (1L << (SERVER - 460)) | (1L << (SESSION - 460)) | (1L << (SHARE - 460)) | (1L << (SHARED - 460)) | (1L << (SIGNED - 460)) | (1L << (SIMPLE - 460)) | (1L << (SLAVE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (SOCKET - 460)) | (1L << (SOME - 460)) | (1L << (SOUNDS - 460)) | (1L << (SOURCE - 460)) | (1L << (SQL_AFTER_GTIDS - 460)) | (1L << (SQL_AFTER_MTS_GAPS - 460)) | (1L << (SQL_BEFORE_GTIDS - 460)) | (1L << (SQL_BUFFER_RESULT - 460)) | (1L << (SQL_CACHE - 460)) | (1L << (SQL_NO_CACHE - 460)) | (1L << (SQL_THREAD - 460)) | (1L << (START - 460)) | (1L << (STARTS - 460)) | (1L << (STATS_AUTO_RECALC - 460)) | (1L << (STATS_PERSISTENT - 460)) | (1L << (STATS_SAMPLE_PAGES - 460)) | (1L << (STATUS - 460)) | (1L << (STOP - 460)) | (1L << (STORAGE - 460)) | (1L << (STRING - 460)) | (1L << (SUBJECT - 460)) | (1L << (SUBPARTITION - 460)) | (1L << (SUBPARTITIONS - 460)) | (1L << (SUSPEND - 460)) | (1L << (SWAPS - 460)) | (1L << (SWITCHES - 460)) | (1L << (TABLESPACE - 460)) | (1L << (TEMPORARY - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (TEMPTABLE - 524)) | (1L << (THAN - 524)) | (1L << (TRANSACTION - 524)) | (1L << (TRUNCATE - 524)) | (1L << (UNDEFINED - 524)) | (1L << (UNDOFILE - 524)) | (1L << (UNDO_BUFFER_SIZE - 524)) | (1L << (UNINSTALL - 524)) | (1L << (UNKNOWN - 524)) | (1L << (UPGRADE - 524)) | (1L << (USER - 524)) | (1L << (VALIDATION - 524)) | (1L << (VALUE - 524)) | (1L << (VARIABLES - 524)) | (1L << (VIEW - 524)) | (1L << (WAIT - 524)) | (1L << (WARNINGS - 524)) | (1L << (WITHOUT - 524)) | (1L << (WORK - 524)) | (1L << (WRAPPER - 524)) | (1L << (X509 - 524)) | (1L << (XA - 524)) | (1L << (XML - 524)) | (1L << (TABLES - 524)) | (1L << (ROUTINE - 524)) | (1L << (EXECUTE - 524)) | (1L << (FILE - 524)) | (1L << (PROCESS - 524)) | (1L << (RELOAD - 524)) | (1L << (SHUTDOWN - 524)) | (1L << (SUPER - 524)) | (1L << (PRIVILEGES - 524)) | (1L << (ARMSCII8 - 524)) | (1L << (ASCII - 524)) | (1L << (BIG5 - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (CP1250 - 588)) | (1L << (CP1251 - 588)) | (1L << (CP1256 - 588)) | (1L << (CP1257 - 588)) | (1L << (CP850 - 588)) | (1L << (CP852 - 588)) | (1L << (CP866 - 588)) | (1L << (CP932 - 588)) | (1L << (DEC8 - 588)) | (1L << (EUCJPMS - 588)) | (1L << (EUCKR - 588)) | (1L << (GB2312 - 588)) | (1L << (GBK - 588)) | (1L << (GEOSTD8 - 588)) | (1L << (GREEK - 588)) | (1L << (HEBREW - 588)) | (1L << (HP8 - 588)) | (1L << (KEYBCS2 - 588)) | (1L << (KOI8R - 588)) | (1L << (KOI8U - 588)) | (1L << (LATIN1 - 588)) | (1L << (LATIN2 - 588)) | (1L << (LATIN5 - 588)) | (1L << (LATIN7 - 588)) | (1L << (MACCE - 588)) | (1L << (MACROMAN - 588)) | (1L << (SJIS - 588)) | (1L << (SWE7 - 588)) | (1L << (TIS620 - 588)) | (1L << (UCS2 - 588)) | (1L << (UJIS - 588)) | (1L << (UTF16 - 588)) | (1L << (UTF16LE - 588)) | (1L << (UTF32 - 588)) | (1L << (UTF8 - 588)) | (1L << (UTF8MB3 - 588)) | (1L << (UTF8MB4 - 588)) | (1L << (ARCHIVE - 588)) | (1L << (BLACKHOLE - 588)) | (1L << (CSV - 588)) | (1L << (FEDERATED - 588)) | (1L << (INNODB - 588)) | (1L << (MEMORY - 588)) | (1L << (MRG_MYISAM - 588)) | (1L << (MYISAM - 588)) | (1L << (NDB - 588)) | (1L << (NDBCLUSTER - 588)) | (1L << (PERFOMANCE_SCHEMA - 588)) | (1L << (REPEATABLE - 588)) | (1L << (COMMITTED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (SERIALIZABLE - 588)) | (1L << (MOD - 588)) | (1L << (REVERSE - 588)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (LEFT_PAREN - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(DRDSSQLStatementParser.ITERATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			match(ITERATE);
			setState(3977);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(DRDSSQLStatementParser.LEAVE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3979);
			match(LEAVE);
			setState(3980);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public NameIdentifierContext beginLabel;
		public NameIdentifierContext endLabel;
		public List<TerminalNode> LOOP() { return getTokens(DRDSSQLStatementParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(DRDSSQLStatementParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(DRDSSQLStatementParser.END, 0); }
		public TerminalNode COLON() { return getToken(DRDSSQLStatementParser.COLON, 0); }
		public List<BodyItemContext> bodyItem() {
			return getRuleContexts(BodyItemContext.class);
		}
		public BodyItemContext bodyItem(int i) {
			return getRuleContext(BodyItemContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_loopStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
				{
				setState(3982);
				((LoopStatementContext)_localctx).beginLabel = nameIdentifier();
				setState(3983);
				match(COLON);
				}
			}

			setState(3987);
			match(LOOP);
			setState(3989); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3988);
				bodyItem();
				}
				}
				setState(3991); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (ITERATE - 76)) | (1L << (KILL - 76)) | (1L << (LEAVE - 76)) | (1L << (LEFT - 76)) | (1L << (LOAD - 76)) | (1L << (LOCK - 76)) | (1L << (LOOP - 76)) | (1L << (OPTIMIZE - 76)) | (1L << (PURGE - 76)) | (1L << (RELEASE - 76)) | (1L << (RENAME - 76)) | (1L << (REPEAT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVOKE - 140)) | (1L << (RIGHT - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SHOW - 140)) | (1L << (UNLOCK - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WHILE - 140)) | (1L << (DATE - 140)) | (1L << (TIME - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (TIMESTAMP - 204)) | (1L << (DATETIME - 204)) | (1L << (YEAR - 204)) | (1L << (TEXT - 204)) | (1L << (ENUM - 204)) | (1L << (SUM - 204)) | (1L << (SUBSTR - 204)) | (1L << (SUBSTRING - 204)) | (1L << (ACCOUNT - 204)) | (1L << (ACTION - 204)) | (1L << (AFTER - 204)) | (1L << (AGGREGATE - 204)) | (1L << (ALGORITHM - 204)) | (1L << (ANY - 204)) | (1L << (AT - 204)) | (1L << (AUTHORS - 204)) | (1L << (AUTOCOMMIT - 204)) | (1L << (AUTOEXTEND_SIZE - 204)) | (1L << (AUTO_INCREMENT - 204)) | (1L << (AVG_ROW_LENGTH - 204)) | (1L << (BEGIN - 204)) | (1L << (BINLOG - 204)) | (1L << (BIT - 204)) | (1L << (BLOCK - 204)) | (1L << (BOOL - 204)) | (1L << (BOOLEAN - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (BTREE - 268)) | (1L << (CACHE - 268)) | (1L << (CASCADED - 268)) | (1L << (CHAIN - 268)) | (1L << (CHANNEL - 268)) | (1L << (CHECKSUM - 268)) | (1L << (CIPHER - 268)) | (1L << (CLIENT - 268)) | (1L << (CLOSE - 268)) | (1L << (COALESCE - 268)) | (1L << (CODE - 268)) | (1L << (COLUMNS - 268)) | (1L << (COLUMN_FORMAT - 268)) | (1L << (COMMENT - 268)) | (1L << (COMMIT - 268)) | (1L << (COMPACT - 268)) | (1L << (COMPLETION - 268)) | (1L << (COMPRESSED - 268)) | (1L << (COMPRESSION - 268)) | (1L << (CONCURRENT - 268)) | (1L << (CONNECTION - 268)) | (1L << (CONSISTENT - 268)) | (1L << (CONTAINS - 268)) | (1L << (CONTEXT - 268)) | (1L << (CONTRIBUTORS - 268)) | (1L << (COPY - 268)) | (1L << (CPU - 268)) | (1L << (DATA - 268)) | (1L << (DATAFILE - 268)) | (1L << (DEALLOCATE - 268)) | (1L << (DEFAULT_AUTH - 268)) | (1L << (DEFINER - 268)) | (1L << (DELAY_KEY_WRITE - 268)) | (1L << (DIRECTORY - 268)) | (1L << (DISABLE - 268)) | (1L << (DISCARD - 268)) | (1L << (DISK - 268)) | (1L << (DO - 268)) | (1L << (DUMPFILE - 268)) | (1L << (DUPLICATE - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ENABLE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDS - 268)) | (1L << (ENGINE - 268)) | (1L << (ENGINES - 268)) | (1L << (ERROR - 268)) | (1L << (ERRORS - 268)) | (1L << (ESCAPE - 268)) | (1L << (EVEN - 268)) | (1L << (EVENT - 268)) | (1L << (EVENTS - 268)) | (1L << (EVERY - 268)) | (1L << (EXCHANGE - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXPIRE - 268)) | (1L << (EXTENT_SIZE - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FAULTS - 332)) | (1L << (FIELDS - 332)) | (1L << (FILE_BLOCK_SIZE - 332)) | (1L << (FILTER - 332)) | (1L << (FIRST - 332)) | (1L << (FIXED - 332)) | (1L << (FLUSH - 332)) | (1L << (FOLLOWS - 332)) | (1L << (FULL - 332)) | (1L << (FUNCTION - 332)) | (1L << (GLOBAL - 332)) | (1L << (GRANTS - 332)) | (1L << (GROUP_REPLICATION - 332)) | (1L << (HANDLER - 332)) | (1L << (HASH - 332)) | (1L << (HELP - 332)) | (1L << (HOST - 332)) | (1L << (IDENTIFIED - 332)) | (1L << (IGNORE_SERVER_IDS - 332)) | (1L << (IMPORT - 332)) | (1L << (INDEXES - 332)) | (1L << (INITIAL_SIZE - 332)) | (1L << (INPLACE - 332)) | (1L << (INSERT_METHOD - 332)) | (1L << (INSTALL - 332)) | (1L << (INSTANCE - 332)) | (1L << (INVOKER - 332)) | (1L << (IO - 332)) | (1L << (IO_THREAD - 332)) | (1L << (IPC - 332)) | (1L << (ISOLATION - 332)) | (1L << (ISSUER - 332)) | (1L << (KEY_BLOCK_SIZE - 332)) | (1L << (LANGUAGE - 332)) | (1L << (LAST - 332)) | (1L << (LEAVES - 332)) | (1L << (LESS - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LOCAL - 332)) | (1L << (LOGFILE - 332)) | (1L << (LOGS - 332)) | (1L << (MASTER - 332)) | (1L << (MASTER_AUTO_POSITION - 332)) | (1L << (MASTER_CONNECT_RETRY - 332)) | (1L << (MASTER_DELAY - 332)) | (1L << (MASTER_HEARTBEAT_PERIOD - 332)) | (1L << (MASTER_HOST - 332)) | (1L << (MASTER_LOG_FILE - 332)) | (1L << (MASTER_LOG_POS - 332)) | (1L << (MASTER_PASSWORD - 332)) | (1L << (MASTER_PORT - 332)) | (1L << (MASTER_RETRY_COUNT - 332)) | (1L << (MASTER_SSL - 332)) | (1L << (MASTER_SSL_CA - 332)) | (1L << (MASTER_SSL_CAPATH - 332)) | (1L << (MASTER_SSL_CERT - 332)) | (1L << (MASTER_SSL_CIPHER - 332)) | (1L << (MASTER_SSL_CRL - 332)) | (1L << (MASTER_SSL_CRLPATH - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_SSL_KEY - 396)) | (1L << (MASTER_TLS_VERSION - 396)) | (1L << (MASTER_USER - 396)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 396)) | (1L << (MAX_QUERIES_PER_HOUR - 396)) | (1L << (MAX_ROWS - 396)) | (1L << (MAX_SIZE - 396)) | (1L << (MAX_UPDATES_PER_HOUR - 396)) | (1L << (MAX_USER_CONNECTIONS - 396)) | (1L << (MERGE - 396)) | (1L << (MIGRATE - 396)) | (1L << (MIN_ROWS - 396)) | (1L << (MODIFY - 396)) | (1L << (MUTEX - 396)) | (1L << (MYSQL - 396)) | (1L << (NAME - 396)) | (1L << (NAMES - 396)) | (1L << (NCHAR - 396)) | (1L << (NEVER - 396)) | (1L << (NO - 396)) | (1L << (NODEGROUP - 396)) | (1L << (NONE - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OJ - 396)) | (1L << (OLD_PASSWORD - 396)) | (1L << (ONE - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN - 396)) | (1L << (OPTIMIZER_COSTS - 396)) | (1L << (OPTIONS - 396)) | (1L << (OWNER - 396)) | (1L << (PACK_KEYS - 396)) | (1L << (PAGE - 396)) | (1L << (PARSER - 396)) | (1L << (PARTIAL - 396)) | (1L << (PARTITIONING - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PASSWORD - 396)) | (1L << (PHASE - 396)) | (1L << (PLUGIN_DIR - 396)) | (1L << (PLUGINS - 396)) | (1L << (PORT - 396)) | (1L << (PRECEDES - 396)) | (1L << (PREPARE - 396)) | (1L << (PRESERVE - 396)) | (1L << (PREV - 396)) | (1L << (PROCESSLIST - 396)) | (1L << (PROFILE - 396)) | (1L << (PROFILES - 396)) | (1L << (PROXY - 396)) | (1L << (QUERY - 396)) | (1L << (QUICK - 396)) | (1L << (REBUILD - 396)) | (1L << (RECOVER - 396)) | (1L << (REDO_BUFFER_SIZE - 396)) | (1L << (REDUNDANT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (RELAY_LOG_FILE - 460)) | (1L << (RELAY_LOG_POS - 460)) | (1L << (RELAYLOG - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPAIR - 460)) | (1L << (REPLICATE_DO_DB - 460)) | (1L << (REPLICATE_DO_TABLE - 460)) | (1L << (REPLICATE_IGNORE_DB - 460)) | (1L << (REPLICATE_IGNORE_TABLE - 460)) | (1L << (REPLICATE_REWRITE_DB - 460)) | (1L << (REPLICATE_WILD_DO_TABLE - 460)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 460)) | (1L << (REPLICATION - 460)) | (1L << (RESET - 460)) | (1L << (RESUME - 460)) | (1L << (RETURNS - 460)) | (1L << (ROLLBACK - 460)) | (1L << (ROLLUP - 460)) | (1L << (ROTATE - 460)) | (1L << (ROW - 460)) | (1L << (ROWS - 460)) | (1L << (ROW_FORMAT - 460)) | (1L << (SAVEPOINT - 460)) | (1L << (SCHEDULE - 460)) | (1L << (SECURITY - 460)) | (1L << (SERVER - 460)) | (1L << (SESSION - 460)) | (1L << (SHARE - 460)) | (1L << (SHARED - 460)) | (1L << (SIGNED - 460)) | (1L << (SIMPLE - 460)) | (1L << (SLAVE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (SOCKET - 460)) | (1L << (SOME - 460)) | (1L << (SOUNDS - 460)) | (1L << (SOURCE - 460)) | (1L << (SQL_AFTER_GTIDS - 460)) | (1L << (SQL_AFTER_MTS_GAPS - 460)) | (1L << (SQL_BEFORE_GTIDS - 460)) | (1L << (SQL_BUFFER_RESULT - 460)) | (1L << (SQL_CACHE - 460)) | (1L << (SQL_NO_CACHE - 460)) | (1L << (SQL_THREAD - 460)) | (1L << (START - 460)) | (1L << (STARTS - 460)) | (1L << (STATS_AUTO_RECALC - 460)) | (1L << (STATS_PERSISTENT - 460)) | (1L << (STATS_SAMPLE_PAGES - 460)) | (1L << (STATUS - 460)) | (1L << (STOP - 460)) | (1L << (STORAGE - 460)) | (1L << (STRING - 460)) | (1L << (SUBJECT - 460)) | (1L << (SUBPARTITION - 460)) | (1L << (SUBPARTITIONS - 460)) | (1L << (SUSPEND - 460)) | (1L << (SWAPS - 460)) | (1L << (SWITCHES - 460)) | (1L << (TABLESPACE - 460)) | (1L << (TEMPORARY - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (TEMPTABLE - 524)) | (1L << (THAN - 524)) | (1L << (TRANSACTION - 524)) | (1L << (TRUNCATE - 524)) | (1L << (UNDEFINED - 524)) | (1L << (UNDOFILE - 524)) | (1L << (UNDO_BUFFER_SIZE - 524)) | (1L << (UNINSTALL - 524)) | (1L << (UNKNOWN - 524)) | (1L << (UPGRADE - 524)) | (1L << (USER - 524)) | (1L << (VALIDATION - 524)) | (1L << (VALUE - 524)) | (1L << (VARIABLES - 524)) | (1L << (VIEW - 524)) | (1L << (WAIT - 524)) | (1L << (WARNINGS - 524)) | (1L << (WITHOUT - 524)) | (1L << (WORK - 524)) | (1L << (WRAPPER - 524)) | (1L << (X509 - 524)) | (1L << (XA - 524)) | (1L << (XML - 524)) | (1L << (TABLES - 524)) | (1L << (ROUTINE - 524)) | (1L << (EXECUTE - 524)) | (1L << (FILE - 524)) | (1L << (PROCESS - 524)) | (1L << (RELOAD - 524)) | (1L << (SHUTDOWN - 524)) | (1L << (SUPER - 524)) | (1L << (PRIVILEGES - 524)) | (1L << (ARMSCII8 - 524)) | (1L << (ASCII - 524)) | (1L << (BIG5 - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (CP1250 - 588)) | (1L << (CP1251 - 588)) | (1L << (CP1256 - 588)) | (1L << (CP1257 - 588)) | (1L << (CP850 - 588)) | (1L << (CP852 - 588)) | (1L << (CP866 - 588)) | (1L << (CP932 - 588)) | (1L << (DEC8 - 588)) | (1L << (EUCJPMS - 588)) | (1L << (EUCKR - 588)) | (1L << (GB2312 - 588)) | (1L << (GBK - 588)) | (1L << (GEOSTD8 - 588)) | (1L << (GREEK - 588)) | (1L << (HEBREW - 588)) | (1L << (HP8 - 588)) | (1L << (KEYBCS2 - 588)) | (1L << (KOI8R - 588)) | (1L << (KOI8U - 588)) | (1L << (LATIN1 - 588)) | (1L << (LATIN2 - 588)) | (1L << (LATIN5 - 588)) | (1L << (LATIN7 - 588)) | (1L << (MACCE - 588)) | (1L << (MACROMAN - 588)) | (1L << (SJIS - 588)) | (1L << (SWE7 - 588)) | (1L << (TIS620 - 588)) | (1L << (UCS2 - 588)) | (1L << (UJIS - 588)) | (1L << (UTF16 - 588)) | (1L << (UTF16LE - 588)) | (1L << (UTF32 - 588)) | (1L << (UTF8 - 588)) | (1L << (UTF8MB3 - 588)) | (1L << (UTF8MB4 - 588)) | (1L << (ARCHIVE - 588)) | (1L << (BLACKHOLE - 588)) | (1L << (CSV - 588)) | (1L << (FEDERATED - 588)) | (1L << (INNODB - 588)) | (1L << (MEMORY - 588)) | (1L << (MRG_MYISAM - 588)) | (1L << (MYISAM - 588)) | (1L << (NDB - 588)) | (1L << (NDBCLUSTER - 588)) | (1L << (PERFOMANCE_SCHEMA - 588)) | (1L << (REPEATABLE - 588)) | (1L << (COMMITTED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (SERIALIZABLE - 588)) | (1L << (MOD - 588)) | (1L << (REVERSE - 588)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (LEFT_PAREN - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0) );
			setState(3993);
			match(END);
			setState(3994);
			match(LOOP);
			setState(3996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(3995);
				((LoopStatementContext)_localctx).endLabel = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public NameIdentifierContext beginLabel;
		public NameIdentifierContext endLabel;
		public List<TerminalNode> REPEAT() { return getTokens(DRDSSQLStatementParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(DRDSSQLStatementParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(DRDSSQLStatementParser.UNTIL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode END() { return getToken(DRDSSQLStatementParser.END, 0); }
		public TerminalNode COLON() { return getToken(DRDSSQLStatementParser.COLON, 0); }
		public List<BodyItemContext> bodyItem() {
			return getRuleContexts(BodyItemContext.class);
		}
		public BodyItemContext bodyItem(int i) {
			return getRuleContext(BodyItemContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_repeatStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
				{
				setState(3998);
				((RepeatStatementContext)_localctx).beginLabel = nameIdentifier();
				setState(3999);
				match(COLON);
				}
			}

			setState(4003);
			match(REPEAT);
			setState(4005); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4004);
				bodyItem();
				}
				}
				setState(4007); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (ITERATE - 76)) | (1L << (KILL - 76)) | (1L << (LEAVE - 76)) | (1L << (LEFT - 76)) | (1L << (LOAD - 76)) | (1L << (LOCK - 76)) | (1L << (LOOP - 76)) | (1L << (OPTIMIZE - 76)) | (1L << (PURGE - 76)) | (1L << (RELEASE - 76)) | (1L << (RENAME - 76)) | (1L << (REPEAT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVOKE - 140)) | (1L << (RIGHT - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SHOW - 140)) | (1L << (UNLOCK - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WHILE - 140)) | (1L << (DATE - 140)) | (1L << (TIME - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (TIMESTAMP - 204)) | (1L << (DATETIME - 204)) | (1L << (YEAR - 204)) | (1L << (TEXT - 204)) | (1L << (ENUM - 204)) | (1L << (SUM - 204)) | (1L << (SUBSTR - 204)) | (1L << (SUBSTRING - 204)) | (1L << (ACCOUNT - 204)) | (1L << (ACTION - 204)) | (1L << (AFTER - 204)) | (1L << (AGGREGATE - 204)) | (1L << (ALGORITHM - 204)) | (1L << (ANY - 204)) | (1L << (AT - 204)) | (1L << (AUTHORS - 204)) | (1L << (AUTOCOMMIT - 204)) | (1L << (AUTOEXTEND_SIZE - 204)) | (1L << (AUTO_INCREMENT - 204)) | (1L << (AVG_ROW_LENGTH - 204)) | (1L << (BEGIN - 204)) | (1L << (BINLOG - 204)) | (1L << (BIT - 204)) | (1L << (BLOCK - 204)) | (1L << (BOOL - 204)) | (1L << (BOOLEAN - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (BTREE - 268)) | (1L << (CACHE - 268)) | (1L << (CASCADED - 268)) | (1L << (CHAIN - 268)) | (1L << (CHANNEL - 268)) | (1L << (CHECKSUM - 268)) | (1L << (CIPHER - 268)) | (1L << (CLIENT - 268)) | (1L << (CLOSE - 268)) | (1L << (COALESCE - 268)) | (1L << (CODE - 268)) | (1L << (COLUMNS - 268)) | (1L << (COLUMN_FORMAT - 268)) | (1L << (COMMENT - 268)) | (1L << (COMMIT - 268)) | (1L << (COMPACT - 268)) | (1L << (COMPLETION - 268)) | (1L << (COMPRESSED - 268)) | (1L << (COMPRESSION - 268)) | (1L << (CONCURRENT - 268)) | (1L << (CONNECTION - 268)) | (1L << (CONSISTENT - 268)) | (1L << (CONTAINS - 268)) | (1L << (CONTEXT - 268)) | (1L << (CONTRIBUTORS - 268)) | (1L << (COPY - 268)) | (1L << (CPU - 268)) | (1L << (DATA - 268)) | (1L << (DATAFILE - 268)) | (1L << (DEALLOCATE - 268)) | (1L << (DEFAULT_AUTH - 268)) | (1L << (DEFINER - 268)) | (1L << (DELAY_KEY_WRITE - 268)) | (1L << (DIRECTORY - 268)) | (1L << (DISABLE - 268)) | (1L << (DISCARD - 268)) | (1L << (DISK - 268)) | (1L << (DO - 268)) | (1L << (DUMPFILE - 268)) | (1L << (DUPLICATE - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ENABLE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDS - 268)) | (1L << (ENGINE - 268)) | (1L << (ENGINES - 268)) | (1L << (ERROR - 268)) | (1L << (ERRORS - 268)) | (1L << (ESCAPE - 268)) | (1L << (EVEN - 268)) | (1L << (EVENT - 268)) | (1L << (EVENTS - 268)) | (1L << (EVERY - 268)) | (1L << (EXCHANGE - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXPIRE - 268)) | (1L << (EXTENT_SIZE - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FAULTS - 332)) | (1L << (FIELDS - 332)) | (1L << (FILE_BLOCK_SIZE - 332)) | (1L << (FILTER - 332)) | (1L << (FIRST - 332)) | (1L << (FIXED - 332)) | (1L << (FLUSH - 332)) | (1L << (FOLLOWS - 332)) | (1L << (FULL - 332)) | (1L << (FUNCTION - 332)) | (1L << (GLOBAL - 332)) | (1L << (GRANTS - 332)) | (1L << (GROUP_REPLICATION - 332)) | (1L << (HANDLER - 332)) | (1L << (HASH - 332)) | (1L << (HELP - 332)) | (1L << (HOST - 332)) | (1L << (IDENTIFIED - 332)) | (1L << (IGNORE_SERVER_IDS - 332)) | (1L << (IMPORT - 332)) | (1L << (INDEXES - 332)) | (1L << (INITIAL_SIZE - 332)) | (1L << (INPLACE - 332)) | (1L << (INSERT_METHOD - 332)) | (1L << (INSTALL - 332)) | (1L << (INSTANCE - 332)) | (1L << (INVOKER - 332)) | (1L << (IO - 332)) | (1L << (IO_THREAD - 332)) | (1L << (IPC - 332)) | (1L << (ISOLATION - 332)) | (1L << (ISSUER - 332)) | (1L << (KEY_BLOCK_SIZE - 332)) | (1L << (LANGUAGE - 332)) | (1L << (LAST - 332)) | (1L << (LEAVES - 332)) | (1L << (LESS - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LOCAL - 332)) | (1L << (LOGFILE - 332)) | (1L << (LOGS - 332)) | (1L << (MASTER - 332)) | (1L << (MASTER_AUTO_POSITION - 332)) | (1L << (MASTER_CONNECT_RETRY - 332)) | (1L << (MASTER_DELAY - 332)) | (1L << (MASTER_HEARTBEAT_PERIOD - 332)) | (1L << (MASTER_HOST - 332)) | (1L << (MASTER_LOG_FILE - 332)) | (1L << (MASTER_LOG_POS - 332)) | (1L << (MASTER_PASSWORD - 332)) | (1L << (MASTER_PORT - 332)) | (1L << (MASTER_RETRY_COUNT - 332)) | (1L << (MASTER_SSL - 332)) | (1L << (MASTER_SSL_CA - 332)) | (1L << (MASTER_SSL_CAPATH - 332)) | (1L << (MASTER_SSL_CERT - 332)) | (1L << (MASTER_SSL_CIPHER - 332)) | (1L << (MASTER_SSL_CRL - 332)) | (1L << (MASTER_SSL_CRLPATH - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_SSL_KEY - 396)) | (1L << (MASTER_TLS_VERSION - 396)) | (1L << (MASTER_USER - 396)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 396)) | (1L << (MAX_QUERIES_PER_HOUR - 396)) | (1L << (MAX_ROWS - 396)) | (1L << (MAX_SIZE - 396)) | (1L << (MAX_UPDATES_PER_HOUR - 396)) | (1L << (MAX_USER_CONNECTIONS - 396)) | (1L << (MERGE - 396)) | (1L << (MIGRATE - 396)) | (1L << (MIN_ROWS - 396)) | (1L << (MODIFY - 396)) | (1L << (MUTEX - 396)) | (1L << (MYSQL - 396)) | (1L << (NAME - 396)) | (1L << (NAMES - 396)) | (1L << (NCHAR - 396)) | (1L << (NEVER - 396)) | (1L << (NO - 396)) | (1L << (NODEGROUP - 396)) | (1L << (NONE - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OJ - 396)) | (1L << (OLD_PASSWORD - 396)) | (1L << (ONE - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN - 396)) | (1L << (OPTIMIZER_COSTS - 396)) | (1L << (OPTIONS - 396)) | (1L << (OWNER - 396)) | (1L << (PACK_KEYS - 396)) | (1L << (PAGE - 396)) | (1L << (PARSER - 396)) | (1L << (PARTIAL - 396)) | (1L << (PARTITIONING - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PASSWORD - 396)) | (1L << (PHASE - 396)) | (1L << (PLUGIN_DIR - 396)) | (1L << (PLUGINS - 396)) | (1L << (PORT - 396)) | (1L << (PRECEDES - 396)) | (1L << (PREPARE - 396)) | (1L << (PRESERVE - 396)) | (1L << (PREV - 396)) | (1L << (PROCESSLIST - 396)) | (1L << (PROFILE - 396)) | (1L << (PROFILES - 396)) | (1L << (PROXY - 396)) | (1L << (QUERY - 396)) | (1L << (QUICK - 396)) | (1L << (REBUILD - 396)) | (1L << (RECOVER - 396)) | (1L << (REDO_BUFFER_SIZE - 396)) | (1L << (REDUNDANT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (RELAY_LOG_FILE - 460)) | (1L << (RELAY_LOG_POS - 460)) | (1L << (RELAYLOG - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPAIR - 460)) | (1L << (REPLICATE_DO_DB - 460)) | (1L << (REPLICATE_DO_TABLE - 460)) | (1L << (REPLICATE_IGNORE_DB - 460)) | (1L << (REPLICATE_IGNORE_TABLE - 460)) | (1L << (REPLICATE_REWRITE_DB - 460)) | (1L << (REPLICATE_WILD_DO_TABLE - 460)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 460)) | (1L << (REPLICATION - 460)) | (1L << (RESET - 460)) | (1L << (RESUME - 460)) | (1L << (RETURNS - 460)) | (1L << (ROLLBACK - 460)) | (1L << (ROLLUP - 460)) | (1L << (ROTATE - 460)) | (1L << (ROW - 460)) | (1L << (ROWS - 460)) | (1L << (ROW_FORMAT - 460)) | (1L << (SAVEPOINT - 460)) | (1L << (SCHEDULE - 460)) | (1L << (SECURITY - 460)) | (1L << (SERVER - 460)) | (1L << (SESSION - 460)) | (1L << (SHARE - 460)) | (1L << (SHARED - 460)) | (1L << (SIGNED - 460)) | (1L << (SIMPLE - 460)) | (1L << (SLAVE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (SOCKET - 460)) | (1L << (SOME - 460)) | (1L << (SOUNDS - 460)) | (1L << (SOURCE - 460)) | (1L << (SQL_AFTER_GTIDS - 460)) | (1L << (SQL_AFTER_MTS_GAPS - 460)) | (1L << (SQL_BEFORE_GTIDS - 460)) | (1L << (SQL_BUFFER_RESULT - 460)) | (1L << (SQL_CACHE - 460)) | (1L << (SQL_NO_CACHE - 460)) | (1L << (SQL_THREAD - 460)) | (1L << (START - 460)) | (1L << (STARTS - 460)) | (1L << (STATS_AUTO_RECALC - 460)) | (1L << (STATS_PERSISTENT - 460)) | (1L << (STATS_SAMPLE_PAGES - 460)) | (1L << (STATUS - 460)) | (1L << (STOP - 460)) | (1L << (STORAGE - 460)) | (1L << (STRING - 460)) | (1L << (SUBJECT - 460)) | (1L << (SUBPARTITION - 460)) | (1L << (SUBPARTITIONS - 460)) | (1L << (SUSPEND - 460)) | (1L << (SWAPS - 460)) | (1L << (SWITCHES - 460)) | (1L << (TABLESPACE - 460)) | (1L << (TEMPORARY - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (TEMPTABLE - 524)) | (1L << (THAN - 524)) | (1L << (TRANSACTION - 524)) | (1L << (TRUNCATE - 524)) | (1L << (UNDEFINED - 524)) | (1L << (UNDOFILE - 524)) | (1L << (UNDO_BUFFER_SIZE - 524)) | (1L << (UNINSTALL - 524)) | (1L << (UNKNOWN - 524)) | (1L << (UPGRADE - 524)) | (1L << (USER - 524)) | (1L << (VALIDATION - 524)) | (1L << (VALUE - 524)) | (1L << (VARIABLES - 524)) | (1L << (VIEW - 524)) | (1L << (WAIT - 524)) | (1L << (WARNINGS - 524)) | (1L << (WITHOUT - 524)) | (1L << (WORK - 524)) | (1L << (WRAPPER - 524)) | (1L << (X509 - 524)) | (1L << (XA - 524)) | (1L << (XML - 524)) | (1L << (TABLES - 524)) | (1L << (ROUTINE - 524)) | (1L << (EXECUTE - 524)) | (1L << (FILE - 524)) | (1L << (PROCESS - 524)) | (1L << (RELOAD - 524)) | (1L << (SHUTDOWN - 524)) | (1L << (SUPER - 524)) | (1L << (PRIVILEGES - 524)) | (1L << (ARMSCII8 - 524)) | (1L << (ASCII - 524)) | (1L << (BIG5 - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (CP1250 - 588)) | (1L << (CP1251 - 588)) | (1L << (CP1256 - 588)) | (1L << (CP1257 - 588)) | (1L << (CP850 - 588)) | (1L << (CP852 - 588)) | (1L << (CP866 - 588)) | (1L << (CP932 - 588)) | (1L << (DEC8 - 588)) | (1L << (EUCJPMS - 588)) | (1L << (EUCKR - 588)) | (1L << (GB2312 - 588)) | (1L << (GBK - 588)) | (1L << (GEOSTD8 - 588)) | (1L << (GREEK - 588)) | (1L << (HEBREW - 588)) | (1L << (HP8 - 588)) | (1L << (KEYBCS2 - 588)) | (1L << (KOI8R - 588)) | (1L << (KOI8U - 588)) | (1L << (LATIN1 - 588)) | (1L << (LATIN2 - 588)) | (1L << (LATIN5 - 588)) | (1L << (LATIN7 - 588)) | (1L << (MACCE - 588)) | (1L << (MACROMAN - 588)) | (1L << (SJIS - 588)) | (1L << (SWE7 - 588)) | (1L << (TIS620 - 588)) | (1L << (UCS2 - 588)) | (1L << (UJIS - 588)) | (1L << (UTF16 - 588)) | (1L << (UTF16LE - 588)) | (1L << (UTF32 - 588)) | (1L << (UTF8 - 588)) | (1L << (UTF8MB3 - 588)) | (1L << (UTF8MB4 - 588)) | (1L << (ARCHIVE - 588)) | (1L << (BLACKHOLE - 588)) | (1L << (CSV - 588)) | (1L << (FEDERATED - 588)) | (1L << (INNODB - 588)) | (1L << (MEMORY - 588)) | (1L << (MRG_MYISAM - 588)) | (1L << (MYISAM - 588)) | (1L << (NDB - 588)) | (1L << (NDBCLUSTER - 588)) | (1L << (PERFOMANCE_SCHEMA - 588)) | (1L << (REPEATABLE - 588)) | (1L << (COMMITTED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (SERIALIZABLE - 588)) | (1L << (MOD - 588)) | (1L << (REVERSE - 588)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (LEFT_PAREN - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0) );
			setState(4009);
			match(UNTIL);
			setState(4010);
			expr(0);
			setState(4011);
			match(END);
			setState(4012);
			match(REPEAT);
			setState(4014);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(4013);
				((RepeatStatementContext)_localctx).endLabel = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(DRDSSQLStatementParser.RETURN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4016);
			match(RETURN);
			setState(4017);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public NameIdentifierContext beginLabel;
		public NameIdentifierContext endLabel;
		public List<TerminalNode> WHILE() { return getTokens(DRDSSQLStatementParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(DRDSSQLStatementParser.WHILE, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(DRDSSQLStatementParser.DO, 0); }
		public TerminalNode END() { return getToken(DRDSSQLStatementParser.END, 0); }
		public TerminalNode COLON() { return getToken(DRDSSQLStatementParser.COLON, 0); }
		public List<BodyItemContext> bodyItem() {
			return getRuleContexts(BodyItemContext.class);
		}
		public BodyItemContext bodyItem(int i) {
			return getRuleContext(BodyItemContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_whileStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (LEFT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (TEXT - 216)) | (1L << (ENUM - 216)) | (1L << (SUM - 216)) | (1L << (SUBSTR - 216)) | (1L << (SUBSTRING - 216)) | (1L << (ACCOUNT - 216)) | (1L << (ACTION - 216)) | (1L << (AFTER - 216)) | (1L << (AGGREGATE - 216)) | (1L << (ALGORITHM - 216)) | (1L << (ANY - 216)) | (1L << (AT - 216)) | (1L << (AUTHORS - 216)) | (1L << (AUTOCOMMIT - 216)) | (1L << (AUTOEXTEND_SIZE - 216)) | (1L << (AUTO_INCREMENT - 216)) | (1L << (AVG_ROW_LENGTH - 216)) | (1L << (BEGIN - 216)) | (1L << (BINLOG - 216)) | (1L << (BIT - 216)) | (1L << (BLOCK - 216)) | (1L << (BOOL - 216)) | (1L << (BOOLEAN - 216)) | (1L << (BTREE - 216)) | (1L << (CASCADED - 216)) | (1L << (CHAIN - 216)) | (1L << (CHANNEL - 216)) | (1L << (CHECKSUM - 216)) | (1L << (CIPHER - 216)) | (1L << (CLIENT - 216)) | (1L << (COALESCE - 216)) | (1L << (CODE - 216)))) != 0) || ((((_la - 280)) & ~0x3f) == 0 && ((1L << (_la - 280)) & ((1L << (COLUMNS - 280)) | (1L << (COLUMN_FORMAT - 280)) | (1L << (COMMENT - 280)) | (1L << (COMMIT - 280)) | (1L << (COMPACT - 280)) | (1L << (COMPLETION - 280)) | (1L << (COMPRESSED - 280)) | (1L << (COMPRESSION - 280)) | (1L << (CONCURRENT - 280)) | (1L << (CONNECTION - 280)) | (1L << (CONSISTENT - 280)) | (1L << (CONTAINS - 280)) | (1L << (CONTEXT - 280)) | (1L << (CONTRIBUTORS - 280)) | (1L << (COPY - 280)) | (1L << (CPU - 280)) | (1L << (DATA - 280)) | (1L << (DATAFILE - 280)) | (1L << (DEALLOCATE - 280)) | (1L << (DEFAULT_AUTH - 280)) | (1L << (DEFINER - 280)) | (1L << (DELAY_KEY_WRITE - 280)) | (1L << (DIRECTORY - 280)) | (1L << (DISABLE - 280)) | (1L << (DISCARD - 280)) | (1L << (DISK - 280)) | (1L << (DO - 280)) | (1L << (DUMPFILE - 280)) | (1L << (DUPLICATE - 280)) | (1L << (DYNAMIC - 280)) | (1L << (ENABLE - 280)) | (1L << (ENCRYPTION - 280)) | (1L << (ENDS - 280)) | (1L << (ENGINE - 280)) | (1L << (ENGINES - 280)) | (1L << (ERROR - 280)) | (1L << (ERRORS - 280)) | (1L << (ESCAPE - 280)) | (1L << (EVEN - 280)) | (1L << (EVENT - 280)) | (1L << (EVENTS - 280)) | (1L << (EVERY - 280)) | (1L << (EXCHANGE - 280)) | (1L << (EXCLUSIVE - 280)) | (1L << (EXPIRE - 280)) | (1L << (EXTENT_SIZE - 280)) | (1L << (FAULTS - 280)) | (1L << (FIELDS - 280)) | (1L << (FILE_BLOCK_SIZE - 280)) | (1L << (FILTER - 280)) | (1L << (FIRST - 280)) | (1L << (FIXED - 280)) | (1L << (FOLLOWS - 280)) | (1L << (FULL - 280)) | (1L << (FUNCTION - 280)))) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & ((1L << (GLOBAL - 344)) | (1L << (GRANTS - 344)) | (1L << (GROUP_REPLICATION - 344)) | (1L << (HASH - 344)) | (1L << (HOST - 344)) | (1L << (IDENTIFIED - 344)) | (1L << (IGNORE_SERVER_IDS - 344)) | (1L << (IMPORT - 344)) | (1L << (INDEXES - 344)) | (1L << (INITIAL_SIZE - 344)) | (1L << (INPLACE - 344)) | (1L << (INSERT_METHOD - 344)) | (1L << (INSTANCE - 344)) | (1L << (INVOKER - 344)) | (1L << (IO - 344)) | (1L << (IO_THREAD - 344)) | (1L << (IPC - 344)) | (1L << (ISOLATION - 344)) | (1L << (ISSUER - 344)) | (1L << (KEY_BLOCK_SIZE - 344)) | (1L << (LANGUAGE - 344)) | (1L << (LAST - 344)) | (1L << (LEAVES - 344)) | (1L << (LESS - 344)) | (1L << (LEVEL - 344)) | (1L << (LIST - 344)) | (1L << (LOCAL - 344)) | (1L << (LOGFILE - 344)) | (1L << (LOGS - 344)) | (1L << (MASTER - 344)) | (1L << (MASTER_AUTO_POSITION - 344)) | (1L << (MASTER_CONNECT_RETRY - 344)) | (1L << (MASTER_DELAY - 344)) | (1L << (MASTER_HEARTBEAT_PERIOD - 344)) | (1L << (MASTER_HOST - 344)) | (1L << (MASTER_LOG_FILE - 344)) | (1L << (MASTER_LOG_POS - 344)) | (1L << (MASTER_PASSWORD - 344)) | (1L << (MASTER_PORT - 344)) | (1L << (MASTER_RETRY_COUNT - 344)) | (1L << (MASTER_SSL - 344)) | (1L << (MASTER_SSL_CA - 344)) | (1L << (MASTER_SSL_CAPATH - 344)) | (1L << (MASTER_SSL_CERT - 344)) | (1L << (MASTER_SSL_CIPHER - 344)) | (1L << (MASTER_SSL_CRL - 344)) | (1L << (MASTER_SSL_CRLPATH - 344)) | (1L << (MASTER_SSL_KEY - 344)) | (1L << (MASTER_TLS_VERSION - 344)) | (1L << (MASTER_USER - 344)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 344)) | (1L << (MAX_QUERIES_PER_HOUR - 344)) | (1L << (MAX_ROWS - 344)) | (1L << (MAX_SIZE - 344)) | (1L << (MAX_UPDATES_PER_HOUR - 344)) | (1L << (MAX_USER_CONNECTIONS - 344)) | (1L << (MERGE - 344)) | (1L << (MIGRATE - 344)))) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & ((1L << (MIN_ROWS - 408)) | (1L << (MODIFY - 408)) | (1L << (MUTEX - 408)) | (1L << (MYSQL - 408)) | (1L << (NAME - 408)) | (1L << (NAMES - 408)) | (1L << (NCHAR - 408)) | (1L << (NEVER - 408)) | (1L << (NO - 408)) | (1L << (NODEGROUP - 408)) | (1L << (NONE - 408)) | (1L << (OFFLINE - 408)) | (1L << (OFFSET - 408)) | (1L << (OJ - 408)) | (1L << (OLD_PASSWORD - 408)) | (1L << (ONE - 408)) | (1L << (ONLINE - 408)) | (1L << (ONLY - 408)) | (1L << (OPTIMIZER_COSTS - 408)) | (1L << (OPTIONS - 408)) | (1L << (OWNER - 408)) | (1L << (PACK_KEYS - 408)) | (1L << (PAGE - 408)) | (1L << (PARSER - 408)) | (1L << (PARTIAL - 408)) | (1L << (PARTITIONING - 408)) | (1L << (PARTITIONS - 408)) | (1L << (PASSWORD - 408)) | (1L << (PHASE - 408)) | (1L << (PLUGIN_DIR - 408)) | (1L << (PLUGINS - 408)) | (1L << (PORT - 408)) | (1L << (PRECEDES - 408)) | (1L << (PREPARE - 408)) | (1L << (PRESERVE - 408)) | (1L << (PREV - 408)) | (1L << (PROCESSLIST - 408)) | (1L << (PROFILE - 408)) | (1L << (PROFILES - 408)) | (1L << (PROXY - 408)) | (1L << (QUERY - 408)) | (1L << (QUICK - 408)) | (1L << (REBUILD - 408)) | (1L << (RECOVER - 408)) | (1L << (REDO_BUFFER_SIZE - 408)) | (1L << (REDUNDANT - 408)) | (1L << (RELAY_LOG_FILE - 408)) | (1L << (RELAY_LOG_POS - 408)) | (1L << (RELAYLOG - 408)) | (1L << (REMOVE - 408)) | (1L << (REORGANIZE - 408)) | (1L << (REPAIR - 408)) | (1L << (REPLICATE_DO_DB - 408)) | (1L << (REPLICATE_DO_TABLE - 408)) | (1L << (REPLICATE_IGNORE_DB - 408)) | (1L << (REPLICATE_IGNORE_TABLE - 408)) | (1L << (REPLICATE_REWRITE_DB - 408)) | (1L << (REPLICATE_WILD_DO_TABLE - 408)))) != 0) || ((((_la - 472)) & ~0x3f) == 0 && ((1L << (_la - 472)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 472)) | (1L << (REPLICATION - 472)) | (1L << (RESUME - 472)) | (1L << (RETURNS - 472)) | (1L << (ROLLBACK - 472)) | (1L << (ROLLUP - 472)) | (1L << (ROTATE - 472)) | (1L << (ROW - 472)) | (1L << (ROWS - 472)) | (1L << (ROW_FORMAT - 472)) | (1L << (SAVEPOINT - 472)) | (1L << (SCHEDULE - 472)) | (1L << (SECURITY - 472)) | (1L << (SERVER - 472)) | (1L << (SESSION - 472)) | (1L << (SHARE - 472)) | (1L << (SHARED - 472)) | (1L << (SIGNED - 472)) | (1L << (SIMPLE - 472)) | (1L << (SLAVE - 472)) | (1L << (SNAPSHOT - 472)) | (1L << (SOCKET - 472)) | (1L << (SOME - 472)) | (1L << (SOUNDS - 472)) | (1L << (SOURCE - 472)) | (1L << (SQL_AFTER_GTIDS - 472)) | (1L << (SQL_AFTER_MTS_GAPS - 472)) | (1L << (SQL_BEFORE_GTIDS - 472)) | (1L << (SQL_BUFFER_RESULT - 472)) | (1L << (SQL_CACHE - 472)) | (1L << (SQL_NO_CACHE - 472)) | (1L << (SQL_THREAD - 472)) | (1L << (START - 472)) | (1L << (STARTS - 472)) | (1L << (STATS_AUTO_RECALC - 472)) | (1L << (STATS_PERSISTENT - 472)) | (1L << (STATS_SAMPLE_PAGES - 472)) | (1L << (STATUS - 472)) | (1L << (STOP - 472)) | (1L << (STORAGE - 472)) | (1L << (STRING - 472)) | (1L << (SUBJECT - 472)) | (1L << (SUBPARTITION - 472)) | (1L << (SUBPARTITIONS - 472)) | (1L << (SUSPEND - 472)) | (1L << (SWAPS - 472)) | (1L << (SWITCHES - 472)) | (1L << (TABLESPACE - 472)) | (1L << (TEMPORARY - 472)) | (1L << (TEMPTABLE - 472)) | (1L << (THAN - 472)) | (1L << (TRANSACTION - 472)) | (1L << (TRUNCATE - 472)) | (1L << (UNDEFINED - 472)) | (1L << (UNDOFILE - 472)) | (1L << (UNDO_BUFFER_SIZE - 472)) | (1L << (UNKNOWN - 472)))) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & ((1L << (UPGRADE - 536)) | (1L << (USER - 536)) | (1L << (VALIDATION - 536)) | (1L << (VALUE - 536)) | (1L << (VARIABLES - 536)) | (1L << (VIEW - 536)) | (1L << (WAIT - 536)) | (1L << (WARNINGS - 536)) | (1L << (WITHOUT - 536)) | (1L << (WORK - 536)) | (1L << (WRAPPER - 536)) | (1L << (X509 - 536)) | (1L << (XA - 536)) | (1L << (XML - 536)) | (1L << (TABLES - 536)) | (1L << (ROUTINE - 536)) | (1L << (EXECUTE - 536)) | (1L << (FILE - 536)) | (1L << (PROCESS - 536)) | (1L << (RELOAD - 536)) | (1L << (SHUTDOWN - 536)) | (1L << (SUPER - 536)) | (1L << (PRIVILEGES - 536)) | (1L << (ARMSCII8 - 536)) | (1L << (ASCII - 536)) | (1L << (BIG5 - 536)) | (1L << (CP1250 - 536)) | (1L << (CP1251 - 536)) | (1L << (CP1256 - 536)) | (1L << (CP1257 - 536)) | (1L << (CP850 - 536)) | (1L << (CP852 - 536)) | (1L << (CP866 - 536)) | (1L << (CP932 - 536)) | (1L << (DEC8 - 536)) | (1L << (EUCJPMS - 536)) | (1L << (EUCKR - 536)) | (1L << (GB2312 - 536)))) != 0) || ((((_la - 600)) & ~0x3f) == 0 && ((1L << (_la - 600)) & ((1L << (GBK - 600)) | (1L << (GEOSTD8 - 600)) | (1L << (GREEK - 600)) | (1L << (HEBREW - 600)) | (1L << (HP8 - 600)) | (1L << (KEYBCS2 - 600)) | (1L << (KOI8R - 600)) | (1L << (KOI8U - 600)) | (1L << (LATIN1 - 600)) | (1L << (LATIN2 - 600)) | (1L << (LATIN5 - 600)) | (1L << (LATIN7 - 600)) | (1L << (MACCE - 600)) | (1L << (MACROMAN - 600)) | (1L << (SJIS - 600)) | (1L << (SWE7 - 600)) | (1L << (TIS620 - 600)) | (1L << (UCS2 - 600)) | (1L << (UJIS - 600)) | (1L << (UTF16 - 600)) | (1L << (UTF16LE - 600)) | (1L << (UTF32 - 600)) | (1L << (UTF8 - 600)) | (1L << (UTF8MB3 - 600)) | (1L << (UTF8MB4 - 600)) | (1L << (ARCHIVE - 600)) | (1L << (BLACKHOLE - 600)) | (1L << (CSV - 600)) | (1L << (FEDERATED - 600)) | (1L << (INNODB - 600)) | (1L << (MEMORY - 600)) | (1L << (MRG_MYISAM - 600)) | (1L << (MYISAM - 600)) | (1L << (NDB - 600)) | (1L << (NDBCLUSTER - 600)) | (1L << (PERFOMANCE_SCHEMA - 600)) | (1L << (REPEATABLE - 600)) | (1L << (COMMITTED - 600)) | (1L << (UNCOMMITTED - 600)) | (1L << (SERIALIZABLE - 600)) | (1L << (MOD - 600)) | (1L << (REVERSE - 600)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0)) {
				{
				setState(4019);
				((WhileStatementContext)_localctx).beginLabel = nameIdentifier();
				setState(4020);
				match(COLON);
				}
			}

			setState(4024);
			match(WHILE);
			setState(4025);
			expr(0);
			setState(4026);
			match(DO);
			setState(4028); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4027);
				bodyItem();
				}
				}
				setState(4030); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (ITERATE - 76)) | (1L << (KILL - 76)) | (1L << (LEAVE - 76)) | (1L << (LEFT - 76)) | (1L << (LOAD - 76)) | (1L << (LOCK - 76)) | (1L << (LOOP - 76)) | (1L << (OPTIMIZE - 76)) | (1L << (PURGE - 76)) | (1L << (RELEASE - 76)) | (1L << (RENAME - 76)) | (1L << (REPEAT - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVOKE - 140)) | (1L << (RIGHT - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SHOW - 140)) | (1L << (UNLOCK - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WHILE - 140)) | (1L << (DATE - 140)) | (1L << (TIME - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (TIMESTAMP - 204)) | (1L << (DATETIME - 204)) | (1L << (YEAR - 204)) | (1L << (TEXT - 204)) | (1L << (ENUM - 204)) | (1L << (SUM - 204)) | (1L << (SUBSTR - 204)) | (1L << (SUBSTRING - 204)) | (1L << (ACCOUNT - 204)) | (1L << (ACTION - 204)) | (1L << (AFTER - 204)) | (1L << (AGGREGATE - 204)) | (1L << (ALGORITHM - 204)) | (1L << (ANY - 204)) | (1L << (AT - 204)) | (1L << (AUTHORS - 204)) | (1L << (AUTOCOMMIT - 204)) | (1L << (AUTOEXTEND_SIZE - 204)) | (1L << (AUTO_INCREMENT - 204)) | (1L << (AVG_ROW_LENGTH - 204)) | (1L << (BEGIN - 204)) | (1L << (BINLOG - 204)) | (1L << (BIT - 204)) | (1L << (BLOCK - 204)) | (1L << (BOOL - 204)) | (1L << (BOOLEAN - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (BTREE - 268)) | (1L << (CACHE - 268)) | (1L << (CASCADED - 268)) | (1L << (CHAIN - 268)) | (1L << (CHANNEL - 268)) | (1L << (CHECKSUM - 268)) | (1L << (CIPHER - 268)) | (1L << (CLIENT - 268)) | (1L << (CLOSE - 268)) | (1L << (COALESCE - 268)) | (1L << (CODE - 268)) | (1L << (COLUMNS - 268)) | (1L << (COLUMN_FORMAT - 268)) | (1L << (COMMENT - 268)) | (1L << (COMMIT - 268)) | (1L << (COMPACT - 268)) | (1L << (COMPLETION - 268)) | (1L << (COMPRESSED - 268)) | (1L << (COMPRESSION - 268)) | (1L << (CONCURRENT - 268)) | (1L << (CONNECTION - 268)) | (1L << (CONSISTENT - 268)) | (1L << (CONTAINS - 268)) | (1L << (CONTEXT - 268)) | (1L << (CONTRIBUTORS - 268)) | (1L << (COPY - 268)) | (1L << (CPU - 268)) | (1L << (DATA - 268)) | (1L << (DATAFILE - 268)) | (1L << (DEALLOCATE - 268)) | (1L << (DEFAULT_AUTH - 268)) | (1L << (DEFINER - 268)) | (1L << (DELAY_KEY_WRITE - 268)) | (1L << (DIRECTORY - 268)) | (1L << (DISABLE - 268)) | (1L << (DISCARD - 268)) | (1L << (DISK - 268)) | (1L << (DO - 268)) | (1L << (DUMPFILE - 268)) | (1L << (DUPLICATE - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ENABLE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDS - 268)) | (1L << (ENGINE - 268)) | (1L << (ENGINES - 268)) | (1L << (ERROR - 268)) | (1L << (ERRORS - 268)) | (1L << (ESCAPE - 268)) | (1L << (EVEN - 268)) | (1L << (EVENT - 268)) | (1L << (EVENTS - 268)) | (1L << (EVERY - 268)) | (1L << (EXCHANGE - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXPIRE - 268)) | (1L << (EXTENT_SIZE - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FAULTS - 332)) | (1L << (FIELDS - 332)) | (1L << (FILE_BLOCK_SIZE - 332)) | (1L << (FILTER - 332)) | (1L << (FIRST - 332)) | (1L << (FIXED - 332)) | (1L << (FLUSH - 332)) | (1L << (FOLLOWS - 332)) | (1L << (FULL - 332)) | (1L << (FUNCTION - 332)) | (1L << (GLOBAL - 332)) | (1L << (GRANTS - 332)) | (1L << (GROUP_REPLICATION - 332)) | (1L << (HANDLER - 332)) | (1L << (HASH - 332)) | (1L << (HELP - 332)) | (1L << (HOST - 332)) | (1L << (IDENTIFIED - 332)) | (1L << (IGNORE_SERVER_IDS - 332)) | (1L << (IMPORT - 332)) | (1L << (INDEXES - 332)) | (1L << (INITIAL_SIZE - 332)) | (1L << (INPLACE - 332)) | (1L << (INSERT_METHOD - 332)) | (1L << (INSTALL - 332)) | (1L << (INSTANCE - 332)) | (1L << (INVOKER - 332)) | (1L << (IO - 332)) | (1L << (IO_THREAD - 332)) | (1L << (IPC - 332)) | (1L << (ISOLATION - 332)) | (1L << (ISSUER - 332)) | (1L << (KEY_BLOCK_SIZE - 332)) | (1L << (LANGUAGE - 332)) | (1L << (LAST - 332)) | (1L << (LEAVES - 332)) | (1L << (LESS - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LOCAL - 332)) | (1L << (LOGFILE - 332)) | (1L << (LOGS - 332)) | (1L << (MASTER - 332)) | (1L << (MASTER_AUTO_POSITION - 332)) | (1L << (MASTER_CONNECT_RETRY - 332)) | (1L << (MASTER_DELAY - 332)) | (1L << (MASTER_HEARTBEAT_PERIOD - 332)) | (1L << (MASTER_HOST - 332)) | (1L << (MASTER_LOG_FILE - 332)) | (1L << (MASTER_LOG_POS - 332)) | (1L << (MASTER_PASSWORD - 332)) | (1L << (MASTER_PORT - 332)) | (1L << (MASTER_RETRY_COUNT - 332)) | (1L << (MASTER_SSL - 332)) | (1L << (MASTER_SSL_CA - 332)) | (1L << (MASTER_SSL_CAPATH - 332)) | (1L << (MASTER_SSL_CERT - 332)) | (1L << (MASTER_SSL_CIPHER - 332)) | (1L << (MASTER_SSL_CRL - 332)) | (1L << (MASTER_SSL_CRLPATH - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_SSL_KEY - 396)) | (1L << (MASTER_TLS_VERSION - 396)) | (1L << (MASTER_USER - 396)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 396)) | (1L << (MAX_QUERIES_PER_HOUR - 396)) | (1L << (MAX_ROWS - 396)) | (1L << (MAX_SIZE - 396)) | (1L << (MAX_UPDATES_PER_HOUR - 396)) | (1L << (MAX_USER_CONNECTIONS - 396)) | (1L << (MERGE - 396)) | (1L << (MIGRATE - 396)) | (1L << (MIN_ROWS - 396)) | (1L << (MODIFY - 396)) | (1L << (MUTEX - 396)) | (1L << (MYSQL - 396)) | (1L << (NAME - 396)) | (1L << (NAMES - 396)) | (1L << (NCHAR - 396)) | (1L << (NEVER - 396)) | (1L << (NO - 396)) | (1L << (NODEGROUP - 396)) | (1L << (NONE - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OJ - 396)) | (1L << (OLD_PASSWORD - 396)) | (1L << (ONE - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN - 396)) | (1L << (OPTIMIZER_COSTS - 396)) | (1L << (OPTIONS - 396)) | (1L << (OWNER - 396)) | (1L << (PACK_KEYS - 396)) | (1L << (PAGE - 396)) | (1L << (PARSER - 396)) | (1L << (PARTIAL - 396)) | (1L << (PARTITIONING - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PASSWORD - 396)) | (1L << (PHASE - 396)) | (1L << (PLUGIN_DIR - 396)) | (1L << (PLUGINS - 396)) | (1L << (PORT - 396)) | (1L << (PRECEDES - 396)) | (1L << (PREPARE - 396)) | (1L << (PRESERVE - 396)) | (1L << (PREV - 396)) | (1L << (PROCESSLIST - 396)) | (1L << (PROFILE - 396)) | (1L << (PROFILES - 396)) | (1L << (PROXY - 396)) | (1L << (QUERY - 396)) | (1L << (QUICK - 396)) | (1L << (REBUILD - 396)) | (1L << (RECOVER - 396)) | (1L << (REDO_BUFFER_SIZE - 396)) | (1L << (REDUNDANT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (RELAY_LOG_FILE - 460)) | (1L << (RELAY_LOG_POS - 460)) | (1L << (RELAYLOG - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPAIR - 460)) | (1L << (REPLICATE_DO_DB - 460)) | (1L << (REPLICATE_DO_TABLE - 460)) | (1L << (REPLICATE_IGNORE_DB - 460)) | (1L << (REPLICATE_IGNORE_TABLE - 460)) | (1L << (REPLICATE_REWRITE_DB - 460)) | (1L << (REPLICATE_WILD_DO_TABLE - 460)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 460)) | (1L << (REPLICATION - 460)) | (1L << (RESET - 460)) | (1L << (RESUME - 460)) | (1L << (RETURNS - 460)) | (1L << (ROLLBACK - 460)) | (1L << (ROLLUP - 460)) | (1L << (ROTATE - 460)) | (1L << (ROW - 460)) | (1L << (ROWS - 460)) | (1L << (ROW_FORMAT - 460)) | (1L << (SAVEPOINT - 460)) | (1L << (SCHEDULE - 460)) | (1L << (SECURITY - 460)) | (1L << (SERVER - 460)) | (1L << (SESSION - 460)) | (1L << (SHARE - 460)) | (1L << (SHARED - 460)) | (1L << (SIGNED - 460)) | (1L << (SIMPLE - 460)) | (1L << (SLAVE - 460)) | (1L << (SNAPSHOT - 460)) | (1L << (SOCKET - 460)) | (1L << (SOME - 460)) | (1L << (SOUNDS - 460)) | (1L << (SOURCE - 460)) | (1L << (SQL_AFTER_GTIDS - 460)) | (1L << (SQL_AFTER_MTS_GAPS - 460)) | (1L << (SQL_BEFORE_GTIDS - 460)) | (1L << (SQL_BUFFER_RESULT - 460)) | (1L << (SQL_CACHE - 460)) | (1L << (SQL_NO_CACHE - 460)) | (1L << (SQL_THREAD - 460)) | (1L << (START - 460)) | (1L << (STARTS - 460)) | (1L << (STATS_AUTO_RECALC - 460)) | (1L << (STATS_PERSISTENT - 460)) | (1L << (STATS_SAMPLE_PAGES - 460)) | (1L << (STATUS - 460)) | (1L << (STOP - 460)) | (1L << (STORAGE - 460)) | (1L << (STRING - 460)) | (1L << (SUBJECT - 460)) | (1L << (SUBPARTITION - 460)) | (1L << (SUBPARTITIONS - 460)) | (1L << (SUSPEND - 460)) | (1L << (SWAPS - 460)) | (1L << (SWITCHES - 460)) | (1L << (TABLESPACE - 460)) | (1L << (TEMPORARY - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (TEMPTABLE - 524)) | (1L << (THAN - 524)) | (1L << (TRANSACTION - 524)) | (1L << (TRUNCATE - 524)) | (1L << (UNDEFINED - 524)) | (1L << (UNDOFILE - 524)) | (1L << (UNDO_BUFFER_SIZE - 524)) | (1L << (UNINSTALL - 524)) | (1L << (UNKNOWN - 524)) | (1L << (UPGRADE - 524)) | (1L << (USER - 524)) | (1L << (VALIDATION - 524)) | (1L << (VALUE - 524)) | (1L << (VARIABLES - 524)) | (1L << (VIEW - 524)) | (1L << (WAIT - 524)) | (1L << (WARNINGS - 524)) | (1L << (WITHOUT - 524)) | (1L << (WORK - 524)) | (1L << (WRAPPER - 524)) | (1L << (X509 - 524)) | (1L << (XA - 524)) | (1L << (XML - 524)) | (1L << (TABLES - 524)) | (1L << (ROUTINE - 524)) | (1L << (EXECUTE - 524)) | (1L << (FILE - 524)) | (1L << (PROCESS - 524)) | (1L << (RELOAD - 524)) | (1L << (SHUTDOWN - 524)) | (1L << (SUPER - 524)) | (1L << (PRIVILEGES - 524)) | (1L << (ARMSCII8 - 524)) | (1L << (ASCII - 524)) | (1L << (BIG5 - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (CP1250 - 588)) | (1L << (CP1251 - 588)) | (1L << (CP1256 - 588)) | (1L << (CP1257 - 588)) | (1L << (CP850 - 588)) | (1L << (CP852 - 588)) | (1L << (CP866 - 588)) | (1L << (CP932 - 588)) | (1L << (DEC8 - 588)) | (1L << (EUCJPMS - 588)) | (1L << (EUCKR - 588)) | (1L << (GB2312 - 588)) | (1L << (GBK - 588)) | (1L << (GEOSTD8 - 588)) | (1L << (GREEK - 588)) | (1L << (HEBREW - 588)) | (1L << (HP8 - 588)) | (1L << (KEYBCS2 - 588)) | (1L << (KOI8R - 588)) | (1L << (KOI8U - 588)) | (1L << (LATIN1 - 588)) | (1L << (LATIN2 - 588)) | (1L << (LATIN5 - 588)) | (1L << (LATIN7 - 588)) | (1L << (MACCE - 588)) | (1L << (MACROMAN - 588)) | (1L << (SJIS - 588)) | (1L << (SWE7 - 588)) | (1L << (TIS620 - 588)) | (1L << (UCS2 - 588)) | (1L << (UJIS - 588)) | (1L << (UTF16 - 588)) | (1L << (UTF16LE - 588)) | (1L << (UTF32 - 588)) | (1L << (UTF8 - 588)) | (1L << (UTF8MB3 - 588)) | (1L << (UTF8MB4 - 588)) | (1L << (ARCHIVE - 588)) | (1L << (BLACKHOLE - 588)) | (1L << (CSV - 588)) | (1L << (FEDERATED - 588)) | (1L << (INNODB - 588)) | (1L << (MEMORY - 588)) | (1L << (MRG_MYISAM - 588)) | (1L << (MYISAM - 588)) | (1L << (NDB - 588)) | (1L << (NDBCLUSTER - 588)) | (1L << (PERFOMANCE_SCHEMA - 588)) | (1L << (REPEATABLE - 588)) | (1L << (COMMITTED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (SERIALIZABLE - 588)) | (1L << (MOD - 588)) | (1L << (REVERSE - 588)))) != 0) || ((((_la - 664)) & ~0x3f) == 0 && ((1L << (_la - 664)) & ((1L << (ASTERISK - 664)) | (1L << (LEFT_PAREN - 664)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 664)) | (1L << (REGULAR_ID - 664)) | (1L << (DELIMITED_ID - 664)) | (1L << (REVERSE_QUOTE_ID - 664)) | (1L << (MID - 664)))) != 0) );
			setState(4032);
			match(END);
			setState(4033);
			match(WHILE);
			setState(4035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4034);
				((WhileStatementContext)_localctx).endLabel = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(DRDSSQLStatementParser.CLOSE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(DRDSSQLStatementParser.OPEN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(DRDSSQLStatementParser.FETCH, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode NEXT() { return getToken(DRDSSQLStatementParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_cursorStatement);
		int _la;
		try {
			setState(4058);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4037);
				match(CLOSE);
				setState(4038);
				nameIdentifier();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4039);
				match(FETCH);
				setState(4044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==NEXT) {
					{
					setState(4041);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4040);
						match(NEXT);
						}
					}

					setState(4043);
					match(FROM);
					}
				}

				setState(4046);
				nameIdentifier();
				setState(4047);
				match(INTO);
				setState(4048);
				expr(0);
				setState(4053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4049);
					match(COMMA);
					setState(4050);
					expr(0);
					}
					}
					setState(4055);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4056);
				match(OPEN);
				setState(4057);
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionHandlingContext extends ParserRuleContext {
		public DeclareVariableContext declareVariable() {
			return getRuleContext(DeclareVariableContext.class,0);
		}
		public DeclareConditionContext declareCondition() {
			return getRuleContext(DeclareConditionContext.class,0);
		}
		public DeclareCursorContext declareCursor() {
			return getRuleContext(DeclareCursorContext.class,0);
		}
		public DeclareHandlerContext declareHandler() {
			return getRuleContext(DeclareHandlerContext.class,0);
		}
		public ConditionHandlingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionHandling; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitConditionHandling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionHandlingContext conditionHandling() throws RecognitionException {
		ConditionHandlingContext _localctx = new ConditionHandlingContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_conditionHandling);
		try {
			setState(4064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4060);
				declareVariable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4061);
				declareCondition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4062);
				declareCursor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4063);
				declareHandler();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DRDSSQLStatementParser.DECLARE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4066);
			match(DECLARE);
			setState(4067);
			expr(0);
			setState(4072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4068);
				match(COMMA);
				setState(4069);
				expr(0);
				}
				}
				setState(4074);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4075);
			dataType();
			setState(4076);
			defaultClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DRDSSQLStatementParser.DECLARE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(DRDSSQLStatementParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(DRDSSQLStatementParser.SQLSTATE, 0); }
		public TerminalNode VALUE() { return getToken(DRDSSQLStatementParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_declareCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4078);
			match(DECLARE);
			setState(4079);
			nameIdentifier();
			setState(4080);
			match(CONDITION);
			setState(4081);
			match(FOR);
			setState(4088);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case CURSOR:
			case EXISTS:
			case FALSE:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case MATCH:
			case NEW:
			case NOT:
			case NULL_LITERAL:
			case OLD:
			case PERSIST:
			case PERSIST_ONLY:
			case REPLACE:
			case RIGHT:
			case SELECT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case COUNT:
			case MAX:
			case MIN:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GET_FORMAT:
			case MOD:
			case REVERSE:
			case WEIGHT_STRING:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case ASTERISK:
			case EXCLAMATION_OP:
			case BIT_NOT_OP:
			case LEFT_PAREN:
			case AT_SIGN:
			case QUESTION_MARK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case CHAR_STRING:
			case NCHAR_STRING:
			case STRING_CHARSET_NAME:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case HEXADECIMAL_LITERAL:
			case BIT_STRING:
			case MID:
			case TREAT:
			case JSON_TABLE:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case APPROX_COUNT:
			case APPROX_COUNT_DISTINCT:
			case APPROX_COUNT_DISTINCT_AGG:
			case APPROX_COUNT_DISTINCT_DETAIL:
			case APPROX_MEDIAN:
			case APPROX_PERCENTILE:
			case APPROX_PERCENTILE_AGG:
			case APPROX_PERCENTILE_DETAIL:
			case APPROX_RANK:
			case APPROX_SUM:
			case COLLECT:
			case CORR:
			case CORR_S:
			case CORR_K:
			case COVAR_POP:
			case COVAR_SAMP:
			case CUME_DIST:
			case DENSE_RANK:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case MEDIAN:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case REGR_SLOPE:
			case REGR_INTERCEPT:
			case REGR_COUNT:
			case REGR_R2:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_SXX:
			case REGR_SYY:
			case REGR_SXY:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_WSR_TEST:
			case SYS_OP_ZONE_ID:
			case SYS_XMLAGG:
			case TO_APPROX_COUNT_DISTINCT:
			case TO_APPROX_PERCENTILE:
			case XMLAGG:
			case LISTAGG:
			case CUBE_TABLE:
				{
				setState(4082);
				expr(0);
				}
				break;
			case SQLSTATE:
				{
				setState(4083);
				match(SQLSTATE);
				setState(4085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
				case 1:
					{
					setState(4084);
					match(VALUE);
					}
					break;
				}
				setState(4087);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DRDSSQLStatementParser.DECLARE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DRDSSQLStatementParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4090);
			match(DECLARE);
			setState(4091);
			nameIdentifier();
			setState(4092);
			match(CURSOR);
			setState(4093);
			match(FOR);
			setState(4094);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(DRDSSQLStatementParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(DRDSSQLStatementParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(DRDSSQLStatementParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(DRDSSQLStatementParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(DRDSSQLStatementParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4096);
			match(DECLARE);
			setState(4097);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4098);
			match(HANDLER);
			setState(4099);
			match(FOR);
			setState(4100);
			handlerConditionValue();
			setState(4105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4101);
				match(COMMA);
				setState(4102);
				handlerConditionValue();
				}
				}
				setState(4107);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4108);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(DRDSSQLStatementParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(DRDSSQLStatementParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(DRDSSQLStatementParser.SQLSTATE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(DRDSSQLStatementParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(DRDSSQLStatementParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_handlerConditionValue);
		try {
			setState(4121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4110);
				expr(0);
				}
				break;
			case 2:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4111);
				match(SQLSTATE);
				setState(4113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(4112);
					match(VALUE);
					}
					break;
				}
				setState(4115);
				expr(0);
				}
				break;
			case 3:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4116);
				nameIdentifier();
				}
				break;
			case 4:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4117);
				match(SQLWARNING);
				}
				break;
			case 5:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4118);
				match(NOT);
				setState(4119);
				match(FOUND);
				}
				break;
			case 6:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4120);
				match(SQLEXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserStatementContext extends ParserRuleContext {
		public AlterUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserStatement; }
	 
		public AlterUserStatementContext() { }
		public void copyFrom(AlterUserStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserStatementContext {
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserStatementContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(DRDSSQLStatementParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(DRDSSQLStatementParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(DRDSSQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DRDSSQLStatementParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserStatementContext alterUserStatement() throws RecognitionException {
		AlterUserStatementContext _localctx = new AlterUserStatementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_alterUserStatement);
		int _la;
		try {
			int _alt;
			setState(4180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4123);
				match(ALTER);
				setState(4124);
				match(USER);
				setState(4126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4125);
					ifExists();
					}
				}

				setState(4128);
				userSpecification();
				setState(4133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4129);
					match(COMMA);
					setState(4130);
					userSpecification();
					}
					}
					setState(4135);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4136);
				match(ALTER);
				setState(4137);
				match(USER);
				setState(4139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4138);
					ifExists();
					}
				}

				setState(4141);
				userAuthOption();
				setState(4146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4142);
					match(COMMA);
					setState(4143);
					userAuthOption();
					}
					}
					setState(4148);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4149);
					match(REQUIRE);
					setState(4161);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4150);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4151);
						tlsOption();
						setState(4158);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,513,_ctx);
						while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(4153);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==AND) {
									{
									setState(4152);
									match(AND);
									}
								}

								setState(4155);
								tlsOption();
								}
								} 
							}
							setState(4160);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,513,_ctx);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4165);
					match(WITH);
					setState(4167); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(4166);
							userResourceOption();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4169); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,516,_ctx);
					} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
					}
				}

				setState(4177);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,519,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4175);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PASSWORD:
							{
							setState(4173);
							userPasswordOption();
							}
							break;
						case ACCOUNT:
							{
							setState(4174);
							userLockOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(4179);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,519,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserStatementContext extends ParserRuleContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(DRDSSQLStatementParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(DRDSSQLStatementParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(DRDSSQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DRDSSQLStatementParser.AND, i);
		}
		public CreateUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateUserStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserStatementContext createUserStatement() throws RecognitionException {
		CreateUserStatementContext _localctx = new CreateUserStatementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_createUserStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4182);
			match(CREATE);
			setState(4183);
			match(USER);
			setState(4185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4184);
				ifNotExists();
				}
			}

			setState(4187);
			userAuthOption();
			setState(4192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4188);
				match(COMMA);
				setState(4189);
				userAuthOption();
				}
				}
				setState(4194);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4195);
				match(REQUIRE);
				setState(4207);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4196);
					((CreateUserStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4197);
					tlsOption();
					setState(4204);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
					while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4199);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4198);
								match(AND);
								}
							}

							setState(4201);
							tlsOption();
							}
							} 
						}
						setState(4206);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,524,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4211);
				match(WITH);
				setState(4213); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4212);
						userResourceOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4215); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
				} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4223);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,530,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4221);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4219);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4220);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(4225);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,530,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public DropUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDropUserStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserStatementContext dropUserStatement() throws RecognitionException {
		DropUserStatementContext _localctx = new DropUserStatementContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_dropUserStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4226);
			match(DROP);
			setState(4227);
			match(USER);
			setState(4229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4228);
				ifExists();
				}
			}

			setState(4231);
			nameIdentifier();
			setState(4236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4232);
				match(COMMA);
				setState(4233);
				nameIdentifier();
				}
				}
				setState(4238);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(DRDSSQLStatementParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(DRDSSQLStatementParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(DRDSSQLStatementParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(DRDSSQLStatementParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(DRDSSQLStatementParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(DRDSSQLStatementParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(DRDSSQLStatementParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(DRDSSQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DRDSSQLStatementParser.AND, i);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4239);
			match(GRANT);
			setState(4240);
			privelegeClause();
			setState(4245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4241);
				match(COMMA);
				setState(4242);
				privelegeClause();
				}
				}
				setState(4247);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4248);
			match(ON);
			setState(4250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4249);
				((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4252);
			privilegeLevel();
			setState(4253);
			match(TO);
			setState(4254);
			userAuthOption();
			setState(4259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4255);
				match(COMMA);
				setState(4256);
				userAuthOption();
				}
				}
				setState(4261);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4262);
				match(REQUIRE);
				setState(4274);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4263);
					((GrantStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4264);
					tlsOption();
					setState(4271);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,537,_ctx);
					while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4266);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4265);
								match(AND);
								}
							}

							setState(4268);
							tlsOption();
							}
							} 
						}
						setState(4273);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,537,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4278);
				match(WITH);
				setState(4284);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,541,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4282);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case GRANT:
							{
							setState(4279);
							match(GRANT);
							setState(4280);
							match(OPTION);
							}
							break;
						case MAX_CONNECTIONS_PER_HOUR:
						case MAX_QUERIES_PER_HOUR:
						case MAX_UPDATES_PER_HOUR:
						case MAX_USER_CONNECTIONS:
							{
							setState(4281);
							userResourceOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(4286);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,541,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public NameIdentifierContext fromFirst;
		public NameIdentifierContext toFirst;
		public NameIdentifierContext nameIdentifier;
		public List<NameIdentifierContext> toOther = new ArrayList<NameIdentifierContext>();
		public List<TerminalNode> GRANT() { return getTokens(DRDSSQLStatementParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(DRDSSQLStatementParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(DRDSSQLStatementParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(DRDSSQLStatementParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4289);
			match(GRANT);
			setState(4290);
			match(PROXY);
			setState(4291);
			match(ON);
			setState(4292);
			((GrantProxyContext)_localctx).fromFirst = nameIdentifier();
			setState(4293);
			match(TO);
			setState(4294);
			((GrantProxyContext)_localctx).toFirst = nameIdentifier();
			setState(4299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4295);
				match(COMMA);
				setState(4296);
				((GrantProxyContext)_localctx).nameIdentifier = nameIdentifier();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).nameIdentifier);
				}
				}
				setState(4301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4302);
				match(WITH);
				setState(4303);
				match(GRANT);
				setState(4304);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DRDSSQLStatementParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4307);
			match(RENAME);
			setState(4308);
			match(USER);
			setState(4309);
			renameUserClause();
			setState(4314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4310);
				match(COMMA);
				setState(4311);
				renameUserClause();
				}
				}
				setState(4316);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(DRDSSQLStatementParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(DRDSSQLStatementParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(DRDSSQLStatementParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(DRDSSQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(DRDSSQLStatementParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(DRDSSQLStatementParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_revokeStatement);
		int _la;
		try {
			setState(4357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4317);
				match(REVOKE);
				setState(4318);
				privelegeClause();
				setState(4323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4319);
					match(COMMA);
					setState(4320);
					privelegeClause();
					}
					}
					setState(4325);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4326);
				match(ON);
				setState(4328);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
				case 1:
					{
					setState(4327);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4330);
				privilegeLevel();
				setState(4331);
				match(FROM);
				setState(4332);
				nameIdentifier();
				setState(4337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4333);
					match(COMMA);
					setState(4334);
					nameIdentifier();
					}
					}
					setState(4339);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4340);
				match(REVOKE);
				setState(4341);
				match(ALL);
				setState(4343);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4342);
					match(PRIVILEGES);
					}
				}

				setState(4345);
				match(COMMA);
				setState(4346);
				match(GRANT);
				setState(4347);
				match(OPTION);
				setState(4348);
				match(FROM);
				setState(4349);
				nameIdentifier();
				setState(4354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4350);
					match(COMMA);
					setState(4351);
					nameIdentifier();
					}
					}
					setState(4356);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public NameIdentifierContext onUser;
		public NameIdentifierContext fromFirst;
		public NameIdentifierContext nameIdentifier;
		public List<NameIdentifierContext> fromOther = new ArrayList<NameIdentifierContext>();
		public TerminalNode REVOKE() { return getToken(DRDSSQLStatementParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(DRDSSQLStatementParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4359);
			match(REVOKE);
			setState(4360);
			match(PROXY);
			setState(4361);
			match(ON);
			setState(4362);
			((RevokeProxyContext)_localctx).onUser = nameIdentifier();
			setState(4363);
			match(FROM);
			setState(4364);
			((RevokeProxyContext)_localctx).fromFirst = nameIdentifier();
			setState(4369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4365);
				match(COMMA);
				setState(4366);
				((RevokeProxyContext)_localctx).nameIdentifier = nameIdentifier();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).nameIdentifier);
				}
				}
				setState(4371);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4372);
			nameIdentifier();
			setState(4373);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public ExprContext hashed;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(DRDSSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(DRDSSQLStatementParser.PASSWORD, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(DRDSSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(DRDSSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_userAuthOption);
		int _la;
		try {
			setState(4399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4375);
				nameIdentifier();
				setState(4376);
				match(IDENTIFIED);
				setState(4377);
				match(BY);
				setState(4378);
				match(PASSWORD);
				setState(4379);
				((PasswordAuthOptionContext)_localctx).hashed = expr(0);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4381);
				nameIdentifier();
				setState(4382);
				match(IDENTIFIED);
				setState(4385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4383);
					match(WITH);
					setState(4384);
					authPlugin();
					}
				}

				setState(4387);
				match(BY);
				setState(4388);
				expr(0);
				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4390);
				nameIdentifier();
				setState(4391);
				match(IDENTIFIED);
				setState(4392);
				match(WITH);
				setState(4393);
				authPlugin();
				setState(4396);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4394);
					match(AS);
					setState(4395);
					expr(0);
					}
				}

				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4398);
				nameIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(DRDSSQLStatementParser.SSL, 0); }
		public TerminalNode X509() { return getToken(DRDSSQLStatementParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(DRDSSQLStatementParser.CIPHER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ISSUER() { return getToken(DRDSSQLStatementParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(DRDSSQLStatementParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_tlsOption);
		try {
			setState(4409);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4401);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4402);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4403);
				match(CIPHER);
				setState(4404);
				expr(0);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4405);
				match(ISSUER);
				setState(4406);
				expr(0);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4407);
				match(SUBJECT);
				setState(4408);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(DRDSSQLStatementParser.MAX_QUERIES_PER_HOUR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(DRDSSQLStatementParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(DRDSSQLStatementParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(DRDSSQLStatementParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_userResourceOption);
		try {
			setState(4419);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4411);
				match(MAX_QUERIES_PER_HOUR);
				setState(4412);
				expr(0);
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4413);
				match(MAX_UPDATES_PER_HOUR);
				setState(4414);
				expr(0);
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4415);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4416);
				expr(0);
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4417);
				match(MAX_USER_CONNECTIONS);
				setState(4418);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(DRDSSQLStatementParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(DRDSSQLStatementParser.EXPIRE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DAY() { return getToken(DRDSSQLStatementParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(DRDSSQLStatementParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(DRDSSQLStatementParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			match(PASSWORD);
			setState(4422);
			match(EXPIRE);
			setState(4429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				{
				setState(4423);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case 2:
				{
				setState(4424);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case 3:
				{
				setState(4425);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4426);
				expr(0);
				setState(4427);
				match(DAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(DRDSSQLStatementParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(DRDSSQLStatementParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(DRDSSQLStatementParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4431);
			match(ACCOUNT);
			setState(4432);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4434);
			privilege();
			setState(4446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4435);
				match(LEFT_PAREN);
				setState(4436);
				expr(0);
				setState(4441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4437);
					match(COMMA);
					setState(4438);
					expr(0);
					}
					}
					setState(4443);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4444);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DRDSSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(DRDSSQLStatementParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(DRDSSQLStatementParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(DRDSSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(DRDSSQLStatementParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(DRDSSQLStatementParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode DELETE() { return getToken(DRDSSQLStatementParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(DRDSSQLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(DRDSSQLStatementParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(DRDSSQLStatementParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(DRDSSQLStatementParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(DRDSSQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(DRDSSQLStatementParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(DRDSSQLStatementParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(DRDSSQLStatementParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(DRDSSQLStatementParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(DRDSSQLStatementParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(DRDSSQLStatementParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(DRDSSQLStatementParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(DRDSSQLStatementParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(DRDSSQLStatementParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(DRDSSQLStatementParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(DRDSSQLStatementParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(DRDSSQLStatementParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(DRDSSQLStatementParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(DRDSSQLStatementParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(DRDSSQLStatementParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(DRDSSQLStatementParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(DRDSSQLStatementParser.USAGE, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_privilege);
		int _la;
		try {
			setState(4490);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4448);
				match(ALL);
				setState(4450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4449);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4452);
				match(ALTER);
				setState(4454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4453);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4456);
				match(CREATE);
				setState(4463);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4457);
					match(TEMPORARY);
					setState(4458);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4459);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4460);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4461);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4462);
					match(TABLESPACE);
					}
					break;
				case ON:
				case LEFT_PAREN:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4465);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4466);
				match(DROP);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4467);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4468);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4469);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4470);
				match(GRANT);
				setState(4471);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4472);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4473);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4474);
				match(LOCK);
				setState(4475);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4476);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4477);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4478);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4479);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4480);
				match(REPLICATION);
				setState(4481);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4482);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4483);
				match(SHOW);
				setState(4484);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4485);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4486);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4487);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4488);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4489);
				match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_privilegeLevel);
		try {
			setState(4505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4492);
				match(ASTERISK);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4493);
				match(ASTERISK);
				setState(4494);
				match(PERIOD);
				setState(4495);
				match(ASTERISK);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4496);
				nameIdentifier();
				setState(4497);
				match(PERIOD);
				setState(4498);
				match(ASTERISK);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4500);
				nameIdentifier();
				setState(4501);
				match(PERIOD);
				setState(4502);
				nameIdentifier();
				}
				break;
			case 5:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4504);
				nameIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public NameIdentifierContext fromFirst;
		public NameIdentifierContext toFirst;
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4507);
			((RenameUserClauseContext)_localctx).fromFirst = nameIdentifier();
			setState(4508);
			match(TO);
			setState(4509);
			((RenameUserClauseContext)_localctx).toFirst = nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(DRDSSQLStatementParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(DRDSSQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4511);
			match(ANALYZE);
			setState(4513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4512);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4515);
			match(TABLE);
			setState(4516);
			expr(0);
			setState(4521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4517);
				match(COMMA);
				setState(4518);
				expr(0);
				}
				}
				setState(4523);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(DRDSSQLStatementParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_checkTable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4524);
			match(CHECK);
			setState(4525);
			match(TABLE);
			setState(4526);
			expr(0);
			setState(4531);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4527);
				match(COMMA);
				setState(4528);
				expr(0);
				}
				}
				setState(4533);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4537);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,569,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4534);
					checkTableOption();
					}
					} 
				}
				setState(4539);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,569,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(DRDSSQLStatementParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode QUICK() { return getToken(DRDSSQLStatementParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(DRDSSQLStatementParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4540);
			match(CHECKSUM);
			setState(4541);
			match(TABLE);
			setState(4542);
			expr(0);
			setState(4547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4543);
				match(COMMA);
				setState(4544);
				expr(0);
				}
				}
				setState(4549);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				{
				setState(4550);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(DRDSSQLStatementParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(DRDSSQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4553);
			match(OPTIMIZE);
			setState(4555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4554);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4557);
			match(TABLE);
			setState(4558);
			expr(0);
			setState(4563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4559);
				match(COMMA);
				setState(4560);
				expr(0);
				}
				}
				setState(4565);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(DRDSSQLStatementParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode QUICK() { return getToken(DRDSSQLStatementParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(DRDSSQLStatementParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(DRDSSQLStatementParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(DRDSSQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4566);
			match(REPAIR);
			setState(4568);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4567);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4570);
			match(TABLE);
			setState(4571);
			expr(0);
			setState(4576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4572);
				match(COMMA);
				setState(4573);
				expr(0);
				}
				}
				setState(4578);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				{
				setState(4579);
				match(QUICK);
				}
				break;
			}
			setState(4583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4582);
				match(EXTENDED);
				}
			}

			setState(4586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(4585);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(DRDSSQLStatementParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(DRDSSQLStatementParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(DRDSSQLStatementParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(DRDSSQLStatementParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(DRDSSQLStatementParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(DRDSSQLStatementParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_checkTableOption);
		try {
			setState(4595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4588);
				match(FOR);
				setState(4589);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4590);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4591);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4592);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4593);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(4594);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DRDSSQLStatementParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(DRDSSQLStatementParser.SONAME, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode STRING() { return getToken(DRDSSQLStatementParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(DRDSSQLStatementParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(DRDSSQLStatementParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(DRDSSQLStatementParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(DRDSSQLStatementParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4597);
			match(CREATE);
			setState(4599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(4598);
				match(AGGREGATE);
				}
			}

			setState(4601);
			match(FUNCTION);
			setState(4602);
			nameIdentifier();
			setState(4603);
			match(RETURNS);
			setState(4604);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INTEGER - 194)) | (1L << (REAL - 194)) | (1L << (DECIMAL - 194)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4605);
			match(SONAME);
			setState(4606);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(DRDSSQLStatementParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(DRDSSQLStatementParser.PLUGIN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(DRDSSQLStatementParser.SONAME, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4608);
			match(INSTALL);
			setState(4609);
			match(PLUGIN);
			setState(4610);
			nameIdentifier();
			setState(4611);
			match(SONAME);
			setState(4612);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(DRDSSQLStatementParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(DRDSSQLStatementParser.PLUGIN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4614);
			match(UNINSTALL);
			setState(4615);
			match(PLUGIN);
			setState(4616);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetPasswordStatementContext extends SetStatementContext {
		public ExprContext user;
		public ExprContext password;
		public ExprContext replace;
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(DRDSSQLStatementParser.PASSWORD, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode REPLACE() { return getToken(DRDSSQLStatementParser.REPLACE, 0); }
		public SetPasswordStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetTransactionStatementContext extends SetStatementContext {
		public Token priori;
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(DRDSSQLStatementParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(DRDSSQLStatementParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(DRDSSQLStatementParser.SESSION, 0); }
		public SetTransactionStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutoCommitStatementContext setAutoCommitStatement() {
			return getRuleContext(SetAutoCommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesStatementContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(DRDSSQLStatementParser.NAMES, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetNamesStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetNamesStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharacterSetStatementContext extends SetStatementContext {
		public List<TerminalNode> SET() { return getTokens(DRDSSQLStatementParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(DRDSSQLStatementParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(DRDSSQLStatementParser.CHARACTER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetCharacterSetStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetCharacterSetStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetDefaultRoleStatementContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(DRDSSQLStatementParser.ROLE, 0); }
		public List<SetDefaultRoleContext> setDefaultRole() {
			return getRuleContexts(SetDefaultRoleContext.class);
		}
		public SetDefaultRoleContext setDefaultRole(int i) {
			return getRuleContext(SetDefaultRoleContext.class,i);
		}
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public SetDefaultRoleStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetDefaultRoleStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetStatementContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(DRDSSQLStatementParser.CHARSET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetCharsetStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetCharsetStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableStatementContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public List<AssignmentExprContext> assignmentExpr() {
			return getRuleContexts(AssignmentExprContext.class);
		}
		public AssignmentExprContext assignmentExpr(int i) {
			return getRuleContext(AssignmentExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public SetVariableStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetVariableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_setStatement);
		int _la;
		try {
			setState(4683);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				_localctx = new SetDefaultRoleStatementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4618);
				match(SET);
				setState(4619);
				match(DEFAULT);
				setState(4620);
				match(ROLE);
				setState(4621);
				setDefaultRole();
				setState(4626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4622);
					match(COMMA);
					setState(4623);
					setDefaultRole();
					}
					}
					setState(4628);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4629);
				match(TO);
				setState(4630);
				expr(0);
				setState(4635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4631);
					match(COMMA);
					setState(4632);
					expr(0);
					}
					}
					setState(4637);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetPasswordStatementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4638);
				match(SET);
				setState(4639);
				match(PASSWORD);
				setState(4642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4640);
					match(FOR);
					setState(4641);
					((SetPasswordStatementContext)_localctx).user = expr(0);
					}
				}

				setState(4644);
				match(EQUALS_OP);
				setState(4645);
				((SetPasswordStatementContext)_localctx).password = expr(0);
				setState(4648);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					setState(4646);
					match(REPLACE);
					setState(4647);
					((SetPasswordStatementContext)_localctx).replace = expr(0);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SetVariableStatementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4650);
				match(SET);
				setState(4651);
				assignmentExpr();
				setState(4656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4652);
					match(COMMA);
					setState(4653);
					assignmentExpr();
					}
					}
					setState(4658);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new SetCharacterSetStatementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4659);
				match(SET);
				setState(4660);
				match(CHARACTER);
				setState(4661);
				match(SET);
				setState(4662);
				expr(0);
				}
				break;
			case 5:
				_localctx = new SetCharsetStatementContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4663);
				match(SET);
				setState(4664);
				match(CHARSET);
				setState(4665);
				expr(0);
				}
				break;
			case 6:
				_localctx = new SetNamesStatementContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4666);
				match(SET);
				setState(4667);
				match(NAMES);
				setState(4668);
				expr(0);
				}
				break;
			case 7:
				_localctx = new SetTransactionStatementContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4669);
				match(SET);
				setState(4671);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(4670);
					((SetTransactionStatementContext)_localctx).priori = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
						((SetTransactionStatementContext)_localctx).priori = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4673);
				match(TRANSACTION);
				setState(4674);
				transactionOption();
				setState(4679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4675);
					match(COMMA);
					setState(4676);
					transactionOption();
					}
					}
					setState(4681);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4682);
				setAutoCommitStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetDefaultRoleContext extends ParserRuleContext {
		public AllLiteralContext allLiteral() {
			return getRuleContext(AllLiteralContext.class,0);
		}
		public NoneLiteralContext noneLiteral() {
			return getRuleContext(NoneLiteralContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetDefaultRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setDefaultRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetDefaultRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetDefaultRoleContext setDefaultRole() throws RecognitionException {
		SetDefaultRoleContext _localctx = new SetDefaultRoleContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_setDefaultRole);
		try {
			setState(4688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4685);
				allLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4686);
				noneLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4687);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(DRDSSQLStatementParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(DRDSSQLStatementParser.TABLES, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreatenameIdentifierObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(DRDSSQLStatementParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(DRDSSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(DRDSSQLStatementParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(DRDSSQLStatementParser.VIEW, 0); }
		public ShowCreatenameIdentifierObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowCreatenameIdentifierObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public ExprContext offset;
		public ExprContext rowCount;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(DRDSSQLStatementParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(DRDSSQLStatementParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(DRDSSQLStatementParser.LIMIT, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(DRDSSQLStatementParser.COUNT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode ERRORS() { return getToken(DRDSSQLStatementParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(DRDSSQLStatementParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DRDSSQLStatementParser.CREATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(DRDSSQLStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(DRDSSQLStatementParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(DRDSSQLStatementParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(DRDSSQLStatementParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> FROM() { return getTokens(DRDSSQLStatementParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(DRDSSQLStatementParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(DRDSSQLStatementParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(DRDSSQLStatementParser.IN, i);
		}
		public TerminalNode WHERE() { return getToken(DRDSSQLStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(DRDSSQLStatementParser.KEYS, 0); }
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public ExprContext filename;
		public ExprContext fromPosition;
		public ExprContext offset;
		public ExprContext rowCount;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(DRDSSQLStatementParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(DRDSSQLStatementParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(DRDSSQLStatementParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(DRDSSQLStatementParser.LIMIT, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(DRDSSQLStatementParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(DRDSSQLStatementParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(DRDSSQLStatementParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(DRDSSQLStatementParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(DRDSSQLStatementParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(DRDSSQLStatementParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(DRDSSQLStatementParser.CHANNEL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(DRDSSQLStatementParser.CODE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(DRDSSQLStatementParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public ExprContext queryCount;
		public ExprContext offset;
		public ExprContext rowCount;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(DRDSSQLStatementParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(DRDSSQLStatementParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(DRDSSQLStatementParser.QUERY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(DRDSSQLStatementParser.SHOW, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode COLUMNS() { return getToken(DRDSSQLStatementParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(DRDSSQLStatementParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(DRDSSQLStatementParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(DRDSSQLStatementParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(DRDSSQLStatementParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(DRDSSQLStatementParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(DRDSSQLStatementParser.FULL, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_showStatement);
		int _la;
		try {
			setState(4865);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4690);
				match(SHOW);
				setState(4691);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4692);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4693);
				match(SHOW);
				setState(4694);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4695);
				match(EVENTS);
				setState(4698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(4696);
					match(IN);
					setState(4697);
					((ShowLogEventsContext)_localctx).filename = expr(0);
					}
				}

				setState(4702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4700);
					match(FROM);
					setState(4701);
					((ShowLogEventsContext)_localctx).fromPosition = expr(0);
					}
				}

				setState(4711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(4704);
					match(LIMIT);
					setState(4708);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
					case 1:
						{
						setState(4705);
						((ShowLogEventsContext)_localctx).offset = expr(0);
						setState(4706);
						match(COMMA);
						}
						break;
					}
					setState(4710);
					((ShowLogEventsContext)_localctx).rowCount = expr(0);
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4713);
				match(SHOW);
				setState(4714);
				showCommonEntity();
				setState(4716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4715);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4718);
				match(SHOW);
				setState(4720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4719);
					match(FULL);
					}
				}

				setState(4722);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4723);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4724);
				nameIdentifier();
				setState(4727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4725);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4726);
					nameIdentifier();
					}
				}

				setState(4730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4729);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4732);
				match(SHOW);
				setState(4733);
				match(CREATE);
				setState(4734);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4735);
					ifNotExists();
					}
				}

				setState(4738);
				nameIdentifier();
				}
				break;
			case 6:
				_localctx = new ShowCreatenameIdentifierObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4739);
				match(SHOW);
				setState(4740);
				match(CREATE);
				setState(4741);
				((ShowCreatenameIdentifierObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (PROCEDURE - 126)) | (1L << (TABLE - 126)) | (1L << (TRIGGER - 126)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreatenameIdentifierObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4742);
				nameIdentifier();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4743);
				match(SHOW);
				setState(4744);
				match(CREATE);
				setState(4745);
				match(USER);
				setState(4746);
				nameIdentifier();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4747);
				match(SHOW);
				setState(4748);
				match(ENGINE);
				setState(4749);
				engineName();
				setState(4750);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(4752);
				match(SHOW);
				setState(4753);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(4754);
				match(SHOW);
				setState(4755);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				{
				setState(4756);
				match(LIMIT);
				setState(4760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(4757);
					((ShowErrorsContext)_localctx).offset = expr(0);
					setState(4758);
					match(COMMA);
					}
					break;
				}
				setState(4762);
				((ShowErrorsContext)_localctx).rowCount = expr(0);
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(4763);
				match(SHOW);
				setState(4764);
				match(COUNT);
				setState(4765);
				match(LEFT_PAREN);
				setState(4766);
				match(ASTERISK);
				setState(4767);
				match(RIGHT_PAREN);
				setState(4768);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(4769);
				match(SHOW);
				setState(4770);
				showSchemaEntity();
				setState(4773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4771);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4772);
					nameIdentifier();
					}
				}

				setState(4776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4775);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(4778);
				match(SHOW);
				setState(4779);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4780);
				match(CODE);
				setState(4781);
				nameIdentifier();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(4782);
				match(SHOW);
				setState(4783);
				match(GRANTS);
				setState(4786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4784);
					match(FOR);
					setState(4785);
					nameIdentifier();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(4788);
				match(SHOW);
				setState(4789);
				match(INDEX);
				setState(4790);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4791);
				nameIdentifier();
				setState(4794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4792);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4793);
					nameIdentifier();
					}
				}

				setState(4798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4796);
					match(WHERE);
					setState(4797);
					expr(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(4800);
				match(SHOW);
				setState(4801);
				match(KEY);
				setState(4802);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4803);
				nameIdentifier();
				setState(4806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4804);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4805);
					nameIdentifier();
					}
				}

				setState(4810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4808);
					match(WHERE);
					setState(4809);
					expr(0);
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(4812);
				match(SHOW);
				setState(4813);
				match(KEYS);
				setState(4814);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4815);
				nameIdentifier();
				setState(4818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4816);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4817);
					nameIdentifier();
					}
				}

				setState(4822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4820);
					match(WHERE);
					setState(4821);
					expr(0);
					}
				}

				}
				break;
			case 18:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(4824);
				match(SHOW);
				setState(4825);
				match(OPEN);
				setState(4826);
				match(TABLES);
				setState(4829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(4827);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4828);
					nameIdentifier();
					}
				}

				setState(4832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(4831);
					showFilter();
					}
				}

				}
				break;
			case 19:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(4834);
				match(SHOW);
				setState(4835);
				match(PROFILE);
				setState(4836);
				showProfileType();
				setState(4841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4837);
					match(COMMA);
					setState(4838);
					showProfileType();
					}
					}
					setState(4843);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4844);
					match(FOR);
					setState(4845);
					match(QUERY);
					setState(4846);
					((ShowProfileContext)_localctx).queryCount = expr(0);
					}
				}

				{
				setState(4849);
				match(LIMIT);
				setState(4853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(4850);
					((ShowProfileContext)_localctx).offset = expr(0);
					setState(4851);
					match(COMMA);
					}
					break;
				}
				setState(4855);
				((ShowProfileContext)_localctx).rowCount = expr(0);
				}
				}
				break;
			case 20:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(4857);
				match(SHOW);
				setState(4858);
				match(SLAVE);
				setState(4859);
				match(STATUS);
				setState(4863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4860);
					match(FOR);
					setState(4861);
					match(CHANNEL);
					setState(4862);
					expr(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(DRDSSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(DRDSSQLStatementParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(DRDSSQLStatementParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(DRDSSQLStatementParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(DRDSSQLStatementParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(DRDSSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(DRDSSQLStatementParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(DRDSSQLStatementParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(DRDSSQLStatementParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_showCommonEntity);
		int _la;
		try {
			setState(4880);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4867);
				match(CHARACTER);
				setState(4868);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4869);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(4870);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4871);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(4872);
				match(FUNCTION);
				setState(4873);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(4874);
				match(PROCEDURE);
				setState(4875);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(4877);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(4876);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4879);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(DRDSSQLStatementParser.LIKE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DRDSSQLStatementParser.WHERE, 0); }
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_showFilter);
		try {
			setState(4886);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4882);
				match(LIKE);
				setState(4883);
				expr(0);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4884);
				match(WHERE);
				setState(4885);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(DRDSSQLStatementParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(DRDSSQLStatementParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(DRDSSQLStatementParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(DRDSSQLStatementParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(DRDSSQLStatementParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DRDSSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(DRDSSQLStatementParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(DRDSSQLStatementParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(DRDSSQLStatementParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(DRDSSQLStatementParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(DRDSSQLStatementParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(DRDSSQLStatementParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(DRDSSQLStatementParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(4905);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(4888);
					match(STORAGE);
					}
				}

				setState(4891);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4892);
				match(MASTER);
				setState(4893);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(4894);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(4895);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(4897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4896);
					match(FULL);
					}
				}

				setState(4899);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(4900);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4901);
				match(SLAVE);
				setState(4902);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(4903);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(4904);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(DRDSSQLStatementParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(DRDSSQLStatementParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(DRDSSQLStatementParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(DRDSSQLStatementParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(DRDSSQLStatementParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(DRDSSQLStatementParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_showSchemaEntity);
		int _la;
		try {
			setState(4915);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4907);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4908);
				match(TABLE);
				setState(4909);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(4910);
					match(FULL);
					}
				}

				setState(4913);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4914);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(DRDSSQLStatementParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(DRDSSQLStatementParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(DRDSSQLStatementParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(DRDSSQLStatementParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(DRDSSQLStatementParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(DRDSSQLStatementParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(DRDSSQLStatementParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(DRDSSQLStatementParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(DRDSSQLStatementParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(DRDSSQLStatementParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(DRDSSQLStatementParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_showProfileType);
		try {
			setState(4929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4917);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4918);
				match(BLOCK);
				setState(4919);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4920);
				match(CONTEXT);
				setState(4921);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(4922);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(4923);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(4924);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4925);
				match(PAGE);
				setState(4926);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4927);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(4928);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(DRDSSQLStatementParser.BINLOG, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4931);
			match(BINLOG);
			setState(4932);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public NameIdentifierContext schema;
		public TerminalNode CACHE() { return getToken(DRDSSQLStatementParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4934);
			match(CACHE);
			setState(4935);
			match(INDEX);
			setState(4936);
			tableIndexes();
			setState(4941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4937);
				match(COMMA);
				setState(4938);
				tableIndexes();
				}
				}
				setState(4943);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4944);
				match(PARTITION);
				setState(4945);
				match(LEFT_PAREN);
				setState(4955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
				case 1:
					{
					setState(4946);
					expr(0);
					setState(4951);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4947);
						match(COMMA);
						setState(4948);
						expr(0);
						}
						}
						setState(4953);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(4954);
					match(ALL);
					}
					break;
				}
				setState(4957);
				match(RIGHT_PAREN);
				}
			}

			setState(4960);
			match(IN);
			setState(4961);
			((CacheIndexStatementContext)_localctx).schema = nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(DRDSSQLStatementParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(DRDSSQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4963);
			match(FLUSH);
			setState(4965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4964);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4967);
			flushOption();
			setState(4972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4968);
				match(COMMA);
				setState(4969);
				flushOption();
				}
				}
				setState(4974);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(DRDSSQLStatementParser.KILL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(DRDSSQLStatementParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(DRDSSQLStatementParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_killStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4975);
			match(KILL);
			setState(4977);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				{
				setState(4976);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4980); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(4979);
					expr(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4982); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,632,_ctx);
			} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(DRDSSQLStatementParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(DRDSSQLStatementParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(DRDSSQLStatementParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4984);
			match(LOAD);
			setState(4985);
			match(INDEX);
			setState(4986);
			match(INTO);
			setState(4987);
			match(CACHE);
			setState(4988);
			loadedTableIndexes();
			setState(4993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4989);
				match(COMMA);
				setState(4990);
				loadedTableIndexes();
				}
				}
				setState(4995);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(DRDSSQLStatementParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(DRDSSQLStatementParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(DRDSSQLStatementParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4996);
			match(RESET);
			setState(4997);
			match(QUERY);
			setState(4998);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(DRDSSQLStatementParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5000);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5002);
			nameIdentifier();
			setState(5017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INDEX - 71)) | (1L << (KEY - 71)) | (1L << (KEYS - 71)))) != 0) || _la==LEFT_PAREN) {
				{
				setState(5004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INDEX - 71)) | (1L << (KEY - 71)) | (1L << (KEYS - 71)))) != 0)) {
					{
					setState(5003);
					indexFormat();
					}
				}

				setState(5006);
				match(LEFT_PAREN);
				setState(5007);
				expr(0);
				setState(5012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5008);
					match(COMMA);
					setState(5009);
					expr(0);
					}
					}
					setState(5014);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5015);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLES() { return getToken(DRDSSQLStatementParser.TABLES, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(DRDSSQLStatementParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(DRDSSQLStatementParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(DRDSSQLStatementParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(DRDSSQLStatementParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(DRDSSQLStatementParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(DRDSSQLStatementParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DRDSSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(DRDSSQLStatementParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(DRDSSQLStatementParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(DRDSSQLStatementParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(DRDSSQLStatementParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(DRDSSQLStatementParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode READ() { return getToken(DRDSSQLStatementParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(DRDSSQLStatementParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(DRDSSQLStatementParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(DRDSSQLStatementParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(DRDSSQLStatementParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(DRDSSQLStatementParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(DRDSSQLStatementParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_flushOption);
		int _la;
		try {
			int _alt;
			setState(5056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5037);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5019);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5020);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5022);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (ENGINE - 315)) | (1L << (ERROR - 315)) | (1L << (GENERAL - 315)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5021);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (ENGINE - 315)) | (1L << (ERROR - 315)) | (1L << (GENERAL - 315)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5024);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5025);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5026);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5027);
					match(QUERY);
					setState(5028);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5029);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5030);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5031);
					match(TABLES);
					setState(5035);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5032);
						match(WITH);
						setState(5033);
						match(READ);
						setState(5034);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5039);
				match(RELAY);
				setState(5040);
				match(LOGS);
				setState(5042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5041);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5044);
				match(TABLES);
				setState(5045);
				expr(0);
				setState(5050);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
				while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5046);
						match(COMMA);
						setState(5047);
						expr(0);
						}
						} 
					}
					setState(5052);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,641,_ctx);
				}
				setState(5054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5053);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode READ() { return getToken(DRDSSQLStatementParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(DRDSSQLStatementParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(DRDSSQLStatementParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_flushTableOption);
		try {
			setState(5063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5058);
				match(WITH);
				setState(5059);
				match(READ);
				setState(5060);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5061);
				match(FOR);
				setState(5062);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public ExprContext partitionList;
		public ExprContext indexList;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(DRDSSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(DRDSSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode IGNORE() { return getToken(DRDSSQLStatementParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(DRDSSQLStatementParser.LEAVES, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5065);
			nameIdentifier();
			setState(5080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5066);
				match(PARTITION);
				setState(5067);
				match(LEFT_PAREN);
				setState(5077);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					setState(5068);
					((LoadedTableIndexesContext)_localctx).partitionList = expr(0);
					setState(5073);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5069);
						match(COMMA);
						setState(5070);
						expr(0);
						}
						}
						setState(5075);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(5076);
					match(ALL);
					}
					break;
				}
				setState(5079);
				match(RIGHT_PAREN);
				}
			}

			setState(5096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				{
				setState(5083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INDEX - 71)) | (1L << (KEY - 71)) | (1L << (KEYS - 71)))) != 0)) {
					{
					setState(5082);
					indexFormat();
					}
				}

				setState(5085);
				match(LEFT_PAREN);
				setState(5086);
				((LoadedTableIndexesContext)_localctx).indexList = expr(0);
				setState(5091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5087);
					match(COMMA);
					setState(5088);
					expr(0);
					}
					}
					setState(5093);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5094);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(5100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5098);
				match(IGNORE);
				setState(5099);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public NameIdentifierContext column;
		public ExprContext pattern;
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode EXPLAIN() { return getToken(DRDSSQLStatementParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(DRDSSQLStatementParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(DRDSSQLStatementParser.DESC, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5102);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5103);
			nameIdentifier();
			setState(5106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				{
				setState(5104);
				((SimpleDescribeStatementContext)_localctx).column = nameIdentifier();
				}
				break;
			case 2:
				{
				setState(5105);
				((SimpleDescribeStatementContext)_localctx).pattern = expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(DRDSSQLStatementParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(DRDSSQLStatementParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(DRDSSQLStatementParser.DESC, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode EXTENDED() { return getToken(DRDSSQLStatementParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(DRDSSQLStatementParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(DRDSSQLStatementParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(DRDSSQLStatementParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(DRDSSQLStatementParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5108);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5109);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5110);
				match(EQUALS_OP);
				setState(5111);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5114);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(DRDSSQLStatementParser.HELP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5116);
			match(HELP);
			setState(5117);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(DRDSSQLStatementParser.USE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5119);
			match(USE);
			setState(5120);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(DRDSSQLStatementParser.CONNECTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_describeObjectClause);
		try {
			setState(5132);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LEFT_PAREN:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5127);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LEFT_PAREN:
					{
					setState(5122);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5123);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5124);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5125);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5126);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5129);
				match(FOR);
				setState(5130);
				match(CONNECTION);
				setState(5131);
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(DRDSSQLStatementParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(DRDSSQLStatementParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(DRDSSQLStatementParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(DRDSSQLStatementParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(DRDSSQLStatementParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(DRDSSQLStatementParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(DRDSSQLStatementParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(DRDSSQLStatementParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(DRDSSQLStatementParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(DRDSSQLStatementParser.NDBCLUSTER, 0); }
		public TerminalNode PERFOMANCE_SCHEMA() { return getToken(DRDSSQLStatementParser.PERFOMANCE_SCHEMA, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5134);
			_la = _input.LA(1);
			if ( !(((((_la - 625)) & ~0x3f) == 0 && ((1L << (_la - 625)) & ((1L << (ARCHIVE - 625)) | (1L << (BLACKHOLE - 625)) | (1L << (CSV - 625)) | (1L << (FEDERATED - 625)) | (1L << (INNODB - 625)) | (1L << (MEMORY - 625)) | (1L << (MRG_MYISAM - 625)) | (1L << (MYISAM - 625)) | (1L << (NDB - 625)) | (1L << (NDBCLUSTER - 625)) | (1L << (PERFOMANCE_SCHEMA - 625)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnameIdentifierSetContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public UnameIdentifierSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unameIdentifierSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUnameIdentifierSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnameIdentifierSetContext unameIdentifierSet() throws RecognitionException {
		UnameIdentifierSetContext _localctx = new UnameIdentifierSetContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_unameIdentifierSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5136);
			expr(0);
			setState(5137);
			match(MINUS_SIGN);
			setState(5138);
			expr(0);
			setState(5139);
			match(MINUS_SIGN);
			setState(5140);
			expr(0);
			setState(5141);
			match(MINUS_SIGN);
			setState(5142);
			expr(0);
			setState(5143);
			match(MINUS_SIGN);
			setState(5144);
			expr(0);
			setState(5150); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5145);
				match(COLON);
				setState(5146);
				expr(0);
				setState(5147);
				match(MINUS_SIGN);
				setState(5148);
				expr(0);
				}
				}
				setState(5152); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XnameIdentifierStringIdContext globalnameIdentifierIdentifier;
		public XnameIdentifierStringIdContext qualifier;
		public ExprContext idFormat;
		public List<XnameIdentifierStringIdContext> xnameIdentifierStringId() {
			return getRuleContexts(XnameIdentifierStringIdContext.class);
		}
		public XnameIdentifierStringIdContext xnameIdentifierStringId(int i) {
			return getRuleContext(XnameIdentifierStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5154);
			((XidContext)_localctx).globalnameIdentifierIdentifier = xnameIdentifierStringId();
			setState(5161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5155);
				match(COMMA);
				setState(5156);
				((XidContext)_localctx).qualifier = xnameIdentifierStringId();
				setState(5159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5157);
					match(COMMA);
					setState(5158);
					((XidContext)_localctx).idFormat = expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XnameIdentifierStringIdContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode BIT_STRING() { return getToken(DRDSSQLStatementParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(DRDSSQLStatementParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(DRDSSQLStatementParser.HEXADECIMAL_LITERAL, i);
		}
		public XnameIdentifierStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xnameIdentifierStringId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitXnameIdentifierStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XnameIdentifierStringIdContext xnameIdentifierStringId() throws RecognitionException {
		XnameIdentifierStringIdContext _localctx = new XnameIdentifierStringIdContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_xnameIdentifierStringId);
		try {
			int _alt;
			setState(5170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5163);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5164);
				match(BIT_STRING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5166); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5165);
						match(HEXADECIMAL_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5168); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,659,_ctx);
				} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_authPlugin);
		try {
			setState(5174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5172);
				nameIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5173);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_Context extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(DRDSSQLStatementParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(DRDSSQLStatementParser.NULL_SPEC_LITERAL, 0); }
		public Null_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNull_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_Context null_() throws RecognitionException {
		Null_Context _localctx = new Null_Context(_ctx, getState());
		enterRule(_localctx, 530, RULE_null_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5176);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotNullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public Null_Context null_() {
			return getRuleContext(Null_Context.class,0);
		}
		public NotNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notNull; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNotNull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotNullContext notNull() throws RecognitionException {
		NotNullContext _localctx = new NotNullContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_notNull);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5178);
			match(NOT);
			setState(5179);
			null_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(DRDSSQLStatementParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(DRDSSQLStatementParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(DRDSSQLStatementParser.CHAR, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public TerminalNode DATE() { return getToken(DRDSSQLStatementParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(DRDSSQLStatementParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(DRDSSQLStatementParser.TIME, 0); }
		public TerminalNode DECIMAL() { return getToken(DRDSSQLStatementParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(DRDSSQLStatementParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(DRDSSQLStatementParser.INTEGER, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_convertedDataType);
		int _la;
		try {
			setState(5201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5181);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5182);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5185);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(5187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5186);
					lengthOneDimension();
					}
				}

				setState(5190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==DEFAULT) {
					{
					setState(5189);
					characterSetOptionExpr();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(5192);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (DATE - 202)) | (1L << (TIME - 202)) | (1L << (DATETIME - 202)))) != 0)) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5193);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(5195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5194);
					lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5197);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5198);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5203);
			match(LEFT_PAREN);
			setState(5204);
			expr(0);
			setState(5205);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5207);
			match(LEFT_PAREN);
			setState(5208);
			expr(0);
			setState(5209);
			match(COMMA);
			setState(5210);
			expr(0);
			setState(5211);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5213);
			match(LEFT_PAREN);
			setState(5214);
			expr(0);
			setState(5217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5215);
				match(COMMA);
				setState(5216);
				expr(0);
				}
			}

			setState(5219);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5221);
			expr(0);
			setState(5226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5222);
				match(COMMA);
				setState(5223);
				expr(0);
				}
				}
				setState(5228);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(DRDSSQLStatementParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(DRDSSQLStatementParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5229);
			match(LOCAL_ID);
			setState(5234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5230);
				match(COMMA);
				setState(5231);
				match(LOCAL_ID);
				}
				}
				setState(5236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public ExprContext firstLevel;
		public ExprContext lastLevel;
		public TerminalNode LEVEL() { return getToken(DRDSSQLStatementParser.LEVEL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(DRDSSQLStatementParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_levelsInWeightString);
		int _la;
		try {
			setState(5251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5237);
				match(LEVEL);
				setState(5238);
				levelInWeightListElement();
				setState(5243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5239);
					match(COMMA);
					setState(5240);
					levelInWeightListElement();
					}
					}
					setState(5245);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5246);
				match(LEVEL);
				setState(5247);
				((LevelWeightRangeContext)_localctx).firstLevel = expr(0);
				setState(5248);
				match(MINUS_SIGN);
				setState(5249);
				((LevelWeightRangeContext)_localctx).lastLevel = expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ASC() { return getToken(DRDSSQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DRDSSQLStatementParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(DRDSSQLStatementParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5253);
			expr(0);
			setState(5255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(5254);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public ExprContext separator;
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode AVG() { return getToken(DRDSSQLStatementParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(DRDSSQLStatementParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(DRDSSQLStatementParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(DRDSSQLStatementParser.SUM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DRDSSQLStatementParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(DRDSSQLStatementParser.COUNT, 0); }
		public TerminalNode BIT_AND() { return getToken(DRDSSQLStatementParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(DRDSSQLStatementParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(DRDSSQLStatementParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(DRDSSQLStatementParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(DRDSSQLStatementParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DRDSSQLStatementParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DRDSSQLStatementParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(DRDSSQLStatementParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DRDSSQLStatementParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(DRDSSQLStatementParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(DRDSSQLStatementParser.GROUP_CONCAT, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode SEPARATOR() { return getToken(DRDSSQLStatementParser.SEPARATOR, 0); }
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(5339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5257);
				_la = _input.LA(1);
				if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (AVG - 220)) | (1L << (MAX - 220)) | (1L << (MIN - 220)) | (1L << (SUM - 220)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5258);
				match(LEFT_PAREN);
				setState(5260);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					setState(5259);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5262);
				expr(0);
				setState(5267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5263);
					match(COMMA);
					setState(5264);
					expr(0);
					}
					}
					setState(5269);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5270);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5272);
				match(COUNT);
				setState(5273);
				match(LEFT_PAREN);
				setState(5286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(5274);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(ASTERISK);
					}
					break;
				case 2:
					{
					setState(5276);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
					case 1:
						{
						setState(5275);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(5278);
					expr(0);
					setState(5283);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5279);
						match(COMMA);
						setState(5280);
						expr(0);
						}
						}
						setState(5285);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(5288);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5289);
				match(COUNT);
				setState(5290);
				match(LEFT_PAREN);
				setState(5291);
				((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
				setState(5292);
				expr(0);
				setState(5297);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5293);
					match(COMMA);
					setState(5294);
					expr(0);
					}
					}
					setState(5299);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5300);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5302);
				_la = _input.LA(1);
				if ( !(((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & ((1L << (BIT_AND - 221)) | (1L << (BIT_OR - 221)) | (1L << (BIT_XOR - 221)) | (1L << (STD - 221)) | (1L << (STDDEV - 221)) | (1L << (STDDEV_POP - 221)) | (1L << (STDDEV_SAMP - 221)) | (1L << (VAR_POP - 221)) | (1L << (VAR_SAMP - 221)) | (1L << (VARIANCE - 221)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5303);
				match(LEFT_PAREN);
				setState(5305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5304);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(5307);
				expr(0);
				setState(5312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5308);
					match(COMMA);
					setState(5309);
					expr(0);
					}
					}
					setState(5314);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5315);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5317);
				match(GROUP_CONCAT);
				setState(5318);
				match(LEFT_PAREN);
				setState(5320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(5319);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
				}

				setState(5322);
				expr(0);
				setState(5327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5323);
					match(COMMA);
					setState(5324);
					expr(0);
					}
					}
					setState(5329);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5330);
					orderByClause();
					}
				}

				setState(5335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(5333);
					match(SEPARATOR);
					setState(5334);
					((AggregateWindowedFunctionContext)_localctx).separator = expr(0);
					}
				}

				setState(5337);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(DRDSSQLStatementParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(DRDSSQLStatementParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(DRDSSQLStatementParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(DRDSSQLStatementParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(DRDSSQLStatementParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(DRDSSQLStatementParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(DRDSSQLStatementParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(DRDSSQLStatementParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(DRDSSQLStatementParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(DRDSSQLStatementParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(DRDSSQLStatementParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(DRDSSQLStatementParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(DRDSSQLStatementParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(DRDSSQLStatementParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(DRDSSQLStatementParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(DRDSSQLStatementParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(DRDSSQLStatementParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(DRDSSQLStatementParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(DRDSSQLStatementParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(DRDSSQLStatementParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(DRDSSQLStatementParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(DRDSSQLStatementParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(DRDSSQLStatementParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(DRDSSQLStatementParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(DRDSSQLStatementParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(DRDSSQLStatementParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(DRDSSQLStatementParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(DRDSSQLStatementParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(DRDSSQLStatementParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(DRDSSQLStatementParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(DRDSSQLStatementParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(DRDSSQLStatementParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(DRDSSQLStatementParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(DRDSSQLStatementParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(DRDSSQLStatementParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(DRDSSQLStatementParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(DRDSSQLStatementParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(DRDSSQLStatementParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(DRDSSQLStatementParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(DRDSSQLStatementParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			_la = _input.LA(1);
			if ( !(((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (ARMSCII8 - 585)) | (1L << (ASCII - 585)) | (1L << (BIG5 - 585)) | (1L << (CP1250 - 585)) | (1L << (CP1251 - 585)) | (1L << (CP1256 - 585)) | (1L << (CP1257 - 585)) | (1L << (CP850 - 585)) | (1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(DRDSSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(DRDSSQLStatementParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DRDSSQLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DRDSSQLStatementParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5343);
			_la = _input.LA(1);
			if ( !(((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & ((1L << (REPEATABLE - 636)) | (1L << (COMMITTED - 636)) | (1L << (UNCOMMITTED - 636)) | (1L << (SERIALIZABLE - 636)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(DRDSSQLStatementParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(DRDSSQLStatementParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(DRDSSQLStatementParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(DRDSSQLStatementParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(DRDSSQLStatementParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(DRDSSQLStatementParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(DRDSSQLStatementParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(DRDSSQLStatementParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DRDSSQLStatementParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5345);
			_la = _input.LA(1);
			if ( !(((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (TABLES - 576)) | (1L << (ROUTINE - 576)) | (1L << (EXECUTE - 576)) | (1L << (FILE - 576)) | (1L << (PROCESS - 576)) | (1L << (RELOAD - 576)) | (1L << (SHUTDOWN - 576)) | (1L << (SUPER - 576)) | (1L << (PRIVILEGES - 576)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(DRDSSQLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DRDSSQLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DRDSSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(DRDSSQLStatementParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(DRDSSQLStatementParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(DRDSSQLStatementParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(DRDSSQLStatementParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5347);
			_la = _input.LA(1);
			if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (DATE - 202)) | (1L << (TIME - 202)) | (1L << (TIMESTAMP - 202)) | (1L << (DATETIME - 202)) | (1L << (YEAR - 202)) | (1L << (TEXT - 202)) | (1L << (ENUM - 202)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(DRDSSQLStatementParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(DRDSSQLStatementParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(DRDSSQLStatementParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(DRDSSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(DRDSSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(DRDSSQLStatementParser.ANY, 0); }
		public TerminalNode AT() { return getToken(DRDSSQLStatementParser.AT, 0); }
		public TerminalNode AUTHORS() { return getToken(DRDSSQLStatementParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(DRDSSQLStatementParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(DRDSSQLStatementParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(DRDSSQLStatementParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(DRDSSQLStatementParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BEGIN() { return getToken(DRDSSQLStatementParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(DRDSSQLStatementParser.BINLOG, 0); }
		public TerminalNode BIT() { return getToken(DRDSSQLStatementParser.BIT, 0); }
		public TerminalNode BLOCK() { return getToken(DRDSSQLStatementParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(DRDSSQLStatementParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(DRDSSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(DRDSSQLStatementParser.BTREE, 0); }
		public TerminalNode CASCADED() { return getToken(DRDSSQLStatementParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(DRDSSQLStatementParser.CHAIN, 0); }
		public TerminalNode CHANNEL() { return getToken(DRDSSQLStatementParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(DRDSSQLStatementParser.CHECKSUM, 0); }
		public TerminalNode CIPHER() { return getToken(DRDSSQLStatementParser.CIPHER, 0); }
		public TerminalNode CLIENT() { return getToken(DRDSSQLStatementParser.CLIENT, 0); }
		public TerminalNode COALESCE() { return getToken(DRDSSQLStatementParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(DRDSSQLStatementParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(DRDSSQLStatementParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(DRDSSQLStatementParser.COLUMN_FORMAT, 0); }
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(DRDSSQLStatementParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(DRDSSQLStatementParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(DRDSSQLStatementParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(DRDSSQLStatementParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(DRDSSQLStatementParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(DRDSSQLStatementParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(DRDSSQLStatementParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(DRDSSQLStatementParser.CONSISTENT, 0); }
		public TerminalNode CONTAINS() { return getToken(DRDSSQLStatementParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(DRDSSQLStatementParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(DRDSSQLStatementParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(DRDSSQLStatementParser.COPY, 0); }
		public TerminalNode CPU() { return getToken(DRDSSQLStatementParser.CPU, 0); }
		public TerminalNode DATA() { return getToken(DRDSSQLStatementParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(DRDSSQLStatementParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(DRDSSQLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(DRDSSQLStatementParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(DRDSSQLStatementParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(DRDSSQLStatementParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(DRDSSQLStatementParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(DRDSSQLStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(DRDSSQLStatementParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(DRDSSQLStatementParser.DISK, 0); }
		public TerminalNode DO() { return getToken(DRDSSQLStatementParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(DRDSSQLStatementParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(DRDSSQLStatementParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DRDSSQLStatementParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(DRDSSQLStatementParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(DRDSSQLStatementParser.ENCRYPTION, 0); }
		public TerminalNode ENDS() { return getToken(DRDSSQLStatementParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(DRDSSQLStatementParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(DRDSSQLStatementParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(DRDSSQLStatementParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(DRDSSQLStatementParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(DRDSSQLStatementParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(DRDSSQLStatementParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(DRDSSQLStatementParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(DRDSSQLStatementParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(DRDSSQLStatementParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DRDSSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(DRDSSQLStatementParser.EXPIRE, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(DRDSSQLStatementParser.EXTENT_SIZE, 0); }
		public TerminalNode FAULTS() { return getToken(DRDSSQLStatementParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(DRDSSQLStatementParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(DRDSSQLStatementParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(DRDSSQLStatementParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(DRDSSQLStatementParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(DRDSSQLStatementParser.FIXED, 0); }
		public TerminalNode FOLLOWS() { return getToken(DRDSSQLStatementParser.FOLLOWS, 0); }
		public TerminalNode FULL() { return getToken(DRDSSQLStatementParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(DRDSSQLStatementParser.FUNCTION, 0); }
		public TerminalNode GLOBAL() { return getToken(DRDSSQLStatementParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(DRDSSQLStatementParser.GRANTS, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(DRDSSQLStatementParser.GROUP_REPLICATION, 0); }
		public TerminalNode HASH() { return getToken(DRDSSQLStatementParser.HASH, 0); }
		public TerminalNode HOST() { return getToken(DRDSSQLStatementParser.HOST, 0); }
		public TerminalNode IDENTIFIED() { return getToken(DRDSSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(DRDSSQLStatementParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(DRDSSQLStatementParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(DRDSSQLStatementParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(DRDSSQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode INPLACE() { return getToken(DRDSSQLStatementParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(DRDSSQLStatementParser.INSERT_METHOD, 0); }
		public TerminalNode INSTANCE() { return getToken(DRDSSQLStatementParser.INSTANCE, 0); }
		public TerminalNode INVOKER() { return getToken(DRDSSQLStatementParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(DRDSSQLStatementParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(DRDSSQLStatementParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(DRDSSQLStatementParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(DRDSSQLStatementParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(DRDSSQLStatementParser.ISSUER, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(DRDSSQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(DRDSSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(DRDSSQLStatementParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(DRDSSQLStatementParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(DRDSSQLStatementParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(DRDSSQLStatementParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(DRDSSQLStatementParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(DRDSSQLStatementParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(DRDSSQLStatementParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(DRDSSQLStatementParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(DRDSSQLStatementParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(DRDSSQLStatementParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(DRDSSQLStatementParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(DRDSSQLStatementParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(DRDSSQLStatementParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(DRDSSQLStatementParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(DRDSSQLStatementParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(DRDSSQLStatementParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(DRDSSQLStatementParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(DRDSSQLStatementParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(DRDSSQLStatementParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(DRDSSQLStatementParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(DRDSSQLStatementParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(DRDSSQLStatementParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(DRDSSQLStatementParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(DRDSSQLStatementParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(DRDSSQLStatementParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(DRDSSQLStatementParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_ROWS() { return getToken(DRDSSQLStatementParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(DRDSSQLStatementParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(DRDSSQLStatementParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(DRDSSQLStatementParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEMORY() { return getToken(DRDSSQLStatementParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(DRDSSQLStatementParser.MERGE, 0); }
		public TerminalNode MID() { return getToken(DRDSSQLStatementParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(DRDSSQLStatementParser.MIGRATE, 0); }
		public TerminalNode MIN_ROWS() { return getToken(DRDSSQLStatementParser.MIN_ROWS, 0); }
		public TerminalNode MODIFY() { return getToken(DRDSSQLStatementParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(DRDSSQLStatementParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(DRDSSQLStatementParser.MYSQL, 0); }
		public TerminalNode NAME() { return getToken(DRDSSQLStatementParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(DRDSSQLStatementParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(DRDSSQLStatementParser.NCHAR, 0); }
		public TerminalNode NEVER() { return getToken(DRDSSQLStatementParser.NEVER, 0); }
		public TerminalNode NO() { return getToken(DRDSSQLStatementParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(DRDSSQLStatementParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(DRDSSQLStatementParser.NONE, 0); }
		public TerminalNode OFFLINE() { return getToken(DRDSSQLStatementParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(DRDSSQLStatementParser.OFFSET, 0); }
		public TerminalNode OJ() { return getToken(DRDSSQLStatementParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(DRDSSQLStatementParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(DRDSSQLStatementParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(DRDSSQLStatementParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(DRDSSQLStatementParser.ONLY, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(DRDSSQLStatementParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONS() { return getToken(DRDSSQLStatementParser.OPTIONS, 0); }
		public TerminalNode OWNER() { return getToken(DRDSSQLStatementParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(DRDSSQLStatementParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(DRDSSQLStatementParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(DRDSSQLStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(DRDSSQLStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(DRDSSQLStatementParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(DRDSSQLStatementParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(DRDSSQLStatementParser.PASSWORD, 0); }
		public TerminalNode PHASE() { return getToken(DRDSSQLStatementParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(DRDSSQLStatementParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(DRDSSQLStatementParser.PLUGIN_DIR, 0); }
		public TerminalNode PORT() { return getToken(DRDSSQLStatementParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(DRDSSQLStatementParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(DRDSSQLStatementParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(DRDSSQLStatementParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(DRDSSQLStatementParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(DRDSSQLStatementParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(DRDSSQLStatementParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(DRDSSQLStatementParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(DRDSSQLStatementParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(DRDSSQLStatementParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(DRDSSQLStatementParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(DRDSSQLStatementParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(DRDSSQLStatementParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(DRDSSQLStatementParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(DRDSSQLStatementParser.REDUNDANT, 0); }
		public TerminalNode RELAYLOG() { return getToken(DRDSSQLStatementParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(DRDSSQLStatementParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(DRDSSQLStatementParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(DRDSSQLStatementParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(DRDSSQLStatementParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(DRDSSQLStatementParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(DRDSSQLStatementParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(DRDSSQLStatementParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(DRDSSQLStatementParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(DRDSSQLStatementParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(DRDSSQLStatementParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(DRDSSQLStatementParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(DRDSSQLStatementParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(DRDSSQLStatementParser.REPLICATION, 0); }
		public TerminalNode RESUME() { return getToken(DRDSSQLStatementParser.RESUME, 0); }
		public TerminalNode RETURNS() { return getToken(DRDSSQLStatementParser.RETURNS, 0); }
		public TerminalNode ROLLBACK() { return getToken(DRDSSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DRDSSQLStatementParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(DRDSSQLStatementParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(DRDSSQLStatementParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DRDSSQLStatementParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(DRDSSQLStatementParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DRDSSQLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(DRDSSQLStatementParser.SCHEDULE, 0); }
		public TerminalNode SECURITY() { return getToken(DRDSSQLStatementParser.SECURITY, 0); }
		public TerminalNode SERVER() { return getToken(DRDSSQLStatementParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(DRDSSQLStatementParser.SESSION, 0); }
		public TerminalNode SHARE() { return getToken(DRDSSQLStatementParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(DRDSSQLStatementParser.SHARED, 0); }
		public TerminalNode SIGNED() { return getToken(DRDSSQLStatementParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(DRDSSQLStatementParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(DRDSSQLStatementParser.SLAVE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DRDSSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(DRDSSQLStatementParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(DRDSSQLStatementParser.SOME, 0); }
		public TerminalNode SOUNDS() { return getToken(DRDSSQLStatementParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(DRDSSQLStatementParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(DRDSSQLStatementParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(DRDSSQLStatementParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(DRDSSQLStatementParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(DRDSSQLStatementParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(DRDSSQLStatementParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(DRDSSQLStatementParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(DRDSSQLStatementParser.SQL_THREAD, 0); }
		public TerminalNode START() { return getToken(DRDSSQLStatementParser.START, 0); }
		public TerminalNode STARTS() { return getToken(DRDSSQLStatementParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(DRDSSQLStatementParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(DRDSSQLStatementParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(DRDSSQLStatementParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(DRDSSQLStatementParser.STATUS, 0); }
		public TerminalNode STOP() { return getToken(DRDSSQLStatementParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(DRDSSQLStatementParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(DRDSSQLStatementParser.STRING, 0); }
		public TerminalNode SUBJECT() { return getToken(DRDSSQLStatementParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(DRDSSQLStatementParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(DRDSSQLStatementParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(DRDSSQLStatementParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(DRDSSQLStatementParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(DRDSSQLStatementParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(DRDSSQLStatementParser.SWITCHES, 0); }
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(DRDSSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(DRDSSQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(DRDSSQLStatementParser.THAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(DRDSSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRUNCATE() { return getToken(DRDSSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(DRDSSQLStatementParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(DRDSSQLStatementParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(DRDSSQLStatementParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNKNOWN() { return getToken(DRDSSQLStatementParser.UNKNOWN, 0); }
		public TerminalNode UPGRADE() { return getToken(DRDSSQLStatementParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(DRDSSQLStatementParser.USER, 0); }
		public TerminalNode VALIDATION() { return getToken(DRDSSQLStatementParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(DRDSSQLStatementParser.VALUE, 0); }
		public TerminalNode VARIABLES() { return getToken(DRDSSQLStatementParser.VARIABLES, 0); }
		public TerminalNode VIEW() { return getToken(DRDSSQLStatementParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(DRDSSQLStatementParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(DRDSSQLStatementParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(DRDSSQLStatementParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(DRDSSQLStatementParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(DRDSSQLStatementParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(DRDSSQLStatementParser.X509, 0); }
		public TerminalNode XA() { return getToken(DRDSSQLStatementParser.XA, 0); }
		public TerminalNode XML() { return getToken(DRDSSQLStatementParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5349);
			_la = _input.LA(1);
			if ( !(((((_la - 232)) & ~0x3f) == 0 && ((1L << (_la - 232)) & ((1L << (SUM - 232)) | (1L << (ACCOUNT - 232)) | (1L << (ACTION - 232)) | (1L << (AFTER - 232)) | (1L << (AGGREGATE - 232)) | (1L << (ALGORITHM - 232)) | (1L << (ANY - 232)) | (1L << (AT - 232)) | (1L << (AUTHORS - 232)) | (1L << (AUTOCOMMIT - 232)) | (1L << (AUTOEXTEND_SIZE - 232)) | (1L << (AUTO_INCREMENT - 232)) | (1L << (AVG_ROW_LENGTH - 232)) | (1L << (BEGIN - 232)) | (1L << (BINLOG - 232)) | (1L << (BIT - 232)) | (1L << (BLOCK - 232)) | (1L << (BOOL - 232)) | (1L << (BOOLEAN - 232)) | (1L << (BTREE - 232)) | (1L << (CASCADED - 232)) | (1L << (CHAIN - 232)) | (1L << (CHANNEL - 232)) | (1L << (CHECKSUM - 232)) | (1L << (CIPHER - 232)) | (1L << (CLIENT - 232)) | (1L << (COALESCE - 232)) | (1L << (CODE - 232)) | (1L << (COLUMNS - 232)) | (1L << (COLUMN_FORMAT - 232)) | (1L << (COMMENT - 232)) | (1L << (COMMIT - 232)) | (1L << (COMPACT - 232)) | (1L << (COMPLETION - 232)) | (1L << (COMPRESSED - 232)) | (1L << (COMPRESSION - 232)) | (1L << (CONCURRENT - 232)) | (1L << (CONNECTION - 232)) | (1L << (CONSISTENT - 232)) | (1L << (CONTAINS - 232)) | (1L << (CONTEXT - 232)) | (1L << (CONTRIBUTORS - 232)) | (1L << (COPY - 232)) | (1L << (CPU - 232)))) != 0) || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (DATA - 296)) | (1L << (DATAFILE - 296)) | (1L << (DEALLOCATE - 296)) | (1L << (DEFAULT_AUTH - 296)) | (1L << (DEFINER - 296)) | (1L << (DELAY_KEY_WRITE - 296)) | (1L << (DIRECTORY - 296)) | (1L << (DISABLE - 296)) | (1L << (DISCARD - 296)) | (1L << (DISK - 296)) | (1L << (DO - 296)) | (1L << (DUMPFILE - 296)) | (1L << (DUPLICATE - 296)) | (1L << (DYNAMIC - 296)) | (1L << (ENABLE - 296)) | (1L << (ENCRYPTION - 296)) | (1L << (ENDS - 296)) | (1L << (ENGINE - 296)) | (1L << (ENGINES - 296)) | (1L << (ERROR - 296)) | (1L << (ERRORS - 296)) | (1L << (ESCAPE - 296)) | (1L << (EVEN - 296)) | (1L << (EVENT - 296)) | (1L << (EVENTS - 296)) | (1L << (EVERY - 296)) | (1L << (EXCHANGE - 296)) | (1L << (EXCLUSIVE - 296)) | (1L << (EXPIRE - 296)) | (1L << (EXTENT_SIZE - 296)) | (1L << (FAULTS - 296)) | (1L << (FIELDS - 296)) | (1L << (FILE_BLOCK_SIZE - 296)) | (1L << (FILTER - 296)) | (1L << (FIRST - 296)) | (1L << (FIXED - 296)) | (1L << (FOLLOWS - 296)) | (1L << (FULL - 296)) | (1L << (FUNCTION - 296)) | (1L << (GLOBAL - 296)) | (1L << (GRANTS - 296)) | (1L << (GROUP_REPLICATION - 296)) | (1L << (HASH - 296)) | (1L << (HOST - 296)) | (1L << (IDENTIFIED - 296)) | (1L << (IGNORE_SERVER_IDS - 296)) | (1L << (IMPORT - 296)) | (1L << (INDEXES - 296)) | (1L << (INITIAL_SIZE - 296)) | (1L << (INPLACE - 296)) | (1L << (INSERT_METHOD - 296)))) != 0) || ((((_la - 360)) & ~0x3f) == 0 && ((1L << (_la - 360)) & ((1L << (INSTANCE - 360)) | (1L << (INVOKER - 360)) | (1L << (IO - 360)) | (1L << (IO_THREAD - 360)) | (1L << (IPC - 360)) | (1L << (ISOLATION - 360)) | (1L << (ISSUER - 360)) | (1L << (KEY_BLOCK_SIZE - 360)) | (1L << (LANGUAGE - 360)) | (1L << (LAST - 360)) | (1L << (LEAVES - 360)) | (1L << (LESS - 360)) | (1L << (LEVEL - 360)) | (1L << (LIST - 360)) | (1L << (LOCAL - 360)) | (1L << (LOGFILE - 360)) | (1L << (LOGS - 360)) | (1L << (MASTER - 360)) | (1L << (MASTER_AUTO_POSITION - 360)) | (1L << (MASTER_CONNECT_RETRY - 360)) | (1L << (MASTER_DELAY - 360)) | (1L << (MASTER_HEARTBEAT_PERIOD - 360)) | (1L << (MASTER_HOST - 360)) | (1L << (MASTER_LOG_FILE - 360)) | (1L << (MASTER_LOG_POS - 360)) | (1L << (MASTER_PASSWORD - 360)) | (1L << (MASTER_PORT - 360)) | (1L << (MASTER_RETRY_COUNT - 360)) | (1L << (MASTER_SSL - 360)) | (1L << (MASTER_SSL_CA - 360)) | (1L << (MASTER_SSL_CAPATH - 360)) | (1L << (MASTER_SSL_CERT - 360)) | (1L << (MASTER_SSL_CIPHER - 360)) | (1L << (MASTER_SSL_CRL - 360)) | (1L << (MASTER_SSL_CRLPATH - 360)) | (1L << (MASTER_SSL_KEY - 360)) | (1L << (MASTER_TLS_VERSION - 360)) | (1L << (MASTER_USER - 360)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 360)) | (1L << (MAX_QUERIES_PER_HOUR - 360)) | (1L << (MAX_ROWS - 360)) | (1L << (MAX_SIZE - 360)) | (1L << (MAX_UPDATES_PER_HOUR - 360)) | (1L << (MAX_USER_CONNECTIONS - 360)) | (1L << (MERGE - 360)) | (1L << (MIGRATE - 360)) | (1L << (MIN_ROWS - 360)) | (1L << (MODIFY - 360)) | (1L << (MUTEX - 360)) | (1L << (MYSQL - 360)) | (1L << (NAME - 360)) | (1L << (NAMES - 360)) | (1L << (NCHAR - 360)) | (1L << (NEVER - 360)) | (1L << (NO - 360)) | (1L << (NODEGROUP - 360)) | (1L << (NONE - 360)) | (1L << (OFFLINE - 360)) | (1L << (OFFSET - 360)) | (1L << (OJ - 360)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (OLD_PASSWORD - 424)) | (1L << (ONE - 424)) | (1L << (ONLINE - 424)) | (1L << (ONLY - 424)) | (1L << (OPTIMIZER_COSTS - 424)) | (1L << (OPTIONS - 424)) | (1L << (OWNER - 424)) | (1L << (PACK_KEYS - 424)) | (1L << (PAGE - 424)) | (1L << (PARSER - 424)) | (1L << (PARTIAL - 424)) | (1L << (PARTITIONING - 424)) | (1L << (PARTITIONS - 424)) | (1L << (PASSWORD - 424)) | (1L << (PHASE - 424)) | (1L << (PLUGIN_DIR - 424)) | (1L << (PLUGINS - 424)) | (1L << (PORT - 424)) | (1L << (PRECEDES - 424)) | (1L << (PREPARE - 424)) | (1L << (PRESERVE - 424)) | (1L << (PREV - 424)) | (1L << (PROCESSLIST - 424)) | (1L << (PROFILE - 424)) | (1L << (PROFILES - 424)) | (1L << (PROXY - 424)) | (1L << (QUERY - 424)) | (1L << (QUICK - 424)) | (1L << (REBUILD - 424)) | (1L << (RECOVER - 424)) | (1L << (REDO_BUFFER_SIZE - 424)) | (1L << (REDUNDANT - 424)) | (1L << (RELAY_LOG_FILE - 424)) | (1L << (RELAY_LOG_POS - 424)) | (1L << (RELAYLOG - 424)) | (1L << (REMOVE - 424)) | (1L << (REORGANIZE - 424)) | (1L << (REPAIR - 424)) | (1L << (REPLICATE_DO_DB - 424)) | (1L << (REPLICATE_DO_TABLE - 424)) | (1L << (REPLICATE_IGNORE_DB - 424)) | (1L << (REPLICATE_IGNORE_TABLE - 424)) | (1L << (REPLICATE_REWRITE_DB - 424)) | (1L << (REPLICATE_WILD_DO_TABLE - 424)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 424)) | (1L << (REPLICATION - 424)) | (1L << (RESUME - 424)) | (1L << (RETURNS - 424)) | (1L << (ROLLBACK - 424)) | (1L << (ROLLUP - 424)) | (1L << (ROTATE - 424)) | (1L << (ROW - 424)) | (1L << (ROWS - 424)) | (1L << (ROW_FORMAT - 424)) | (1L << (SAVEPOINT - 424)) | (1L << (SCHEDULE - 424)) | (1L << (SECURITY - 424)) | (1L << (SERVER - 424)) | (1L << (SESSION - 424)))) != 0) || ((((_la - 488)) & ~0x3f) == 0 && ((1L << (_la - 488)) & ((1L << (SHARE - 488)) | (1L << (SHARED - 488)) | (1L << (SIGNED - 488)) | (1L << (SIMPLE - 488)) | (1L << (SLAVE - 488)) | (1L << (SNAPSHOT - 488)) | (1L << (SOCKET - 488)) | (1L << (SOME - 488)) | (1L << (SOUNDS - 488)) | (1L << (SOURCE - 488)) | (1L << (SQL_AFTER_GTIDS - 488)) | (1L << (SQL_AFTER_MTS_GAPS - 488)) | (1L << (SQL_BEFORE_GTIDS - 488)) | (1L << (SQL_BUFFER_RESULT - 488)) | (1L << (SQL_CACHE - 488)) | (1L << (SQL_NO_CACHE - 488)) | (1L << (SQL_THREAD - 488)) | (1L << (START - 488)) | (1L << (STARTS - 488)) | (1L << (STATS_AUTO_RECALC - 488)) | (1L << (STATS_PERSISTENT - 488)) | (1L << (STATS_SAMPLE_PAGES - 488)) | (1L << (STATUS - 488)) | (1L << (STOP - 488)) | (1L << (STORAGE - 488)) | (1L << (STRING - 488)) | (1L << (SUBJECT - 488)) | (1L << (SUBPARTITION - 488)) | (1L << (SUBPARTITIONS - 488)) | (1L << (SUSPEND - 488)) | (1L << (SWAPS - 488)) | (1L << (SWITCHES - 488)) | (1L << (TABLESPACE - 488)) | (1L << (TEMPORARY - 488)) | (1L << (TEMPTABLE - 488)) | (1L << (THAN - 488)) | (1L << (TRANSACTION - 488)) | (1L << (TRUNCATE - 488)) | (1L << (UNDEFINED - 488)) | (1L << (UNDOFILE - 488)) | (1L << (UNDO_BUFFER_SIZE - 488)) | (1L << (UNKNOWN - 488)) | (1L << (UPGRADE - 488)) | (1L << (USER - 488)) | (1L << (VALIDATION - 488)) | (1L << (VALUE - 488)) | (1L << (VARIABLES - 488)) | (1L << (VIEW - 488)) | (1L << (WAIT - 488)) | (1L << (WARNINGS - 488)) | (1L << (WITHOUT - 488)) | (1L << (WORK - 488)) | (1L << (WRAPPER - 488)) | (1L << (X509 - 488)) | (1L << (XA - 488)) | (1L << (XML - 488)))) != 0) || _la==MEMORY || _la==MID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllTokensContext extends ParserRuleContext {
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(DRDSSQLStatementParser.INSERT, 0); }
		public TerminalNode LEFT() { return getToken(DRDSSQLStatementParser.LEFT, 0); }
		public TerminalNode MOD() { return getToken(DRDSSQLStatementParser.MOD, 0); }
		public TerminalNode REPLACE() { return getToken(DRDSSQLStatementParser.REPLACE, 0); }
		public TerminalNode REVERSE() { return getToken(DRDSSQLStatementParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(DRDSSQLStatementParser.RIGHT, 0); }
		public TerminalNode SUBSTR() { return getToken(DRDSSQLStatementParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(DRDSSQLStatementParser.SUBSTRING, 0); }
		public AllTokensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allTokens; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAllTokens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllTokensContext allTokens() throws RecognitionException {
		AllTokensContext _localctx = new AllTokensContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_allTokens);
		try {
			setState(5365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5351);
				charsetNameBase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5352);
				transactionLevelBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5353);
				engineName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5354);
				privilegesBase();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5355);
				dataTypeBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5356);
				keywordsCanBeId();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5357);
				match(INSERT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5358);
				match(LEFT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5359);
				match(MOD);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5360);
				match(REPLACE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5361);
				match(REVERSE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5362);
				match(RIGHT);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5363);
				match(SUBSTR);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5364);
				match(SUBSTRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public IStringDataTypeContext iStringDataType() {
			return getRuleContext(IStringDataTypeContext.class,0);
		}
		public INumericDatatypeContext iNumericDatatype() {
			return getRuleContext(INumericDatatypeContext.class,0);
		}
		public IDateTimeDataTypeContext iDateTimeDataType() {
			return getRuleContext(IDateTimeDataTypeContext.class,0);
		}
		public SpatialDataTypeContext spatialDataType() {
			return getRuleContext(SpatialDataTypeContext.class,0);
		}
		public IBoolDataTypeContext iBoolDataType() {
			return getRuleContext(IBoolDataTypeContext.class,0);
		}
		public IJsonDataTypeContext iJsonDataType() {
			return getRuleContext(IJsonDataTypeContext.class,0);
		}
		public OtherDataTypeContext otherDataType() {
			return getRuleContext(OtherDataTypeContext.class,0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_dataType);
		try {
			setState(5374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5367);
				iStringDataType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5368);
				iNumericDatatype();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5369);
				iDateTimeDataType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5370);
				spatialDataType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5371);
				iBoolDataType();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5372);
				iJsonDataType();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5373);
				otherDataType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class INumericDatatypeContext extends ParserRuleContext {
		public INumericDatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iNumericDatatype; }
	 
		public INumericDatatypeContext() { }
		public void copyFrom(INumericDatatypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class NumericDataTypeContext extends INumericDatatypeContext {
		public TerminalNode NUMERIC() { return getToken(DRDSSQLStatementParser.NUMERIC, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public NumericDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNumericDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FloatDataTypeContext extends INumericDatatypeContext {
		public TerminalNode FLOAT() { return getToken(DRDSSQLStatementParser.FLOAT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public FloatDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFloatDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RealDataTypeContext extends INumericDatatypeContext {
		public TerminalNode REAL() { return getToken(DRDSSQLStatementParser.REAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public RealDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRealDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DecDataTypeContext extends INumericDatatypeContext {
		public TerminalNode DEC() { return getToken(DRDSSQLStatementParser.DEC, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public DecDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDecDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntDataTypeContext extends INumericDatatypeContext {
		public TerminalNode INT() { return getToken(DRDSSQLStatementParser.INT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public IntDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIntDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BigintDataTypeContext extends INumericDatatypeContext {
		public TerminalNode BIGINT() { return getToken(DRDSSQLStatementParser.BIGINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public BigintDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBigintDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoublePrecisionDataTypeContext extends INumericDatatypeContext {
		public TerminalNode DOUBLE() { return getToken(DRDSSQLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(DRDSSQLStatementParser.PRECISION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public DoublePrecisionDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDoublePrecisionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FixedDataTypeContext extends INumericDatatypeContext {
		public TerminalNode FIXED() { return getToken(DRDSSQLStatementParser.FIXED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public FixedDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFixedDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TinyintDataTypeContext extends INumericDatatypeContext {
		public TerminalNode TINYINT() { return getToken(DRDSSQLStatementParser.TINYINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public TinyintDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTinyintDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MediumintDataTypeContext extends INumericDatatypeContext {
		public TerminalNode MEDIUMINT() { return getToken(DRDSSQLStatementParser.MEDIUMINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public MediumintDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMediumintDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntegerDataTypeContext extends INumericDatatypeContext {
		public TerminalNode INTEGER() { return getToken(DRDSSQLStatementParser.INTEGER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public IntegerDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIntegerDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitDataTypeContext extends INumericDatatypeContext {
		public TerminalNode BIT() { return getToken(DRDSSQLStatementParser.BIT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public BitDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBitDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DecimalDataTypeContext extends INumericDatatypeContext {
		public TerminalNode DECIMAL() { return getToken(DRDSSQLStatementParser.DECIMAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public DecimalDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDecimalDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SmallintDataTypeContext extends INumericDatatypeContext {
		public TerminalNode SMALLINT() { return getToken(DRDSSQLStatementParser.SMALLINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public SmallintDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSmallintDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleDataTypeContext extends INumericDatatypeContext {
		public TerminalNode DOUBLE() { return getToken(DRDSSQLStatementParser.DOUBLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(DRDSSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(DRDSSQLStatementParser.ZEROFILL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public DoubleDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDoubleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final INumericDatatypeContext iNumericDatatype() throws RecognitionException {
		INumericDatatypeContext _localctx = new INumericDatatypeContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_iNumericDatatype);
		int _la;
		try {
			setState(5610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				_localctx = new BitDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5376);
				match(BIT);
				setState(5381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					setState(5377);
					match(LEFT_PAREN);
					setState(5378);
					expr(0);
					setState(5379);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new TinyintDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5383);
				match(TINYINT);
				setState(5388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
				case 1:
					{
					setState(5384);
					match(LEFT_PAREN);
					setState(5385);
					expr(0);
					setState(5386);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5390);
					match(UNSIGNED);
					}
				}

				setState(5394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5393);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 3:
				_localctx = new SmallintDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5396);
				match(SMALLINT);
				setState(5401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
				case 1:
					{
					setState(5397);
					match(LEFT_PAREN);
					setState(5398);
					expr(0);
					setState(5399);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5403);
					match(UNSIGNED);
					}
				}

				setState(5407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5406);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 4:
				_localctx = new MediumintDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5409);
				match(MEDIUMINT);
				setState(5414);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
				case 1:
					{
					setState(5410);
					match(LEFT_PAREN);
					setState(5411);
					expr(0);
					setState(5412);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5416);
					match(UNSIGNED);
					}
				}

				setState(5420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5419);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 5:
				_localctx = new IntDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5422);
				match(INT);
				setState(5427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
				case 1:
					{
					setState(5423);
					match(LEFT_PAREN);
					setState(5424);
					expr(0);
					setState(5425);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5429);
					match(UNSIGNED);
					}
				}

				setState(5433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5432);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new IntegerDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5435);
				match(INTEGER);
				setState(5440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
				case 1:
					{
					setState(5436);
					match(LEFT_PAREN);
					setState(5437);
					expr(0);
					setState(5438);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5442);
					match(UNSIGNED);
					}
				}

				setState(5446);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5445);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new BigintDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5448);
				match(BIGINT);
				setState(5453);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
				case 1:
					{
					setState(5449);
					match(LEFT_PAREN);
					setState(5450);
					expr(0);
					setState(5451);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5455);
					match(UNSIGNED);
					}
				}

				setState(5459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5458);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DecimalDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5461);
				match(DECIMAL);
				setState(5470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
				case 1:
					{
					setState(5462);
					match(LEFT_PAREN);
					setState(5463);
					expr(0);
					setState(5466);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5464);
						match(COMMA);
						setState(5465);
						expr(0);
						}
					}

					setState(5468);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5472);
					match(UNSIGNED);
					}
				}

				setState(5476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5475);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new DecDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5478);
				match(DEC);
				setState(5487);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
				case 1:
					{
					setState(5479);
					match(LEFT_PAREN);
					setState(5480);
					expr(0);
					setState(5483);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5481);
						match(COMMA);
						setState(5482);
						expr(0);
						}
					}

					setState(5485);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5489);
					match(UNSIGNED);
					}
				}

				setState(5493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5492);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 10:
				_localctx = new NumericDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5495);
				match(NUMERIC);
				setState(5504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
				case 1:
					{
					setState(5496);
					match(LEFT_PAREN);
					setState(5497);
					expr(0);
					setState(5500);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5498);
						match(COMMA);
						setState(5499);
						expr(0);
						}
					}

					setState(5502);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5506);
					match(UNSIGNED);
					}
				}

				setState(5510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5509);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 11:
				_localctx = new FixedDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5512);
				match(FIXED);
				setState(5521);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5513);
					match(LEFT_PAREN);
					setState(5514);
					expr(0);
					setState(5517);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5515);
						match(COMMA);
						setState(5516);
						expr(0);
						}
					}

					setState(5519);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5523);
					match(UNSIGNED);
					}
				}

				setState(5527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5526);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 12:
				_localctx = new FloatDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5529);
				match(FLOAT);
				setState(5541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(5530);
					match(LEFT_PAREN);
					setState(5531);
					expr(0);
					setState(5536);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5532);
						match(COMMA);
						setState(5533);
						expr(0);
						}
						}
						setState(5538);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5539);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5543);
					match(UNSIGNED);
					}
				}

				setState(5547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5546);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 13:
				_localctx = new DoubleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5549);
				match(DOUBLE);
				setState(5561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
				case 1:
					{
					setState(5550);
					match(LEFT_PAREN);
					setState(5551);
					expr(0);
					setState(5556);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5552);
						match(COMMA);
						setState(5553);
						expr(0);
						}
						}
						setState(5558);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5559);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5563);
					match(UNSIGNED);
					}
				}

				setState(5567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5566);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 14:
				_localctx = new DoublePrecisionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5569);
				match(DOUBLE);
				setState(5570);
				match(PRECISION);
				setState(5582);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5571);
					match(LEFT_PAREN);
					setState(5572);
					expr(0);
					setState(5577);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5573);
						match(COMMA);
						setState(5574);
						expr(0);
						}
						}
						setState(5579);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5580);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5584);
					match(UNSIGNED);
					}
				}

				setState(5588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5587);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 15:
				_localctx = new RealDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5590);
				match(REAL);
				setState(5602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(5591);
					match(LEFT_PAREN);
					setState(5592);
					expr(0);
					setState(5597);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5593);
						match(COMMA);
						setState(5594);
						expr(0);
						}
						}
						setState(5599);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5600);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5605);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5604);
					match(UNSIGNED);
					}
				}

				setState(5608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5607);
					match(ZEROFILL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IStringDataTypeContext extends ParserRuleContext {
		public IStringDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iStringDataType; }
	 
		public IStringDataTypeContext() { }
		public void copyFrom(IStringDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TinyBlobDataTypeContext extends IStringDataTypeContext {
		public TerminalNode TINYBLOB() { return getToken(DRDSSQLStatementParser.TINYBLOB, 0); }
		public TinyBlobDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTinyBlobDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalCharDataTypeContext extends IStringDataTypeContext {
		public TerminalNode NATIONAL() { return getToken(DRDSSQLStatementParser.NATIONAL, 0); }
		public TerminalNode CHAR() { return getToken(DRDSSQLStatementParser.CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public NationalCharDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNationalCharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MediumBlobDataTypeContext extends IStringDataTypeContext {
		public TerminalNode MEDIUMBLOB() { return getToken(DRDSSQLStatementParser.MEDIUMBLOB, 0); }
		public MediumBlobDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMediumBlobDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BlobDataTypeContext extends IStringDataTypeContext {
		public TerminalNode BLOB() { return getToken(DRDSSQLStatementParser.BLOB, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public BlobDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBlobDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EnumDataTypeContext extends IStringDataTypeContext {
		public TerminalNode ENUM() { return getToken(DRDSSQLStatementParser.ENUM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public EnumDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitEnumDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VarcharDataTypeContext extends IStringDataTypeContext {
		public TerminalNode VARCHAR() { return getToken(DRDSSQLStatementParser.VARCHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public VarcharDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryDataTypeContext extends IStringDataTypeContext {
		public TerminalNode BINARY() { return getToken(DRDSSQLStatementParser.BINARY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public BinaryDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVarcharDataTypeContext extends IStringDataTypeContext {
		public TerminalNode NATIONAL() { return getToken(DRDSSQLStatementParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(DRDSSQLStatementParser.VARCHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public NationalVarcharDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNationalVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongTextDataTypeContext extends IStringDataTypeContext {
		public TerminalNode LONGTEXT() { return getToken(DRDSSQLStatementParser.LONGTEXT, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public LongTextDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLongTextDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TinyTextDataTypeContext extends IStringDataTypeContext {
		public TerminalNode TINYTEXT() { return getToken(DRDSSQLStatementParser.TINYTEXT, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public TinyTextDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTinyTextDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetDataTypeContext extends IStringDataTypeContext {
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public SetDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSetDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VarBinaryDataTypeContext extends IStringDataTypeContext {
		public TerminalNode VARBINARY() { return getToken(DRDSSQLStatementParser.VARBINARY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public VarBinaryDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitVarBinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MediumTextDataTypeContext extends IStringDataTypeContext {
		public TerminalNode MEDIUMTEXT() { return getToken(DRDSSQLStatementParser.MEDIUMTEXT, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public MediumTextDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMediumTextDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TextDataTypeContext extends IStringDataTypeContext {
		public TerminalNode TEXT() { return getToken(DRDSSQLStatementParser.TEXT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public TextDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTextDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharDataTypeContext extends IStringDataTypeContext {
		public TerminalNode CHAR() { return getToken(DRDSSQLStatementParser.CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public CharDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongBlobDataTypeContext extends IStringDataTypeContext {
		public TerminalNode LONGBLOB() { return getToken(DRDSSQLStatementParser.LONGBLOB, 0); }
		public LongBlobDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLongBlobDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IStringDataTypeContext iStringDataType() throws RecognitionException {
		IStringDataTypeContext _localctx = new IStringDataTypeContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_iStringDataType);
		int _la;
		try {
			setState(5764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
			case 1:
				_localctx = new CharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5612);
				match(CHAR);
				setState(5617);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
				case 1:
					{
					setState(5613);
					match(LEFT_PAREN);
					setState(5614);
					expr(0);
					setState(5615);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5620);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
				case 1:
					{
					setState(5619);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
				case 1:
					{
					setState(5622);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalCharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5625);
				match(NATIONAL);
				setState(5626);
				match(CHAR);
				setState(5631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
				case 1:
					{
					setState(5627);
					match(LEFT_PAREN);
					setState(5628);
					expr(0);
					setState(5629);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					setState(5633);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5637);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					setState(5636);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new VarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5639);
				match(VARCHAR);
				setState(5644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					setState(5640);
					match(LEFT_PAREN);
					setState(5641);
					expr(0);
					setState(5642);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5647);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
				case 1:
					{
					setState(5646);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5650);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
				case 1:
					{
					setState(5649);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5652);
				match(NATIONAL);
				setState(5653);
				match(VARCHAR);
				setState(5658);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
				case 1:
					{
					setState(5654);
					match(LEFT_PAREN);
					setState(5655);
					expr(0);
					setState(5656);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5661);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
				case 1:
					{
					setState(5660);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5664);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
				case 1:
					{
					setState(5663);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new BinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5666);
				match(BINARY);
				setState(5671);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
				case 1:
					{
					setState(5667);
					match(LEFT_PAREN);
					setState(5668);
					expr(0);
					setState(5669);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new VarBinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5673);
				match(VARBINARY);
				setState(5678);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
				case 1:
					{
					setState(5674);
					match(LEFT_PAREN);
					setState(5675);
					expr(0);
					setState(5676);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new TinyBlobDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5680);
				match(TINYBLOB);
				}
				break;
			case 8:
				_localctx = new TinyTextDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5681);
				match(TINYTEXT);
				setState(5683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
				case 1:
					{
					setState(5682);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5686);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
				case 1:
					{
					setState(5685);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new BlobDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5688);
				match(BLOB);
				setState(5693);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
				case 1:
					{
					setState(5689);
					match(LEFT_PAREN);
					setState(5690);
					expr(0);
					setState(5691);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new TextDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5695);
				match(TEXT);
				setState(5700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
				case 1:
					{
					setState(5696);
					match(LEFT_PAREN);
					setState(5697);
					expr(0);
					setState(5698);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
				case 1:
					{
					setState(5702);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5706);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,760,_ctx) ) {
				case 1:
					{
					setState(5705);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new MediumBlobDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5708);
				match(MEDIUMBLOB);
				}
				break;
			case 12:
				_localctx = new MediumTextDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5709);
				match(MEDIUMTEXT);
				setState(5711);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,761,_ctx) ) {
				case 1:
					{
					setState(5710);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5714);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
				case 1:
					{
					setState(5713);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new LongBlobDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5716);
				match(LONGBLOB);
				}
				break;
			case 14:
				_localctx = new LongTextDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5717);
				match(LONGTEXT);
				setState(5719);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(5718);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
				case 1:
					{
					setState(5721);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 15:
				_localctx = new EnumDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5724);
				match(ENUM);
				setState(5736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
				case 1:
					{
					setState(5725);
					match(LEFT_PAREN);
					setState(5726);
					expr(0);
					setState(5731);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5727);
						match(COMMA);
						setState(5728);
						expr(0);
						}
						}
						setState(5733);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5734);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5739);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(5738);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5742);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(5741);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 16:
				_localctx = new SetDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5744);
				match(SET);
				setState(5756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(5745);
					match(LEFT_PAREN);
					setState(5746);
					expr(0);
					setState(5751);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5747);
						match(COMMA);
						setState(5748);
						expr(0);
						}
						}
						setState(5753);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5754);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(5758);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
				case 1:
					{
					setState(5761);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IDateTimeDataTypeContext extends ParserRuleContext {
		public IDateTimeDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iDateTimeDataType; }
	 
		public IDateTimeDataTypeContext() { }
		public void copyFrom(IDateTimeDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DateDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode DATE() { return getToken(DRDSSQLStatementParser.DATE, 0); }
		public DateDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDateDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DatetimeDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode DATETIME() { return getToken(DRDSSQLStatementParser.DATETIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public DatetimeDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDatetimeDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimestampDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode TIMESTAMP() { return getToken(DRDSSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TimestampDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTimestampDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class YearDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode YEAR() { return getToken(DRDSSQLStatementParser.YEAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public YearDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitYearDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimeDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode TIME() { return getToken(DRDSSQLStatementParser.TIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TimeDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTimeDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IDateTimeDataTypeContext iDateTimeDataType() throws RecognitionException {
		IDateTimeDataTypeContext _localctx = new IDateTimeDataTypeContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_iDateTimeDataType);
		try {
			setState(5795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				_localctx = new DateDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5766);
				match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DatetimeDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5767);
				match(DATETIME);
				setState(5772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
				case 1:
					{
					setState(5768);
					match(LEFT_PAREN);
					setState(5769);
					expr(0);
					setState(5770);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				_localctx = new TimestampDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5774);
				match(TIMESTAMP);
				setState(5779);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(5775);
					match(LEFT_PAREN);
					setState(5776);
					expr(0);
					setState(5777);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case TIME:
				_localctx = new TimeDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5781);
				match(TIME);
				setState(5786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(5782);
					match(LEFT_PAREN);
					setState(5783);
					expr(0);
					setState(5784);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				_localctx = new YearDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5788);
				match(YEAR);
				setState(5793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
				case 1:
					{
					setState(5789);
					match(LEFT_PAREN);
					setState(5790);
					expr(0);
					setState(5791);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpatialDataTypeContext extends ParserRuleContext {
		public SpatialDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialDataType; }
	 
		public SpatialDataTypeContext() { }
		public void copyFrom(SpatialDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GeometryDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode GEOMETRY() { return getToken(DRDSSQLStatementParser.GEOMETRY, 0); }
		public GeometryDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGeometryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PointDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode POINT() { return getToken(DRDSSQLStatementParser.POINT, 0); }
		public PointDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPointDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LineStringDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode LINESTRING() { return getToken(DRDSSQLStatementParser.LINESTRING, 0); }
		public LineStringDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLineStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PolygonDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode POLYGON() { return getToken(DRDSSQLStatementParser.POLYGON, 0); }
		public PolygonDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPolygonDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultiPointDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode MULTIPOINT() { return getToken(DRDSSQLStatementParser.MULTIPOINT, 0); }
		public MultiPointDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMultiPointDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultiLineStringDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode MULTILINESTRING() { return getToken(DRDSSQLStatementParser.MULTILINESTRING, 0); }
		public MultiLineStringDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMultiLineStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultiPolygonDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode MULTIPOLYGON() { return getToken(DRDSSQLStatementParser.MULTIPOLYGON, 0); }
		public MultiPolygonDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMultiPolygonDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeometryCollectionDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(DRDSSQLStatementParser.GEOMETRYCOLLECTION, 0); }
		public GeometryCollectionDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGeometryCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpatialDataTypeContext spatialDataType() throws RecognitionException {
		SpatialDataTypeContext _localctx = new SpatialDataTypeContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_spatialDataType);
		try {
			setState(5805);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GEOMETRY:
				_localctx = new GeometryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5797);
				match(GEOMETRY);
				}
				break;
			case POINT:
				_localctx = new PointDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5798);
				match(POINT);
				}
				break;
			case LINESTRING:
				_localctx = new LineStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5799);
				match(LINESTRING);
				}
				break;
			case POLYGON:
				_localctx = new PolygonDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5800);
				match(POLYGON);
				}
				break;
			case MULTIPOINT:
				_localctx = new MultiPointDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5801);
				match(MULTIPOINT);
				}
				break;
			case MULTILINESTRING:
				_localctx = new MultiLineStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5802);
				match(MULTILINESTRING);
				}
				break;
			case MULTIPOLYGON:
				_localctx = new MultiPolygonDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5803);
				match(MULTIPOLYGON);
				}
				break;
			case GEOMETRYCOLLECTION:
				_localctx = new GeometryCollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5804);
				match(GEOMETRYCOLLECTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IBoolDataTypeContext extends ParserRuleContext {
		public IBoolDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iBoolDataType; }
	 
		public IBoolDataTypeContext() { }
		public void copyFrom(IBoolDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class BoolDataTypeContext extends IBoolDataTypeContext {
		public TerminalNode BOOL() { return getToken(DRDSSQLStatementParser.BOOL, 0); }
		public BoolDataTypeContext(IBoolDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBoolDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BooleanDataTypeContext extends IBoolDataTypeContext {
		public TerminalNode BOOLEAN() { return getToken(DRDSSQLStatementParser.BOOLEAN, 0); }
		public BooleanDataTypeContext(IBoolDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBooleanDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IBoolDataTypeContext iBoolDataType() throws RecognitionException {
		IBoolDataTypeContext _localctx = new IBoolDataTypeContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_iBoolDataType);
		try {
			setState(5809);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BOOL:
				_localctx = new BoolDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5807);
				match(BOOL);
				}
				break;
			case BOOLEAN:
				_localctx = new BooleanDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5808);
				match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IJsonDataTypeContext extends ParserRuleContext {
		public IJsonDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iJsonDataType; }
	 
		public IJsonDataTypeContext() { }
		public void copyFrom(IJsonDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class JsonDataTypeContext extends IJsonDataTypeContext {
		public TerminalNode JSON() { return getToken(DRDSSQLStatementParser.JSON, 0); }
		public JsonDataTypeContext(IJsonDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IJsonDataTypeContext iJsonDataType() throws RecognitionException {
		IJsonDataTypeContext _localctx = new IJsonDataTypeContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_iJsonDataType);
		try {
			_localctx = new JsonDataTypeContext(_localctx);
			enterOuterAlt(_localctx, 1);
			{
			setState(5811);
			match(JSON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherDataTypeContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public OtherDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherDataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOtherDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherDataTypeContext otherDataType() throws RecognitionException {
		OtherDataTypeContext _localctx = new OtherDataTypeContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_otherDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5813);
			((OtherDataTypeContext)_localctx).name = nameIdentifier();
			setState(5826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				{
				setState(5814);
				match(LEFT_PAREN);
				setState(5816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
					{
					setState(5815);
					expr(0);
					}
				}

				setState(5822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5818);
					match(COMMA);
					setState(5819);
					expr(0);
					}
					}
					setState(5824);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5825);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	 
		public IdentifierContext() { }
		public void copyFrom(IdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class NormalIdentifierContext extends IdentifierContext {
		public TerminalNode REGULAR_ID() { return getToken(DRDSSQLStatementParser.REGULAR_ID, 0); }
		public AllTokensContext allTokens() {
			return getRuleContext(AllTokensContext.class,0);
		}
		public NormalIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNormalIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsteriskIdentifierContext extends IdentifierContext {
		public TerminalNode ASTERISK() { return getToken(DRDSSQLStatementParser.ASTERISK, 0); }
		public AsteriskIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAsteriskIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReverseQuoteIdentifierContext extends IdentifierContext {
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(DRDSSQLStatementParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(DRDSSQLStatementParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public ReverseQuoteIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitReverseQuoteIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleQuoteIdentifier1Context extends IdentifierContext {
		public TerminalNode DELIMITED_ID() { return getToken(DRDSSQLStatementParser.DELIMITED_ID, 0); }
		public DoubleQuoteIdentifier1Context(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDoubleQuoteIdentifier1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_identifier);
		try {
			setState(5834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				_localctx = new AsteriskIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5828);
				match(ASTERISK);
				}
				break;
			case REGULAR_ID:
				_localctx = new NormalIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5829);
				match(REGULAR_ID);
				}
				break;
			case INSERT:
			case LEFT:
			case REPLACE:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SUM:
			case SUBSTR:
			case SUBSTRING:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case MOD:
			case REVERSE:
			case MID:
				_localctx = new NormalIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5830);
				allTokens();
				}
				break;
			case REVERSE_QUOTE_ID:
				_localctx = new ReverseQuoteIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5831);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				_localctx = new ReverseQuoteIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5832);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			case DELIMITED_ID:
				_localctx = new DoubleQuoteIdentifier1Context(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5833);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameIdentifierContext extends ParserRuleContext {
		public NameIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nameIdentifier; }
	 
		public NameIdentifierContext() { }
		public void copyFrom(NameIdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Identifier1Context extends NameIdentifierContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Identifier1Context(NameIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIdentifier1(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PropertyIdentifier1Context extends NameIdentifierContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(DRDSSQLStatementParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(DRDSSQLStatementParser.PERIOD, i);
		}
		public PropertyIdentifier1Context(NameIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPropertyIdentifier1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameIdentifierContext nameIdentifier() throws RecognitionException {
		NameIdentifierContext _localctx = new NameIdentifierContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_nameIdentifier);
		try {
			int _alt;
			setState(5844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
			case 1:
				_localctx = new Identifier1Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5836);
				identifier();
				}
				break;
			case 2:
				_localctx = new PropertyIdentifier1Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5837);
				identifier();
				setState(5840); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5838);
						match(PERIOD);
						setState(5839);
						identifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5842); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,785,_ctx);
				} while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
	 
		public LiteralContext() { }
		public void copyFrom(LiteralContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TimestampLiteralContext extends LiteralContext {
		public ExprContext value;
		public TerminalNode TIMESTAMP() { return getToken(DRDSSQLStatementParser.TIMESTAMP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TimestampLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTimestampLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullLiteralContext extends LiteralContext {
		public TerminalNode NULL_LITERAL() { return getToken(DRDSSQLStatementParser.NULL_LITERAL, 0); }
		public NullLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNullLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharLiteralContext extends LiteralContext {
		public TerminalNode CHAR_STRING() { return getToken(DRDSSQLStatementParser.CHAR_STRING, 0); }
		public CharLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCharLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleQuoteIdentifier2Context extends LiteralContext {
		public TerminalNode DELIMITED_ID() { return getToken(DRDSSQLStatementParser.DELIMITED_ID, 0); }
		public DoubleQuoteIdentifier2Context(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDoubleQuoteIdentifier2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrueLiteralContext extends LiteralContext {
		public TerminalNode TRUE() { return getToken(DRDSSQLStatementParser.TRUE, 0); }
		public TrueLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTrueLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharsetNamChareLiteralContext extends LiteralContext {
		public TerminalNode STRING_CHARSET_NAME() { return getToken(DRDSSQLStatementParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(DRDSSQLStatementParser.CHAR_STRING, 0); }
		public CharsetNamChareLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCharsetNamChareLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitLiteralContext extends LiteralContext {
		public TerminalNode BIT_STRING() { return getToken(DRDSSQLStatementParser.BIT_STRING, 0); }
		public BitLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HexadecimalLiteralContext extends LiteralContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(DRDSSQLStatementParser.HEXADECIMAL_LITERAL, 0); }
		public HexadecimalLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimeLiteralContext extends LiteralContext {
		public TerminalNode TIME() { return getToken(DRDSSQLStatementParser.TIME, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TimeLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTimeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FalseLiteralContext extends LiteralContext {
		public TerminalNode FALSE() { return getToken(DRDSSQLStatementParser.FALSE, 0); }
		public FalseLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFalseLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NCharLiteralContext extends LiteralContext {
		public TerminalNode NCHAR_STRING() { return getToken(DRDSSQLStatementParser.NCHAR_STRING, 0); }
		public NCharLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNCharLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntegerLiteralContext extends LiteralContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(DRDSSQLStatementParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(DRDSSQLStatementParser.MINUS_SIGN, 0); }
		public IntegerLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIntegerLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DateLiteralContext extends LiteralContext {
		public TerminalNode DATE() { return getToken(DRDSSQLStatementParser.DATE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DateLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDateLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalLiteralContext extends LiteralContext {
		public TerminalNode INTERVAL() { return getToken(DRDSSQLStatementParser.INTERVAL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIntervalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumberLiteralContext extends LiteralContext {
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(DRDSSQLStatementParser.APPROXIMATE_NUM_LIT, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(DRDSSQLStatementParser.MINUS_SIGN, 0); }
		public NumberLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNumberLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_literal);
		int _la;
		try {
			setState(5874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				_localctx = new NCharLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5846);
				match(NCHAR_STRING);
				}
				break;
			case 2:
				_localctx = new CharLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5847);
				match(CHAR_STRING);
				}
				break;
			case 3:
				_localctx = new DoubleQuoteIdentifier2Context(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5848);
				match(DELIMITED_ID);
				}
				break;
			case 4:
				_localctx = new CharsetNamChareLiteralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5849);
				match(STRING_CHARSET_NAME);
				setState(5850);
				match(CHAR_STRING);
				}
				break;
			case 5:
				_localctx = new IntegerLiteralContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS_SIGN) {
					{
					setState(5851);
					match(MINUS_SIGN);
					}
				}

				setState(5854);
				match(UNSIGNED_INTEGER);
				}
				break;
			case 6:
				_localctx = new NumberLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS_SIGN) {
					{
					setState(5855);
					match(MINUS_SIGN);
					}
				}

				setState(5858);
				match(APPROXIMATE_NUM_LIT);
				}
				break;
			case 7:
				_localctx = new DateLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5859);
				match(DATE);
				setState(5860);
				expr(0);
				}
				break;
			case 8:
				_localctx = new TimeLiteralContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5861);
				match(TIME);
				setState(5862);
				expr(0);
				}
				break;
			case 9:
				_localctx = new TimestampLiteralContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5863);
				match(TIMESTAMP);
				setState(5864);
				((TimestampLiteralContext)_localctx).value = expr(0);
				}
				break;
			case 10:
				_localctx = new IntervalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5865);
				match(INTERVAL);
				setState(5866);
				expr(0);
				setState(5867);
				intervalType();
				}
				break;
			case 11:
				_localctx = new HexadecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5869);
				match(HEXADECIMAL_LITERAL);
				}
				break;
			case 12:
				_localctx = new BitLiteralContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5870);
				match(BIT_STRING);
				}
				break;
			case 13:
				_localctx = new FalseLiteralContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5871);
				match(FALSE);
				}
				break;
			case 14:
				_localctx = new TrueLiteralContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5872);
				match(TRUE);
				}
				break;
			case 15:
				_localctx = new NullLiteralContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5873);
				match(NULL_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public TerminalNode MICROSECOND() { return getToken(DRDSSQLStatementParser.MICROSECOND, 0); }
		public TerminalNode SECOND() { return getToken(DRDSSQLStatementParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(DRDSSQLStatementParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(DRDSSQLStatementParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(DRDSSQLStatementParser.DAY, 0); }
		public TerminalNode WEEK() { return getToken(DRDSSQLStatementParser.WEEK, 0); }
		public TerminalNode MONTH() { return getToken(DRDSSQLStatementParser.MONTH, 0); }
		public TerminalNode QUARTER() { return getToken(DRDSSQLStatementParser.QUARTER, 0); }
		public TerminalNode YEAR() { return getToken(DRDSSQLStatementParser.YEAR, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(DRDSSQLStatementParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(DRDSSQLStatementParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(DRDSSQLStatementParser.MINUTE_SECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(DRDSSQLStatementParser.HOUR_MICROSECOND, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(DRDSSQLStatementParser.HOUR_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(DRDSSQLStatementParser.HOUR_MINUTE, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(DRDSSQLStatementParser.DAY_MICROSECOND, 0); }
		public TerminalNode DAY_SECOND() { return getToken(DRDSSQLStatementParser.DAY_SECOND, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(DRDSSQLStatementParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_HOUR() { return getToken(DRDSSQLStatementParser.DAY_HOUR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(DRDSSQLStatementParser.YEAR_MONTH, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_intervalType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5876);
			_la = _input.LA(1);
			if ( !(_la==YEAR || ((((_la - 557)) & ~0x3f) == 0 && ((1L << (_la - 557)) & ((1L << (YEAR_MONTH - 557)) | (1L << (DAY_HOUR - 557)) | (1L << (DAY_MINUTE - 557)) | (1L << (DAY_SECOND - 557)) | (1L << (HOUR_MINUTE - 557)) | (1L << (HOUR_SECOND - 557)) | (1L << (MINUTE_SECOND - 557)) | (1L << (SECOND_MICROSECOND - 557)) | (1L << (MINUTE_MICROSECOND - 557)) | (1L << (HOUR_MICROSECOND - 557)) | (1L << (DAY_MICROSECOND - 557)) | (1L << (QUARTER - 557)) | (1L << (MONTH - 557)) | (1L << (DAY - 557)) | (1L << (HOUR - 557)) | (1L << (MINUTE - 557)) | (1L << (WEEK - 557)) | (1L << (SECOND - 557)) | (1L << (MICROSECOND - 557)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorExprContext extends ParserRuleContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public UnaryOperatorExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperatorExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUnaryOperatorExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorExprContext unaryOperatorExpr() throws RecognitionException {
		UnaryOperatorExprContext _localctx = new UnaryOperatorExprContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_unaryOperatorExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5878);
				match(LEFT_PAREN);
				}
			}

			setState(5881);
			unaryOperator();
			setState(5882);
			expr(0);
			setState(5884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
			case 1:
				{
				setState(5883);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(DRDSSQLStatementParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(DRDSSQLStatementParser.MINUS_SIGN, 0); }
		public TerminalNode EXCLAMATION_OP() { return getToken(DRDSSQLStatementParser.EXCLAMATION_OP, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(DRDSSQLStatementParser.BIT_NOT_OP, 0); }
		public TerminalNode BINARY() { return getToken(DRDSSQLStatementParser.BINARY, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5886);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableExprContext extends ParserRuleContext {
		public TerminalNode QUESTION_MARK() { return getToken(DRDSSQLStatementParser.QUESTION_MARK, 0); }
		public VariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableExprContext variableExpr() throws RecognitionException {
		VariableExprContext _localctx = new VariableExprContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_variableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5888);
			match(QUESTION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocalVariableExprContext extends ParserRuleContext {
		public TerminalNode AT_SIGN() { return getToken(DRDSSQLStatementParser.AT_SIGN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLocalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocalVariableExprContext localVariableExpr() throws RecognitionException {
		LocalVariableExprContext _localctx = new LocalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_localVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5890);
			match(AT_SIGN);
			setState(5891);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalVariableExprContext extends ParserRuleContext {
		public List<TerminalNode> AT_SIGN() { return getTokens(DRDSSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(DRDSSQLStatementParser.AT_SIGN, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public GlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GlobalVariableExprContext globalVariableExpr() throws RecognitionException {
		GlobalVariableExprContext _localctx = new GlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_globalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5893);
			match(AT_SIGN);
			setState(5894);
			match(AT_SIGN);
			setState(5895);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalGlobalVariableExprContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_SIGN() { return getTokens(DRDSSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(DRDSSQLStatementParser.AT_SIGN, i);
		}
		public TerminalNode GLOBAL() { return getToken(DRDSSQLStatementParser.GLOBAL, 0); }
		public TerminalNode PERIOD() { return getToken(DRDSSQLStatementParser.PERIOD, 0); }
		public GlobalGlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalGlobalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGlobalGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GlobalGlobalVariableExprContext globalGlobalVariableExpr() throws RecognitionException {
		GlobalGlobalVariableExprContext _localctx = new GlobalGlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_globalGlobalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5902);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN:
				{
				setState(5897);
				match(AT_SIGN);
				setState(5898);
				match(AT_SIGN);
				setState(5899);
				match(GLOBAL);
				setState(5900);
				match(PERIOD);
				}
				break;
			case GLOBAL:
				{
				setState(5901);
				match(GLOBAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5904);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SessionGlobalVariableExprContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_SIGN() { return getTokens(DRDSSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(DRDSSQLStatementParser.AT_SIGN, i);
		}
		public TerminalNode SESSION() { return getToken(DRDSSQLStatementParser.SESSION, 0); }
		public TerminalNode PERIOD() { return getToken(DRDSSQLStatementParser.PERIOD, 0); }
		public SessionGlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionGlobalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSessionGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SessionGlobalVariableExprContext sessionGlobalVariableExpr() throws RecognitionException {
		SessionGlobalVariableExprContext _localctx = new SessionGlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_sessionGlobalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5911);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN:
				{
				setState(5906);
				match(AT_SIGN);
				setState(5907);
				match(AT_SIGN);
				setState(5908);
				match(SESSION);
				setState(5909);
				match(PERIOD);
				}
				break;
			case SESSION:
				{
				setState(5910);
				match(SESSION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5913);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PersistGlobalVariableExprContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_SIGN() { return getTokens(DRDSSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(DRDSSQLStatementParser.AT_SIGN, i);
		}
		public TerminalNode PERSIST() { return getToken(DRDSSQLStatementParser.PERSIST, 0); }
		public TerminalNode PERIOD() { return getToken(DRDSSQLStatementParser.PERIOD, 0); }
		public PersistGlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_persistGlobalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPersistGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PersistGlobalVariableExprContext persistGlobalVariableExpr() throws RecognitionException {
		PersistGlobalVariableExprContext _localctx = new PersistGlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_persistGlobalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5920);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN:
				{
				setState(5915);
				match(AT_SIGN);
				setState(5916);
				match(AT_SIGN);
				setState(5917);
				match(PERSIST);
				setState(5918);
				match(PERIOD);
				}
				break;
			case PERSIST:
				{
				setState(5919);
				match(PERSIST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5922);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PersistOnlyGlobalVariableExprContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_SIGN() { return getTokens(DRDSSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(DRDSSQLStatementParser.AT_SIGN, i);
		}
		public TerminalNode PERSIST_ONLY() { return getToken(DRDSSQLStatementParser.PERSIST_ONLY, 0); }
		public TerminalNode PERIOD() { return getToken(DRDSSQLStatementParser.PERIOD, 0); }
		public PersistOnlyGlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_persistOnlyGlobalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPersistOnlyGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PersistOnlyGlobalVariableExprContext persistOnlyGlobalVariableExpr() throws RecognitionException {
		PersistOnlyGlobalVariableExprContext _localctx = new PersistOnlyGlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_persistOnlyGlobalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN:
				{
				setState(5924);
				match(AT_SIGN);
				setState(5925);
				match(AT_SIGN);
				setState(5926);
				match(PERSIST_ONLY);
				setState(5927);
				match(PERIOD);
				}
				break;
			case PERSIST_ONLY:
				{
				setState(5928);
				match(PERSIST_ONLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5931);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowExprContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DRDSSQLStatementParser.ROW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public RowExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRowExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowExprContext rowExpr() throws RecognitionException {
		RowExprContext _localctx = new RowExprContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_rowExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5933);
			match(ROW);
			setState(5934);
			match(LEFT_PAREN);
			setState(5935);
			expr(0);
			setState(5940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5936);
				match(COMMA);
				setState(5937);
				expr(0);
				}
				}
				setState(5942);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5943);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryExprContext extends ParserRuleContext {
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public SelectQueryExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectQueryExprContext selectQueryExpr() throws RecognitionException {
		SelectQueryExprContext _localctx = new SelectQueryExprContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_selectQueryExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				setState(5945);
				match(LEFT_PAREN);
				}
				break;
			}
			setState(5948);
			iSelectQuery();
			setState(5950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				setState(5949);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchExprContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> matchs = new ArrayList<ExprContext>();
		public List<ExprContext> against = new ArrayList<ExprContext>();
		public TerminalNode MATCH() { return getToken(DRDSSQLStatementParser.MATCH, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(DRDSSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(DRDSSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode AGAINST() { return getToken(DRDSSQLStatementParser.AGAINST, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public SearchModifierContext searchModifier() {
			return getRuleContext(SearchModifierContext.class,0);
		}
		public MatchExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMatchExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchExprContext matchExpr() throws RecognitionException {
		MatchExprContext _localctx = new MatchExprContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_matchExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5952);
			match(MATCH);
			setState(5953);
			match(LEFT_PAREN);
			setState(5954);
			((MatchExprContext)_localctx).expr = expr(0);
			((MatchExprContext)_localctx).matchs.add(((MatchExprContext)_localctx).expr);
			setState(5959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5955);
				match(COMMA);
				setState(5956);
				((MatchExprContext)_localctx).expr = expr(0);
				((MatchExprContext)_localctx).matchs.add(((MatchExprContext)_localctx).expr);
				}
				}
				setState(5961);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5962);
			match(RIGHT_PAREN);
			setState(5963);
			match(AGAINST);
			setState(5964);
			match(LEFT_PAREN);
			setState(5965);
			((MatchExprContext)_localctx).expr = expr(0);
			((MatchExprContext)_localctx).against.add(((MatchExprContext)_localctx).expr);
			setState(5967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN || _la==WITH) {
				{
				setState(5966);
				searchModifier();
				}
			}

			setState(5969);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchModifierContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public TerminalNode NATURAL() { return getToken(DRDSSQLStatementParser.NATURAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DRDSSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode MODE() { return getToken(DRDSSQLStatementParser.MODE, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode QUERY() { return getToken(DRDSSQLStatementParser.QUERY, 0); }
		public TerminalNode EXPANSION() { return getToken(DRDSSQLStatementParser.EXPANSION, 0); }
		public TerminalNode BOOLEAN() { return getToken(DRDSSQLStatementParser.BOOLEAN, 0); }
		public SearchModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchModifier; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSearchModifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchModifierContext searchModifier() throws RecognitionException {
		SearchModifierContext _localctx = new SearchModifierContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_searchModifier);
		try {
			setState(5988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5971);
				match(IN);
				setState(5972);
				match(NATURAL);
				setState(5973);
				match(LANGUAGE);
				setState(5974);
				match(MODE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5975);
				match(IN);
				setState(5976);
				match(NATURAL);
				setState(5977);
				match(LANGUAGE);
				setState(5978);
				match(MODE);
				setState(5979);
				match(WITH);
				setState(5980);
				match(QUERY);
				setState(5981);
				match(EXPANSION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5982);
				match(IN);
				setState(5983);
				match(BOOLEAN);
				setState(5984);
				match(MODE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5985);
				match(WITH);
				setState(5986);
				match(QUERY);
				setState(5987);
				match(EXPANSION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DRDSSQLStatementParser.CASE, 0); }
		public TerminalNode END() { return getToken(DRDSSQLStatementParser.END, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<CaseExprWhenItemContext> caseExprWhenItem() {
			return getRuleContexts(CaseExprWhenItemContext.class);
		}
		public CaseExprWhenItemContext caseExprWhenItem(int i) {
			return getRuleContext(CaseExprWhenItemContext.class,i);
		}
		public CaseExprElseClauseContext caseExprElseClause() {
			return getRuleContext(CaseExprElseClauseContext.class,0);
		}
		public CaseExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCaseExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprContext caseExpr() throws RecognitionException {
		CaseExprContext _localctx = new CaseExprContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_caseExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5990);
			match(CASE);
			setState(5992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
				{
				setState(5991);
				expr(0);
				}
			}

			setState(5995); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5994);
				caseExprWhenItem();
				}
				}
				setState(5997); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(6000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(5999);
				caseExprElseClause();
				}
			}

			setState(6002);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprWhenItemContext extends ParserRuleContext {
		public ExprContext when;
		public ExprContext then;
		public TerminalNode WHEN() { return getToken(DRDSSQLStatementParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(DRDSSQLStatementParser.THEN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public CaseExprWhenItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExprWhenItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCaseExprWhenItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprWhenItemContext caseExprWhenItem() throws RecognitionException {
		CaseExprWhenItemContext _localctx = new CaseExprWhenItemContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_caseExprWhenItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6004);
			match(WHEN);
			setState(6006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
				{
				setState(6005);
				((CaseExprWhenItemContext)_localctx).when = expr(0);
				}
			}

			setState(6008);
			match(THEN);
			setState(6009);
			((CaseExprWhenItemContext)_localctx).then = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprElseClauseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(DRDSSQLStatementParser.ELSE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CaseExprElseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExprElseClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCaseExprElseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprElseClauseContext caseExprElseClause() throws RecognitionException {
		CaseExprElseClauseContext _localctx = new CaseExprElseClauseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_caseExprElseClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6011);
			match(ELSE);
			setState(6012);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListExprContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public ListExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitListExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListExprContext listExpr() throws RecognitionException {
		ListExprContext _localctx = new ListExprContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_listExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6014);
			match(LEFT_PAREN);
			setState(6015);
			expr(0);
			setState(6020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6016);
				match(COMMA);
				setState(6017);
				expr(0);
				}
				}
				setState(6022);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6023);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprBasicContext extends ParserRuleContext {
		public VariableExprContext variableExpr() {
			return getRuleContext(VariableExprContext.class,0);
		}
		public LocalVariableExprContext localVariableExpr() {
			return getRuleContext(LocalVariableExprContext.class,0);
		}
		public GlobalVariableExprContext globalVariableExpr() {
			return getRuleContext(GlobalVariableExprContext.class,0);
		}
		public GlobalGlobalVariableExprContext globalGlobalVariableExpr() {
			return getRuleContext(GlobalGlobalVariableExprContext.class,0);
		}
		public SessionGlobalVariableExprContext sessionGlobalVariableExpr() {
			return getRuleContext(SessionGlobalVariableExprContext.class,0);
		}
		public PersistGlobalVariableExprContext persistGlobalVariableExpr() {
			return getRuleContext(PersistGlobalVariableExprContext.class,0);
		}
		public PersistOnlyGlobalVariableExprContext persistOnlyGlobalVariableExpr() {
			return getRuleContext(PersistOnlyGlobalVariableExprContext.class,0);
		}
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public UnaryOperatorExprContext unaryOperatorExpr() {
			return getRuleContext(UnaryOperatorExprContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public RowExprContext rowExpr() {
			return getRuleContext(RowExprContext.class,0);
		}
		public MatchExprContext matchExpr() {
			return getRuleContext(MatchExprContext.class,0);
		}
		public CaseExprContext caseExpr() {
			return getRuleContext(CaseExprContext.class,0);
		}
		public SelectQueryExprContext selectQueryExpr() {
			return getRuleContext(SelectQueryExprContext.class,0);
		}
		public ListExprContext listExpr() {
			return getRuleContext(ListExprContext.class,0);
		}
		public ExprBasicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprBasic; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitExprBasic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprBasicContext exprBasic() throws RecognitionException {
		ExprBasicContext _localctx = new ExprBasicContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_exprBasic);
		try {
			setState(6041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6025);
				variableExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6026);
				localVariableExpr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6027);
				globalVariableExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6028);
				globalGlobalVariableExpr();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6029);
				sessionGlobalVariableExpr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6030);
				persistGlobalVariableExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6031);
				persistOnlyGlobalVariableExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6032);
				function();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6033);
				literal();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6034);
				unaryOperatorExpr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6035);
				nameIdentifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6036);
				rowExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6037);
				matchExpr();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6038);
				caseExpr();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6039);
				selectQueryExpr();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6040);
				listExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
	 
		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikeConditionContext extends ExprContext {
		public ExprContext value;
		public ExprContext pattern;
		public TerminalNode SOUNDS() { return getToken(DRDSSQLStatementParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(DRDSSQLStatementParser.LIKE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public SoundsLikeConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSoundsLikeCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RlikeConditionContext extends ExprContext {
		public ExprContext value;
		public Token operator;
		public ExprContext pattern;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RLIKE() { return getToken(DRDSSQLStatementParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public RlikeConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRlikeCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InConditionContext extends ExprContext {
		public ExprContext name;
		public ExprContext expr;
		public List<ExprContext> values = new ArrayList<ExprContext>();
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public InConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitInCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SomeExprContext extends ExprContext {
		public TerminalNode SOME() { return getToken(DRDSSQLStatementParser.SOME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public SomeExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSomeExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NewVariableRefExprContext extends ExprContext {
		public TerminalNode NEW() { return getToken(DRDSSQLStatementParser.NEW, 0); }
		public TerminalNode PERIOD() { return getToken(DRDSSQLStatementParser.PERIOD, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public NewVariableRefExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNewVariableRefExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullConditionContext extends ExprContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode IS() { return getToken(DRDSSQLStatementParser.IS, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(DRDSSQLStatementParser.NULL_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public IsNullConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIsNullCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpConditionContext extends ExprContext {
		public ExprContext value;
		public ExprContext pattern;
		public TerminalNode REGEXP() { return getToken(DRDSSQLStatementParser.REGEXP, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public RegexpConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRegexpCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IConditionContext extends ExprContext {
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public IConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitICondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryOperatorExprContext extends ExprContext {
		public Token operator;
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(DRDSSQLStatementParser.BIT_XOR_OP, 0); }
		public TerminalNode ASTERISK() { return getToken(DRDSSQLStatementParser.ASTERISK, 0); }
		public TerminalNode DIVIDE() { return getToken(DRDSSQLStatementParser.DIVIDE, 0); }
		public TerminalNode MOD() { return getToken(DRDSSQLStatementParser.MOD, 0); }
		public TerminalNode PERCENT() { return getToken(DRDSSQLStatementParser.PERCENT, 0); }
		public TerminalNode DIV() { return getToken(DRDSSQLStatementParser.DIV, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(DRDSSQLStatementParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(DRDSSQLStatementParser.MINUS_SIGN, 0); }
		public TerminalNode LESS_THAN_LESS_THAN_OP() { return getToken(DRDSSQLStatementParser.LESS_THAN_LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_GREATER_THAN_OP() { return getToken(DRDSSQLStatementParser.GREATER_THAN_GREATER_THAN_OP, 0); }
		public TerminalNode BIT_AND_OP() { return getToken(DRDSSQLStatementParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(DRDSSQLStatementParser.BIT_OR_OP, 0); }
		public TerminalNode COLLATE() { return getToken(DRDSSQLStatementParser.COLLATE, 0); }
		public TerminalNode LOGIC_AND_OP() { return getToken(DRDSSQLStatementParser.LOGIC_AND_OP, 0); }
		public TerminalNode AND() { return getToken(DRDSSQLStatementParser.AND, 0); }
		public TerminalNode XOR() { return getToken(DRDSSQLStatementParser.XOR, 0); }
		public TerminalNode LOGIC_OR_OP() { return getToken(DRDSSQLStatementParser.LOGIC_OR_OP, 0); }
		public TerminalNode OR() { return getToken(DRDSSQLStatementParser.OR, 0); }
		public TerminalNode ASSIGN_OP() { return getToken(DRDSSQLStatementParser.ASSIGN_OP, 0); }
		public BinaryOperatorExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBinaryOperatorExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikeConditionContext extends ExprContext {
		public ExprContext value;
		public Token operator;
		public ExprContext pattern;
		public ExprContext escape;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(DRDSSQLStatementParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(DRDSSQLStatementParser.ESCAPE, 0); }
		public LikeConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLikeCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AllExprContext extends ExprContext {
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public AllExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAllExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OldVariableRefExprContext extends ExprContext {
		public TerminalNode OLD() { return getToken(DRDSSQLStatementParser.OLD, 0); }
		public TerminalNode PERIOD() { return getToken(DRDSSQLStatementParser.PERIOD, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public OldVariableRefExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOldVariableRefExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PropertyIdentifier2Context extends ExprContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(DRDSSQLStatementParser.PERIOD, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public PropertyIdentifier2Context(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPropertyIdentifier2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MethodInvocation1Context extends ExprContext {
		public ExprContext expr;
		public List<ExprContext> arguments = new ArrayList<ExprContext>();
		public NoArgumentFunctionNameContext noArgumentFunctionName() {
			return getRuleContext(NoArgumentFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public MethodInvocation1Context(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMethodInvocation1(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BasicExprContext extends ExprContext {
		public ExprBasicContext exprBasic() {
			return getRuleContext(ExprBasicContext.class,0);
		}
		public BasicExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBasicExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MethodInvocation2Context extends ExprContext {
		public ExprContext name;
		public ExprContext expr;
		public List<ExprContext> arguments = new ArrayList<ExprContext>();
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public MethodInvocation2Context(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMethodInvocation2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenConditionContext extends ExprContext {
		public ExprContext name;
		public ExprContext between;
		public ExprContext and;
		public TerminalNode BETWEEN() { return getToken(DRDSSQLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DRDSSQLStatementParser.AND, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public BetweenConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBetweenCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CursorExprContext extends ExprContext {
		public TerminalNode CURSOR() { return getToken(DRDSSQLStatementParser.CURSOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CursorExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCursorExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AnyExprContext extends ExprContext {
		public TerminalNode ANY() { return getToken(DRDSSQLStatementParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public AnyExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAnyExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ComparisonBinaryOperatorExprContext extends ExprContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public ComparisonOpContext comparisonOp() {
			return getRuleContext(ComparisonOpContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public ComparisonBinaryOperatorExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitComparisonBinaryOperatorExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprToExprExprContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TO() { return getToken(DRDSSQLStatementParser.TO, 0); }
		public ExprToExprExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitExprToExprExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsBooleanLiteralConditionContext extends ExprContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode IS() { return getToken(DRDSSQLStatementParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(DRDSSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DRDSSQLStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(DRDSSQLStatementParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public IsBooleanLiteralConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIsBooleanLiteralCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 624;
		enterRecursionRule(_localctx, 624, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
			case 1:
				{
				_localctx = new CursorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6044);
				match(CURSOR);
				setState(6045);
				match(LEFT_PAREN);
				setState(6046);
				iSelectQuery();
				setState(6047);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new AnyExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6049);
				match(ANY);
				setState(6050);
				match(LEFT_PAREN);
				setState(6051);
				expr(0);
				setState(6052);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new AllExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6054);
				match(ALL);
				setState(6055);
				match(LEFT_PAREN);
				setState(6056);
				expr(0);
				setState(6057);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new SomeExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6059);
				match(SOME);
				setState(6060);
				match(LEFT_PAREN);
				setState(6061);
				expr(0);
				setState(6062);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				{
				_localctx = new NewVariableRefExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6064);
				match(NEW);
				setState(6065);
				match(PERIOD);
				setState(6066);
				nameIdentifier();
				}
				break;
			case 6:
				{
				_localctx = new OldVariableRefExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6067);
				match(OLD);
				setState(6068);
				match(PERIOD);
				setState(6069);
				nameIdentifier();
				}
				break;
			case 7:
				{
				_localctx = new MethodInvocation1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6070);
				noArgumentFunctionName();
				setState(6083);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(6071);
					match(LEFT_PAREN);
					setState(6080);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
						{
						setState(6072);
						((MethodInvocation1Context)_localctx).expr = expr(0);
						((MethodInvocation1Context)_localctx).arguments.add(((MethodInvocation1Context)_localctx).expr);
						setState(6077);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6073);
							match(COMMA);
							setState(6074);
							((MethodInvocation1Context)_localctx).expr = expr(0);
							((MethodInvocation1Context)_localctx).arguments.add(((MethodInvocation1Context)_localctx).expr);
							}
							}
							setState(6079);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(6082);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6085);
				match(LEFT_PAREN);
				setState(6086);
				expr(0);
				setState(6087);
				((BinaryOperatorExprContext)_localctx).operator = match(BIT_XOR_OP);
				setState(6088);
				expr(0);
				setState(6089);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6091);
				match(LEFT_PAREN);
				setState(6092);
				expr(0);
				setState(6093);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DIV || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MOD - 650)) | (1L << (ASTERISK - 650)) | (1L << (DIVIDE - 650)) | (1L << (PERCENT - 650)))) != 0)) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6094);
				expr(0);
				setState(6095);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6097);
				match(LEFT_PAREN);
				setState(6098);
				expr(0);
				setState(6099);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6100);
				expr(0);
				setState(6101);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6103);
				match(LEFT_PAREN);
				setState(6104);
				expr(0);
				setState(6105);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6106);
				expr(0);
				setState(6107);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6109);
				match(LEFT_PAREN);
				setState(6110);
				expr(0);
				setState(6111);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LESS_THAN_LESS_THAN_OP || _la==GREATER_THAN_GREATER_THAN_OP) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6112);
				expr(0);
				setState(6113);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6115);
				match(LEFT_PAREN);
				setState(6116);
				expr(0);
				setState(6117);
				((BinaryOperatorExprContext)_localctx).operator = match(BIT_AND_OP);
				setState(6118);
				expr(0);
				setState(6119);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6121);
				match(LEFT_PAREN);
				setState(6122);
				expr(0);
				setState(6123);
				((BinaryOperatorExprContext)_localctx).operator = match(BIT_OR_OP);
				setState(6124);
				expr(0);
				setState(6125);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				{
				_localctx = new ComparisonBinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6127);
				match(LEFT_PAREN);
				setState(6128);
				expr(0);
				setState(6129);
				comparisonOp();
				setState(6130);
				expr(0);
				setState(6131);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				{
				_localctx = new IConditionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6133);
				condition();
				}
				break;
			case 17:
				{
				_localctx = new BasicExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6134);
				exprBasic();
				}
				break;
			case 18:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6135);
				match(LEFT_PAREN);
				setState(6136);
				expr(0);
				setState(6137);
				((BinaryOperatorExprContext)_localctx).operator = match(COLLATE);
				setState(6138);
				expr(0);
				setState(6139);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6141);
				match(LEFT_PAREN);
				setState(6142);
				expr(0);
				setState(6143);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==AND || _la==LOGIC_AND_OP) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6144);
				expr(0);
				setState(6145);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6147);
				match(LEFT_PAREN);
				setState(6148);
				expr(0);
				setState(6149);
				((BinaryOperatorExprContext)_localctx).operator = match(XOR);
				setState(6150);
				expr(0);
				setState(6151);
				match(RIGHT_PAREN);
				}
				break;
			case 21:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6153);
				match(LEFT_PAREN);
				setState(6154);
				expr(0);
				setState(6155);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OR || _la==LOGIC_OR_OP) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6156);
				expr(0);
				setState(6157);
				match(RIGHT_PAREN);
				}
				break;
			case 22:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6159);
				match(LEFT_PAREN);
				setState(6160);
				expr(0);
				setState(6161);
				((BinaryOperatorExprContext)_localctx).operator = match(ASSIGN_OP);
				setState(6162);
				expr(0);
				setState(6163);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6291);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6289);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
					case 1:
						{
						_localctx = new ExprToExprExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6167);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(6168);
						match(TO);
						setState(6169);
						expr(38);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6170);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(6171);
						((BinaryOperatorExprContext)_localctx).operator = match(BIT_XOR_OP);
						setState(6172);
						expr(29);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6173);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(6174);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DIV || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (MOD - 650)) | (1L << (ASTERISK - 650)) | (1L << (DIVIDE - 650)) | (1L << (PERCENT - 650)))) != 0)) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6175);
						expr(28);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6176);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(6177);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6178);
						expr(27);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6179);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(6180);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LESS_THAN_LESS_THAN_OP || _la==GREATER_THAN_GREATER_THAN_OP) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6181);
						expr(26);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6182);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(6183);
						((BinaryOperatorExprContext)_localctx).operator = match(BIT_AND_OP);
						setState(6184);
						expr(25);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6185);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(6186);
						((BinaryOperatorExprContext)_localctx).operator = match(BIT_OR_OP);
						setState(6187);
						expr(24);
						}
						break;
					case 8:
						{
						_localctx = new ComparisonBinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6188);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(6189);
						comparisonOp();
						setState(6190);
						expr(23);
						}
						break;
					case 9:
						{
						_localctx = new SoundsLikeConditionContext(new ExprContext(_parentctx, _parentState));
						((SoundsLikeConditionContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6192);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(6193);
						match(SOUNDS);
						setState(6194);
						match(LIKE);
						setState(6195);
						((SoundsLikeConditionContext)_localctx).pattern = expr(20);
						}
						break;
					case 10:
						{
						_localctx = new RlikeConditionContext(new ExprContext(_parentctx, _parentState));
						((RlikeConditionContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6196);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(6198);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6197);
							match(NOT);
							}
						}

						setState(6200);
						((RlikeConditionContext)_localctx).operator = match(RLIKE);
						setState(6201);
						((RlikeConditionContext)_localctx).pattern = expr(18);
						}
						break;
					case 11:
						{
						_localctx = new RegexpConditionContext(new ExprContext(_parentctx, _parentState));
						((RegexpConditionContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6202);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(6204);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6203);
							match(NOT);
							}
						}

						setState(6206);
						match(REGEXP);
						setState(6207);
						((RegexpConditionContext)_localctx).pattern = expr(17);
						}
						break;
					case 12:
						{
						_localctx = new BetweenConditionContext(new ExprContext(_parentctx, _parentState));
						((BetweenConditionContext)_localctx).name = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6208);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(6210);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6209);
							match(NOT);
							}
						}

						setState(6212);
						match(BETWEEN);
						setState(6213);
						((BetweenConditionContext)_localctx).between = expr(0);
						setState(6214);
						match(AND);
						setState(6215);
						((BetweenConditionContext)_localctx).and = expr(15);
						}
						break;
					case 13:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6217);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6218);
						((BinaryOperatorExprContext)_localctx).operator = match(COLLATE);
						setState(6219);
						expr(10);
						}
						break;
					case 14:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6220);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6221);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==LOGIC_AND_OP) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6222);
						expr(5);
						}
						break;
					case 15:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6223);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6224);
						((BinaryOperatorExprContext)_localctx).operator = match(XOR);
						setState(6225);
						expr(4);
						}
						break;
					case 16:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6226);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6227);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==OR || _la==LOGIC_OR_OP) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6228);
						expr(3);
						}
						break;
					case 17:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6229);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6230);
						((BinaryOperatorExprContext)_localctx).operator = match(ASSIGN_OP);
						setState(6231);
						expr(2);
						}
						break;
					case 18:
						{
						_localctx = new MethodInvocation2Context(new ExprContext(_parentctx, _parentState));
						((MethodInvocation2Context)_localctx).name = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6232);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(6233);
						match(LEFT_PAREN);
						setState(6245);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << DISTINCT) | (1L << DISTINCTROW) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
							{
							setState(6235);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
							case 1:
								{
								setState(6234);
								setQuantifier();
								}
								break;
							}
							setState(6237);
							((MethodInvocation2Context)_localctx).expr = expr(0);
							((MethodInvocation2Context)_localctx).arguments.add(((MethodInvocation2Context)_localctx).expr);
							setState(6242);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(6238);
								match(COMMA);
								setState(6239);
								((MethodInvocation2Context)_localctx).expr = expr(0);
								((MethodInvocation2Context)_localctx).arguments.add(((MethodInvocation2Context)_localctx).expr);
								}
								}
								setState(6244);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
						}

						setState(6247);
						match(RIGHT_PAREN);
						}
						break;
					case 19:
						{
						_localctx = new IsBooleanLiteralConditionContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6248);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(6249);
						match(IS);
						setState(6251);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6250);
							match(NOT);
							}
						}

						setState(6253);
						_la = _input.LA(1);
						if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 20:
						{
						_localctx = new InConditionContext(new ExprContext(_parentctx, _parentState));
						((InConditionContext)_localctx).name = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6254);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(6256);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6255);
							match(NOT);
							}
						}

						setState(6258);
						match(IN);
						setState(6259);
						match(LEFT_PAREN);
						setState(6260);
						((InConditionContext)_localctx).expr = expr(0);
						((InConditionContext)_localctx).values.add(((InConditionContext)_localctx).expr);
						setState(6265);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6261);
							match(COMMA);
							setState(6262);
							((InConditionContext)_localctx).expr = expr(0);
							((InConditionContext)_localctx).values.add(((InConditionContext)_localctx).expr);
							}
							}
							setState(6267);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6268);
						match(RIGHT_PAREN);
						}
						break;
					case 21:
						{
						_localctx = new LikeConditionContext(new ExprContext(_parentctx, _parentState));
						((LikeConditionContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6270);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(6272);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6271);
							match(NOT);
							}
						}

						setState(6274);
						((LikeConditionContext)_localctx).operator = match(LIKE);
						setState(6275);
						((LikeConditionContext)_localctx).pattern = expr(0);
						setState(6278);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
						case 1:
							{
							setState(6276);
							match(ESCAPE);
							setState(6277);
							((LikeConditionContext)_localctx).escape = expr(0);
							}
							break;
						}
						}
						break;
					case 22:
						{
						_localctx = new IsNullConditionContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6280);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(6281);
						match(IS);
						setState(6283);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6282);
							match(NOT);
							}
						}

						setState(6285);
						match(NULL_LITERAL);
						}
						break;
					case 23:
						{
						_localctx = new PropertyIdentifier2Context(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6286);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(6287);
						match(PERIOD);
						setState(6288);
						nameIdentifier();
						}
						break;
					}
					} 
				}
				setState(6293);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ComparisonOpContext extends ParserRuleContext {
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP() { return getToken(DRDSSQLStatementParser.LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP, 0); }
		public TerminalNode NOT_EQUAL_OP() { return getToken(DRDSSQLStatementParser.NOT_EQUAL_OP, 0); }
		public TerminalNode EXCLAMATION_OP() { return getToken(DRDSSQLStatementParser.EXCLAMATION_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(DRDSSQLStatementParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(DRDSSQLStatementParser.GREATER_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(DRDSSQLStatementParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(DRDSSQLStatementParser.LESS_THAN_OR_EQUALS_OP, 0); }
		public ComparisonOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitComparisonOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOpContext comparisonOp() throws RecognitionException {
		ComparisonOpContext _localctx = new ComparisonOpContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_comparisonOp);
		try {
			setState(6309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6294);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6295);
				match(LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6296);
				match(NOT_EQUAL_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6297);
				match(EXCLAMATION_OP);
				setState(6298);
				match(EQUALS_OP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6299);
				match(LESS_THAN_OP);
				setState(6300);
				match(GREATER_THAN_OP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6301);
				match(GREATER_THAN_OP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6302);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6303);
				match(GREATER_THAN_OP);
				setState(6304);
				match(EQUALS_OP);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6305);
				match(LESS_THAN_OP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6306);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6307);
				match(LESS_THAN_OP);
				setState(6308);
				match(EQUALS_OP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDefaultClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseContext defaultClause() throws RecognitionException {
		DefaultClauseContext _localctx = new DefaultClauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_defaultClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6311);
			match(DEFAULT);
			setState(6312);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AutoIncrementOptionExprContext extends ParserRuleContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(DRDSSQLStatementParser.AUTO_INCREMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public AutoIncrementOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_autoIncrementOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAutoIncrementOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutoIncrementOptionExprContext autoIncrementOptionExpr() throws RecognitionException {
		AutoIncrementOptionExprContext _localctx = new AutoIncrementOptionExprContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_autoIncrementOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6314);
			match(AUTO_INCREMENT);
			setState(6316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6315);
				match(EQUALS_OP);
				}
			}

			setState(6318);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AvgRowLengthOptionExprContext extends ParserRuleContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(DRDSSQLStatementParser.AVG_ROW_LENGTH, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public AvgRowLengthOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_avgRowLengthOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAvgRowLengthOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AvgRowLengthOptionExprContext avgRowLengthOptionExpr() throws RecognitionException {
		AvgRowLengthOptionExprContext _localctx = new AvgRowLengthOptionExprContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_avgRowLengthOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6320);
			match(AVG_ROW_LENGTH);
			setState(6322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6321);
				match(EQUALS_OP);
				}
			}

			setState(6324);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSetOptionExprContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(DRDSSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DRDSSQLStatementParser.SET, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public CharacterSetOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSetOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCharacterSetOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetOptionExprContext characterSetOptionExpr() throws RecognitionException {
		CharacterSetOptionExprContext _localctx = new CharacterSetOptionExprContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_characterSetOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(6326);
				match(DEFAULT);
				}
			}

			setState(6329);
			match(CHARACTER);
			setState(6330);
			match(SET);
			setState(6332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6331);
				match(EQUALS_OP);
				}
			}

			setState(6334);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetOptionExprContext extends ParserRuleContext {
		public TerminalNode CHARSET() { return getToken(DRDSSQLStatementParser.CHARSET, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public CharsetOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCharsetOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetOptionExprContext charsetOptionExpr() throws RecognitionException {
		CharsetOptionExprContext _localctx = new CharsetOptionExprContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_charsetOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(6336);
				match(DEFAULT);
				}
			}

			setState(6339);
			match(CHARSET);
			setState(6341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6340);
				match(EQUALS_OP);
				}
			}

			setState(6343);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumOptionExprContext extends ParserRuleContext {
		public TerminalNode CHECKSUM() { return getToken(DRDSSQLStatementParser.CHECKSUM, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ChecksumOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitChecksumOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumOptionExprContext checksumOptionExpr() throws RecognitionException {
		ChecksumOptionExprContext _localctx = new ChecksumOptionExprContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_checksumOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6345);
			match(CHECKSUM);
			setState(6347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6346);
				match(EQUALS_OP);
				}
			}

			setState(6349);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateOptionExprContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(DRDSSQLStatementParser.COLLATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public CollateOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCollateOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateOptionExprContext collateOptionExpr() throws RecognitionException {
		CollateOptionExprContext _localctx = new CollateOptionExprContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_collateOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(6351);
				match(DEFAULT);
				}
			}

			setState(6354);
			match(COLLATE);
			setState(6356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6355);
				match(EQUALS_OP);
				}
			}

			setState(6358);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentOptionExprContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(DRDSSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public CommentOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCommentOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentOptionExprContext commentOptionExpr() throws RecognitionException {
		CommentOptionExprContext _localctx = new CommentOptionExprContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_commentOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6360);
			match(COMMENT);
			setState(6362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6361);
				match(EQUALS_OP);
				}
			}

			setState(6364);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompressionOptionExprContext extends ParserRuleContext {
		public TerminalNode COMPRESSION() { return getToken(DRDSSQLStatementParser.COMPRESSION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public CompressionOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressionOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCompressionOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressionOptionExprContext compressionOptionExpr() throws RecognitionException {
		CompressionOptionExprContext _localctx = new CompressionOptionExprContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_compressionOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6366);
			match(COMPRESSION);
			setState(6368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6367);
				match(EQUALS_OP);
				}
			}

			setState(6370);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionExprContext extends ParserRuleContext {
		public TerminalNode CONNECTION() { return getToken(DRDSSQLStatementParser.CONNECTION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public ConnectionOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitConnectionOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionExprContext connectionOptionExpr() throws RecognitionException {
		ConnectionOptionExprContext _localctx = new ConnectionOptionExprContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_connectionOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6372);
			match(CONNECTION);
			setState(6374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6373);
				match(EQUALS_OP);
				}
			}

			setState(6376);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataDirectoryOptionExprContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(DRDSSQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(DRDSSQLStatementParser.DIRECTORY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public DataDirectoryOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataDirectoryOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDataDirectoryOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataDirectoryOptionExprContext dataDirectoryOptionExpr() throws RecognitionException {
		DataDirectoryOptionExprContext _localctx = new DataDirectoryOptionExprContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_dataDirectoryOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6378);
			match(DATA);
			setState(6379);
			match(DIRECTORY);
			setState(6381);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6380);
				match(EQUALS_OP);
				}
			}

			setState(6383);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexDirectoryOptionExprContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(DRDSSQLStatementParser.DIRECTORY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public IndexDirectoryOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexDirectoryOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexDirectoryOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexDirectoryOptionExprContext indexDirectoryOptionExpr() throws RecognitionException {
		IndexDirectoryOptionExprContext _localctx = new IndexDirectoryOptionExprContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_indexDirectoryOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6385);
			match(INDEX);
			setState(6386);
			match(DIRECTORY);
			setState(6388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6387);
				match(EQUALS_OP);
				}
			}

			setState(6390);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DelayKeyWriteOptionExprContext extends ParserRuleContext {
		public TerminalNode DELAY_KEY_WRITE() { return getToken(DRDSSQLStatementParser.DELAY_KEY_WRITE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public DelayKeyWriteOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayKeyWriteOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDelayKeyWriteOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DelayKeyWriteOptionExprContext delayKeyWriteOptionExpr() throws RecognitionException {
		DelayKeyWriteOptionExprContext _localctx = new DelayKeyWriteOptionExprContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_delayKeyWriteOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6392);
			match(DELAY_KEY_WRITE);
			setState(6394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6393);
				match(EQUALS_OP);
				}
			}

			setState(6396);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncryptionOptionExprContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(DRDSSQLStatementParser.ENCRYPTION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public EncryptionOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryptionOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitEncryptionOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncryptionOptionExprContext encryptionOptionExpr() throws RecognitionException {
		EncryptionOptionExprContext _localctx = new EncryptionOptionExprContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_encryptionOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6398);
			match(ENCRYPTION);
			setState(6400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6399);
				match(EQUALS_OP);
				}
			}

			setState(6402);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineOptionExprContext extends ParserRuleContext {
		public TerminalNode ENGINE() { return getToken(DRDSSQLStatementParser.ENGINE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public EngineOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitEngineOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineOptionExprContext engineOptionExpr() throws RecognitionException {
		EngineOptionExprContext _localctx = new EngineOptionExprContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_engineOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6404);
			match(ENGINE);
			setState(6406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6405);
				match(EQUALS_OP);
				}
			}

			setState(6408);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertMethodOptionExprContext extends ParserRuleContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(DRDSSQLStatementParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(DRDSSQLStatementParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(DRDSSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DRDSSQLStatementParser.LAST, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public InsertMethodOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertMethodOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitInsertMethodOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertMethodOptionExprContext insertMethodOptionExpr() throws RecognitionException {
		InsertMethodOptionExprContext _localctx = new InsertMethodOptionExprContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_insertMethodOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6410);
			match(INSERT_METHOD);
			setState(6412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6411);
				match(EQUALS_OP);
				}
			}

			setState(6414);
			((InsertMethodOptionExprContext)_localctx).insertMethod = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
				((InsertMethodOptionExprContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyBlockSizeOptionExprContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(DRDSSQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public KeyBlockSizeOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyBlockSizeOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitKeyBlockSizeOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyBlockSizeOptionExprContext keyBlockSizeOptionExpr() throws RecognitionException {
		KeyBlockSizeOptionExprContext _localctx = new KeyBlockSizeOptionExprContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_keyBlockSizeOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6416);
			match(KEY_BLOCK_SIZE);
			setState(6418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6417);
				match(EQUALS_OP);
				}
			}

			setState(6420);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaxRowsOptionExprContext extends ParserRuleContext {
		public TerminalNode MAX_ROWS() { return getToken(DRDSSQLStatementParser.MAX_ROWS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public MaxRowsOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxRowsOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMaxRowsOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaxRowsOptionExprContext maxRowsOptionExpr() throws RecognitionException {
		MaxRowsOptionExprContext _localctx = new MaxRowsOptionExprContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_maxRowsOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6422);
			match(MAX_ROWS);
			setState(6424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6423);
				match(EQUALS_OP);
				}
			}

			setState(6426);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MinRowsOptionExprContext extends ParserRuleContext {
		public TerminalNode MIN_ROWS() { return getToken(DRDSSQLStatementParser.MIN_ROWS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public MinRowsOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_minRowsOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMinRowsOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MinRowsOptionExprContext minRowsOptionExpr() throws RecognitionException {
		MinRowsOptionExprContext _localctx = new MinRowsOptionExprContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_minRowsOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6428);
			match(MIN_ROWS);
			setState(6430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6429);
				match(EQUALS_OP);
				}
			}

			setState(6432);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackKeysOptionExprContext extends ParserRuleContext {
		public TerminalNode PACK_KEYS() { return getToken(DRDSSQLStatementParser.PACK_KEYS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public PackKeysOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packKeysOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPackKeysOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackKeysOptionExprContext packKeysOptionExpr() throws RecognitionException {
		PackKeysOptionExprContext _localctx = new PackKeysOptionExprContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_packKeysOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6434);
			match(PACK_KEYS);
			setState(6436);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6435);
				match(EQUALS_OP);
				}
			}

			setState(6438);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordOptionExprContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(DRDSSQLStatementParser.PASSWORD, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public PasswordOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPasswordOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordOptionExprContext passwordOptionExpr() throws RecognitionException {
		PasswordOptionExprContext _localctx = new PasswordOptionExprContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_passwordOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6440);
			match(PASSWORD);
			setState(6442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6441);
				match(EQUALS_OP);
				}
			}

			setState(6444);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowFormatOptionExprContext extends ParserRuleContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(DRDSSQLStatementParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(DRDSSQLStatementParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(DRDSSQLStatementParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(DRDSSQLStatementParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(DRDSSQLStatementParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(DRDSSQLStatementParser.COMPACT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public RowFormatOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormatOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitRowFormatOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowFormatOptionExprContext rowFormatOptionExpr() throws RecognitionException {
		RowFormatOptionExprContext _localctx = new RowFormatOptionExprContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_rowFormatOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6446);
			match(ROW_FORMAT);
			setState(6448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6447);
				match(EQUALS_OP);
				}
			}

			setState(6450);
			((RowFormatOptionExprContext)_localctx).rowFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (COMPACT - 284)) | (1L << (COMPRESSED - 284)) | (1L << (DYNAMIC - 284)) | (1L << (FIXED - 284)))) != 0) || _la==REDUNDANT) ) {
				((RowFormatOptionExprContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatsAutoRecalcOptionExprContext extends ParserRuleContext {
		public TerminalNode STATS_AUTO_RECALC() { return getToken(DRDSSQLStatementParser.STATS_AUTO_RECALC, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public StatsAutoRecalcOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statsAutoRecalcOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStatsAutoRecalcOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatsAutoRecalcOptionExprContext statsAutoRecalcOptionExpr() throws RecognitionException {
		StatsAutoRecalcOptionExprContext _localctx = new StatsAutoRecalcOptionExprContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_statsAutoRecalcOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6452);
			match(STATS_AUTO_RECALC);
			setState(6454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6453);
				match(EQUALS_OP);
				}
			}

			setState(6456);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatsPersistentOptionExprContext extends ParserRuleContext {
		public TerminalNode STATS_PERSISTENT() { return getToken(DRDSSQLStatementParser.STATS_PERSISTENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public StatsPersistentOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statsPersistentOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStatsPersistentOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatsPersistentOptionExprContext statsPersistentOptionExpr() throws RecognitionException {
		StatsPersistentOptionExprContext _localctx = new StatsPersistentOptionExprContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_statsPersistentOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6458);
			match(STATS_PERSISTENT);
			setState(6460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6459);
				match(EQUALS_OP);
				}
			}

			setState(6462);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatsSamplePageOptionExprContext extends ParserRuleContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(DRDSSQLStatementParser.STATS_SAMPLE_PAGES, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public StatsSamplePageOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statsSamplePageOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitStatsSamplePageOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatsSamplePageOptionExprContext statsSamplePageOptionExpr() throws RecognitionException {
		StatsSamplePageOptionExprContext _localctx = new StatsSamplePageOptionExprContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_statsSamplePageOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6464);
			match(STATS_SAMPLE_PAGES);
			setState(6466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6465);
				match(EQUALS_OP);
				}
			}

			setState(6468);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionExprContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(DRDSSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(DRDSSQLStatementParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(DRDSSQLStatementParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(DRDSSQLStatementParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public TablespaceOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTablespaceOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceOptionExprContext tablespaceOptionExpr() throws RecognitionException {
		TablespaceOptionExprContext _localctx = new TablespaceOptionExprContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_tablespaceOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6470);
			match(TABLESPACE);
			setState(6471);
			nameIdentifier();
			setState(6474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				{
				setState(6472);
				match(STORAGE);
				setState(6473);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionOptionExprContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(DRDSSQLStatementParser.UNION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public UnionOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitUnionOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionOptionExprContext unionOptionExpr() throws RecognitionException {
		UnionOptionExprContext _localctx = new UnionOptionExprContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_unionOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6476);
			match(UNION);
			setState(6478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6477);
				match(EQUALS_OP);
				}
			}

			setState(6480);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BroadcastExprContext extends ParserRuleContext {
		public TerminalNode BROADCAST() { return getToken(DRDSSQLStatementParser.BROADCAST, 0); }
		public BroadcastExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_broadcastExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitBroadcastExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BroadcastExprContext broadcastExpr() throws RecognitionException {
		BroadcastExprContext _localctx = new BroadcastExprContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_broadcastExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6482);
			match(BROADCAST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentExprContext extends ParserRuleContext {
		public ExprContext name;
		public ExprContext value;
		public TerminalNode EQUALS_OP() { return getToken(DRDSSQLStatementParser.EQUALS_OP, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public AssignmentExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAssignmentExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentExprContext assignmentExpr() throws RecognitionException {
		AssignmentExprContext _localctx = new AssignmentExprContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_assignmentExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6484);
			((AssignmentExprContext)_localctx).name = expr(0);
			setState(6485);
			match(EQUALS_OP);
			setState(6486);
			((AssignmentExprContext)_localctx).value = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultLiteralContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public DefaultLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDefaultLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultLiteralContext defaultLiteral() throws RecognitionException {
		DefaultLiteralContext _localctx = new DefaultLiteralContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_defaultLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6488);
			match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllLiteralContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DRDSSQLStatementParser.ALL, 0); }
		public AllLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAllLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllLiteralContext allLiteral() throws RecognitionException {
		AllLiteralContext _localctx = new AllLiteralContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_allLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6490);
			match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoneLiteralContext extends ParserRuleContext {
		public TerminalNode NONE() { return getToken(DRDSSQLStatementParser.NONE, 0); }
		public NoneLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noneLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNoneLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoneLiteralContext noneLiteral() throws RecognitionException {
		NoneLiteralContext _localctx = new NoneLiteralContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_noneLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6492);
			match(NONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaxValueLiteralContext extends ParserRuleContext {
		public TerminalNode MAXVALUE() { return getToken(DRDSSQLStatementParser.MAXVALUE, 0); }
		public MaxValueLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxValueLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitMaxValueLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaxValueLiteralContext maxValueLiteral() throws RecognitionException {
		MaxValueLiteralContext _localctx = new MaxValueLiteralContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_maxValueLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6494);
			match(MAXVALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public NotConditionContext notCondition() {
			return getRuleContext(NotConditionContext.class,0);
		}
		public ExistsConditionContext existsCondition() {
			return getRuleContext(ExistsConditionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_condition);
		try {
			setState(6498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6496);
				notCondition();
				}
				break;
			case EXISTS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6497);
				existsCondition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotConditionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public NotConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notCondition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNotCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotConditionContext notCondition() throws RecognitionException {
		NotConditionContext _localctx = new NotConditionContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_notCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6500);
			match(NOT);
			setState(6501);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FormatJsonContext extends ParserRuleContext {
		public TerminalNode FORMAT() { return getToken(DRDSSQLStatementParser.FORMAT, 0); }
		public TerminalNode JSON() { return getToken(DRDSSQLStatementParser.JSON, 0); }
		public FormatJsonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_formatJson; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFormatJson(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FormatJsonContext formatJson() throws RecognitionException {
		FormatJsonContext _localctx = new FormatJsonContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_formatJson);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6503);
			match(FORMAT);
			setState(6504);
			match(JSON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprAsObjectExprContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public ExprAsObjectExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprAsObjectExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitExprAsObjectExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprAsObjectExprContext exprAsObjectExpr() throws RecognitionException {
		ExprAsObjectExprContext _localctx = new ExprAsObjectExprContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_exprAsObjectExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6506);
			expr(0);
			setState(6508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6507);
				match(AS);
				}
			}

			setState(6512);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
			case 1:
				{
				setState(6510);
				expr(0);
				}
				break;
			case 2:
				{
				setState(6511);
				dataType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistsConditionContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(DRDSSQLStatementParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public ExistsConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existsCondition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitExistsCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistsConditionContext existsCondition() throws RecognitionException {
		ExistsConditionContext _localctx = new ExistsConditionContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_existsCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6514);
			match(EXISTS);
			setState(6515);
			match(LEFT_PAREN);
			setState(6516);
			iSelectQuery();
			setState(6517);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public ExprContext inString;
		public ExprContext inexpr;
		public TerminalNode POSITION() { return getToken(DRDSSQLStatementParser.POSITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CastFunctionContext extends SpecificFunctionContext {
		public TerminalNode CAST() { return getToken(DRDSSQLStatementParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public CastFunctionContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public TerminalNode TRIM() { return getToken(DRDSSQLStatementParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode BOTH() { return getToken(DRDSSQLStatementParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(DRDSSQLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(DRDSSQLStatementParser.TRAILING, 0); }
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(DRDSSQLStatementParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(DRDSSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.LEFT_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(DRDSSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(DRDSSQLStatementParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(DRDSSQLStatementParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(DRDSSQLStatementParser.GET_FORMAT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode DATE() { return getToken(DRDSSQLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DRDSSQLStatementParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(DRDSSQLStatementParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(DRDSSQLStatementParser.CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public CharFunctionContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCharFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(DRDSSQLStatementParser.CONVERT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(DRDSSQLStatementParser.VALUES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTR() { return getToken(DRDSSQLStatementParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(DRDSSQLStatementParser.SUBSTRING, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_specificFunction);
		int _la;
		try {
			setState(6622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
			case 1:
				_localctx = new CastFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6519);
				match(CAST);
				setState(6520);
				match(LEFT_PAREN);
				setState(6521);
				expr(0);
				setState(6522);
				match(AS);
				setState(6523);
				dataType();
				setState(6524);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new CharFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6526);
				match(CHAR);
				setState(6527);
				match(LEFT_PAREN);
				setState(6528);
				expr(0);
				setState(6533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6529);
					match(COMMA);
					setState(6530);
					expr(0);
					}
					}
					setState(6535);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6536);
					match(USING);
					setState(6537);
					expr(0);
					}
				}

				setState(6540);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6542);
				match(CONVERT);
				setState(6543);
				match(LEFT_PAREN);
				setState(6544);
				expr(0);
				setState(6545);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(6546);
				convertedDataType();
				setState(6547);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6549);
				match(CONVERT);
				setState(6550);
				match(LEFT_PAREN);
				setState(6551);
				expr(0);
				setState(6552);
				match(USING);
				setState(6553);
				expr(0);
				setState(6554);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6556);
				match(VALUES);
				setState(6557);
				match(LEFT_PAREN);
				setState(6558);
				expr(0);
				setState(6559);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6561);
				match(POSITION);
				setState(6562);
				match(LEFT_PAREN);
				setState(6563);
				expr(0);
				setState(6564);
				match(IN);
				setState(6567);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
				case 1:
					{
					setState(6565);
					((PositionFunctionCallContext)_localctx).inString = expr(0);
					}
					break;
				case 2:
					{
					setState(6566);
					((PositionFunctionCallContext)_localctx).inexpr = expr(0);
					}
					break;
				}
				setState(6569);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6571);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6572);
				match(LEFT_PAREN);
				setState(6573);
				expr(0);
				setState(6574);
				match(FROM);
				setState(6575);
				expr(0);
				setState(6578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6576);
					match(FOR);
					setState(6577);
					expr(0);
					}
				}

				setState(6580);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6582);
				match(TRIM);
				setState(6583);
				match(LEFT_PAREN);
				setState(6584);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
					{
					setState(6585);
					expr(0);
					}
				}

				setState(6588);
				match(FROM);
				setState(6589);
				expr(0);
				setState(6590);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6592);
				match(TRIM);
				setState(6593);
				match(LEFT_PAREN);
				setState(6594);
				expr(0);
				setState(6595);
				match(FROM);
				setState(6596);
				expr(0);
				setState(6597);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6599);
				match(WEIGHT_STRING);
				setState(6600);
				match(LEFT_PAREN);
				setState(6601);
				expr(0);
				setState(6608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6602);
					match(AS);
					setState(6603);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6604);
					match(LEFT_PAREN);
					setState(6605);
					expr(0);
					setState(6606);
					match(RIGHT_PAREN);
					}
				}

				setState(6611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6610);
					levelsInWeightString();
					}
				}

				setState(6613);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6615);
				match(GET_FORMAT);
				setState(6616);
				match(LEFT_PAREN);
				setState(6617);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (DATE - 202)) | (1L << (TIME - 202)) | (1L << (DATETIME - 202)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6618);
				match(COMMA);
				setState(6619);
				expr(0);
				setState(6620);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionContext extends ParserRuleContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public ExtractFunctionContext extractFunction() {
			return getRuleContext(ExtractFunctionContext.class,0);
		}
		public TreatFunctionContext treatFunction() {
			return getRuleContext(TreatFunctionContext.class,0);
		}
		public ConvertUsingFunctionContext convertUsingFunction() {
			return getRuleContext(ConvertUsingFunctionContext.class,0);
		}
		public JsonFunctionContext jsonFunction() {
			return getRuleContext(JsonFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public FirstFunctionContext firstFunction() {
			return getRuleContext(FirstFunctionContext.class,0);
		}
		public LastFunctionContext lastFunction() {
			return getRuleContext(LastFunctionContext.class,0);
		}
		public ListAggFunctionContext listAggFunction() {
			return getRuleContext(ListAggFunctionContext.class,0);
		}
		public CubeTableFunctionContext cubeTableFunction() {
			return getRuleContext(CubeTableFunctionContext.class,0);
		}
		public WindowFunctionContext windowFunction() {
			return getRuleContext(WindowFunctionContext.class,0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionContext function() throws RecognitionException {
		FunctionContext _localctx = new FunctionContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_function);
		try {
			setState(6636);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6624);
				specificFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6625);
				trimFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6626);
				extractFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6627);
				treatFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6628);
				convertUsingFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6629);
				jsonFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6630);
				aggregateFunction();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6631);
				firstFunction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6632);
				lastFunction();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6633);
				listAggFunction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6634);
				cubeTableFunction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6635);
				windowFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoArgumentFunctionNameContext extends ParserRuleContext {
		public TerminalNode CURRENT_DATE() { return getToken(DRDSSQLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DRDSSQLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DRDSSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DRDSSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(DRDSSQLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DRDSSQLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode UTC_DATE() { return getToken(DRDSSQLStatementParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(DRDSSQLStatementParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(DRDSSQLStatementParser.UTC_TIMESTAMP, 0); }
		public NoArgumentFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noArgumentFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitNoArgumentFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoArgumentFunctionNameContext noArgumentFunctionName() throws RecognitionException {
		NoArgumentFunctionNameContext _localctx = new NoArgumentFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_noArgumentFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6638);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (CURRENT_DATE - 236)) | (1L << (CURRENT_TIME - 236)) | (1L << (CURRENT_TIMESTAMP - 236)) | (1L << (LOCALTIME - 236)) | (1L << (LOCALTIMESTAMP - 236)) | (1L << (UTC_DATE - 236)) | (1L << (UTC_TIME - 236)) | (1L << (UTC_TIMESTAMP - 236)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionFunctionContext extends ParserRuleContext {
		public TerminalNode POSITION() { return getToken(DRDSSQLStatementParser.POSITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(DRDSSQLStatementParser.IN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public PositionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPositionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionFunctionContext positionFunction() throws RecognitionException {
		PositionFunctionContext _localctx = new PositionFunctionContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_positionFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6640);
			match(POSITION);
			setState(6641);
			match(LEFT_PAREN);
			setState(6642);
			expr(0);
			setState(6643);
			match(IN);
			setState(6644);
			expr(0);
			setState(6645);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubStrFromFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTR() { return getToken(DRDSSQLStatementParser.SUBSTR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public SubStrFromFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subStrFromFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSubStrFromFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubStrFromFunctionContext subStrFromFunction() throws RecognitionException {
		SubStrFromFunctionContext _localctx = new SubStrFromFunctionContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_subStrFromFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6647);
			match(SUBSTR);
			setState(6648);
			match(LEFT_PAREN);
			setState(6649);
			expr(0);
			setState(6650);
			match(FROM);
			setState(6651);
			expr(0);
			setState(6654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6652);
				match(FOR);
				setState(6653);
				expr(0);
				}
			}

			setState(6656);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubStringFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTRING() { return getToken(DRDSSQLStatementParser.SUBSTRING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public SubStringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subStringFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitSubStringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubStringFunctionContext subStringFunction() throws RecognitionException {
		SubStringFunctionContext _localctx = new SubStringFunctionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_subStringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6658);
			match(SUBSTRING);
			setState(6659);
			match(LEFT_PAREN);
			setState(6660);
			expr(0);
			setState(6661);
			match(FROM);
			setState(6662);
			expr(0);
			setState(6665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6663);
				match(FOR);
				setState(6664);
				expr(0);
				}
			}

			setState(6667);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimFunctionContext extends ParserRuleContext {
		public ExprContext character;
		public ExprContext source;
		public TerminalNode TRIM() { return getToken(DRDSSQLStatementParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(DRDSSQLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(DRDSSQLStatementParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(DRDSSQLStatementParser.BOTH, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTrimFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_trimFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6669);
			match(TRIM);
			setState(6670);
			match(LEFT_PAREN);
			setState(6678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
			case 1:
				{
				setState(6672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BOTH || _la==LEADING || _la==TRAILING) {
					{
					setState(6671);
					_la = _input.LA(1);
					if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
					{
					setState(6674);
					((TrimFunctionContext)_localctx).character = expr(0);
					}
				}

				setState(6677);
				match(FROM);
				}
				break;
			}
			setState(6680);
			((TrimFunctionContext)_localctx).source = expr(0);
			setState(6681);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringFunctionContext extends ParserRuleContext {
		public TerminalNode WEIGHT_STRING() { return getToken(DRDSSQLStatementParser.WEIGHT_STRING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public WeightStringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWeightStringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WeightStringFunctionContext weightStringFunction() throws RecognitionException {
		WeightStringFunctionContext _localctx = new WeightStringFunctionContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_weightStringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6683);
			match(WEIGHT_STRING);
			setState(6684);
			match(LEFT_PAREN);
			setState(6685);
			expr(0);
			setState(6688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6686);
				match(AS);
				setState(6687);
				dataType();
				}
			}

			setState(6690);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractFunctionContext extends ParserRuleContext {
		public TerminalNode EXTRACT() { return getToken(DRDSSQLStatementParser.EXTRACT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public ExtractFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitExtractFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractFunctionContext extractFunction() throws RecognitionException {
		ExtractFunctionContext _localctx = new ExtractFunctionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_extractFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6692);
			match(EXTRACT);
			setState(6693);
			match(LEFT_PAREN);
			setState(6694);
			intervalType();
			setState(6695);
			match(FROM);
			setState(6696);
			expr(0);
			setState(6697);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TreatFunctionContext extends ParserRuleContext {
		public TerminalNode TREAT() { return getToken(DRDSSQLStatementParser.TREAT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DRDSSQLStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode REF() { return getToken(DRDSSQLStatementParser.REF, 0); }
		public TreatFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_treatFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitTreatFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TreatFunctionContext treatFunction() throws RecognitionException {
		TreatFunctionContext _localctx = new TreatFunctionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_treatFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6699);
			match(TREAT);
			setState(6700);
			match(LEFT_PAREN);
			setState(6701);
			expr(0);
			setState(6702);
			match(AS);
			setState(6704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REF) {
				{
				setState(6703);
				match(REF);
				}
			}

			setState(6706);
			dataType();
			setState(6707);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertUsingFunctionContext extends ParserRuleContext {
		public TerminalNode CONVERT() { return getToken(DRDSSQLStatementParser.CONVERT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public ConvertUsingFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertUsingFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitConvertUsingFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertUsingFunctionContext convertUsingFunction() throws RecognitionException {
		ConvertUsingFunctionContext _localctx = new ConvertUsingFunctionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_convertUsingFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6709);
			match(CONVERT);
			setState(6710);
			match(LEFT_PAREN);
			setState(6711);
			expr(0);
			setState(6712);
			match(USING);
			setState(6713);
			nameIdentifier();
			setState(6714);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CostMatrixClauseContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> classValues = new ArrayList<ExprContext>();
		public List<ExprContext> costValues = new ArrayList<ExprContext>();
		public TerminalNode COST() { return getToken(DRDSSQLStatementParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(DRDSSQLStatementParser.MODEL, 0); }
		public TerminalNode AUTO() { return getToken(DRDSSQLStatementParser.AUTO, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(DRDSSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(DRDSSQLStatementParser.LEFT_PAREN, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(DRDSSQLStatementParser.VALUES, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public CostMatrixClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_costMatrixClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCostMatrixClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CostMatrixClauseContext costMatrixClause() throws RecognitionException {
		CostMatrixClauseContext _localctx = new CostMatrixClauseContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_costMatrixClause);
		int _la;
		try {
			setState(6742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6716);
				match(COST);
				setState(6717);
				match(MODEL);
				setState(6719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(6718);
					match(AUTO);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6721);
				match(COST);
				setState(6722);
				match(LEFT_PAREN);
				setState(6723);
				((CostMatrixClauseContext)_localctx).expr = expr(0);
				((CostMatrixClauseContext)_localctx).classValues.add(((CostMatrixClauseContext)_localctx).expr);
				setState(6728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6724);
					match(COMMA);
					setState(6725);
					((CostMatrixClauseContext)_localctx).expr = expr(0);
					((CostMatrixClauseContext)_localctx).classValues.add(((CostMatrixClauseContext)_localctx).expr);
					}
					}
					setState(6730);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6731);
				match(RIGHT_PAREN);
				setState(6732);
				match(VALUES);
				setState(6733);
				match(LEFT_PAREN);
				setState(6734);
				((CostMatrixClauseContext)_localctx).expr = expr(0);
				((CostMatrixClauseContext)_localctx).costValues.add(((CostMatrixClauseContext)_localctx).expr);
				setState(6739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6735);
					match(COMMA);
					setState(6736);
					((CostMatrixClauseContext)_localctx).expr = expr(0);
					((CostMatrixClauseContext)_localctx).costValues.add(((CostMatrixClauseContext)_localctx).expr);
					}
					}
					setState(6741);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionContext extends ParserRuleContext {
		public JsonFunctionNameContext jsonFunctionName() {
			return getRuleContext(JsonFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public JsonOnNullClauseContext jsonOnNullClause() {
			return getRuleContext(JsonOnNullClauseContext.class,0);
		}
		public JsonReturningClauseContext jsonReturningClause() {
			return getRuleContext(JsonReturningClauseContext.class,0);
		}
		public TerminalNode STRICT() { return getToken(DRDSSQLStatementParser.STRICT, 0); }
		public WithUniqueKeysContext withUniqueKeys() {
			return getRuleContext(WithUniqueKeysContext.class,0);
		}
		public JsonWrapperClauseContext jsonWrapperClause() {
			return getRuleContext(JsonWrapperClauseContext.class,0);
		}
		public JsonOnErrorClauseContext jsonOnErrorClause() {
			return getRuleContext(JsonOnErrorClauseContext.class,0);
		}
		public JsonOnEmptyClauseContext jsonOnEmptyClause() {
			return getRuleContext(JsonOnEmptyClauseContext.class,0);
		}
		public JsonColumnsClauseContext jsonColumnsClause() {
			return getRuleContext(JsonColumnsClauseContext.class,0);
		}
		public JsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionContext jsonFunction() throws RecognitionException {
		JsonFunctionContext _localctx = new JsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_jsonFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6744);
			jsonFunctionName();
			setState(6745);
			match(LEFT_PAREN);
			setState(6746);
			expr(0);
			setState(6751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6747);
				match(COMMA);
				setState(6748);
				expr(0);
				}
				}
				setState(6753);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6754);
				orderByClause();
				}
			}

			setState(6758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				setState(6757);
				jsonOnNullClause();
				}
				break;
			}
			setState(6761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
			case 1:
				{
				setState(6760);
				jsonReturningClause();
				}
				break;
			}
			setState(6764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRICT) {
				{
				setState(6763);
				match(STRICT);
				}
			}

			setState(6767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,884,_ctx) ) {
			case 1:
				{
				setState(6766);
				withUniqueKeys();
				}
				break;
			}
			setState(6770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				setState(6769);
				jsonWrapperClause();
				}
			}

			setState(6773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
			case 1:
				{
				setState(6772);
				jsonOnErrorClause();
				}
				break;
			}
			setState(6776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ERROR || _la==NULL || _la==EMPTY) {
				{
				setState(6775);
				jsonOnEmptyClause();
				}
			}

			setState(6779);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(6778);
				jsonColumnsClause();
				}
			}

			setState(6781);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionNameContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE() { return getToken(DRDSSQLStatementParser.JSON_TABLE, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(DRDSSQLStatementParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(DRDSSQLStatementParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(DRDSSQLStatementParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(DRDSSQLStatementParser.JSON_OBJECTAGG, 0); }
		public JsonFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionNameContext jsonFunctionName() throws RecognitionException {
		JsonFunctionNameContext _localctx = new JsonFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_jsonFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6783);
			_la = _input.LA(1);
			if ( !(((((_la - 733)) & ~0x3f) == 0 && ((1L << (_la - 733)) & ((1L << (JSON_TABLE - 733)) | (1L << (JSON_ARRAY - 733)) | (1L << (JSON_ARRAYAGG - 733)) | (1L << (JSON_OBJECT - 733)) | (1L << (JSON_OBJECTAGG - 733)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionArgumentContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonFormatJsonArgumentExprContext jsonFormatJsonArgumentExpr() {
			return getRuleContext(JsonFormatJsonArgumentExprContext.class,0);
		}
		public JsonKeyValueArgumentExprContext jsonKeyValueArgumentExpr() {
			return getRuleContext(JsonKeyValueArgumentExprContext.class,0);
		}
		public JsonFunctionArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunctionArgument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonFunctionArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionArgumentContext jsonFunctionArgument() throws RecognitionException {
		JsonFunctionArgumentContext _localctx = new JsonFunctionArgumentContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_jsonFunctionArgument);
		try {
			setState(6788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6785);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6786);
				jsonFormatJsonArgumentExpr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6787);
				jsonKeyValueArgumentExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFormatJsonArgumentExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public FormatJsonContext formatJson() {
			return getRuleContext(FormatJsonContext.class,0);
		}
		public JsonFormatJsonArgumentExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFormatJsonArgumentExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonFormatJsonArgumentExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFormatJsonArgumentExprContext jsonFormatJsonArgumentExpr() throws RecognitionException {
		JsonFormatJsonArgumentExprContext _localctx = new JsonFormatJsonArgumentExprContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_jsonFormatJsonArgumentExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6790);
			expr(0);
			setState(6791);
			formatJson();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonKeyValueArgumentExprContext extends ParserRuleContext {
		public ExprContext key;
		public ExprContext val;
		public TerminalNode VALUE() { return getToken(DRDSSQLStatementParser.VALUE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public JsonKeyValueArgumentExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonKeyValueArgumentExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonKeyValueArgumentExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonKeyValueArgumentExprContext jsonKeyValueArgumentExpr() throws RecognitionException {
		JsonKeyValueArgumentExprContext _localctx = new JsonKeyValueArgumentExprContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_jsonKeyValueArgumentExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(6793);
				match(KEY);
				}
			}

			setState(6796);
			((JsonKeyValueArgumentExprContext)_localctx).key = expr(0);
			setState(6797);
			match(VALUE);
			setState(6798);
			((JsonKeyValueArgumentExprContext)_localctx).val = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOnNullClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DRDSSQLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DRDSSQLStatementParser.NULL, i);
		}
		public TerminalNode ABSENT() { return getToken(DRDSSQLStatementParser.ABSENT, 0); }
		public JsonOnNullClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnNullClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonOnNullClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOnNullClauseContext jsonOnNullClause() throws RecognitionException {
		JsonOnNullClauseContext _localctx = new JsonOnNullClauseContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_jsonOnNullClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6800);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==ABSENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6801);
			match(ON);
			setState(6802);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonReturningClauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(DRDSSQLStatementParser.RETURNING, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PRETTY() { return getToken(DRDSSQLStatementParser.PRETTY, 0); }
		public TerminalNode ASCII() { return getToken(DRDSSQLStatementParser.ASCII, 0); }
		public JsonReturningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonReturningClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonReturningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonReturningClauseContext jsonReturningClause() throws RecognitionException {
		JsonReturningClauseContext _localctx = new JsonReturningClauseContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_jsonReturningClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6806);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(6804);
				match(RETURNING);
				setState(6805);
				dataType();
				}
			}

			setState(6809);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRETTY) {
				{
				setState(6808);
				match(PRETTY);
				}
			}

			setState(6812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASCII) {
				{
				setState(6811);
				match(ASCII);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithUniqueKeysContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode UNIQUE() { return getToken(DRDSSQLStatementParser.UNIQUE, 0); }
		public TerminalNode KEYS() { return getToken(DRDSSQLStatementParser.KEYS, 0); }
		public WithUniqueKeysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withUniqueKeys; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWithUniqueKeys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithUniqueKeysContext withUniqueKeys() throws RecognitionException {
		WithUniqueKeysContext _localctx = new WithUniqueKeysContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_withUniqueKeys);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6814);
			match(WITH);
			setState(6815);
			match(UNIQUE);
			setState(6816);
			match(KEYS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonWrapperClauseContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(DRDSSQLStatementParser.WITHOUT, 0); }
		public TerminalNode WRAPPER() { return getToken(DRDSSQLStatementParser.WRAPPER, 0); }
		public TerminalNode ARRAY() { return getToken(DRDSSQLStatementParser.ARRAY, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode UNCONDITIONAL() { return getToken(DRDSSQLStatementParser.UNCONDITIONAL, 0); }
		public TerminalNode CONDITIONAL() { return getToken(DRDSSQLStatementParser.CONDITIONAL, 0); }
		public JsonWrapperClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonWrapperClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonWrapperClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonWrapperClauseContext jsonWrapperClause() throws RecognitionException {
		JsonWrapperClauseContext _localctx = new JsonWrapperClauseContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_jsonWrapperClause);
		int _la;
		try {
			setState(6831);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6818);
				match(WITHOUT);
				setState(6820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARRAY) {
					{
					setState(6819);
					match(ARRAY);
					}
				}

				setState(6822);
				match(WRAPPER);
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(6823);
				match(WITH);
				setState(6825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNCONDITIONAL || _la==CONDITIONAL) {
					{
					setState(6824);
					_la = _input.LA(1);
					if ( !(_la==UNCONDITIONAL || _la==CONDITIONAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARRAY) {
					{
					setState(6827);
					match(ARRAY);
					}
				}

				setState(6830);
				match(WRAPPER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOnErrorClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public List<TerminalNode> ERROR() { return getTokens(DRDSSQLStatementParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(DRDSSQLStatementParser.ERROR, i);
		}
		public TerminalNode NULL() { return getToken(DRDSSQLStatementParser.NULL, 0); }
		public TerminalNode EMPTY() { return getToken(DRDSSQLStatementParser.EMPTY, 0); }
		public TerminalNode ARRAY() { return getToken(DRDSSQLStatementParser.ARRAY, 0); }
		public TerminalNode OBJECT() { return getToken(DRDSSQLStatementParser.OBJECT, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonOnErrorClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnErrorClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonOnErrorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOnErrorClauseContext jsonOnErrorClause() throws RecognitionException {
		JsonOnErrorClauseContext _localctx = new JsonOnErrorClauseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_jsonOnErrorClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				{
				setState(6833);
				match(ERROR);
				}
				break;
			case 2:
				{
				setState(6834);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(6835);
				match(EMPTY);
				}
				break;
			case 4:
				{
				setState(6836);
				match(EMPTY);
				setState(6837);
				match(ARRAY);
				}
				break;
			case 5:
				{
				setState(6838);
				match(EMPTY);
				setState(6839);
				match(OBJECT);
				}
				break;
			case 6:
				{
				setState(6840);
				match(DEFAULT);
				setState(6841);
				expr(0);
				}
				break;
			}
			setState(6844);
			match(ON);
			setState(6845);
			match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOnEmptyClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public List<TerminalNode> EMPTY() { return getTokens(DRDSSQLStatementParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(DRDSSQLStatementParser.EMPTY, i);
		}
		public TerminalNode ERROR() { return getToken(DRDSSQLStatementParser.ERROR, 0); }
		public TerminalNode NULL() { return getToken(DRDSSQLStatementParser.NULL, 0); }
		public TerminalNode ARRAY() { return getToken(DRDSSQLStatementParser.ARRAY, 0); }
		public TerminalNode OBJECT() { return getToken(DRDSSQLStatementParser.OBJECT, 0); }
		public TerminalNode DEFAULT() { return getToken(DRDSSQLStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonOnEmptyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnEmptyClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonOnEmptyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOnEmptyClauseContext jsonOnEmptyClause() throws RecognitionException {
		JsonOnEmptyClauseContext _localctx = new JsonOnEmptyClauseContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_jsonOnEmptyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				setState(6847);
				match(ERROR);
				}
				break;
			case 2:
				{
				setState(6848);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(6849);
				match(EMPTY);
				}
				break;
			case 4:
				{
				setState(6850);
				match(EMPTY);
				setState(6851);
				match(ARRAY);
				}
				break;
			case 5:
				{
				setState(6852);
				match(EMPTY);
				setState(6853);
				match(OBJECT);
				}
				break;
			case 6:
				{
				setState(6854);
				match(DEFAULT);
				setState(6855);
				expr(0);
				}
				break;
			}
			setState(6858);
			match(ON);
			setState(6859);
			match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonColumnsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS() { return getToken(DRDSSQLStatementParser.COLUMNS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<JsonColumnDefinitionContext> jsonColumnDefinition() {
			return getRuleContexts(JsonColumnDefinitionContext.class);
		}
		public JsonColumnDefinitionContext jsonColumnDefinition(int i) {
			return getRuleContext(JsonColumnDefinitionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public JsonColumnsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumnsClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonColumnsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonColumnsClauseContext jsonColumnsClause() throws RecognitionException {
		JsonColumnsClauseContext _localctx = new JsonColumnsClauseContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_jsonColumnsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6861);
			match(COLUMNS);
			setState(6862);
			match(LEFT_PAREN);
			setState(6863);
			jsonColumnDefinition();
			setState(6868);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6864);
				match(COMMA);
				setState(6865);
				jsonColumnDefinition();
				}
				}
				setState(6870);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6871);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonColumnDefinitionContext extends ParserRuleContext {
		public JsonColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumnDefinition; }
	 
		public JsonColumnDefinitionContext() { }
		public void copyFrom(JsonColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class JsonExistsColumnContext extends JsonColumnDefinitionContext {
		public ExprContext path;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(DRDSSQLStatementParser.EXISTS, 0); }
		public TerminalNode PATH() { return getToken(DRDSSQLStatementParser.PATH, 0); }
		public JsonOnErrorClauseContext jsonOnErrorClause() {
			return getRuleContext(JsonOnErrorClauseContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonExistsColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonExistsColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonNestedPathColumnContext extends JsonColumnDefinitionContext {
		public ExprContext path;
		public TerminalNode NESTED() { return getToken(DRDSSQLStatementParser.NESTED, 0); }
		public JsonColumnsClauseContext jsonColumnsClause() {
			return getRuleContext(JsonColumnsClauseContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode PATH() { return getToken(DRDSSQLStatementParser.PATH, 0); }
		public JsonNestedPathColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonNestedPathColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueColumnContext extends JsonColumnDefinitionContext {
		public ExprContext path;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(DRDSSQLStatementParser.EXISTS, 0); }
		public TerminalNode PATH() { return getToken(DRDSSQLStatementParser.PATH, 0); }
		public JsonOnErrorClauseContext jsonOnErrorClause() {
			return getRuleContext(JsonOnErrorClauseContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonValueColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonValueColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonOrdinalityColumnContext extends JsonColumnDefinitionContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DRDSSQLStatementParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(DRDSSQLStatementParser.ORDINALITY, 0); }
		public JsonOrdinalityColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonOrdinalityColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonQueryColumnContext extends JsonColumnDefinitionContext {
		public ExprContext path;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FormatJsonContext formatJson() {
			return getRuleContext(FormatJsonContext.class,0);
		}
		public JsonWrapperClauseContext jsonWrapperClause() {
			return getRuleContext(JsonWrapperClauseContext.class,0);
		}
		public TerminalNode PATH() { return getToken(DRDSSQLStatementParser.PATH, 0); }
		public JsonOnErrorClauseContext jsonOnErrorClause() {
			return getRuleContext(JsonOnErrorClauseContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonQueryColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitJsonQueryColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonColumnDefinitionContext jsonColumnDefinition() throws RecognitionException {
		JsonColumnDefinitionContext _localctx = new JsonColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_jsonColumnDefinition);
		int _la;
		try {
			setState(6917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
			case 1:
				_localctx = new JsonExistsColumnContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6873);
				nameIdentifier();
				setState(6874);
				dataType();
				setState(6875);
				match(EXISTS);
				setState(6878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(6876);
					match(PATH);
					setState(6877);
					((JsonExistsColumnContext)_localctx).path = expr(0);
					}
				}

				setState(6881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==ERROR || _la==NULL || _la==EMPTY) {
					{
					setState(6880);
					jsonOnErrorClause();
					}
				}

				}
				break;
			case 2:
				_localctx = new JsonQueryColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6883);
				nameIdentifier();
				setState(6884);
				dataType();
				setState(6885);
				formatJson();
				setState(6887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(6886);
					jsonWrapperClause();
					}
				}

				setState(6891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(6889);
					match(PATH);
					setState(6890);
					((JsonQueryColumnContext)_localctx).path = expr(0);
					}
				}

				setState(6894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==ERROR || _la==NULL || _la==EMPTY) {
					{
					setState(6893);
					jsonOnErrorClause();
					}
				}

				}
				break;
			case 3:
				_localctx = new JsonValueColumnContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6896);
				nameIdentifier();
				setState(6897);
				dataType();
				setState(6898);
				match(EXISTS);
				setState(6901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(6899);
					match(PATH);
					setState(6900);
					((JsonValueColumnContext)_localctx).path = expr(0);
					}
				}

				setState(6904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==ERROR || _la==NULL || _la==EMPTY) {
					{
					setState(6903);
					jsonOnErrorClause();
					}
				}

				}
				break;
			case 4:
				_localctx = new JsonNestedPathColumnContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6906);
				match(NESTED);
				setState(6908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(6907);
					match(PATH);
					}
				}

				setState(6910);
				((JsonNestedPathColumnContext)_localctx).path = expr(0);
				setState(6911);
				jsonColumnsClause();
				}
				break;
			case 5:
				_localctx = new JsonOrdinalityColumnContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6913);
				nameIdentifier();
				setState(6914);
				match(FOR);
				setState(6915);
				match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionContext extends ParserRuleContext {
		public AggregateFunctionNameContext aggregateFunctionName() {
			return getRuleContext(AggregateFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public WithinGroupSpecificationContext withinGroupSpecification() {
			return getRuleContext(WithinGroupSpecificationContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode DETERMINISTIC() { return getToken(DRDSSQLStatementParser.DETERMINISTIC, 0); }
		public PartitionByClauseContext partitionByClause() {
			return getRuleContext(PartitionByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAggregateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_aggregateFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6919);
			aggregateFunctionName();
			setState(6920);
			match(LEFT_PAREN);
			setState(6934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << DISTINCT) | (1L << DISTINCTROW) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
				{
				setState(6922);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
				case 1:
					{
					setState(6921);
					setQuantifier();
					}
					break;
				}
				setState(6924);
				expr(0);
				setState(6926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DETERMINISTIC) {
					{
					setState(6925);
					match(DETERMINISTIC);
					}
				}

				setState(6929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(6928);
					partitionByClause();
					}
				}

				setState(6932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6931);
					orderByClause();
					}
				}

				}
			}

			setState(6940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6936);
				match(COMMA);
				setState(6937);
				expr(0);
				}
				}
				setState(6942);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHIN) {
				{
				setState(6943);
				withinGroupSpecification();
				}
			}

			setState(6947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVER) {
				{
				setState(6946);
				overClause();
				}
			}

			setState(6949);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionNameContext extends ParserRuleContext {
		public TerminalNode APPROX_COUNT() { return getToken(DRDSSQLStatementParser.APPROX_COUNT, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT() { return getToken(DRDSSQLStatementParser.APPROX_COUNT_DISTINCT, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_AGG() { return getToken(DRDSSQLStatementParser.APPROX_COUNT_DISTINCT_AGG, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_DETAIL() { return getToken(DRDSSQLStatementParser.APPROX_COUNT_DISTINCT_DETAIL, 0); }
		public TerminalNode APPROX_MEDIAN() { return getToken(DRDSSQLStatementParser.APPROX_MEDIAN, 0); }
		public TerminalNode APPROX_PERCENTILE() { return getToken(DRDSSQLStatementParser.APPROX_PERCENTILE, 0); }
		public TerminalNode APPROX_PERCENTILE_AGG() { return getToken(DRDSSQLStatementParser.APPROX_PERCENTILE_AGG, 0); }
		public TerminalNode APPROX_PERCENTILE_DETAIL() { return getToken(DRDSSQLStatementParser.APPROX_PERCENTILE_DETAIL, 0); }
		public TerminalNode APPROX_RANK() { return getToken(DRDSSQLStatementParser.APPROX_RANK, 0); }
		public TerminalNode APPROX_SUM() { return getToken(DRDSSQLStatementParser.APPROX_SUM, 0); }
		public TerminalNode AVG() { return getToken(DRDSSQLStatementParser.AVG, 0); }
		public TerminalNode COLLECT() { return getToken(DRDSSQLStatementParser.COLLECT, 0); }
		public TerminalNode CORR() { return getToken(DRDSSQLStatementParser.CORR, 0); }
		public TerminalNode CORR_S() { return getToken(DRDSSQLStatementParser.CORR_S, 0); }
		public TerminalNode CORR_K() { return getToken(DRDSSQLStatementParser.CORR_K, 0); }
		public TerminalNode COUNT() { return getToken(DRDSSQLStatementParser.COUNT, 0); }
		public TerminalNode COVAR_POP() { return getToken(DRDSSQLStatementParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(DRDSSQLStatementParser.COVAR_SAMP, 0); }
		public TerminalNode CUME_DIST() { return getToken(DRDSSQLStatementParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DRDSSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode GROUP_ID() { return getToken(DRDSSQLStatementParser.GROUP_ID, 0); }
		public TerminalNode GROUPING() { return getToken(DRDSSQLStatementParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(DRDSSQLStatementParser.GROUPING_ID, 0); }
		public TerminalNode MAX() { return getToken(DRDSSQLStatementParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(DRDSSQLStatementParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(DRDSSQLStatementParser.MIN, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(DRDSSQLStatementParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(DRDSSQLStatementParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(DRDSSQLStatementParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(DRDSSQLStatementParser.RANK, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(DRDSSQLStatementParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(DRDSSQLStatementParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_COUNT() { return getToken(DRDSSQLStatementParser.REGR_COUNT, 0); }
		public TerminalNode REGR_R2() { return getToken(DRDSSQLStatementParser.REGR_R2, 0); }
		public TerminalNode REGR_AVGX() { return getToken(DRDSSQLStatementParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(DRDSSQLStatementParser.REGR_AVGY, 0); }
		public TerminalNode REGR_SXX() { return getToken(DRDSSQLStatementParser.REGR_SXX, 0); }
		public TerminalNode REGR_SYY() { return getToken(DRDSSQLStatementParser.REGR_SYY, 0); }
		public TerminalNode REGR_SXY() { return getToken(DRDSSQLStatementParser.REGR_SXY, 0); }
		public TerminalNode STATS_BINOMIAL_TEST() { return getToken(DRDSSQLStatementParser.STATS_BINOMIAL_TEST, 0); }
		public TerminalNode STATS_CROSSTAB() { return getToken(DRDSSQLStatementParser.STATS_CROSSTAB, 0); }
		public TerminalNode STATS_F_TEST() { return getToken(DRDSSQLStatementParser.STATS_F_TEST, 0); }
		public TerminalNode STATS_KS_TEST() { return getToken(DRDSSQLStatementParser.STATS_KS_TEST, 0); }
		public TerminalNode STATS_MODE() { return getToken(DRDSSQLStatementParser.STATS_MODE, 0); }
		public TerminalNode STATS_MW_TEST() { return getToken(DRDSSQLStatementParser.STATS_MW_TEST, 0); }
		public TerminalNode STATS_ONE_WAY_ANOVA() { return getToken(DRDSSQLStatementParser.STATS_ONE_WAY_ANOVA, 0); }
		public TerminalNode STATS_T_TEST_ONE() { return getToken(DRDSSQLStatementParser.STATS_T_TEST_ONE, 0); }
		public TerminalNode STATS_T_TEST_PAIRED() { return getToken(DRDSSQLStatementParser.STATS_T_TEST_PAIRED, 0); }
		public TerminalNode STATS_T_TEST_INDEP() { return getToken(DRDSSQLStatementParser.STATS_T_TEST_INDEP, 0); }
		public TerminalNode STATS_T_TEST_INDEPU() { return getToken(DRDSSQLStatementParser.STATS_T_TEST_INDEPU, 0); }
		public TerminalNode STATS_WSR_TEST() { return getToken(DRDSSQLStatementParser.STATS_WSR_TEST, 0); }
		public TerminalNode STDDEV() { return getToken(DRDSSQLStatementParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(DRDSSQLStatementParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(DRDSSQLStatementParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(DRDSSQLStatementParser.SUM, 0); }
		public TerminalNode SYS_OP_ZONE_ID() { return getToken(DRDSSQLStatementParser.SYS_OP_ZONE_ID, 0); }
		public TerminalNode SYS_XMLAGG() { return getToken(DRDSSQLStatementParser.SYS_XMLAGG, 0); }
		public TerminalNode TO_APPROX_COUNT_DISTINCT() { return getToken(DRDSSQLStatementParser.TO_APPROX_COUNT_DISTINCT, 0); }
		public TerminalNode TO_APPROX_PERCENTILE() { return getToken(DRDSSQLStatementParser.TO_APPROX_PERCENTILE, 0); }
		public TerminalNode VAR_POP() { return getToken(DRDSSQLStatementParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(DRDSSQLStatementParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(DRDSSQLStatementParser.VARIANCE, 0); }
		public TerminalNode XMLAGG() { return getToken(DRDSSQLStatementParser.XMLAGG, 0); }
		public AggregateFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAggregateFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionNameContext aggregateFunctionName() throws RecognitionException {
		AggregateFunctionNameContext _localctx = new AggregateFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_aggregateFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6951);
			_la = _input.LA(1);
			if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (AVG - 220)) | (1L << (COUNT - 220)) | (1L << (MAX - 220)) | (1L << (MIN - 220)) | (1L << (STDDEV - 220)) | (1L << (STDDEV_POP - 220)) | (1L << (STDDEV_SAMP - 220)) | (1L << (SUM - 220)) | (1L << (VAR_POP - 220)) | (1L << (VAR_SAMP - 220)) | (1L << (VARIANCE - 220)))) != 0) || ((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (APPROX_COUNT - 750)) | (1L << (APPROX_COUNT_DISTINCT - 750)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 750)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 750)) | (1L << (APPROX_MEDIAN - 750)) | (1L << (APPROX_PERCENTILE - 750)) | (1L << (APPROX_PERCENTILE_AGG - 750)) | (1L << (APPROX_PERCENTILE_DETAIL - 750)) | (1L << (APPROX_RANK - 750)) | (1L << (APPROX_SUM - 750)) | (1L << (COLLECT - 750)) | (1L << (CORR - 750)) | (1L << (CORR_S - 750)) | (1L << (CORR_K - 750)) | (1L << (COVAR_POP - 750)) | (1L << (COVAR_SAMP - 750)) | (1L << (CUME_DIST - 750)) | (1L << (DENSE_RANK - 750)) | (1L << (GROUP_ID - 750)) | (1L << (GROUPING - 750)) | (1L << (GROUPING_ID - 750)) | (1L << (MEDIAN - 750)) | (1L << (PERCENT_RANK - 750)) | (1L << (PERCENTILE_CONT - 750)) | (1L << (PERCENTILE_DISC - 750)) | (1L << (RANK - 750)) | (1L << (REGR_SLOPE - 750)) | (1L << (REGR_INTERCEPT - 750)) | (1L << (REGR_COUNT - 750)) | (1L << (REGR_R2 - 750)) | (1L << (REGR_AVGX - 750)) | (1L << (REGR_AVGY - 750)) | (1L << (REGR_SXX - 750)) | (1L << (REGR_SYY - 750)) | (1L << (REGR_SXY - 750)) | (1L << (STATS_BINOMIAL_TEST - 750)) | (1L << (STATS_CROSSTAB - 750)) | (1L << (STATS_F_TEST - 750)) | (1L << (STATS_KS_TEST - 750)) | (1L << (STATS_MODE - 750)) | (1L << (STATS_MW_TEST - 750)) | (1L << (STATS_ONE_WAY_ANOVA - 750)) | (1L << (STATS_T_TEST_ONE - 750)) | (1L << (STATS_T_TEST_PAIRED - 750)) | (1L << (STATS_T_TEST_INDEP - 750)) | (1L << (STATS_T_TEST_INDEPU - 750)) | (1L << (STATS_WSR_TEST - 750)) | (1L << (SYS_OP_ZONE_ID - 750)) | (1L << (SYS_XMLAGG - 750)) | (1L << (TO_APPROX_COUNT_DISTINCT - 750)) | (1L << (TO_APPROX_PERCENTILE - 750)) | (1L << (XMLAGG - 750)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithinGroupSpecificationContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(DRDSSQLStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(DRDSSQLStatementParser.GROUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public WithinGroupSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withinGroupSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWithinGroupSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithinGroupSpecificationContext withinGroupSpecification() throws RecognitionException {
		WithinGroupSpecificationContext _localctx = new WithinGroupSpecificationContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_withinGroupSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6953);
			match(WITHIN);
			setState(6954);
			match(GROUP);
			setState(6955);
			match(LEFT_PAREN);
			setState(6956);
			orderByClause();
			setState(6957);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstFunctionContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public TerminalNode KEEP() { return getToken(DRDSSQLStatementParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DRDSSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode FIRST() { return getToken(DRDSSQLStatementParser.FIRST, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public FirstFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitFirstFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstFunctionContext firstFunction() throws RecognitionException {
		FirstFunctionContext _localctx = new FirstFunctionContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_firstFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6959);
			aggregateFunction();
			setState(6960);
			match(KEEP);
			setState(6961);
			match(LEFT_PAREN);
			setState(6962);
			match(DENSE_RANK);
			setState(6963);
			match(FIRST);
			setState(6964);
			orderByClause();
			setState(6965);
			match(RIGHT_PAREN);
			setState(6967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
			case 1:
				{
				setState(6966);
				overClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LastFunctionContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public TerminalNode KEEP() { return getToken(DRDSSQLStatementParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(DRDSSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode LAST() { return getToken(DRDSSQLStatementParser.LAST, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public LastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lastFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitLastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LastFunctionContext lastFunction() throws RecognitionException {
		LastFunctionContext _localctx = new LastFunctionContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_lastFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6969);
			aggregateFunction();
			setState(6970);
			match(KEEP);
			setState(6971);
			match(LEFT_PAREN);
			setState(6972);
			match(DENSE_RANK);
			setState(6973);
			match(LAST);
			setState(6974);
			orderByClause();
			setState(6975);
			match(RIGHT_PAREN);
			setState(6977);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,919,_ctx) ) {
			case 1:
				{
				setState(6976);
				overClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListAggFunctionContext extends ParserRuleContext {
		public TerminalNode LISTAGG() { return getToken(DRDSSQLStatementParser.LISTAGG, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public WithinGroupSpecificationContext withinGroupSpecification() {
			return getRuleContext(WithinGroupSpecificationContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(DRDSSQLStatementParser.COMMA, 0); }
		public ListaggOverflowClauseContext listaggOverflowClause() {
			return getRuleContext(ListaggOverflowClauseContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public ListAggFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listAggFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitListAggFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListAggFunctionContext listAggFunction() throws RecognitionException {
		ListAggFunctionContext _localctx = new ListAggFunctionContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_listAggFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6979);
			match(LISTAGG);
			setState(6980);
			match(LEFT_PAREN);
			setState(6982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
			case 1:
				{
				setState(6981);
				setQuantifier();
				}
				break;
			}
			setState(6984);
			expr(0);
			setState(6987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6985);
				match(COMMA);
				setState(6986);
				expr(0);
				}
			}

			setState(6990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6989);
				listaggOverflowClause();
				}
			}

			setState(6992);
			match(RIGHT_PAREN);
			setState(6993);
			withinGroupSpecification();
			setState(6995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
			case 1:
				{
				setState(6994);
				overClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListaggOverflowClauseContext extends ParserRuleContext {
		public ListaggOverflowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listaggOverflowClause; }
	 
		public ListaggOverflowClauseContext() { }
		public void copyFrom(ListaggOverflowClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OnOverflowTruncateClauseContext extends ListaggOverflowClauseContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode OVERFLOW() { return getToken(DRDSSQLStatementParser.OVERFLOW, 0); }
		public TerminalNode TRUNCATE() { return getToken(DRDSSQLStatementParser.TRUNCATE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(DRDSSQLStatementParser.COUNT, 0); }
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DRDSSQLStatementParser.WITHOUT, 0); }
		public OnOverflowTruncateClauseContext(ListaggOverflowClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOnOverflowTruncateClause(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OnOverflowErrorClauseContext extends ListaggOverflowClauseContext {
		public TerminalNode ON() { return getToken(DRDSSQLStatementParser.ON, 0); }
		public TerminalNode OVERFLOW() { return getToken(DRDSSQLStatementParser.OVERFLOW, 0); }
		public TerminalNode ERROR() { return getToken(DRDSSQLStatementParser.ERROR, 0); }
		public OnOverflowErrorClauseContext(ListaggOverflowClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOnOverflowErrorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListaggOverflowClauseContext listaggOverflowClause() throws RecognitionException {
		ListaggOverflowClauseContext _localctx = new ListaggOverflowClauseContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_listaggOverflowClause);
		int _la;
		try {
			setState(7010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
			case 1:
				_localctx = new OnOverflowErrorClauseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6997);
				match(ON);
				setState(6998);
				match(OVERFLOW);
				setState(6999);
				match(ERROR);
				}
				break;
			case 2:
				_localctx = new OnOverflowTruncateClauseContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(7000);
				match(ON);
				setState(7001);
				match(OVERFLOW);
				setState(7002);
				match(TRUNCATE);
				setState(7004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
				case 1:
					{
					setState(7003);
					expr(0);
					}
					break;
				}
				setState(7008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(7006);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7007);
					match(COUNT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public WindowFunctionNullsOptionContext inside;
		public WindowFunctionNullsOptionContext outside;
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public WindowFunctionFromOptionContext windowFunctionFromOption() {
			return getRuleContext(WindowFunctionFromOptionContext.class,0);
		}
		public List<WindowFunctionNullsOptionContext> windowFunctionNullsOption() {
			return getRuleContexts(WindowFunctionNullsOptionContext.class);
		}
		public WindowFunctionNullsOptionContext windowFunctionNullsOption(int i) {
			return getRuleContext(WindowFunctionNullsOptionContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public WindowFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWindowFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionContext windowFunction() throws RecognitionException {
		WindowFunctionContext _localctx = new WindowFunctionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_windowFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7012);
			((WindowFunctionContext)_localctx).name = nameIdentifier();
			setState(7013);
			match(LEFT_PAREN);
			setState(7028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << DISTINCT) | (1L << DISTINCTROW) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (INSERT - 76)) | (1L << (INTERVAL - 76)) | (1L << (LEFT - 76)) | (1L << (MATCH - 76)) | (1L << (NEW - 76)) | (1L << (NOT - 76)) | (1L << (NULL_LITERAL - 76)) | (1L << (OLD - 76)) | (1L << (PERSIST - 76)) | (1L << (PERSIST_ONLY - 76)) | (1L << (REPLACE - 76)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (RIGHT - 143)) | (1L << (SELECT - 143)) | (1L << (TRUE - 143)) | (1L << (VALUES - 143)) | (1L << (DATE - 143)) | (1L << (TIME - 143)) | (1L << (TIMESTAMP - 143)) | (1L << (DATETIME - 143)) | (1L << (YEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (CHAR - 207)) | (1L << (BINARY - 207)) | (1L << (TEXT - 207)) | (1L << (ENUM - 207)) | (1L << (AVG - 207)) | (1L << (COUNT - 207)) | (1L << (MAX - 207)) | (1L << (MIN - 207)) | (1L << (STDDEV - 207)) | (1L << (STDDEV_POP - 207)) | (1L << (STDDEV_SAMP - 207)) | (1L << (SUM - 207)) | (1L << (VAR_POP - 207)) | (1L << (VAR_SAMP - 207)) | (1L << (VARIANCE - 207)) | (1L << (CURRENT_DATE - 207)) | (1L << (CURRENT_TIME - 207)) | (1L << (CURRENT_TIMESTAMP - 207)) | (1L << (LOCALTIME - 207)) | (1L << (EXTRACT - 207)) | (1L << (LOCALTIMESTAMP - 207)) | (1L << (POSITION - 207)) | (1L << (SUBSTR - 207)) | (1L << (SUBSTRING - 207)) | (1L << (TRIM - 207)) | (1L << (UTC_DATE - 207)) | (1L << (UTC_TIME - 207)) | (1L << (UTC_TIMESTAMP - 207)) | (1L << (ACCOUNT - 207)) | (1L << (ACTION - 207)) | (1L << (AFTER - 207)) | (1L << (AGGREGATE - 207)) | (1L << (ALGORITHM - 207)) | (1L << (ANY - 207)) | (1L << (AT - 207)) | (1L << (AUTHORS - 207)) | (1L << (AUTOCOMMIT - 207)) | (1L << (AUTOEXTEND_SIZE - 207)) | (1L << (AUTO_INCREMENT - 207)) | (1L << (AVG_ROW_LENGTH - 207)) | (1L << (BEGIN - 207)) | (1L << (BINLOG - 207)) | (1L << (BIT - 207)) | (1L << (BLOCK - 207)) | (1L << (BOOL - 207)) | (1L << (BOOLEAN - 207)) | (1L << (BTREE - 207)) | (1L << (CASCADED - 207)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (CHAIN - 271)) | (1L << (CHANNEL - 271)) | (1L << (CHECKSUM - 271)) | (1L << (CIPHER - 271)) | (1L << (CLIENT - 271)) | (1L << (COALESCE - 271)) | (1L << (CODE - 271)) | (1L << (COLUMNS - 271)) | (1L << (COLUMN_FORMAT - 271)) | (1L << (COMMENT - 271)) | (1L << (COMMIT - 271)) | (1L << (COMPACT - 271)) | (1L << (COMPLETION - 271)) | (1L << (COMPRESSED - 271)) | (1L << (COMPRESSION - 271)) | (1L << (CONCURRENT - 271)) | (1L << (CONNECTION - 271)) | (1L << (CONSISTENT - 271)) | (1L << (CONTAINS - 271)) | (1L << (CONTEXT - 271)) | (1L << (CONTRIBUTORS - 271)) | (1L << (COPY - 271)) | (1L << (CPU - 271)) | (1L << (DATA - 271)) | (1L << (DATAFILE - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DEFAULT_AUTH - 271)) | (1L << (DEFINER - 271)) | (1L << (DELAY_KEY_WRITE - 271)) | (1L << (DIRECTORY - 271)) | (1L << (DISABLE - 271)) | (1L << (DISCARD - 271)) | (1L << (DISK - 271)) | (1L << (DO - 271)) | (1L << (DUMPFILE - 271)) | (1L << (DUPLICATE - 271)) | (1L << (DYNAMIC - 271)) | (1L << (ENABLE - 271)) | (1L << (ENCRYPTION - 271)) | (1L << (ENDS - 271)) | (1L << (ENGINE - 271)) | (1L << (ENGINES - 271)) | (1L << (ERROR - 271)) | (1L << (ERRORS - 271)) | (1L << (ESCAPE - 271)) | (1L << (EVEN - 271)) | (1L << (EVENT - 271)) | (1L << (EVENTS - 271)) | (1L << (EVERY - 271)) | (1L << (EXCHANGE - 271)) | (1L << (EXCLUSIVE - 271)) | (1L << (EXPIRE - 271)) | (1L << (EXTENT_SIZE - 271)) | (1L << (FAULTS - 271)) | (1L << (FIELDS - 271)) | (1L << (FILE_BLOCK_SIZE - 271)))) != 0) || ((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (FILTER - 335)) | (1L << (FIRST - 335)) | (1L << (FIXED - 335)) | (1L << (FOLLOWS - 335)) | (1L << (FULL - 335)) | (1L << (FUNCTION - 335)) | (1L << (GLOBAL - 335)) | (1L << (GRANTS - 335)) | (1L << (GROUP_REPLICATION - 335)) | (1L << (HASH - 335)) | (1L << (HOST - 335)) | (1L << (IDENTIFIED - 335)) | (1L << (IGNORE_SERVER_IDS - 335)) | (1L << (IMPORT - 335)) | (1L << (INDEXES - 335)) | (1L << (INITIAL_SIZE - 335)) | (1L << (INPLACE - 335)) | (1L << (INSERT_METHOD - 335)) | (1L << (INSTANCE - 335)) | (1L << (INVOKER - 335)) | (1L << (IO - 335)) | (1L << (IO_THREAD - 335)) | (1L << (IPC - 335)) | (1L << (ISOLATION - 335)) | (1L << (ISSUER - 335)) | (1L << (KEY_BLOCK_SIZE - 335)) | (1L << (LANGUAGE - 335)) | (1L << (LAST - 335)) | (1L << (LEAVES - 335)) | (1L << (LESS - 335)) | (1L << (LEVEL - 335)) | (1L << (LIST - 335)) | (1L << (LOCAL - 335)) | (1L << (LOGFILE - 335)) | (1L << (LOGS - 335)) | (1L << (MASTER - 335)) | (1L << (MASTER_AUTO_POSITION - 335)) | (1L << (MASTER_CONNECT_RETRY - 335)) | (1L << (MASTER_DELAY - 335)) | (1L << (MASTER_HEARTBEAT_PERIOD - 335)) | (1L << (MASTER_HOST - 335)) | (1L << (MASTER_LOG_FILE - 335)) | (1L << (MASTER_LOG_POS - 335)) | (1L << (MASTER_PASSWORD - 335)) | (1L << (MASTER_PORT - 335)) | (1L << (MASTER_RETRY_COUNT - 335)) | (1L << (MASTER_SSL - 335)) | (1L << (MASTER_SSL_CA - 335)) | (1L << (MASTER_SSL_CAPATH - 335)) | (1L << (MASTER_SSL_CERT - 335)) | (1L << (MASTER_SSL_CIPHER - 335)) | (1L << (MASTER_SSL_CRL - 335)) | (1L << (MASTER_SSL_CRLPATH - 335)) | (1L << (MASTER_SSL_KEY - 335)) | (1L << (MASTER_TLS_VERSION - 335)) | (1L << (MASTER_USER - 335)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 399)) | (1L << (MAX_QUERIES_PER_HOUR - 399)) | (1L << (MAX_ROWS - 399)) | (1L << (MAX_SIZE - 399)) | (1L << (MAX_UPDATES_PER_HOUR - 399)) | (1L << (MAX_USER_CONNECTIONS - 399)) | (1L << (MERGE - 399)) | (1L << (MIGRATE - 399)) | (1L << (MIN_ROWS - 399)) | (1L << (MODIFY - 399)) | (1L << (MUTEX - 399)) | (1L << (MYSQL - 399)) | (1L << (NAME - 399)) | (1L << (NAMES - 399)) | (1L << (NCHAR - 399)) | (1L << (NEVER - 399)) | (1L << (NO - 399)) | (1L << (NODEGROUP - 399)) | (1L << (NONE - 399)) | (1L << (OFFLINE - 399)) | (1L << (OFFSET - 399)) | (1L << (OJ - 399)) | (1L << (OLD_PASSWORD - 399)) | (1L << (ONE - 399)) | (1L << (ONLINE - 399)) | (1L << (ONLY - 399)) | (1L << (OPTIMIZER_COSTS - 399)) | (1L << (OPTIONS - 399)) | (1L << (OWNER - 399)) | (1L << (PACK_KEYS - 399)) | (1L << (PAGE - 399)) | (1L << (PARSER - 399)) | (1L << (PARTIAL - 399)) | (1L << (PARTITIONING - 399)) | (1L << (PARTITIONS - 399)) | (1L << (PASSWORD - 399)) | (1L << (PHASE - 399)) | (1L << (PLUGIN_DIR - 399)) | (1L << (PLUGINS - 399)) | (1L << (PORT - 399)) | (1L << (PRECEDES - 399)) | (1L << (PREPARE - 399)) | (1L << (PRESERVE - 399)) | (1L << (PREV - 399)) | (1L << (PROCESSLIST - 399)) | (1L << (PROFILE - 399)) | (1L << (PROFILES - 399)) | (1L << (PROXY - 399)) | (1L << (QUERY - 399)) | (1L << (QUICK - 399)) | (1L << (REBUILD - 399)) | (1L << (RECOVER - 399)) | (1L << (REDO_BUFFER_SIZE - 399)) | (1L << (REDUNDANT - 399)) | (1L << (RELAY_LOG_FILE - 399)) | (1L << (RELAY_LOG_POS - 399)) | (1L << (RELAYLOG - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REMOVE - 463)) | (1L << (REORGANIZE - 463)) | (1L << (REPAIR - 463)) | (1L << (REPLICATE_DO_DB - 463)) | (1L << (REPLICATE_DO_TABLE - 463)) | (1L << (REPLICATE_IGNORE_DB - 463)) | (1L << (REPLICATE_IGNORE_TABLE - 463)) | (1L << (REPLICATE_REWRITE_DB - 463)) | (1L << (REPLICATE_WILD_DO_TABLE - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 463)) | (1L << (REPLICATION - 463)) | (1L << (RESUME - 463)) | (1L << (RETURNS - 463)) | (1L << (ROLLBACK - 463)) | (1L << (ROLLUP - 463)) | (1L << (ROTATE - 463)) | (1L << (ROW - 463)) | (1L << (ROWS - 463)) | (1L << (ROW_FORMAT - 463)) | (1L << (SAVEPOINT - 463)) | (1L << (SCHEDULE - 463)) | (1L << (SECURITY - 463)) | (1L << (SERVER - 463)) | (1L << (SESSION - 463)) | (1L << (SHARE - 463)) | (1L << (SHARED - 463)) | (1L << (SIGNED - 463)) | (1L << (SIMPLE - 463)) | (1L << (SLAVE - 463)) | (1L << (SNAPSHOT - 463)) | (1L << (SOCKET - 463)) | (1L << (SOME - 463)) | (1L << (SOUNDS - 463)) | (1L << (SOURCE - 463)) | (1L << (SQL_AFTER_GTIDS - 463)) | (1L << (SQL_AFTER_MTS_GAPS - 463)) | (1L << (SQL_BEFORE_GTIDS - 463)) | (1L << (SQL_BUFFER_RESULT - 463)) | (1L << (SQL_CACHE - 463)) | (1L << (SQL_NO_CACHE - 463)) | (1L << (SQL_THREAD - 463)) | (1L << (START - 463)) | (1L << (STARTS - 463)) | (1L << (STATS_AUTO_RECALC - 463)) | (1L << (STATS_PERSISTENT - 463)) | (1L << (STATS_SAMPLE_PAGES - 463)) | (1L << (STATUS - 463)) | (1L << (STOP - 463)) | (1L << (STORAGE - 463)) | (1L << (STRING - 463)) | (1L << (SUBJECT - 463)) | (1L << (SUBPARTITION - 463)) | (1L << (SUBPARTITIONS - 463)) | (1L << (SUSPEND - 463)) | (1L << (SWAPS - 463)) | (1L << (SWITCHES - 463)) | (1L << (TABLESPACE - 463)) | (1L << (TEMPORARY - 463)) | (1L << (TEMPTABLE - 463)) | (1L << (THAN - 463)))) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & ((1L << (TRANSACTION - 527)) | (1L << (TRUNCATE - 527)) | (1L << (UNDEFINED - 527)) | (1L << (UNDOFILE - 527)) | (1L << (UNDO_BUFFER_SIZE - 527)) | (1L << (UNKNOWN - 527)) | (1L << (UPGRADE - 527)) | (1L << (USER - 527)) | (1L << (VALIDATION - 527)) | (1L << (VALUE - 527)) | (1L << (VARIABLES - 527)) | (1L << (VIEW - 527)) | (1L << (WAIT - 527)) | (1L << (WARNINGS - 527)) | (1L << (WITHOUT - 527)) | (1L << (WORK - 527)) | (1L << (WRAPPER - 527)) | (1L << (X509 - 527)) | (1L << (XA - 527)) | (1L << (XML - 527)) | (1L << (TABLES - 527)) | (1L << (ROUTINE - 527)) | (1L << (EXECUTE - 527)) | (1L << (FILE - 527)) | (1L << (PROCESS - 527)) | (1L << (RELOAD - 527)) | (1L << (SHUTDOWN - 527)) | (1L << (SUPER - 527)) | (1L << (PRIVILEGES - 527)) | (1L << (ARMSCII8 - 527)) | (1L << (ASCII - 527)) | (1L << (BIG5 - 527)) | (1L << (CP1250 - 527)) | (1L << (CP1251 - 527)) | (1L << (CP1256 - 527)))) != 0) || ((((_la - 591)) & ~0x3f) == 0 && ((1L << (_la - 591)) & ((1L << (CP1257 - 591)) | (1L << (CP850 - 591)) | (1L << (CP852 - 591)) | (1L << (CP866 - 591)) | (1L << (CP932 - 591)) | (1L << (DEC8 - 591)) | (1L << (EUCJPMS - 591)) | (1L << (EUCKR - 591)) | (1L << (GB2312 - 591)) | (1L << (GBK - 591)) | (1L << (GEOSTD8 - 591)) | (1L << (GREEK - 591)) | (1L << (HEBREW - 591)) | (1L << (HP8 - 591)) | (1L << (KEYBCS2 - 591)) | (1L << (KOI8R - 591)) | (1L << (KOI8U - 591)) | (1L << (LATIN1 - 591)) | (1L << (LATIN2 - 591)) | (1L << (LATIN5 - 591)) | (1L << (LATIN7 - 591)) | (1L << (MACCE - 591)) | (1L << (MACROMAN - 591)) | (1L << (SJIS - 591)) | (1L << (SWE7 - 591)) | (1L << (TIS620 - 591)) | (1L << (UCS2 - 591)) | (1L << (UJIS - 591)) | (1L << (UTF16 - 591)) | (1L << (UTF16LE - 591)) | (1L << (UTF32 - 591)) | (1L << (UTF8 - 591)) | (1L << (UTF8MB3 - 591)) | (1L << (UTF8MB4 - 591)) | (1L << (ARCHIVE - 591)) | (1L << (BLACKHOLE - 591)) | (1L << (CSV - 591)) | (1L << (FEDERATED - 591)) | (1L << (INNODB - 591)) | (1L << (MEMORY - 591)) | (1L << (MRG_MYISAM - 591)) | (1L << (MYISAM - 591)) | (1L << (NDB - 591)) | (1L << (NDBCLUSTER - 591)) | (1L << (PERFOMANCE_SCHEMA - 591)) | (1L << (REPEATABLE - 591)) | (1L << (COMMITTED - 591)) | (1L << (UNCOMMITTED - 591)) | (1L << (SERIALIZABLE - 591)) | (1L << (GET_FORMAT - 591)) | (1L << (MOD - 591)) | (1L << (REVERSE - 591)) | (1L << (WEIGHT_STRING - 591)))) != 0) || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & ((1L << (PLUS_SIGN - 662)) | (1L << (MINUS_SIGN - 662)) | (1L << (ASTERISK - 662)) | (1L << (EXCLAMATION_OP - 662)) | (1L << (BIT_NOT_OP - 662)) | (1L << (LEFT_PAREN - 662)) | (1L << (AT_SIGN - 662)) | (1L << (QUESTION_MARK - 662)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 662)) | (1L << (REGULAR_ID - 662)) | (1L << (DELIMITED_ID - 662)) | (1L << (REVERSE_QUOTE_ID - 662)) | (1L << (CHAR_STRING - 662)) | (1L << (NCHAR_STRING - 662)) | (1L << (STRING_CHARSET_NAME - 662)) | (1L << (UNSIGNED_INTEGER - 662)) | (1L << (APPROXIMATE_NUM_LIT - 662)) | (1L << (HEXADECIMAL_LITERAL - 662)) | (1L << (BIT_STRING - 662)))) != 0) || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (MID - 726)) | (1L << (TREAT - 726)) | (1L << (JSON_TABLE - 726)) | (1L << (JSON_ARRAY - 726)) | (1L << (JSON_ARRAYAGG - 726)) | (1L << (JSON_OBJECT - 726)) | (1L << (JSON_OBJECTAGG - 726)) | (1L << (APPROX_COUNT - 726)) | (1L << (APPROX_COUNT_DISTINCT - 726)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 726)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 726)) | (1L << (APPROX_MEDIAN - 726)) | (1L << (APPROX_PERCENTILE - 726)) | (1L << (APPROX_PERCENTILE_AGG - 726)) | (1L << (APPROX_PERCENTILE_DETAIL - 726)) | (1L << (APPROX_RANK - 726)) | (1L << (APPROX_SUM - 726)) | (1L << (COLLECT - 726)) | (1L << (CORR - 726)) | (1L << (CORR_S - 726)) | (1L << (CORR_K - 726)) | (1L << (COVAR_POP - 726)) | (1L << (COVAR_SAMP - 726)) | (1L << (CUME_DIST - 726)) | (1L << (DENSE_RANK - 726)) | (1L << (GROUP_ID - 726)) | (1L << (GROUPING - 726)) | (1L << (GROUPING_ID - 726)) | (1L << (MEDIAN - 726)) | (1L << (PERCENT_RANK - 726)) | (1L << (PERCENTILE_CONT - 726)) | (1L << (PERCENTILE_DISC - 726)) | (1L << (RANK - 726)) | (1L << (REGR_SLOPE - 726)) | (1L << (REGR_INTERCEPT - 726)) | (1L << (REGR_COUNT - 726)) | (1L << (REGR_R2 - 726)) | (1L << (REGR_AVGX - 726)) | (1L << (REGR_AVGY - 726)) | (1L << (REGR_SXX - 726)) | (1L << (REGR_SYY - 726)) | (1L << (REGR_SXY - 726)) | (1L << (STATS_BINOMIAL_TEST - 726)) | (1L << (STATS_CROSSTAB - 726)) | (1L << (STATS_F_TEST - 726)) | (1L << (STATS_KS_TEST - 726)) | (1L << (STATS_MODE - 726)))) != 0) || ((((_la - 790)) & ~0x3f) == 0 && ((1L << (_la - 790)) & ((1L << (STATS_MW_TEST - 790)) | (1L << (STATS_ONE_WAY_ANOVA - 790)) | (1L << (STATS_T_TEST_ONE - 790)) | (1L << (STATS_T_TEST_PAIRED - 790)) | (1L << (STATS_T_TEST_INDEP - 790)) | (1L << (STATS_T_TEST_INDEPU - 790)) | (1L << (STATS_WSR_TEST - 790)) | (1L << (SYS_OP_ZONE_ID - 790)) | (1L << (SYS_XMLAGG - 790)) | (1L << (TO_APPROX_COUNT_DISTINCT - 790)) | (1L << (TO_APPROX_PERCENTILE - 790)) | (1L << (XMLAGG - 790)) | (1L << (LISTAGG - 790)) | (1L << (CUBE_TABLE - 790)))) != 0)) {
				{
				setState(7015);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(7014);
					setQuantifier();
					}
					break;
				}
				setState(7017);
				expr(0);
				setState(7019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(7018);
					((WindowFunctionContext)_localctx).inside = windowFunctionNullsOption();
					}
				}

				setState(7025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7021);
					match(COMMA);
					setState(7022);
					expr(0);
					}
					}
					setState(7027);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7030);
			match(RIGHT_PAREN);
			setState(7032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7031);
				windowFunctionFromOption();
				}
			}

			setState(7035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==RESPECT) {
				{
				setState(7034);
				((WindowFunctionContext)_localctx).outside = windowFunctionNullsOption();
				}
			}

			setState(7037);
			overClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionNullsOptionContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(DRDSSQLStatementParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(DRDSSQLStatementParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(DRDSSQLStatementParser.IGNORE, 0); }
		public WindowFunctionNullsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionNullsOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWindowFunctionNullsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionNullsOptionContext windowFunctionNullsOption() throws RecognitionException {
		WindowFunctionNullsOptionContext _localctx = new WindowFunctionNullsOptionContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_windowFunctionNullsOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7039);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7040);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionFromOptionContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DRDSSQLStatementParser.FROM, 0); }
		public TerminalNode FIRST() { return getToken(DRDSSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DRDSSQLStatementParser.LAST, 0); }
		public WindowFunctionFromOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionFromOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWindowFunctionFromOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionFromOptionContext windowFunctionFromOption() throws RecognitionException {
		WindowFunctionFromOptionContext _localctx = new WindowFunctionFromOptionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_windowFunctionFromOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7042);
			match(FROM);
			setState(7043);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DRDSSQLStatementParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public AnalyticClauseContext analyticClause() {
			return getRuleContext(AnalyticClauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7045);
			match(OVER);
			setState(7046);
			match(LEFT_PAREN);
			setState(7047);
			analyticClause();
			setState(7048);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyticClauseContext extends ParserRuleContext {
		public PartitionByClauseContext partitionByClause() {
			return getRuleContext(PartitionByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return getRuleContext(WindowFrameClauseContext.class,0);
		}
		public AnalyticClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyticClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitAnalyticClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyticClauseContext analyticClause() throws RecognitionException {
		AnalyticClauseContext _localctx = new AnalyticClauseContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_analyticClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7050);
				partitionByClause();
				}
			}

			setState(7057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7053);
				orderByClause();
				setState(7055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(7054);
					windowFrameClause();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionByClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DRDSSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DRDSSQLStatementParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(DRDSSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(DRDSSQLStatementParser.COMMA, i);
		}
		public PartitionByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPartitionByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByClauseContext partitionByClause() throws RecognitionException {
		PartitionByClauseContext _localctx = new PartitionByClauseContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_partitionByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7059);
			match(PARTITION);
			setState(7060);
			match(BY);
			setState(7061);
			expr(0);
			setState(7066);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,936,_ctx);
			while ( _alt!=2 && _alt!= ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7062);
					match(COMMA);
					setState(7063);
					expr(0);
					}
					} 
				}
				setState(7068);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,936,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameClauseContext extends ParserRuleContext {
		public WindowFrameUnitContext windowFrameUnit() {
			return getRuleContext(WindowFrameUnitContext.class,0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return getRuleContext(WindowFrameExtentContext.class,0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWindowFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameClauseContext windowFrameClause() throws RecognitionException {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_windowFrameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7069);
			windowFrameUnit();
			setState(7070);
			windowFrameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameUnitContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(DRDSSQLStatementParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(DRDSSQLStatementParser.RANGE, 0); }
		public WindowFrameUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameUnit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWindowFrameUnit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameUnitContext windowFrameUnit() throws RecognitionException {
		WindowFrameUnitContext _localctx = new WindowFrameUnitContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_windowFrameUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7072);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExtentContext extends ParserRuleContext {
		public WindowFrameExtentItemContext between;
		public WindowFrameExtentItemContext and;
		public WindowFrameExtentItemContext extent;
		public TerminalNode BETWEEN() { return getToken(DRDSSQLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DRDSSQLStatementParser.AND, 0); }
		public List<WindowFrameExtentItemContext> windowFrameExtentItem() {
			return getRuleContexts(WindowFrameExtentItemContext.class);
		}
		public WindowFrameExtentItemContext windowFrameExtentItem(int i) {
			return getRuleContext(WindowFrameExtentItemContext.class,i);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWindowFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExtentContext windowFrameExtent() throws RecognitionException {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_windowFrameExtent);
		try {
			setState(7080);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7074);
				match(BETWEEN);
				setState(7075);
				((WindowFrameExtentContext)_localctx).between = windowFrameExtentItem();
				setState(7076);
				match(AND);
				setState(7077);
				((WindowFrameExtentContext)_localctx).and = windowFrameExtentItem();
				}
				break;
			case ALL:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case CURSOR:
			case EXISTS:
			case FALSE:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case MATCH:
			case NEW:
			case NOT:
			case NULL_LITERAL:
			case OLD:
			case PERSIST:
			case PERSIST_ONLY:
			case REPLACE:
			case RIGHT:
			case SELECT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case COUNT:
			case MAX:
			case MIN:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GET_FORMAT:
			case MOD:
			case REVERSE:
			case WEIGHT_STRING:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case ASTERISK:
			case EXCLAMATION_OP:
			case BIT_NOT_OP:
			case LEFT_PAREN:
			case AT_SIGN:
			case QUESTION_MARK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case CHAR_STRING:
			case NCHAR_STRING:
			case STRING_CHARSET_NAME:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case HEXADECIMAL_LITERAL:
			case BIT_STRING:
			case MID:
			case TREAT:
			case JSON_TABLE:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case APPROX_COUNT:
			case APPROX_COUNT_DISTINCT:
			case APPROX_COUNT_DISTINCT_AGG:
			case APPROX_COUNT_DISTINCT_DETAIL:
			case APPROX_MEDIAN:
			case APPROX_PERCENTILE:
			case APPROX_PERCENTILE_AGG:
			case APPROX_PERCENTILE_DETAIL:
			case APPROX_RANK:
			case APPROX_SUM:
			case COLLECT:
			case CORR:
			case CORR_S:
			case CORR_K:
			case COVAR_POP:
			case COVAR_SAMP:
			case CUME_DIST:
			case DENSE_RANK:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case MEDIAN:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case REGR_SLOPE:
			case REGR_INTERCEPT:
			case REGR_COUNT:
			case REGR_R2:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_SXX:
			case REGR_SYY:
			case REGR_SXY:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_WSR_TEST:
			case SYS_OP_ZONE_ID:
			case SYS_XMLAGG:
			case TO_APPROX_COUNT_DISTINCT:
			case TO_APPROX_PERCENTILE:
			case XMLAGG:
			case LISTAGG:
			case UNBOUNDED:
			case CURRENT:
			case CUBE_TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7079);
				((WindowFrameExtentContext)_localctx).extent = windowFrameExtentItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExtentItemContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DRDSSQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DRDSSQLStatementParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(DRDSSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DRDSSQLStatementParser.ROW, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(DRDSSQLStatementParser.FOLLOWING, 0); }
		public WindowFrameExtentItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtentItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWindowFrameExtentItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExtentItemContext windowFrameExtentItem() throws RecognitionException {
		WindowFrameExtentItemContext _localctx = new WindowFrameExtentItemContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_windowFrameExtentItem);
		int _la;
		try {
			setState(7089);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(7082);
				match(UNBOUNDED);
				setState(7083);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7084);
				match(CURRENT);
				setState(7085);
				match(ROW);
				}
				break;
			case ALL:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case CURSOR:
			case EXISTS:
			case FALSE:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case MATCH:
			case NEW:
			case NOT:
			case NULL_LITERAL:
			case OLD:
			case PERSIST:
			case PERSIST_ONLY:
			case REPLACE:
			case RIGHT:
			case SELECT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case COUNT:
			case MAX:
			case MIN:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GET_FORMAT:
			case MOD:
			case REVERSE:
			case WEIGHT_STRING:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case ASTERISK:
			case EXCLAMATION_OP:
			case BIT_NOT_OP:
			case LEFT_PAREN:
			case AT_SIGN:
			case QUESTION_MARK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case CHAR_STRING:
			case NCHAR_STRING:
			case STRING_CHARSET_NAME:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case HEXADECIMAL_LITERAL:
			case BIT_STRING:
			case MID:
			case TREAT:
			case JSON_TABLE:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case APPROX_COUNT:
			case APPROX_COUNT_DISTINCT:
			case APPROX_COUNT_DISTINCT_AGG:
			case APPROX_COUNT_DISTINCT_DETAIL:
			case APPROX_MEDIAN:
			case APPROX_PERCENTILE:
			case APPROX_PERCENTILE_AGG:
			case APPROX_PERCENTILE_DETAIL:
			case APPROX_RANK:
			case APPROX_SUM:
			case COLLECT:
			case CORR:
			case CORR_S:
			case CORR_K:
			case COVAR_POP:
			case COVAR_SAMP:
			case CUME_DIST:
			case DENSE_RANK:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case MEDIAN:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case REGR_SLOPE:
			case REGR_INTERCEPT:
			case REGR_COUNT:
			case REGR_R2:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_SXX:
			case REGR_SYY:
			case REGR_SXY:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_WSR_TEST:
			case SYS_OP_ZONE_ID:
			case SYS_XMLAGG:
			case TO_APPROX_COUNT_DISTINCT:
			case TO_APPROX_PERCENTILE:
			case XMLAGG:
			case LISTAGG:
			case CUBE_TABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7086);
				expr(0);
				setState(7087);
				_la = _input.LA(1);
				if ( !(_la==PRECEDING || _la==FOLLOWING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CubeTableFunctionContext extends ParserRuleContext {
		public NameIdentifierContext cube;
		public TerminalNode CUBE_TABLE() { return getToken(DRDSSQLStatementParser.CUBE_TABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(DRDSSQLStatementParser.LEFT_PAREN, 0); }
		public List<TerminalNode> SINGLE_QUOTE() { return getTokens(DRDSSQLStatementParser.SINGLE_QUOTE); }
		public TerminalNode SINGLE_QUOTE(int i) {
			return getToken(DRDSSQLStatementParser.SINGLE_QUOTE, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(DRDSSQLStatementParser.RIGHT_PAREN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<CubeTableOptionExprContext> cubeTableOptionExpr() {
			return getRuleContexts(CubeTableOptionExprContext.class);
		}
		public CubeTableOptionExprContext cubeTableOptionExpr(int i) {
			return getRuleContext(CubeTableOptionExprContext.class,i);
		}
		public CubeTableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeTableFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCubeTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeTableFunctionContext cubeTableFunction() throws RecognitionException {
		CubeTableFunctionContext _localctx = new CubeTableFunctionContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_cubeTableFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7091);
			match(CUBE_TABLE);
			setState(7092);
			match(LEFT_PAREN);
			setState(7093);
			match(SINGLE_QUOTE);
			setState(7094);
			((CubeTableFunctionContext)_localctx).cube = nameIdentifier();
			setState(7098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==HIERARCHY || _la==HRR) {
				{
				{
				setState(7095);
				cubeTableOptionExpr();
				}
				}
				setState(7100);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7101);
			match(SINGLE_QUOTE);
			setState(7102);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CubeTableOptionExprContext extends ParserRuleContext {
		public NameIdentifierContext dimension;
		public NameIdentifierContext hierarchy;
		public TerminalNode HIERARCHY() { return getToken(DRDSSQLStatementParser.HIERARCHY, 0); }
		public TerminalNode HRR() { return getToken(DRDSSQLStatementParser.HRR, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public CubeTableOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeTableOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitCubeTableOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeTableOptionExprContext cubeTableOptionExpr() throws RecognitionException {
		CubeTableOptionExprContext _localctx = new CubeTableOptionExprContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_cubeTableOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7104);
			_la = _input.LA(1);
			if ( !(_la==HIERARCHY || _la==HRR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
			case 1:
				{
				setState(7105);
				((CubeTableOptionExprContext)_localctx).dimension = nameIdentifier();
				}
				break;
			}
			setState(7108);
			((CubeTableOptionExprContext)_localctx).hierarchy = nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrReplaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(DRDSSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DRDSSQLStatementParser.REPLACE, 0); }
		public OrReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orReplace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOrReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrReplaceContext orReplace() throws RecognitionException {
		OrReplaceContext _localctx = new OrReplaceContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_orReplace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7110);
			match(OR);
			setState(7111);
			match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DRDSSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DRDSSQLStatementParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7113);
			match(IF);
			setState(7114);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DRDSSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DRDSSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DRDSSQLStatementParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7116);
			match(IF);
			setState(7117);
			match(NOT);
			setState(7118);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithRollupContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(DRDSSQLStatementParser.ROLLUP, 0); }
		public WithRollupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withRollup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWithRollup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithRollupContext withRollup() throws RecognitionException {
		WithRollupContext _localctx = new WithRollupContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_withRollup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7120);
			match(WITH);
			setState(7121);
			match(ROLLUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderingSpecificationContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(DRDSSQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DRDSSQLStatementParser.DESC, 0); }
		public OrderingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderingSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitOrderingSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderingSpecificationContext orderingSpecification() throws RecognitionException {
		OrderingSpecificationContext _localctx = new OrderingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_orderingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7123);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntimeActionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(DRDSSQLStatementParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(DRDSSQLStatementParser.OFFLINE, 0); }
		public IntimeActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intimeAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIntimeAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntimeActionContext intimeAction() throws RecognitionException {
		IntimeActionContext _localctx = new IntimeActionContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_intimeAction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7125);
			_la = _input.LA(1);
			if ( !(_la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexCategoryContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(DRDSSQLStatementParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(DRDSSQLStatementParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(DRDSSQLStatementParser.SPATIAL, 0); }
		public IndexCategoryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexCategory; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexCategory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexCategoryContext indexCategory() throws RecognitionException {
		IndexCategoryContext _localctx = new IndexCategoryContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_indexCategory);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7127);
			_la = _input.LA(1);
			if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexFormatContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(DRDSSQLStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(DRDSSQLStatementParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(DRDSSQLStatementParser.KEYS, 0); }
		public IndexFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexFormat; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexFormatContext indexFormat() throws RecognitionException {
		IndexFormatContext _localctx = new IndexFormatContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_indexFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7129);
			_la = _input.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (INDEX - 71)) | (1L << (KEY - 71)) | (1L << (KEYS - 71)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DRDSSQLStatementParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(DRDSSQLStatementParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(DRDSSQLStatementParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7131);
			match(USING);
			setState(7132);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithTypeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DRDSSQLStatementParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(DRDSSQLStatementParser.WITHOUT, 0); }
		public WithTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitWithType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithTypeContext withType() throws RecognitionException {
		WithTypeContext _localctx = new WithTypeContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_withType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7134);
			_la = _input.LA(1);
			if ( !(_la==WITH || _la==WITHOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VisibleTypeContext extends ParserRuleContext {
		public TerminalNode VISIBLE() { return getToken(DRDSSQLStatementParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(DRDSSQLStatementParser.INVISIBLE, 0); }
		public VisibleTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibleType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitVisibleType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VisibleTypeContext visibleType() throws RecognitionException {
		VisibleTypeContext _localctx = new VisibleTypeContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_visibleType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7136);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PriorityContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(DRDSSQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(DRDSSQLStatementParser.DELAYED, 0); }
		public TerminalNode CONCURRENT() { return getToken(DRDSSQLStatementParser.CONCURRENT, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(DRDSSQLStatementParser.HIGH_PRIORITY, 0); }
		public PriorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_priority; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DRDSSQLStatementParserVisitor ) return ((DRDSSQLStatementParserVisitor<? extends T>)visitor).visitPriority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PriorityContext priority() throws RecognitionException {
		PriorityContext _localctx = new PriorityContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7138);
			_la = _input.LA(1);
			if ( !(((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0) || _la==CONCURRENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 312:
			return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 37);
		case 1:
			return precpred(_ctx, 28);
		case 2:
			return precpred(_ctx, 27);
		case 3:
			return precpred(_ctx, 26);
		case 4:
			return precpred(_ctx, 25);
		case 5:
			return precpred(_ctx, 24);
		case 6:
			return precpred(_ctx, 23);
		case 7:
			return precpred(_ctx, 22);
		case 8:
			return precpred(_ctx, 19);
		case 9:
			return precpred(_ctx, 17);
		case 10:
			return precpred(_ctx, 16);
		case 11:
			return precpred(_ctx, 14);
		case 12:
			return precpred(_ctx, 9);
		case 13:
			return precpred(_ctx, 4);
		case 14:
			return precpred(_ctx, 3);
		case 15:
			return precpred(_ctx, 2);
		case 16:
			return precpred(_ctx, 1);
		case 17:
			return precpred(_ctx, 38);
		case 18:
			return precpred(_ctx, 21);
		case 19:
			return precpred(_ctx, 20);
		case 20:
			return precpred(_ctx, 18);
		case 21:
			return precpred(_ctx, 15);
		case 22:
			return precpred(_ctx, 11);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0332\u1be7\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\3\2\3\2\3\2\5\2\u0336\n\2\3\2\5\2\u0339"+
		"\n\2\7\2\u033b\n\2\f\2\16\2\u033e\13\2\3\2\5\2\u0341\n\2\3\2\3\2\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u034d\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0377"+
		"\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0384\n\5\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u0395\n\6\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u03a0\n\7\3\b\3\b\3\b\5\b\u03a5\n"+
		"\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u03b1\n\t\3\n\3\n\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n"+
		"\3\n\3\n\3\n\3\n\5\n\u03cc\n\n\3\13\3\13\3\13\3\13\5\13\u03d2\n\13\3\f"+
		"\3\f\3\f\5\f\u03d7\n\f\3\f\3\f\7\f\u03db\n\f\f\f\16\f\u03de\13\f\3\r\3"+
		"\r\3\r\5\r\u03e3\n\r\3\r\3\r\7\r\u03e7\n\r\f\r\16\r\u03ea\13\r\3\16\3"+
		"\16\5\16\u03ee\n\16\3\16\3\16\5\16\u03f2\n\16\3\16\3\16\3\16\3\16\3\16"+
		"\3\16\3\16\5\16\u03fb\n\16\3\16\5\16\u03fe\n\16\3\16\5\16\u0401\n\16\3"+
		"\16\3\16\5\16\u0405\n\16\3\16\3\16\3\16\3\17\3\17\5\17\u040c\n\17\3\17"+
		"\5\17\u040f\n\17\3\17\3\17\3\17\5\17\u0414\n\17\3\17\3\17\3\17\3\17\3"+
		"\17\3\17\7\17\u041c\n\17\f\17\16\17\u041f\13\17\3\17\3\17\7\17\u0423\n"+
		"\17\f\17\16\17\u0426\13\17\3\20\3\20\3\20\3\20\3\20\5\20\u042d\n\20\3"+
		"\20\5\20\u0430\n\20\3\21\3\21\3\21\5\21\u0435\n\21\3\22\3\22\5\22\u0439"+
		"\n\22\3\22\3\22\3\23\3\23\5\23\u043f\n\23\3\23\3\23\3\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\5\24\u044c\n\24\3\24\5\24\u044f\n\24\3\24\3"+
		"\24\5\24\u0453\n\24\3\24\5\24\u0456\n\24\3\24\3\24\5\24\u045a\n\24\3\24"+
		"\5\24\u045d\n\24\3\24\3\24\5\24\u0461\n\24\3\24\5\24\u0464\n\24\3\24\5"+
		"\24\u0467\n\24\3\24\3\24\5\24\u046b\n\24\3\24\5\24\u046e\n\24\3\24\3\24"+
		"\5\24\u0472\n\24\3\24\3\24\3\25\3\25\5\25\u0478\n\25\3\25\3\25\3\25\3"+
		"\25\5\25\u047e\n\25\3\25\3\25\7\25\u0482\n\25\f\25\16\25\u0485\13\25\3"+
		"\25\3\25\7\25\u0489\n\25\f\25\16\25\u048c\13\25\3\25\3\25\3\26\3\26\5"+
		"\26\u0492\n\26\3\26\3\26\3\26\3\26\5\26\u0498\n\26\3\26\3\26\7\26\u049c"+
		"\n\26\f\26\16\26\u049f\13\26\3\26\3\26\3\26\3\26\7\26\u04a5\n\26\f\26"+
		"\16\26\u04a8\13\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3"+
		"\27\3\27\3\27\3\27\7\27\u04b8\n\27\f\27\16\27\u04bb\13\27\3\27\3\27\3"+
		"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5"+
		"\30\u04cd\n\30\3\31\3\31\5\31\u04d1\n\31\3\31\3\31\5\31\u04d5\n\31\3\31"+
		"\3\31\5\31\u04d9\n\31\3\31\3\31\3\31\7\31\u04de\n\31\f\31\16\31\u04e1"+
		"\13\31\3\31\5\31\u04e4\n\31\5\31\u04e6\n\31\3\31\3\31\5\31\u04ea\n\31"+
		"\3\31\7\31\u04ed\n\31\f\31\16\31\u04f0\13\31\5\31\u04f2\n\31\3\31\5\31"+
		"\u04f5\n\31\3\31\5\31\u04f8\n\31\3\31\5\31\u04fb\n\31\3\32\3\32\3\32\5"+
		"\32\u0500\n\32\3\33\3\33\5\33\u0504\n\33\3\33\7\33\u0507\n\33\f\33\16"+
		"\33\u050a\13\33\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\5\35\u0514\n\35"+
		"\3\35\3\35\3\35\5\35\u0519\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\7\35\u0527\n\35\f\35\16\35\u052a\13\35\3\35\3\35"+
		"\3\35\5\35\u052f\n\35\3\35\7\35\u0532\n\35\f\35\16\35\u0535\13\35\5\35"+
		"\u0537\n\35\3\36\3\36\5\36\u053b\n\36\5\36\u053d\n\36\3\36\3\36\3\36\5"+
		"\36\u0542\n\36\3\36\3\36\3\36\3\36\7\36\u0548\n\36\f\36\16\36\u054b\13"+
		"\36\3\36\3\36\7\36\u054f\n\36\f\36\16\36\u0552\13\36\3\36\3\36\5\36\u0556"+
		"\n\36\3\36\5\36\u0559\n\36\3\36\3\36\3\36\3\36\7\36\u055f\n\36\f\36\16"+
		"\36\u0562\13\36\3\36\3\36\7\36\u0566\n\36\f\36\16\36\u0569\13\36\3\36"+
		"\3\36\5\36\u056d\n\36\3\36\5\36\u0570\n\36\3\36\3\36\3\36\3\36\7\36\u0576"+
		"\n\36\f\36\16\36\u0579\13\36\3\36\3\36\7\36\u057d\n\36\f\36\16\36\u0580"+
		"\13\36\3\36\3\36\5\36\u0584\n\36\5\36\u0586\n\36\3\36\3\36\5\36\u058a"+
		"\n\36\3\36\5\36\u058d\n\36\3\36\5\36\u0590\n\36\3\36\3\36\3\36\3\36\7"+
		"\36\u0596\n\36\f\36\16\36\u0599\13\36\3\36\3\36\7\36\u059d\n\36\f\36\16"+
		"\36\u05a0\13\36\3\36\3\36\5\36\u05a4\n\36\3\36\5\36\u05a7\n\36\3\36\3"+
		"\36\3\36\3\36\7\36\u05ad\n\36\f\36\16\36\u05b0\13\36\3\36\3\36\7\36\u05b4"+
		"\n\36\f\36\16\36\u05b7\13\36\3\36\3\36\5\36\u05bb\n\36\3\36\5\36\u05be"+
		"\n\36\3\36\3\36\3\36\3\36\7\36\u05c4\n\36\f\36\16\36\u05c7\13\36\3\36"+
		"\3\36\7\36\u05cb\n\36\f\36\16\36\u05ce\13\36\3\36\3\36\5\36\u05d2\n\36"+
		"\5\36\u05d4\n\36\3\36\3\36\3\36\5\36\u05d9\n\36\3\36\3\36\3\36\3\36\7"+
		"\36\u05df\n\36\f\36\16\36\u05e2\13\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\7\36\u05eb\n\36\f\36\16\36\u05ee\13\36\3\36\3\36\3\36\5\36\u05f3\n"+
		"\36\3\36\7\36\u05f6\n\36\f\36\16\36\u05f9\13\36\3\36\3\36\3\36\3\36\3"+
		"\36\5\36\u0600\n\36\3\37\3\37\3\37\3\37\3\37\5\37\u0607\n\37\3\37\5\37"+
		"\u060a\n\37\3 \3 \3!\3!\3!\3!\3!\3!\5!\u0614\n!\3\"\3\"\3\"\3\"\3\"\3"+
		"\"\5\"\u061c\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0639\n#\3$\3$\3$\3$\3$\3$\3$\5$\u0642"+
		"\n$\3$\3$\3$\3$\3$\3$\3$\5$\u064b\n$\5$\u064d\n$\3%\3%\3%\3%\3%\3%\3%"+
		"\3%\5%\u0657\n%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0661\n%\3%\3%\3%\3%\3%\3%"+
		"\3%\3%\5%\u066b\n%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0675\n%\3%\3%\3%\3%\3%"+
		"\3%\3%\3%\5%\u067f\n%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0689\n%\5%\u068b\n%"+
		"\3&\3&\5&\u068f\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u069a\n\'\3"+
		"\'\3\'\5\'\u069e\n\'\3\'\5\'\u06a1\n\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\5(\u06af\n(\3(\5(\u06b2\n(\3(\3(\5(\u06b6\n(\3(\5(\u06b9\n(\3(\3"+
		"(\5(\u06bd\n(\3(\5(\u06c0\n(\3(\3(\5(\u06c4\n(\3(\5(\u06c7\n(\3(\3(\5"+
		"(\u06cb\n(\3(\5(\u06ce\n(\3(\5(\u06d1\n(\3(\3(\5(\u06d5\n(\3(\5(\u06d8"+
		"\n(\3(\3(\5(\u06dc\n(\3(\3(\3)\3)\5)\u06e2\n)\3)\3)\3)\3)\3)\3)\3)\3)"+
		"\3)\3)\5)\u06ee\n)\3)\3)\3*\3*\3*\3*\3*\5*\u06f7\n*\3*\5*\u06fa\n*\3+"+
		"\3+\3+\3,\3,\5,\u0701\n,\3,\5,\u0704\n,\3,\5,\u0707\n,\3,\3,\3,\5,\u070c"+
		"\n,\3,\3,\3,\3,\3,\3,\7,\u0714\n,\f,\16,\u0717\13,\3,\3,\5,\u071b\n,\3"+
		",\3,\3,\5,\u0720\n,\3-\3-\5-\u0724\n-\3-\3-\3-\3.\3.\5.\u072b\n.\3/\3"+
		"/\3/\7/\u0730\n/\f/\16/\u0733\13/\3/\3/\3/\5/\u0738\n/\3/\3/\3/\3/\7/"+
		"\u073e\n/\f/\16/\u0741\13/\5/\u0743\n/\3/\3/\3/\7/\u0748\n/\f/\16/\u074b"+
		"\13/\5/\u074d\n/\5/\u074f\n/\3\60\3\60\3\60\3\60\5\60\u0755\n\60\3\61"+
		"\3\61\3\61\3\61\3\61\5\61\u075c\n\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\5\62\u0765\n\62\3\63\3\63\5\63\u0769\n\63\3\63\3\63\3\64\3\64\3\64\3"+
		"\65\3\65\3\65\3\66\3\66\3\66\3\66\3\67\3\67\38\38\39\39\39\3:\5:\u077f"+
		"\n:\3:\3:\3:\3;\3;\3;\3;\3;\5;\u0789\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;"+
		"\3;\5;\u0796\n;\3;\3;\3;\5;\u079b\n;\3<\3<\3<\5<\u07a0\n<\3<\6<\u07a3"+
		"\n<\r<\16<\u07a4\3<\3<\3<\3<\3<\3<\3<\3<\5<\u07af\n<\3=\3=\3=\5=\u07b4"+
		"\n=\3=\6=\u07b7\n=\r=\16=\u07b8\3=\3=\3=\3=\3=\3=\3=\3=\5=\u07c3\n=\3"+
		">\3>\5>\u07c7\n>\3>\3>\3>\3>\3>\5>\u07ce\n>\3>\3>\3>\5>\u07d3\n>\3>\5"+
		">\u07d6\n>\3>\3>\3>\5>\u07db\n>\3>\5>\u07de\n>\3>\3>\5>\u07e2\n>\3>\3"+
		">\5>\u07e6\n>\3?\3?\3?\3?\7?\u07ec\n?\f?\16?\u07ef\13?\3@\3@\3@\3@\3@"+
		"\3@\3@\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0801\nA\3A\5A\u0804\nA\3A\5A\u0807"+
		"\nA\3A\3A\5A\u080b\nA\3A\3A\3B\3B\3B\3B\7B\u0813\nB\fB\16B\u0816\13B\3"+
		"C\3C\3C\3C\3C\3C\3C\3C\7C\u0820\nC\fC\16C\u0823\13C\3C\3C\3D\3D\5D\u0829"+
		"\nD\3D\5D\u082c\nD\3D\3D\3D\3D\3D\7D\u0833\nD\fD\16D\u0836\13D\3D\5D\u0839"+
		"\nD\3E\3E\3E\5E\u083e\nE\3E\3E\3E\3E\5E\u0844\nE\3E\3E\5E\u0848\nE\3E"+
		"\3E\3E\3E\7E\u084e\nE\fE\16E\u0851\13E\3E\3E\3E\3E\3E\3E\5E\u0859\nE\3"+
		"E\3E\3E\5E\u085e\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u086a\nE\3E\3E\3"+
		"E\5E\u086f\nE\3E\5E\u0872\nE\3E\3E\3E\3E\3E\3E\3E\5E\u087b\nE\3E\3E\3"+
		"E\3E\3E\3E\3E\5E\u0884\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0890\nE\3"+
		"E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u08a3\nE\3E\3E\3"+
		"E\5E\u08a8\nE\3E\3E\3E\3E\5E\u08ae\nE\3E\3E\3E\3E\3E\7E\u08b5\nE\fE\16"+
		"E\u08b8\13E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3"+
		"E\5E\u08ce\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\7E\u08da\nE\fE\16E\u08dd\13"+
		"E\3E\3E\3E\3E\3E\7E\u08e4\nE\fE\16E\u08e7\13E\3E\3E\3E\3E\3E\3E\3E\7E"+
		"\u08f0\nE\fE\16E\u08f3\13E\3E\3E\3E\3E\3E\3E\3E\7E\u08fc\nE\fE\16E\u08ff"+
		"\13E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u090d\nE\3E\3E\3E\3E\3E\7"+
		"E\u0914\nE\fE\16E\u0917\13E\3E\3E\3E\3E\3E\7E\u091e\nE\fE\16E\u0921\13"+
		"E\3E\3E\3E\3E\3E\7E\u0928\nE\fE\16E\u092b\13E\3E\3E\3E\3E\3E\7E\u0932"+
		"\nE\fE\16E\u0935\13E\3E\3E\3E\3E\3E\7E\u093c\nE\fE\16E\u093f\13E\3E\3"+
		"E\3E\3E\5E\u0945\nE\3F\3F\3F\3F\3F\5F\u094c\nF\3G\3G\5G\u0950\nG\3H\3"+
		"H\3H\3H\3H\3H\3H\3H\3H\5H\u095b\nH\3H\5H\u095e\nH\3H\3H\5H\u0962\nH\3"+
		"H\3H\3I\3I\3I\3I\5I\u096a\nI\3I\5I\u096d\nI\3I\3I\3I\5I\u0972\nI\3I\3"+
		"I\3I\3I\3I\3I\7I\u097a\nI\fI\16I\u097d\13I\3I\3I\5I\u0981\nI\3I\3I\3I"+
		"\3I\5I\u0987\nI\3I\3I\5I\u098b\nI\3J\3J\3J\5J\u0990\nJ\3J\3J\3K\3K\3K"+
		"\5K\u0997\nK\3K\3K\3L\3L\3L\5L\u099e\nL\3L\3L\3M\3M\3M\5M\u09a5\nM\3M"+
		"\3M\3M\3M\7M\u09ab\nM\fM\16M\u09ae\13M\3N\3N\5N\u09b2\nN\3O\3O\3O\3O\3"+
		"O\3O\3O\3O\3P\3P\3P\5P\u09bf\nP\3P\3P\3Q\3Q\3Q\5Q\u09c6\nQ\3Q\3Q\3R\3"+
		"R\3R\5R\u09cd\nR\3R\3R\3S\3S\5S\u09d3\nS\3S\3S\5S\u09d7\nS\3S\3S\3S\7"+
		"S\u09dc\nS\fS\16S\u09df\13S\3S\5S\u09e2\nS\3T\3T\3T\3T\3T\5T\u09e9\nT"+
		"\3T\5T\u09ec\nT\3U\3U\3U\5U\u09f1\nU\3U\3U\3V\3V\3V\5V\u09f8\nV\3V\3V"+
		"\3V\7V\u09fd\nV\fV\16V\u0a00\13V\3V\5V\u0a03\nV\3W\3W\3W\3W\3W\7W\u0a0a"+
		"\nW\fW\16W\u0a0d\13W\3X\3X\3X\3X\3Y\3Y\5Y\u0a15\nY\3Y\3Y\3Z\3Z\3[\3[\5"+
		"[\u0a1d\n[\3\\\3\\\5\\\u0a21\n\\\3]\3]\5]\u0a25\n]\3]\5]\u0a28\n]\3]\5"+
		"]\u0a2b\n]\3]\5]\u0a2e\n]\3]\5]\u0a31\n]\3]\5]\u0a34\n]\3]\5]\u0a37\n"+
		"]\3]\5]\u0a3a\n]\3]\3]\3]\7]\u0a3f\n]\f]\16]\u0a42\13]\3]\5]\u0a45\n]"+
		"\3]\5]\u0a48\n]\3]\5]\u0a4b\n]\3]\5]\u0a4e\n]\3]\5]\u0a51\n]\3]\5]\u0a54"+
		"\n]\3]\5]\u0a57\n]\3^\3^\3_\3_\3_\3_\5_\u0a5f\n_\3_\5_\u0a62\n_\3_\5_"+
		"\u0a65\n_\3`\3`\3`\3`\6`\u0a6b\n`\r`\16`\u0a6c\3`\5`\u0a70\n`\3`\5`\u0a73"+
		"\n`\3`\5`\u0a76\n`\3a\3a\3b\3b\5b\u0a7c\nb\3c\3c\5c\u0a80\nc\3c\5c\u0a83"+
		"\nc\3d\3d\5d\u0a87\nd\3e\3e\3e\3f\3f\5f\u0a8e\nf\3g\3g\5g\u0a92\ng\3g"+
		"\5g\u0a95\ng\3g\3g\3g\3g\7g\u0a9b\ng\fg\16g\u0a9e\13g\5g\u0aa0\ng\5g\u0aa2"+
		"\ng\3g\3g\3g\3g\5g\u0aa8\ng\3g\3g\3g\3g\3g\7g\u0aaf\ng\fg\16g\u0ab2\13"+
		"g\3g\3g\5g\u0ab6\ng\3g\3g\3g\3g\3g\3g\3g\3g\3g\5g\u0ac1\ng\3h\3h\6h\u0ac5"+
		"\nh\rh\16h\u0ac6\3i\3i\3i\3i\3i\7i\u0ace\ni\fi\16i\u0ad1\13i\3i\3i\3j"+
		"\3j\3j\3j\5j\u0ad9\nj\3j\3j\3j\3j\7j\u0adf\nj\fj\16j\u0ae2\13j\3j\3j\3"+
		"j\3j\3j\3j\5j\u0aea\nj\3j\3j\3j\3j\7j\u0af0\nj\fj\16j\u0af3\13j\3j\3j"+
		"\3j\3j\3j\3j\5j\u0afb\nj\3j\3j\3j\3j\7j\u0b01\nj\fj\16j\u0b04\13j\3j\3"+
		"j\3j\3j\3j\3j\5j\u0b0c\nj\3j\3j\3j\3j\7j\u0b12\nj\fj\16j\u0b15\13j\3j"+
		"\3j\3j\3j\3j\3j\5j\u0b1d\nj\3j\3j\3j\3j\7j\u0b23\nj\fj\16j\u0b26\13j\3"+
		"j\3j\3j\3j\3j\3j\5j\u0b2e\nj\3j\3j\3j\3j\7j\u0b34\nj\fj\16j\u0b37\13j"+
		"\3j\3j\5j\u0b3b\nj\3k\3k\3k\3k\3k\5k\u0b42\nk\3l\3l\3m\3m\3m\5m\u0b49"+
		"\nm\3n\3n\3n\3n\3n\3n\3n\7n\u0b52\nn\fn\16n\u0b55\13n\3n\3n\5n\u0b59\n"+
		"n\3o\3o\3o\3p\3p\3p\3p\3p\7p\u0b63\np\fp\16p\u0b66\13p\3p\5p\u0b69\np"+
		"\5p\u0b6b\np\3p\5p\u0b6e\np\3q\3q\3q\3r\3r\3s\3s\3s\3s\3s\7s\u0b7a\ns"+
		"\fs\16s\u0b7d\13s\3s\5s\u0b80\ns\3t\3t\5t\u0b84\nt\3u\3u\3u\3u\5u\u0b8a"+
		"\nu\3u\3u\3u\3u\3u\5u\u0b91\nu\3v\3v\3v\3v\7v\u0b97\nv\fv\16v\u0b9a\13"+
		"v\3v\3v\3v\3v\3v\3v\3v\5v\u0ba3\nv\3v\3v\6v\u0ba7\nv\rv\16v\u0ba8\5v\u0bab"+
		"\nv\3v\3v\6v\u0baf\nv\rv\16v\u0bb0\5v\u0bb3\nv\5v\u0bb5\nv\3w\3w\3w\3"+
		"w\3w\3w\7w\u0bbd\nw\fw\16w\u0bc0\13w\5w\u0bc2\nw\3w\5w\u0bc5\nw\3w\3w"+
		"\3w\3w\5w\u0bcb\nw\3x\3x\3x\5x\u0bd0\nx\3y\3y\5y\u0bd4\ny\3y\5y\u0bd7"+
		"\ny\3y\5y\u0bda\ny\3y\5y\u0bdd\ny\3y\5y\u0be0\ny\3y\5y\u0be3\ny\3y\5y"+
		"\u0be6\ny\3y\5y\u0be9\ny\3y\3y\3y\7y\u0bee\ny\fy\16y\u0bf1\13y\3y\3y\3"+
		"y\3y\7y\u0bf7\ny\fy\16y\u0bfa\13y\3y\5y\u0bfd\ny\3y\5y\u0c00\ny\3y\5y"+
		"\u0c03\ny\3y\5y\u0c06\ny\3y\5y\u0c09\ny\3y\5y\u0c0c\ny\3y\5y\u0c0f\ny"+
		"\3z\3z\3{\3{\5{\u0c15\n{\3{\5{\u0c18\n{\3{\5{\u0c1b\n{\3{\3{\3{\3{\3{"+
		"\7{\u0c22\n{\f{\16{\u0c25\13{\3{\3{\5{\u0c29\n{\3{\3{\5{\u0c2d\n{\3|\3"+
		"|\3|\5|\u0c32\n|\3}\3}\3}\3}\7}\u0c38\n}\f}\16}\u0c3b\13}\3~\3~\3~\3~"+
		"\7~\u0c41\n~\f~\16~\u0c44\13~\3~\3~\3\177\3\177\3\177\3\177\3\177\3\177"+
		"\3\177\7\177\u0c4f\n\177\f\177\16\177\u0c52\13\177\3\u0080\3\u0080\5\u0080"+
		"\u0c56\n\u0080\3\u0080\5\u0080\u0c59\n\u0080\3\u0080\3\u0080\5\u0080\u0c5d"+
		"\n\u0080\3\u0080\5\u0080\u0c60\n\u0080\3\u0080\5\u0080\u0c63\n\u0080\3"+
		"\u0080\5\u0080\u0c66\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081\u0c6c"+
		"\n\u0081\f\u0081\16\u0081\u0c6f\13\u0081\3\u0082\3\u0082\3\u0082\3\u0082"+
		"\3\u0083\3\u0083\5\u0083\u0c77\n\u0083\3\u0083\5\u0083\u0c7a\n\u0083\3"+
		"\u0083\5\u0083\u0c7d\n\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0c82\n\u0083"+
		"\3\u0083\5\u0083\u0c85\n\u0083\3\u0083\5\u0083\u0c88\n\u0083\3\u0083\5"+
		"\u0083\u0c8b\n\u0083\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\5\u0085\u0c92"+
		"\n\u0085\3\u0085\5\u0085\u0c95\n\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\7\u0085\u0c9c\n\u0085\f\u0085\16\u0085\u0c9f\13\u0085\3\u0085"+
		"\3\u0085\5\u0085\u0ca3\n\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u0caa\n\u0086\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088"+
		"\5\u0088\u0cb2\n\u0088\3\u0088\5\u0088\u0cb5\n\u0088\3\u0088\3\u0088\3"+
		"\u0088\5\u0088\u0cba\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3"+
		"\u0088\3\u0088\3\u0088\7\u0088\u0cc4\n\u0088\f\u0088\16\u0088\u0cc7\13"+
		"\u0088\3\u0088\3\u0088\5\u0088\u0ccb\n\u0088\3\u0088\3\u0088\3\u0088\5"+
		"\u0088\u0cd0\n\u0088\3\u0088\3\u0088\6\u0088\u0cd4\n\u0088\r\u0088\16"+
		"\u0088\u0cd5\5\u0088\u0cd8\n\u0088\3\u0088\3\u0088\6\u0088\u0cdc\n\u0088"+
		"\r\u0088\16\u0088\u0cdd\5\u0088\u0ce0\n\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0ce6\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088"+
		"\u0cec\n\u0088\f\u0088\16\u0088\u0cef\13\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0cf3\n\u0088\3\u0088\5\u0088\u0cf6\n\u0088\3\u0089\3\u0089\3\u0089\5"+
		"\u0089\u0cfb\n\u0089\3\u0089\5\u0089\u0cfe\n\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u0d03\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\5\u0089\u0d0b\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\5\u0089\u0d14\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089"+
		"\u0d1a\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\7\u0089\u0d20\n\u0089\f"+
		"\u0089\16\u0089\u0d23\13\u0089\3\u0089\3\u0089\5\u0089\u0d27\n\u0089\3"+
		"\u0089\5\u0089\u0d2a\n\u0089\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a\u0d30"+
		"\n\u008a\f\u008a\16\u008a\u0d33\13\u008a\3\u008b\3\u008b\3\u008b\5\u008b"+
		"\u0d38\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0d3e\n\u008c\3"+
		"\u008c\5\u008c\u0d41\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0d47"+
		"\n\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d\u0d4e\n\u008d"+
		"\f\u008d\16\u008d\u0d51\13\u008d\3\u008d\3\u008d\5\u008d\u0d55\n\u008d"+
		"\3\u008d\5\u008d\u0d58\n\u008d\3\u008d\5\u008d\u0d5b\n\u008d\3\u008d\5"+
		"\u008d\u0d5e\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3"+
		"\u008f\3\u008f\5\u008f\u0d68\n\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3"+
		"\u008f\3\u008f\5\u008f\u0d70\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3"+
		"\u0090\3\u0090\5\u0090\u0d78\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3"+
		"\u0091\7\u0091\u0d7f\n\u0091\f\u0091\16\u0091\u0d82\13\u0091\5\u0091\u0d84"+
		"\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092"+
		"\u0d8d\n\u0092\3\u0093\3\u0093\5\u0093\u0d91\n\u0093\3\u0094\3\u0094\5"+
		"\u0094\u0d95\n\u0094\3\u0094\3\u0094\5\u0094\u0d99\n\u0094\3\u0094\5\u0094"+
		"\u0d9c\n\u0094\3\u0094\5\u0094\u0d9f\n\u0094\3\u0094\5\u0094\u0da2\n\u0094"+
		"\3\u0095\3\u0095\5\u0095\u0da6\n\u0095\3\u0095\3\u0095\5\u0095\u0daa\n"+
		"\u0095\3\u0095\5\u0095\u0dad\n\u0095\3\u0095\5\u0095\u0db0\n\u0095\3\u0095"+
		"\5\u0095\u0db3\n\u0095\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\5\u0097"+
		"\u0dba\n\u0097\3\u0097\3\u0097\5\u0097\u0dbe\n\u0097\3\u0097\3\u0097\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\7\u0099\u0dcb\n\u0099\f\u0099\16\u0099\u0dce\13\u0099\3\u009a\3\u009a"+
		"\5\u009a\u0dd2\n\u009a\3\u009a\5\u009a\u0dd5\n\u009a\3\u009a\3\u009a\3"+
		"\u009b\3\u009b\5\u009b\u0ddb\n\u009b\3\u009b\5\u009b\u0dde\n\u009b\3\u009b"+
		"\5\u009b\u0de1\n\u009b\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\5\u009e\u0df2\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\5\u009f\u0dfb\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\7\u00a0\u0e03\n\u00a0\f\u00a0\16\u00a0\u0e06\13\u00a0\3\u00a0"+
		"\5\u00a0\u0e09\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\7\u00a1\u0e11\n\u00a1\f\u00a1\16\u00a1\u0e14\13\u00a1\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0e1d\n\u00a2\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0e25\n\u00a4\3\u00a4"+
		"\5\u00a4\u0e28\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5"+
		"\u0e2f\n\u00a5\f\u00a5\16\u00a5\u0e32\13\u00a5\5\u00a5\u0e34\n\u00a5\3"+
		"\u00a5\3\u00a5\5\u00a5\u0e38\n\u00a5\3\u00a5\7\u00a5\u0e3b\n\u00a5\f\u00a5"+
		"\16\u00a5\u0e3e\13\u00a5\3\u00a5\5\u00a5\u0e41\n\u00a5\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\7\u00a6\u0e48\n\u00a6\f\u00a6\16\u00a6\u0e4b"+
		"\13\u00a6\5\u00a6\u0e4d\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0e6a\n\u00a9\f\u00a9\16\u00a9"+
		"\u0e6d\13\u00a9\5\u00a9\u0e6f\n\u00a9\3\u00a9\5\u00a9\u0e72\n\u00a9\3"+
		"\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0e84"+
		"\n\u00ae\f\u00ae\16\u00ae\u0e87\13\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0e91\n\u00ae\f\u00ae\16\u00ae"+
		"\u0e94\13\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\7\u00ae\u0e9e\n\u00ae\f\u00ae\16\u00ae\u0ea1\13\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0eab"+
		"\n\u00ae\f\u00ae\16\u00ae\u0eae\13\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0ec4"+
		"\n\u00ae\f\u00ae\16\u00ae\u0ec7\13\u00ae\3\u00ae\3\u00ae\5\u00ae\u0ecb"+
		"\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\5\u00b1\u0ee9\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2"+
		"\u0ef7\n\u00b2\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0efc\n\u00b3\f\u00b3\16"+
		"\u00b3\u0eff\13\u00b3\3\u00b3\5\u00b3\u0f02\n\u00b3\3\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\5\u00b4\u0f08\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\5\u00b5\u0f10\n\u00b5\5\u00b5\u0f12\n\u00b5\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0f1d"+
		"\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\5\u00b9\u0f27\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0f32\n\u00bb\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\5\u00be\u0f3e"+
		"\n\u00be\3\u00be\3\u00be\7\u00be\u0f42\n\u00be\f\u00be\16\u00be\u0f45"+
		"\13\u00be\3\u00be\3\u00be\5\u00be\u0f49\n\u00be\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00c0\3\u00c0\3\u00c1\3\u00c1\5\u00c1\u0f52\n\u00c1\3\u00c1\6\u00c1"+
		"\u0f55\n\u00c1\r\u00c1\16\u00c1\u0f56\3\u00c1\5\u00c1\u0f5a\n\u00c1\3"+
		"\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3"+
		"\3\u00c3\6\u00c3\u0f66\n\u00c3\r\u00c3\16\u00c3\u0f67\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\6\u00c4\u0f6e\n\u00c4\r\u00c4\16\u00c4\u0f6f\3\u00c4"+
		"\7\u00c4\u0f73\n\u00c4\f\u00c4\16\u00c4\u0f76\13\u00c4\3\u00c4\3\u00c4"+
		"\6\u00c4\u0f7a\n\u00c4\r\u00c4\16\u00c4\u0f7b\5\u00c4\u0f7e\n\u00c4\3"+
		"\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\6\u00c5\u0f87\n"+
		"\u00c5\r\u00c5\16\u00c5\u0f88\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u0f94\n\u00c8\3\u00c8\3\u00c8"+
		"\6\u00c8\u0f98\n\u00c8\r\u00c8\16\u00c8\u0f99\3\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u0f9f\n\u00c8\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0fa4\n\u00c9\3"+
		"\u00c9\3\u00c9\6\u00c9\u0fa8\n\u00c9\r\u00c9\16\u00c9\u0fa9\3\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0fb1\n\u00c9\3\u00ca\3\u00ca\3"+
		"\u00ca\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0fb9\n\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\6\u00cb\u0fbf\n\u00cb\r\u00cb\16\u00cb\u0fc0\3\u00cb\3"+
		"\u00cb\3\u00cb\5\u00cb\u0fc6\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5"+
		"\u00cc\u0fcc\n\u00cc\3\u00cc\5\u00cc\u0fcf\n\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\7\u00cc\u0fd6\n\u00cc\f\u00cc\16\u00cc\u0fd9\13\u00cc"+
		"\3\u00cc\3\u00cc\5\u00cc\u0fdd\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\5\u00cd\u0fe3\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0fe9\n"+
		"\u00ce\f\u00ce\16\u00ce\u0fec\13\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0ff8\n\u00cf"+
		"\3\u00cf\5\u00cf\u0ffb\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1"+
		"\u100a\n\u00d1\f\u00d1\16\u00d1\u100d\13\u00d1\3\u00d1\3\u00d1\3\u00d2"+
		"\3\u00d2\3\u00d2\5\u00d2\u1014\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\5\u00d2\u101c\n\u00d2\3\u00d3\3\u00d3\3\u00d3\5\u00d3"+
		"\u1021\n\u00d3\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u1026\n\u00d3\f\u00d3\16"+
		"\u00d3\u1029\13\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u102e\n\u00d3\3"+
		"\u00d3\3\u00d3\3\u00d3\7\u00d3\u1033\n\u00d3\f\u00d3\16\u00d3\u1036\13"+
		"\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u103c\n\u00d3\3\u00d3\7"+
		"\u00d3\u103f\n\u00d3\f\u00d3\16\u00d3\u1042\13\u00d3\5\u00d3\u1044\n\u00d3"+
		"\5\u00d3\u1046\n\u00d3\3\u00d3\3\u00d3\6\u00d3\u104a\n\u00d3\r\u00d3\16"+
		"\u00d3\u104b\5\u00d3\u104e\n\u00d3\3\u00d3\3\u00d3\7\u00d3\u1052\n\u00d3"+
		"\f\u00d3\16\u00d3\u1055\13\u00d3\5\u00d3\u1057\n\u00d3\3\u00d4\3\u00d4"+
		"\3\u00d4\5\u00d4\u105c\n\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4\u1061\n"+
		"\u00d4\f\u00d4\16\u00d4\u1064\13\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\5\u00d4\u106a\n\u00d4\3\u00d4\7\u00d4\u106d\n\u00d4\f\u00d4\16\u00d4"+
		"\u1070\13\u00d4\5\u00d4\u1072\n\u00d4\5\u00d4\u1074\n\u00d4\3\u00d4\3"+
		"\u00d4\6\u00d4\u1078\n\u00d4\r\u00d4\16\u00d4\u1079\5\u00d4\u107c\n\u00d4"+
		"\3\u00d4\3\u00d4\7\u00d4\u1080\n\u00d4\f\u00d4\16\u00d4\u1083\13\u00d4"+
		"\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1088\n\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\7\u00d5\u108d\n\u00d5\f\u00d5\16\u00d5\u1090\13\u00d5\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\7\u00d6\u1096\n\u00d6\f\u00d6\16\u00d6\u1099\13\u00d6"+
		"\3\u00d6\3\u00d6\5\u00d6\u109d\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\7\u00d6\u10a4\n\u00d6\f\u00d6\16\u00d6\u10a7\13\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u10ad\n\u00d6\3\u00d6\7\u00d6\u10b0\n"+
		"\u00d6\f\u00d6\16\u00d6\u10b3\13\u00d6\5\u00d6\u10b5\n\u00d6\5\u00d6\u10b7"+
		"\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\7\u00d6\u10bd\n\u00d6\f\u00d6"+
		"\16\u00d6\u10c0\13\u00d6\5\u00d6\u10c2\n\u00d6\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u10cc\n\u00d7\f\u00d7"+
		"\16\u00d7\u10cf\13\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u10d4\n\u00d7"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u10db\n\u00d8\f\u00d8"+
		"\16\u00d8\u10de\13\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u10e4"+
		"\n\u00d9\f\u00d9\16\u00d9\u10e7\13\u00d9\3\u00d9\3\u00d9\5\u00d9\u10eb"+
		"\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u10f2\n\u00d9"+
		"\f\u00d9\16\u00d9\u10f5\13\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u10fa"+
		"\n\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9"+
		"\u1103\n\u00d9\f\u00d9\16\u00d9\u1106\13\u00d9\5\u00d9\u1108\n\u00d9\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da"+
		"\u1112\n\u00da\f\u00da\16\u00da\u1115\13\u00da\3\u00db\3\u00db\3\u00db"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\5\u00dc\u1124\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u112f\n\u00dc\3\u00dc\5\u00dc"+
		"\u1132\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\5\u00dd\u113c\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u1146\n\u00de\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1150\n\u00df\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u115a"+
		"\n\u00e1\f\u00e1\16\u00e1\u115d\13\u00e1\3\u00e1\3\u00e1\5\u00e1\u1161"+
		"\n\u00e1\3\u00e2\3\u00e2\5\u00e2\u1165\n\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u1169\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\5\u00e2\u1172\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\5\u00e2\u118d\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3"+
		"\u119c\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\5\u00e5"+
		"\u11a4\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u11aa\n\u00e5\f"+
		"\u00e5\16\u00e5\u11ad\13\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\7\u00e6\u11b4\n\u00e6\f\u00e6\16\u00e6\u11b7\13\u00e6\3\u00e6\7\u00e6"+
		"\u11ba\n\u00e6\f\u00e6\16\u00e6\u11bd\13\u00e6\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\7\u00e7\u11c4\n\u00e7\f\u00e7\16\u00e7\u11c7\13\u00e7"+
		"\3\u00e7\5\u00e7\u11ca\n\u00e7\3\u00e8\3\u00e8\5\u00e8\u11ce\n\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u11d4\n\u00e8\f\u00e8\16\u00e8"+
		"\u11d7\13\u00e8\3\u00e9\3\u00e9\5\u00e9\u11db\n\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\7\u00e9\u11e1\n\u00e9\f\u00e9\16\u00e9\u11e4\13\u00e9"+
		"\3\u00e9\5\u00e9\u11e7\n\u00e9\3\u00e9\5\u00e9\u11ea\n\u00e9\3\u00e9\5"+
		"\u00e9\u11ed\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\5\u00ea\u11f6\n\u00ea\3\u00eb\3\u00eb\5\u00eb\u11fa\n\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u1213\n\u00ee\f\u00ee\16\u00ee"+
		"\u1216\13\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u121c\n\u00ee"+
		"\f\u00ee\16\u00ee\u121f\13\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee"+
		"\u1225\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u122b\n\u00ee\3"+
		"\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u1231\n\u00ee\f\u00ee\16\u00ee"+
		"\u1234\13\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u1242\n\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u1248\n\u00ee\f\u00ee\16\u00ee\u124b"+
		"\13\u00ee\3\u00ee\5\u00ee\u124e\n\u00ee\3\u00ef\3\u00ef\3\u00ef\5\u00ef"+
		"\u1253\n\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\5\u00f0\u125d\n\u00f0\3\u00f0\3\u00f0\5\u00f0\u1261\n\u00f0\3"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u1267\n\u00f0\3\u00f0\5\u00f0\u126a"+
		"\n\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u126f\n\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u1273\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0"+
		"\u127a\n\u00f0\3\u00f0\5\u00f0\u127d\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3"+
		"\u00f0\5\u00f0\u1283\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0"+
		"\u129b\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u12a8\n\u00f0\3\u00f0\5\u00f0"+
		"\u12ab\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\5\u00f0\u12b5\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\5\u00f0\u12bd\n\u00f0\3\u00f0\3\u00f0\5\u00f0\u12c1\n\u00f0\3"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u12c9\n\u00f0\3"+
		"\u00f0\3\u00f0\5\u00f0\u12cd\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3"+
		"\u00f0\3\u00f0\5\u00f0\u12d5\n\u00f0\3\u00f0\3\u00f0\5\u00f0\u12d9\n\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u12e0\n\u00f0\3\u00f0"+
		"\5\u00f0\u12e3\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0"+
		"\u12ea\n\u00f0\f\u00f0\16\u00f0\u12ed\13\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u12f2\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u12f8\n"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u1302\n\u00f0\5\u00f0\u1304\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3"+
		"\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1310\n"+
		"\u00f1\3\u00f1\5\u00f1\u1313\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5"+
		"\u00f2\u1319\n\u00f2\3\u00f3\5\u00f3\u131c\n\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1324\n\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u132c\n\u00f3\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\5\u00f4\u1332\n\u00f4\3\u00f4\3\u00f4\5\u00f4\u1336\n\u00f4\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1344\n\u00f5\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7\u134e\n\u00f7\f\u00f7"+
		"\16\u00f7\u1351\13\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\7\u00f7"+
		"\u1358\n\u00f7\f\u00f7\16\u00f7\u135b\13\u00f7\3\u00f7\5\u00f7\u135e\n"+
		"\u00f7\3\u00f7\5\u00f7\u1361\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3"+
		"\u00f8\5\u00f8\u1368\n\u00f8\3\u00f8\3\u00f8\3\u00f8\7\u00f8\u136d\n\u00f8"+
		"\f\u00f8\16\u00f8\u1370\13\u00f8\3\u00f9\3\u00f9\5\u00f9\u1374\n\u00f9"+
		"\3\u00f9\6\u00f9\u1377\n\u00f9\r\u00f9\16\u00f9\u1378\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\7\u00fa\u1382\n\u00fa\f\u00fa"+
		"\16\u00fa\u1385\13\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc"+
		"\3\u00fd\3\u00fd\5\u00fd\u138f\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\7\u00fd\u1395\n\u00fd\f\u00fd\16\u00fd\u1398\13\u00fd\3\u00fd\3\u00fd"+
		"\5\u00fd\u139c\n\u00fd\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u13a1\n\u00fe\3"+
		"\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\5\u00fe\u13ae\n\u00fe\5\u00fe\u13b0\n\u00fe\3\u00fe\3"+
		"\u00fe\3\u00fe\5\u00fe\u13b5\n\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\7"+
		"\u00fe\u13bb\n\u00fe\f\u00fe\16\u00fe\u13be\13\u00fe\3\u00fe\5\u00fe\u13c1"+
		"\n\u00fe\5\u00fe\u13c3\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\5\u00ff\u13ca\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\7\u0100\u13d2\n\u0100\f\u0100\16\u0100\u13d5\13\u0100\3\u0100\5\u0100"+
		"\u13d8\n\u0100\3\u0100\5\u0100\u13db\n\u0100\3\u0100\5\u0100\u13de\n\u0100"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\7\u0100\u13e4\n\u0100\f\u0100\16\u0100"+
		"\u13e7\13\u0100\3\u0100\3\u0100\5\u0100\u13eb\n\u0100\3\u0100\3\u0100"+
		"\5\u0100\u13ef\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u13f5\n"+
		"\u0101\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u13fb\n\u0102\3\u0102\3"+
		"\u0102\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\5\u0105\u140a\n\u0105\3\u0105\3\u0105\3\u0105"+
		"\5\u0105\u140f\n\u0105\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\6\u0107\u1421\n\u0107\r\u0107\16\u0107\u1422\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\5\u0108\u142a\n\u0108\5\u0108\u142c\n\u0108\3"+
		"\u0109\3\u0109\3\u0109\6\u0109\u1431\n\u0109\r\u0109\16\u0109\u1432\5"+
		"\u0109\u1435\n\u0109\3\u010a\3\u010a\5\u010a\u1439\n\u010a\3\u010b\3\u010b"+
		"\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d\5\u010d\u1442\n\u010d\3\u010d"+
		"\3\u010d\5\u010d\u1446\n\u010d\3\u010d\5\u010d\u1449\n\u010d\3\u010d\3"+
		"\u010d\3\u010d\5\u010d\u144e\n\u010d\3\u010d\3\u010d\5\u010d\u1452\n\u010d"+
		"\5\u010d\u1454\n\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110"+
		"\u1464\n\u0110\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\7\u0111\u146b\n"+
		"\u0111\f\u0111\16\u0111\u146e\13\u0111\3\u0112\3\u0112\3\u0112\7\u0112"+
		"\u1473\n\u0112\f\u0112\16\u0112\u1476\13\u0112\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\7\u0113\u147c\n\u0113\f\u0113\16\u0113\u147f\13\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1486\n\u0113\3\u0114\3\u0114"+
		"\5\u0114\u148a\n\u0114\3\u0115\3\u0115\3\u0115\5\u0115\u148f\n\u0115\3"+
		"\u0115\3\u0115\3\u0115\7\u0115\u1494\n\u0115\f\u0115\16\u0115\u1497\13"+
		"\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u149f\n"+
		"\u0115\3\u0115\3\u0115\3\u0115\7\u0115\u14a4\n\u0115\f\u0115\16\u0115"+
		"\u14a7\13\u0115\5\u0115\u14a9\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\3\u0115\7\u0115\u14b2\n\u0115\f\u0115\16\u0115\u14b5"+
		"\13\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u14bc\n\u0115"+
		"\3\u0115\3\u0115\3\u0115\7\u0115\u14c1\n\u0115\f\u0115\16\u0115\u14c4"+
		"\13\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u14cb\n\u0115"+
		"\3\u0115\3\u0115\3\u0115\7\u0115\u14d0\n\u0115\f\u0115\16\u0115\u14d3"+
		"\13\u0115\3\u0115\5\u0115\u14d6\n\u0115\3\u0115\3\u0115\5\u0115\u14da"+
		"\n\u0115\3\u0115\3\u0115\5\u0115\u14de\n\u0115\3\u0116\3\u0116\3\u0117"+
		"\3\u0117\3\u0118\3\u0118\3\u0119\3\u0119\3\u011a\3\u011a\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\5\u011b\u14f8\n\u011b\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1501\n\u011c\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\5\u011d\u1508\n\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\5\u011d\u150f\n\u011d\3\u011d\5\u011d\u1512\n\u011d\3"+
		"\u011d\5\u011d\u1515\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5"+
		"\u011d\u151c\n\u011d\3\u011d\5\u011d\u151f\n\u011d\3\u011d\5\u011d\u1522"+
		"\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1529\n\u011d"+
		"\3\u011d\5\u011d\u152c\n\u011d\3\u011d\5\u011d\u152f\n\u011d\3\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1536\n\u011d\3\u011d\5\u011d\u1539"+
		"\n\u011d\3\u011d\5\u011d\u153c\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\5\u011d\u1543\n\u011d\3\u011d\5\u011d\u1546\n\u011d\3\u011d\5"+
		"\u011d\u1549\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1550"+
		"\n\u011d\3\u011d\5\u011d\u1553\n\u011d\3\u011d\5\u011d\u1556\n\u011d\3"+
		"\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u155d\n\u011d\3\u011d\3"+
		"\u011d\5\u011d\u1561\n\u011d\3\u011d\5\u011d\u1564\n\u011d\3\u011d\5\u011d"+
		"\u1567\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u156e\n"+
		"\u011d\3\u011d\3\u011d\5\u011d\u1572\n\u011d\3\u011d\5\u011d\u1575\n\u011d"+
		"\3\u011d\5\u011d\u1578\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\5\u011d\u157f\n\u011d\3\u011d\3\u011d\5\u011d\u1583\n\u011d\3\u011d\5"+
		"\u011d\u1586\n\u011d\3\u011d\5\u011d\u1589\n\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\5\u011d\u1590\n\u011d\3\u011d\3\u011d\5\u011d\u1594\n"+
		"\u011d\3\u011d\5\u011d\u1597\n\u011d\3\u011d\5\u011d\u159a\n\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\7\u011d\u15a1\n\u011d\f\u011d\16\u011d"+
		"\u15a4\13\u011d\3\u011d\3\u011d\5\u011d\u15a8\n\u011d\3\u011d\5\u011d"+
		"\u15ab\n\u011d\3\u011d\5\u011d\u15ae\n\u011d\3\u011d\3\u011d\3\u011d\3"+
		"\u011d\3\u011d\7\u011d\u15b5\n\u011d\f\u011d\16\u011d\u15b8\13\u011d\3"+
		"\u011d\3\u011d\5\u011d\u15bc\n\u011d\3\u011d\5\u011d\u15bf\n\u011d\3\u011d"+
		"\5\u011d\u15c2\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\7\u011d\u15ca\n\u011d\f\u011d\16\u011d\u15cd\13\u011d\3\u011d\3\u011d"+
		"\5\u011d\u15d1\n\u011d\3\u011d\5\u011d\u15d4\n\u011d\3\u011d\5\u011d\u15d7"+
		"\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\7\u011d\u15de\n\u011d"+
		"\f\u011d\16\u011d\u15e1\13\u011d\3\u011d\3\u011d\5\u011d\u15e5\n\u011d"+
		"\3\u011d\5\u011d\u15e8\n\u011d\3\u011d\5\u011d\u15eb\n\u011d\5\u011d\u15ed"+
		"\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u15f4\n\u011e"+
		"\3\u011e\5\u011e\u15f7\n\u011e\3\u011e\5\u011e\u15fa\n\u011e\3\u011e\3"+
		"\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1602\n\u011e\3\u011e\5"+
		"\u011e\u1605\n\u011e\3\u011e\5\u011e\u1608\n\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\3\u011e\5\u011e\u160f\n\u011e\3\u011e\5\u011e\u1612\n\u011e\3"+
		"\u011e\5\u011e\u1615\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3"+
		"\u011e\5\u011e\u161d\n\u011e\3\u011e\5\u011e\u1620\n\u011e\3\u011e\5\u011e"+
		"\u1623\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u162a\n"+
		"\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1631\n\u011e\3"+
		"\u011e\3\u011e\3\u011e\5\u011e\u1636\n\u011e\3\u011e\5\u011e\u1639\n\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1640\n\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1647\n\u011e\3\u011e\5\u011e"+
		"\u164a\n\u011e\3\u011e\5\u011e\u164d\n\u011e\3\u011e\3\u011e\3\u011e\5"+
		"\u011e\u1652\n\u011e\3\u011e\5\u011e\u1655\n\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u165a\n\u011e\3\u011e\5\u011e\u165d\n\u011e\3\u011e\3\u011e\3"+
		"\u011e\3\u011e\3\u011e\7\u011e\u1664\n\u011e\f\u011e\16\u011e\u1667\13"+
		"\u011e\3\u011e\3\u011e\5\u011e\u166b\n\u011e\3\u011e\5\u011e\u166e\n\u011e"+
		"\3\u011e\5\u011e\u1671\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\7\u011e\u1678\n\u011e\f\u011e\16\u011e\u167b\13\u011e\3\u011e\3\u011e"+
		"\5\u011e\u167f\n\u011e\3\u011e\5\u011e\u1682\n\u011e\3\u011e\5\u011e\u1685"+
		"\n\u011e\5\u011e\u1687\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\5\u011f\u168f\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\5\u011f\u1696\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f"+
		"\u169d\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u16a4\n"+
		"\u011f\5\u011f\u16a6\n\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3"+
		"\u0120\3\u0120\3\u0120\5\u0120\u16b0\n\u0120\3\u0121\3\u0121\5\u0121\u16b4"+
		"\n\u0121\3\u0122\3\u0122\3\u0123\3\u0123\3\u0123\5\u0123\u16bb\n\u0123"+
		"\3\u0123\3\u0123\7\u0123\u16bf\n\u0123\f\u0123\16\u0123\u16c2\13\u0123"+
		"\3\u0123\5\u0123\u16c5\n\u0123\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\5\u0124\u16cd\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\6\u0125"+
		"\u16d3\n\u0125\r\u0125\16\u0125\u16d4\5\u0125\u16d7\n\u0125\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u16df\n\u0126\3\u0126\3"+
		"\u0126\5\u0126\u16e3\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\5\u0126\u16f5\n\u0126\3\u0127\3\u0127\3\u0128\5\u0128"+
		"\u16fa\n\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u16ff\n\u0128\3\u0129\3"+
		"\u0129\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1711\n\u012d"+
		"\3\u012d\3\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u171a"+
		"\n\u012e\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f"+
		"\u1723\n\u012f\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\5\u0130\u172c\n\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\7\u0131\u1735\n\u0131\f\u0131\16\u0131\u1738\13\u0131\3\u0131"+
		"\3\u0131\3\u0132\5\u0132\u173d\n\u0132\3\u0132\3\u0132\5\u0132\u1741\n"+
		"\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\7\u0133\u1748\n\u0133\f"+
		"\u0133\16\u0133\u174b\13\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\5\u0133\u1752\n\u0133\3\u0133\3\u0133\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1767\n\u0134\3\u0135\3\u0135"+
		"\5\u0135\u176b\n\u0135\3\u0135\6\u0135\u176e\n\u0135\r\u0135\16\u0135"+
		"\u176f\3\u0135\5\u0135\u1773\n\u0135\3\u0135\3\u0135\3\u0136\3\u0136\5"+
		"\u0136\u1779\n\u0136\3\u0136\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137\3"+
		"\u0138\3\u0138\3\u0138\3\u0138\7\u0138\u1785\n\u0138\f\u0138\16\u0138"+
		"\u1788\13\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\5\u0139\u179c\n\u0139\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\7\u013a\u17be\n\u013a\f\u013a\16\u013a\u17c1\13\u013a\5\u013a"+
		"\u17c3\n\u013a\3\u013a\5\u013a\u17c6\n\u013a\3\u013a\3\u013a\3\u013a\3"+
		"\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1818\n\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\5\u013a\u1839\n\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\5\u013a\u183f\n\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a"+
		"\u1845\n\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u185e"+
		"\n\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u1863\n\u013a\f\u013a\16\u013a"+
		"\u1866\13\u013a\5\u013a\u1868\n\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\5\u013a\u186e\n\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1873\n\u013a\3"+
		"\u013a\3\u013a\3\u013a\3\u013a\3\u013a\7\u013a\u187a\n\u013a\f\u013a\16"+
		"\u013a\u187d\13\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1883\n"+
		"\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1889\n\u013a\3\u013a\3"+
		"\u013a\3\u013a\5\u013a\u188e\n\u013a\3\u013a\3\u013a\3\u013a\3\u013a\7"+
		"\u013a\u1894\n\u013a\f\u013a\16\u013a\u1897\13\u013a\3\u013b\3\u013b\3"+
		"\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u18a8\n\u013b\3\u013c\3\u013c"+
		"\3\u013c\3\u013d\3\u013d\5\u013d\u18af\n\u013d\3\u013d\3\u013d\3\u013e"+
		"\3\u013e\5\u013e\u18b5\n\u013e\3\u013e\3\u013e\3\u013f\5\u013f\u18ba\n"+
		"\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u18bf\n\u013f\3\u013f\3\u013f\3"+
		"\u0140\5\u0140\u18c4\n\u0140\3\u0140\3\u0140\5\u0140\u18c8\n\u0140\3\u0140"+
		"\3\u0140\3\u0141\3\u0141\5\u0141\u18ce\n\u0141\3\u0141\3\u0141\3\u0142"+
		"\5\u0142\u18d3\n\u0142\3\u0142\3\u0142\5\u0142\u18d7\n\u0142\3\u0142\3"+
		"\u0142\3\u0143\3\u0143\5\u0143\u18dd\n\u0143\3\u0143\3\u0143\3\u0144\3"+
		"\u0144\5\u0144\u18e3\n\u0144\3\u0144\3\u0144\3\u0145\3\u0145\5\u0145\u18e9"+
		"\n\u0145\3\u0145\3\u0145\3\u0146\3\u0146\3\u0146\5\u0146\u18f0\n\u0146"+
		"\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147\5\u0147\u18f7\n\u0147\3\u0147"+
		"\3\u0147\3\u0148\3\u0148\5\u0148\u18fd\n\u0148\3\u0148\3\u0148\3\u0149"+
		"\3\u0149\5\u0149\u1903\n\u0149\3\u0149\3\u0149\3\u014a\3\u014a\5\u014a"+
		"\u1909\n\u014a\3\u014a\3\u014a\3\u014b\3\u014b\5\u014b\u190f\n\u014b\3"+
		"\u014b\3\u014b\3\u014c\3\u014c\5\u014c\u1915\n\u014c\3\u014c\3\u014c\3"+
		"\u014d\3\u014d\5\u014d\u191b\n\u014d\3\u014d\3\u014d\3\u014e\3\u014e\5"+
		"\u014e\u1921\n\u014e\3\u014e\3\u014e\3\u014f\3\u014f\5\u014f\u1927\n\u014f"+
		"\3\u014f\3\u014f\3\u0150\3\u0150\5\u0150\u192d\n\u0150\3\u0150\3\u0150"+
		"\3\u0151\3\u0151\5\u0151\u1933\n\u0151\3\u0151\3\u0151\3\u0152\3\u0152"+
		"\5\u0152\u1939\n\u0152\3\u0152\3\u0152\3\u0153\3\u0153\5\u0153\u193f\n"+
		"\u0153\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u1945\n\u0154\3\u0154\3"+
		"\u0154\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u194d\n\u0155\3\u0156\3"+
		"\u0156\5\u0156\u1951\n\u0156\3\u0156\3\u0156\3\u0157\3\u0157\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0159\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b"+
		"\3\u015c\3\u015c\3\u015d\3\u015d\5\u015d\u1965\n\u015d\3\u015e\3\u015e"+
		"\3\u015e\3\u015f\3\u015f\3\u015f\3\u0160\3\u0160\5\u0160\u196f\n\u0160"+
		"\3\u0160\3\u0160\5\u0160\u1973\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\7\u0162\u1986\n\u0162\f\u0162\16\u0162"+
		"\u1989\13\u0162\3\u0162\3\u0162\5\u0162\u198d\n\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u19aa"+
		"\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\5\u0162\u19b5\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\5\u0162\u19bd\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u19d3\n\u0162"+
		"\3\u0162\5\u0162\u19d6\n\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u19e1\n\u0162\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163"+
		"\3\u0163\5\u0163\u19ef\n\u0163\3\u0164\3\u0164\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\5\u0166\u1a01\n\u0166\3\u0166\3\u0166\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u1a0c\n\u0167\3\u0167"+
		"\3\u0167\3\u0168\3\u0168\3\u0168\5\u0168\u1a13\n\u0168\3\u0168\5\u0168"+
		"\u1a16\n\u0168\3\u0168\5\u0168\u1a19\n\u0168\3\u0168\3\u0168\3\u0168\3"+
		"\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u1a23\n\u0169\3\u0169\3"+
		"\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1a33\n\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016d"+
		"\3\u016d\3\u016d\5\u016d\u1a42\n\u016d\3\u016d\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\7\u016d\u1a49\n\u016d\f\u016d\16\u016d\u1a4c\13\u016d\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\7\u016d\u1a54\n\u016d\f\u016d"+
		"\16\u016d\u1a57\13\u016d\5\u016d\u1a59\n\u016d\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\7\u016e\u1a60\n\u016e\f\u016e\16\u016e\u1a63\13\u016e"+
		"\3\u016e\5\u016e\u1a66\n\u016e\3\u016e\5\u016e\u1a69\n\u016e\3\u016e\5"+
		"\u016e\u1a6c\n\u016e\3\u016e\5\u016e\u1a6f\n\u016e\3\u016e\5\u016e\u1a72"+
		"\n\u016e\3\u016e\5\u016e\u1a75\n\u016e\3\u016e\5\u016e\u1a78\n\u016e\3"+
		"\u016e\5\u016e\u1a7b\n\u016e\3\u016e\5\u016e\u1a7e\n\u016e\3\u016e\3\u016e"+
		"\3\u016f\3\u016f\3\u0170\3\u0170\3\u0170\5\u0170\u1a87\n\u0170\3\u0171"+
		"\3\u0171\3\u0171\3\u0172\5\u0172\u1a8d\n\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0172\3\u0173\3\u0173\3\u0173\3\u0173\3\u0174\3\u0174\5\u0174\u1a99"+
		"\n\u0174\3\u0174\5\u0174\u1a9c\n\u0174\3\u0174\5\u0174\u1a9f\n\u0174\3"+
		"\u0175\3\u0175\3\u0175\3\u0175\3\u0176\3\u0176\5\u0176\u1aa7\n\u0176\3"+
		"\u0176\3\u0176\3\u0176\5\u0176\u1aac\n\u0176\3\u0176\5\u0176\u1aaf\n\u0176"+
		"\3\u0176\5\u0176\u1ab2\n\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u1abd\n\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\5\u0178\u1acb\n\u0178\3\u0178\3\u0178\3\u0178\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u0179\7\u0179\u1ad5\n\u0179\f\u0179\16\u0179\u1ad8"+
		"\13\u0179\3\u0179\3\u0179\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a"+
		"\u1ae1\n\u017a\3\u017a\5\u017a\u1ae4\n\u017a\3\u017a\3\u017a\3\u017a\3"+
		"\u017a\5\u017a\u1aea\n\u017a\3\u017a\3\u017a\5\u017a\u1aee\n\u017a\3\u017a"+
		"\5\u017a\u1af1\n\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a"+
		"\u1af8\n\u017a\3\u017a\5\u017a\u1afb\n\u017a\3\u017a\3\u017a\5\u017a\u1aff"+
		"\n\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5\u017a"+
		"\u1b08\n\u017a\3\u017b\3\u017b\3\u017b\5\u017b\u1b0d\n\u017b\3\u017b\3"+
		"\u017b\5\u017b\u1b11\n\u017b\3\u017b\5\u017b\u1b14\n\u017b\3\u017b\5\u017b"+
		"\u1b17\n\u017b\5\u017b\u1b19\n\u017b\3\u017b\3\u017b\7\u017b\u1b1d\n\u017b"+
		"\f\u017b\16\u017b\u1b20\13\u017b\3\u017b\5\u017b\u1b23\n\u017b\3\u017b"+
		"\5\u017b\u1b26\n\u017b\3\u017b\3\u017b\3\u017c\3\u017c\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u1b3a\n\u017e\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u1b44\n\u017f\3\u0180"+
		"\3\u0180\3\u0180\5\u0180\u1b49\n\u0180\3\u0180\3\u0180\3\u0180\5\u0180"+
		"\u1b4e\n\u0180\3\u0180\5\u0180\u1b51\n\u0180\3\u0180\3\u0180\3\u0180\5"+
		"\u0180\u1b56\n\u0180\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3"+
		"\u0181\5\u0181\u1b5f\n\u0181\3\u0181\3\u0181\5\u0181\u1b63\n\u0181\5\u0181"+
		"\u1b65\n\u0181\3\u0182\3\u0182\3\u0182\5\u0182\u1b6a\n\u0182\3\u0182\3"+
		"\u0182\5\u0182\u1b6e\n\u0182\3\u0182\3\u0182\7\u0182\u1b72\n\u0182\f\u0182"+
		"\16\u0182\u1b75\13\u0182\5\u0182\u1b77\n\u0182\3\u0182\3\u0182\5\u0182"+
		"\u1b7b\n\u0182\3\u0182\5\u0182\u1b7e\n\u0182\3\u0182\3\u0182\3\u0183\3"+
		"\u0183\3\u0183\3\u0184\3\u0184\3\u0184\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0186\5\u0186\u1b8e\n\u0186\3\u0186\3\u0186\5\u0186\u1b92\n"+
		"\u0186\5\u0186\u1b94\n\u0186\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\7"+
		"\u0187\u1b9b\n\u0187\f\u0187\16\u0187\u1b9e\13\u0187\3\u0188\3\u0188\3"+
		"\u0188\3\u0189\3\u0189\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a"+
		"\5\u018a\u1bab\n\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\5\u018b\u1bb4\n\u018b\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c"+
		"\7\u018c\u1bbb\n\u018c\f\u018c\16\u018c\u1bbe\13\u018c\3\u018c\3\u018c"+
		"\3\u018c\3\u018d\3\u018d\5\u018d\u1bc5\n\u018d\3\u018d\3\u018d\3\u018e"+
		"\3\u018e\3\u018e\3\u018f\3\u018f\3\u018f\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\3\u0191\3\u0191\3\u0191\3\u0192\3\u0192\3\u0193\3\u0193\3\u0194\3\u0194"+
		"\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196\3\u0197\3\u0197\3\u0198\3\u0198"+
		"\3\u0199\3\u0199\3\u0199\2\3\u0272\u019a\2\4\6\b\n\f\16\20\22\24\26\30"+
		"\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308"+
		"\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320"+
		"\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\2h\b\2((\u0128\u0128"+
		"\u0167\u0167\u0198\u0198\u020e\u020e\u0214\u0214\6\2((\u0147\u0147\u01a6"+
		"\u01a6\u01eb\u01eb\5\2((\u0138\u0138\u0153\u0153\5\2((\u0134\u0134\u0278"+
		"\u0278\5\2\u0157\u0157\u01b5\u01b5\u01ed\u01ed\4\2\16\16\u00fd\u00fd\5"+
		"\2**NN\u00b3\u00b3\4\2\u0155\u0155\u01be\u01be\4\2\u012e\u012e\u016b\u016b"+
		"\4\2\u0110\u0110\u0179\u0179\5\2HHLLyy\5\2((\u0128\u0128\u0167\u0167\4"+
		"\2\f\f\u00aa\u00aa\4\2\7\7\62\62\5\2\u0198\u0198\u020e\u020e\u0214\u0214"+
		"\4\2\24\24\u008d\u008d\3\2\u01fa\u01fb\4\2\b\b/\60\4\2\b\b//\6\2SS\u00a4"+
		"\u00a4\u02b2\u02b2\u02c8\u02d3\4\2\u011a\u011a\u014f\u014f\4\2\u00b3\u00b3"+
		"\u01ea\u01ea\4\2\u00b7\u00b7\u021f\u021f\4\2GG\u008b\u008b\4\2]]\u01e3"+
		"\u01e3\6\2\u0152\u0152\u0174\u0174\u01a3\u01a3\u01c2\u01c2\4\2\u00d3\u00d3"+
		"\u017c\u017c\7\2cc\u0181\u0182\u0184\u0184\u0188\u0190\u01ce\u01ce\6\2"+
		"\u017e\u017f\u0183\u0183\u0185\u0186\u01cf\u01cf\5\2dd\u017d\u017d\u0187"+
		"\u0187\4\2\u016d\u016d\u01fc\u01fc\4\2\u01f6\u01f6\u01f8\u01f8\4\2\u0108"+
		"\u0108\u01fd\u01fd\4\2SS\u01dd\u01dd\4\2\62\62\u012c\u012c\3\3\u02b3\u02b3"+
		"\5\2\36\3699\u00ae\u00ae\5\2\u0080\u0080\u00a5\u00a5\u0158\u0158\4\2_"+
		"_\u00b1\u00b1\4\2\u0116\u0116\u01ee\u01ee\4\2%%\u0221\u0221\4\2oo\u0179"+
		"\u0179\4\2\u014b\u014b\u01c8\u01c8\6\2\u00c4\u00c4\u00c6\u00c6\u00c9\u00c9"+
		"\u0205\u0205\4\2\u015a\u015a\u01e9\u01e9\4\2\u0109\u0109\u01d0\u01d0\4"+
		"\2@@HH\4\2$$\u0093\u0093\b\2\u0080\u0080\u00a5\u00a5\u00ac\u00ac\u0143"+
		"\u0143\u0158\u0158\u0221\u0221\4\2\u019d\u019d\u0202\u0202\4\2\u0140\u0140"+
		"\u0223\u0223\4\2\u0080\u0080\u0158\u0158\4\2\u0202\u0202\u0220\u0220\4"+
		"\2\u0123\u0123\u01c7\u01c7\b\2\u00d3\u00d3\u013d\u013d\u013f\u013f\u0159"+
		"\u0159\u01cd\u01cd\u01ef\u01ef\4\2+,::\5\2\u014b\u014b\u01b7\u01b7\u02d6"+
		"\u02d6\4\2\u0171\u0171\u0210\u0210\3\2\u0273\u027d\4\2pp\u02bc\u02bc\4"+
		"\2\u00d3\u00d3\u01a1\u01a1\4\2\u00cc\u00cd\u00cf\u00cf\4\2\u00b2\u00b2"+
		"\u01ec\u01ec\5\2\r\r++\u028d\u028d\5\2\u00de\u00de\u00e4\u00e5\u00ea\u00ea"+
		"\5\2\u00df\u00e1\u00e6\u00e9\u00eb\u00ed\3\2\u024b\u0272\3\2\u027e\u0281"+
		"\3\2\u0242\u024a\5\2\u00cc\u00d0\u00da\u00da\u00dd\u00dd&\2\u00ea\u00ea"+
		"\u00fb\u00fd\u00ff\u010e\u0110\u0111\u0113\u0116\u0118\u012f\u0131\u013a"+
		"\u013c\u0147\u0149\u0149\u014c\u014c\u014e\u0153\u0155\u0155\u0157\u0158"+
		"\u015a\u015c\u015e\u015e\u0160\u0160\u0162\u0168\u016a\u0170\u0172\u0196"+
		"\u0198\u019a\u019c\u01a2\u01a4\u01ad\u01af\u01b9\u01bb\u01be\u01c0\u01cc"+
		"\u01ce\u01db\u01dd\u01ee\u01f0\u01f2\u01f4\u020f\u0211\u0211\u0213\u0216"+
		"\u0218\u0218\u021a\u021b\u021e\u0229\u0278\u0278\u02d8\u02d8\4\2\u00d0"+
		"\u00d0\u022f\u0241\5\2\u00d3\u00d3\u0298\u0299\u02a8\u02a9\6\2\61\61\u028c"+
		"\u028c\u029a\u029b\u02b9\u02b9\3\2\u0298\u0299\3\2\u029c\u029d\4\2\13"+
		"\13\u029e\u029e\4\2ww\u029f\u029f\5\2;;\u00ad\u00ad\u0218\u0218\5\2\u0152"+
		"\u0152\u0174\u0174\u01a4\u01a4\b\2((\u011e\u011e\u0120\u0120\u0138\u0138"+
		"\u0153\u0153\u01cc\u01cc\3\2\u00f5\u00f6\5\2\20\20WW\u00ab\u00ab\4\2\u00d1"+
		"\u00d1\u00d3\u00d3\6\2\"\"\u00ee\u00f1\u00f3\u00f3\u00f8\u00fa\3\2\u02df"+
		"\u02e3\3\2\u02e4\u02e5\3\2\u02e9\u02ea\7\2\u00de\u00de\u00e2\u00e2\u00e4"+
		"\u00e5\u00e7\u00ed\u02f0\u0323\4\2\u00bc\u00bc\u0224\u0224\4\2GG\u0328"+
		"\u0328\4\2\u0152\u0152\u0174\u0174\4\2\u0082\u0082\u01e3\u01e3\4\2\u032c"+
		"\u032c\u032e\u032e\3\2\u0331\u0332\4\2\r\r++\4\2\u01a7\u01a7\u01ac\u01ac"+
		"\5\2AA\u009a\u009a\u00b0\u00b0\4\2IITU\4\2\u010e\u010e\u015e\u015e\4\2"+
		"MM\u00b8\u00b8\6\2))EEbb\u0122\u0122\2\u2008\2\u033c\3\2\2\2\4\u034c\3"+
		"\2\2\2\6\u0376\3\2\2\2\b\u0383\3\2\2\2\n\u0394\3\2\2\2\f\u039f\3\2\2\2"+
		"\16\u03a4\3\2\2\2\20\u03b0\3\2\2\2\22\u03cb\3\2\2\2\24\u03d1\3\2\2\2\26"+
		"\u03d3\3\2\2\2\30\u03df\3\2\2\2\32\u03eb\3\2\2\2\34\u0409\3\2\2\2\36\u0427"+
		"\3\2\2\2 \u0434\3\2\2\2\"\u0436\3\2\2\2$\u043c\3\2\2\2&\u0442\3\2\2\2"+
		"(\u0475\3\2\2\2*\u048f\3\2\2\2,\u04ab\3\2\2\2.\u04cc\3\2\2\2\60\u04ce"+
		"\3\2\2\2\62\u04ff\3\2\2\2\64\u0501\3\2\2\2\66\u050b\3\2\2\28\u0536\3\2"+
		"\2\2:\u05ff\3\2\2\2<\u0601\3\2\2\2>\u060b\3\2\2\2@\u0613\3\2\2\2B\u061b"+
		"\3\2\2\2D\u0638\3\2\2\2F\u064c\3\2\2\2H\u068a\3\2\2\2J\u068e\3\2\2\2L"+
		"\u0690\3\2\2\2N\u06a2\3\2\2\2P\u06df\3\2\2\2R\u06f1\3\2\2\2T\u06fb\3\2"+
		"\2\2V\u06fe\3\2\2\2X\u0721\3\2\2\2Z\u072a\3\2\2\2\\\u074e\3\2\2\2^\u0754"+
		"\3\2\2\2`\u075b\3\2\2\2b\u0764\3\2\2\2d\u0766\3\2\2\2f\u076c\3\2\2\2h"+
		"\u076f\3\2\2\2j\u0772\3\2\2\2l\u0776\3\2\2\2n\u0778\3\2\2\2p\u077a\3\2"+
		"\2\2r\u077e\3\2\2\2t\u079a\3\2\2\2v\u07ae\3\2\2\2x\u07c2\3\2\2\2z\u07c4"+
		"\3\2\2\2|\u07e7\3\2\2\2~\u07f0\3\2\2\2\u0080\u07f7\3\2\2\2\u0082\u080e"+
		"\3\2\2\2\u0084\u0817\3\2\2\2\u0086\u0826\3\2\2\2\u0088\u0944\3\2\2\2\u008a"+
		"\u094b\3\2\2\2\u008c\u094f\3\2\2\2\u008e\u0951\3\2\2\2\u0090\u0965\3\2"+
		"\2\2\u0092\u098c\3\2\2\2\u0094\u0993\3\2\2\2\u0096\u099a\3\2\2\2\u0098"+
		"\u09a1\3\2\2\2\u009a\u09b1\3\2\2\2\u009c\u09b3\3\2\2\2\u009e\u09bb\3\2"+
		"\2\2\u00a0\u09c2\3\2\2\2\u00a2\u09c9\3\2\2\2\u00a4\u09d0\3\2\2\2\u00a6"+
		"\u09e3\3\2\2\2\u00a8\u09ed\3\2\2\2\u00aa\u09f4\3\2\2\2\u00ac\u0a04\3\2"+
		"\2\2\u00ae\u0a0e\3\2\2\2\u00b0\u0a12\3\2\2\2\u00b2\u0a18\3\2\2\2\u00b4"+
		"\u0a1c\3\2\2\2\u00b6\u0a20\3\2\2\2\u00b8\u0a22\3\2\2\2\u00ba\u0a58\3\2"+
		"\2\2\u00bc\u0a5a\3\2\2\2\u00be\u0a66\3\2\2\2\u00c0\u0a77\3\2\2\2\u00c2"+
		"\u0a79\3\2\2\2\u00c4\u0a7d\3\2\2\2\u00c6\u0a86\3\2\2\2\u00c8\u0a88\3\2"+
		"\2\2\u00ca\u0a8d\3\2\2\2\u00cc\u0ac0\3\2\2\2\u00ce\u0ac2\3\2\2\2\u00d0"+
		"\u0ac8\3\2\2\2\u00d2\u0b3a\3\2\2\2\u00d4\u0b41\3\2\2\2\u00d6\u0b43\3\2"+
		"\2\2\u00d8\u0b45\3\2\2\2\u00da\u0b58\3\2\2\2\u00dc\u0b5a\3\2\2\2\u00de"+
		"\u0b6a\3\2\2\2\u00e0\u0b6f\3\2\2\2\u00e2\u0b72\3\2\2\2\u00e4\u0b74\3\2"+
		"\2\2\u00e6\u0b81\3\2\2\2\u00e8\u0b85\3\2\2\2\u00ea\u0bb4\3\2\2\2\u00ec"+
		"\u0bca\3\2\2\2\u00ee\u0bcf\3\2\2\2\u00f0\u0bd1\3\2\2\2\u00f2\u0c10\3\2"+
		"\2\2\u00f4\u0c12\3\2\2\2\u00f6\u0c31\3\2\2\2\u00f8\u0c33\3\2\2\2\u00fa"+
		"\u0c3c\3\2\2\2\u00fc\u0c47\3\2\2\2\u00fe\u0c53\3\2\2\2\u0100\u0c67\3\2"+
		"\2\2\u0102\u0c70\3\2\2\2\u0104\u0c74\3\2\2\2\u0106\u0c8c\3\2\2\2\u0108"+
		"\u0c8f\3\2\2\2\u010a\u0ca9\3\2\2\2\u010c\u0cab\3\2\2\2\u010e\u0cae\3\2"+
		"\2\2\u0110\u0cf7\3\2\2\2\u0112\u0d2b\3\2\2\2\u0114\u0d37\3\2\2\2\u0116"+
		"\u0d39\3\2\2\2\u0118\u0d42\3\2\2\2\u011a\u0d5f\3\2\2\2\u011c\u0d6f\3\2"+
		"\2\2\u011e\u0d77\3\2\2\2\u0120\u0d79\3\2\2\2\u0122\u0d8c\3\2\2\2\u0124"+
		"\u0d8e\3\2\2\2\u0126\u0d92\3\2\2\2\u0128\u0da3\3\2\2\2\u012a\u0db4\3\2"+
		"\2\2\u012c\u0db7\3\2\2\2\u012e\u0dc1\3\2\2\2\u0130\u0dc5\3\2\2\2\u0132"+
		"\u0dcf\3\2\2\2\u0134\u0de0\3\2\2\2\u0136\u0de2\3\2\2\2\u0138\u0de5\3\2"+
		"\2\2\u013a\u0df1\3\2\2\2\u013c\u0dfa\3\2\2\2\u013e\u0dfc\3\2\2\2\u0140"+
		"\u0e0a\3\2\2\2\u0142\u0e15\3\2\2\2\u0144\u0e1e\3\2\2\2\u0146\u0e21\3\2"+
		"\2\2\u0148\u0e29\3\2\2\2\u014a\u0e42\3\2\2\2\u014c\u0e4e\3\2\2\2\u014e"+
		"\u0e51\3\2\2\2\u0150\u0e71\3\2\2\2\u0152\u0e73\3\2\2\2\u0154\u0e75\3\2"+
		"\2\2\u0156\u0e77\3\2\2\2\u0158\u0e79\3\2\2\2\u015a\u0eca\3\2\2\2\u015c"+
		"\u0ecc\3\2\2\2\u015e\u0ed2\3\2\2\2\u0160\u0ee8\3\2\2\2\u0162\u0ef6\3\2"+
		"\2\2\u0164\u0f01\3\2\2\2\u0166\u0f03\3\2\2\2\u0168\u0f09\3\2\2\2\u016a"+
		"\u0f13\3\2\2\2\u016c\u0f17\3\2\2\2\u016e\u0f1e\3\2\2\2\u0170\u0f22\3\2"+
		"\2\2\u0172\u0f28\3\2\2\2\u0174\u0f2d\3\2\2\2\u0176\u0f33\3\2\2\2\u0178"+
		"\u0f37\3\2\2\2\u017a\u0f3d\3\2\2\2\u017c\u0f4a\3\2\2\2\u017e\u0f4d\3\2"+
		"\2\2\u0180\u0f4f\3\2\2\2\u0182\u0f5e\3\2\2\2\u0184\u0f63\3\2\2\2\u0186"+
		"\u0f69\3\2\2\2\u0188\u0f82\3\2\2\2\u018a\u0f8a\3\2\2\2\u018c\u0f8d\3\2"+
		"\2\2\u018e\u0f93\3\2\2\2\u0190\u0fa3\3\2\2\2\u0192\u0fb2\3\2\2\2\u0194"+
		"\u0fb8\3\2\2\2\u0196\u0fdc\3\2\2\2\u0198\u0fe2\3\2\2\2\u019a\u0fe4\3\2"+
		"\2\2\u019c\u0ff0\3\2\2\2\u019e\u0ffc\3\2\2\2\u01a0\u1002\3\2\2\2\u01a2"+
		"\u101b\3\2\2\2\u01a4\u1056\3\2\2\2\u01a6\u1058\3\2\2\2\u01a8\u1084\3\2"+
		"\2\2\u01aa\u1091\3\2\2\2\u01ac\u10c3\3\2\2\2\u01ae\u10d5\3\2\2\2\u01b0"+
		"\u1107\3\2\2\2\u01b2\u1109\3\2\2\2\u01b4\u1116\3\2\2\2\u01b6\u1131\3\2"+
		"\2\2\u01b8\u113b\3\2\2\2\u01ba\u1145\3\2\2\2\u01bc\u1147\3\2\2\2\u01be"+
		"\u1151\3\2\2\2\u01c0\u1154\3\2\2\2\u01c2\u118c\3\2\2\2\u01c4\u119b\3\2"+
		"\2\2\u01c6\u119d\3\2\2\2\u01c8\u11a1\3\2\2\2\u01ca\u11ae\3\2\2\2\u01cc"+
		"\u11be\3\2\2\2\u01ce\u11cb\3\2\2\2\u01d0\u11d8\3\2\2\2\u01d2\u11f5\3\2"+
		"\2\2\u01d4\u11f7\3\2\2\2\u01d6\u1202\3\2\2\2\u01d8\u1208\3\2\2\2\u01da"+
		"\u124d\3\2\2\2\u01dc\u1252\3\2\2\2\u01de\u1303\3\2\2\2\u01e0\u1312\3\2"+
		"\2\2\u01e2\u1318\3\2\2\2\u01e4\u132b\3\2\2\2\u01e6\u1335\3\2\2\2\u01e8"+
		"\u1343\3\2\2\2\u01ea\u1345\3\2\2\2\u01ec\u1348\3\2\2\2\u01ee\u1365\3\2"+
		"\2\2\u01f0\u1371\3\2\2\2\u01f2\u137a\3\2\2\2\u01f4\u1386\3\2\2\2\u01f6"+
		"\u138a\3\2\2\2\u01f8\u138c\3\2\2\2\u01fa\u13c2\3\2\2\2\u01fc\u13c9\3\2"+
		"\2\2\u01fe\u13cb\3\2\2\2\u0200\u13f0\3\2\2\2\u0202\u13f6\3\2\2\2\u0204"+
		"\u13fe\3\2\2\2\u0206\u1401\3\2\2\2\u0208\u140e\3\2\2\2\u020a\u1410\3\2"+
		"\2\2\u020c\u1412\3\2\2\2\u020e\u1424\3\2\2\2\u0210\u1434\3\2\2\2\u0212"+
		"\u1438\3\2\2\2\u0214\u143a\3\2\2\2\u0216\u143c\3\2\2\2\u0218\u1453\3\2"+
		"\2\2\u021a\u1455\3\2\2\2\u021c\u1459\3\2\2\2\u021e\u145f\3\2\2\2\u0220"+
		"\u1467\3\2\2\2\u0222\u146f\3\2\2\2\u0224\u1485\3\2\2\2\u0226\u1487\3\2"+
		"\2\2\u0228\u14dd\3\2\2\2\u022a\u14df\3\2\2\2\u022c\u14e1\3\2\2\2\u022e"+
		"\u14e3\3\2\2\2\u0230\u14e5\3\2\2\2\u0232\u14e7\3\2\2\2\u0234\u14f7\3\2"+
		"\2\2\u0236\u1500\3\2\2\2\u0238\u15ec\3\2\2\2\u023a\u1686\3\2\2\2\u023c"+
		"\u16a5\3\2\2\2\u023e\u16af\3\2\2\2\u0240\u16b3\3\2\2\2\u0242\u16b5\3\2"+
		"\2\2\u0244\u16b7\3\2\2\2\u0246\u16cc\3\2\2\2\u0248\u16d6\3\2\2\2\u024a"+
		"\u16f4\3\2\2\2\u024c\u16f6\3\2\2\2\u024e\u16f9\3\2\2\2\u0250\u1700\3\2"+
		"\2\2\u0252\u1702\3\2\2\2\u0254\u1704\3\2\2\2\u0256\u1707\3\2\2\2\u0258"+
		"\u1710\3\2\2\2\u025a\u1719\3\2\2\2\u025c\u1722\3\2\2\2\u025e\u172b\3\2"+
		"\2\2\u0260\u172f\3\2\2\2\u0262\u173c\3\2\2\2\u0264\u1742\3\2\2\2\u0266"+
		"\u1766\3\2\2\2\u0268\u1768\3\2\2\2\u026a\u1776\3\2\2\2\u026c\u177d\3\2"+
		"\2\2\u026e\u1780\3\2\2\2\u0270\u179b\3\2\2\2\u0272\u1817\3\2\2\2\u0274"+
		"\u18a7\3\2\2\2\u0276\u18a9\3\2\2\2\u0278\u18ac\3\2\2\2\u027a\u18b2\3\2"+
		"\2\2\u027c\u18b9\3\2\2\2\u027e\u18c3\3\2\2\2\u0280\u18cb\3\2\2\2\u0282"+
		"\u18d2\3\2\2\2\u0284\u18da\3\2\2\2\u0286\u18e0\3\2\2\2\u0288\u18e6\3\2"+
		"\2\2\u028a\u18ec\3\2\2\2\u028c\u18f3\3\2\2\2\u028e\u18fa\3\2\2\2\u0290"+
		"\u1900\3\2\2\2\u0292\u1906\3\2\2\2\u0294\u190c\3\2\2\2\u0296\u1912\3\2"+
		"\2\2\u0298\u1918\3\2\2\2\u029a\u191e\3\2\2\2\u029c\u1924\3\2\2\2\u029e"+
		"\u192a\3\2\2\2\u02a0\u1930\3\2\2\2\u02a2\u1936\3\2\2\2\u02a4\u193c\3\2"+
		"\2\2\u02a6\u1942\3\2\2\2\u02a8\u1948\3\2\2\2\u02aa\u194e\3\2\2\2\u02ac"+
		"\u1954\3\2\2\2\u02ae\u1956\3\2\2\2\u02b0\u195a\3\2\2\2\u02b2\u195c\3\2"+
		"\2\2\u02b4\u195e\3\2\2\2\u02b6\u1960\3\2\2\2\u02b8\u1964\3\2\2\2\u02ba"+
		"\u1966\3\2\2\2\u02bc\u1969\3\2\2\2\u02be\u196c\3\2\2\2\u02c0\u1974\3\2"+
		"\2\2\u02c2\u19e0\3\2\2\2\u02c4\u19ee\3\2\2\2\u02c6\u19f0\3\2\2\2\u02c8"+
		"\u19f2\3\2\2\2\u02ca\u19f9\3\2\2\2\u02cc\u1a04\3\2\2\2\u02ce\u1a0f\3\2"+
		"\2\2\u02d0\u1a1d\3\2\2\2\u02d2\u1a26\3\2\2\2\u02d4\u1a2d\3\2\2\2\u02d6"+
		"\u1a37\3\2\2\2\u02d8\u1a58\3\2\2\2\u02da\u1a5a\3\2\2\2\u02dc\u1a81\3\2"+
		"\2\2\u02de\u1a86\3\2\2\2\u02e0\u1a88\3\2\2\2\u02e2\u1a8c\3\2\2\2\u02e4"+
		"\u1a92\3\2\2\2\u02e6\u1a98\3\2\2\2\u02e8\u1aa0\3\2\2\2\u02ea\u1ab1\3\2"+
		"\2\2\u02ec\u1abc\3\2\2\2\u02ee\u1aca\3\2\2\2\u02f0\u1acf\3\2\2\2\u02f2"+
		"\u1b07\3\2\2\2\u02f4\u1b09\3\2\2\2\u02f6\u1b29\3\2\2\2\u02f8\u1b2b\3\2"+
		"\2\2\u02fa\u1b31\3\2\2\2\u02fc\u1b3b\3\2\2\2\u02fe\u1b45\3\2\2\2\u0300"+
		"\u1b64\3\2\2\2\u0302\u1b66\3\2\2\2\u0304\u1b81\3\2\2\2\u0306\u1b84\3\2"+
		"\2\2\u0308\u1b87\3\2\2\2\u030a\u1b8d\3\2\2\2\u030c\u1b95\3\2\2\2\u030e"+
		"\u1b9f\3\2\2\2\u0310\u1ba2\3\2\2\2\u0312\u1baa\3\2\2\2\u0314\u1bb3\3\2"+
		"\2\2\u0316\u1bb5\3\2\2\2\u0318\u1bc2\3\2\2\2\u031a\u1bc8\3\2\2\2\u031c"+
		"\u1bcb\3\2\2\2\u031e\u1bce\3\2\2\2\u0320\u1bd2\3\2\2\2\u0322\u1bd5\3\2"+
		"\2\2\u0324\u1bd7\3\2\2\2\u0326\u1bd9\3\2\2\2\u0328\u1bdb\3\2\2\2\u032a"+
		"\u1bdd\3\2\2\2\u032c\u1be0\3\2\2\2\u032e\u1be2\3\2\2\2\u0330\u1be4\3\2"+
		"\2\2\u0332\u0336\5\4\3\2\u0333\u0336\5\u0272\u013a\2\u0334\u0336\7\u02a0"+
		"\2\2\u0335\u0332\3\2\2\2\u0335\u0333\3\2\2\2\u0335\u0334\3\2\2\2\u0336"+
		"\u0338\3\2\2\2\u0337\u0339\7\u02b3\2\2\u0338\u0337\3\2\2\2\u0338\u0339"+
		"\3\2\2\2\u0339\u033b\3\2\2\2\u033a\u0335\3\2\2\2\u033b\u033e\3\2\2\2\u033c"+
		"\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u0340\3\2\2\2\u033e\u033c\3\2"+
		"\2\2\u033f\u0341\7\u02a0\2\2\u0340\u033f\3\2\2\2\u0340\u0341\3\2\2\2\u0341"+
		"\u0342\3\2\2\2\u0342\u0343\7\2\2\3\u0343\3\3\2\2\2\u0344\u034d\5\6\4\2"+
		"\u0345\u034d\5\b\5\2\u0346\u034d\5\n\6\2\u0347\u034d\5\f\7\2\u0348\u034d"+
		"\5\16\b\2\u0349\u034d\5\20\t\2\u034a\u034d\5\22\n\2\u034b\u034d\5\24\13"+
		"\2\u034c\u0344\3\2\2\2\u034c\u0345\3\2\2\2\u034c\u0346\3\2\2\2\u034c\u0347"+
		"\3\2\2\2\u034c\u0348\3\2\2\2\u034c\u0349\3\2\2\2\u034c\u034a\3\2\2\2\u034c"+
		"\u034b\3\2\2\2\u034d\5\3\2\2\2\u034e\u0377\5\26\f\2\u034f\u0377\5v<\2"+
		"\u0350\u0377\5\u0092J\2\u0351\u0377\5\30\r\2\u0352\u0377\5x=\2\u0353\u0377"+
		"\5\u0094K\2\u0354\u0377\5\32\16\2\u0355\u0377\5z>\2\u0356\u0377\5\u0096"+
		"L\2\u0357\u0377\5*\26\2\u0358\u0377\5|?\2\u0359\u0377\5\u00a0Q\2\u035a"+
		"\u0377\5\34\17\2\u035b\u0377\5\u0098M\2\u035c\u0377\5&\24\2\u035d\u0377"+
		"\5\u0080A\2\u035e\u0377\5\u009cO\2\u035f\u0377\5(\25\2\u0360\u0377\5\u0082"+
		"B\2\u0361\u0377\5\u009eP\2\u0362\u0377\5,\27\2\u0363\u0377\5\u0084C\2"+
		"\u0364\u0377\5\u00a2R\2\u0365\u0377\5\60\31\2\u0366\u0377\5\u0086D\2\u0367"+
		"\u0377\5\u00a4S\2\u0368\u0377\5J&\2\u0369\u0377\5\u008eH\2\u036a\u0377"+
		"\5\u00a6T\2\u036b\u0377\5P)\2\u036c\u0377\5\u00a8U\2\u036d\u0377\5V,\2"+
		"\u036e\u0377\5\u0090I\2\u036f\u0377\5\u00aaV\2\u0370\u0377\5~@\2\u0371"+
		"\u0377\5\u01a6\u00d4\2\u0372\u0377\5\u01a4\u00d3\2\u0373\u0377\5\u01a8"+
		"\u00d5\2\u0374\u0377\5\u00acW\2\u0375\u0377\5\u00b0Y\2\u0376\u034e\3\2"+
		"\2\2\u0376\u034f\3\2\2\2\u0376\u0350\3\2\2\2\u0376\u0351\3\2\2\2\u0376"+
		"\u0352\3\2\2\2\u0376\u0353\3\2\2\2\u0376\u0354\3\2\2\2\u0376\u0355\3\2"+
		"\2\2\u0376\u0356\3\2\2\2\u0376\u0357\3\2\2\2\u0376\u0358\3\2\2\2\u0376"+
		"\u0359\3\2\2\2\u0376\u035a\3\2\2\2\u0376\u035b\3\2\2\2\u0376\u035c\3\2"+
		"\2\2\u0376\u035d\3\2\2\2\u0376\u035e\3\2\2\2\u0376\u035f\3\2\2\2\u0376"+
		"\u0360\3\2\2\2\u0376\u0361\3\2\2\2\u0376\u0362\3\2\2\2\u0376\u0363\3\2"+
		"\2\2\u0376\u0364\3\2\2\2\u0376\u0365\3\2\2\2\u0376\u0366\3\2\2\2\u0376"+
		"\u0367\3\2\2\2\u0376\u0368\3\2\2\2\u0376\u0369\3\2\2\2\u0376\u036a\3\2"+
		"\2\2\u0376\u036b\3\2\2\2\u0376\u036c\3\2\2\2\u0376\u036d\3\2\2\2\u0376"+
		"\u036e\3\2\2\2\u0376\u036f\3\2\2\2\u0376\u0370\3\2\2\2\u0376\u0371\3\2"+
		"\2\2\u0376\u0372\3\2\2\2\u0376\u0373\3\2\2\2\u0376\u0374\3\2\2\2\u0376"+
		"\u0375\3\2\2\2\u0377\7\3\2\2\2\u0378\u0384\5\u00b2Z\2\u0379\u0384\5\u00f0"+
		"y\2\u037a\u0384\5\u00f4{\2\u037b\u0384\5\u00fe\u0080\2\u037c\u0384\5\u0104"+
		"\u0083\2\u037d\u0384\5\u0108\u0085\2\u037e\u0384\5\u010c\u0087\2\u037f"+
		"\u0384\5\u010e\u0088\2\u0380\u0384\5\u0110\u0089\2\u0381\u0384\5\u0112"+
		"\u008a\2\u0382\u0384\5\u0114\u008b\2\u0383\u0378\3\2\2\2\u0383\u0379\3"+
		"\2\2\2\u0383\u037a\3\2\2\2\u0383\u037b\3\2\2\2\u0383\u037c\3\2\2\2\u0383"+
		"\u037d\3\2\2\2\u0383\u037e\3\2\2\2\u0383\u037f\3\2\2\2\u0383\u0380\3\2"+
		"\2\2\u0383\u0381\3\2\2\2\u0383\u0382\3\2\2\2\u0384\t\3\2\2\2\u0385\u0395"+
		"\5\u0120\u0091\2\u0386\u0395\5\u0124\u0093\2\u0387\u0395\5\u0126\u0094"+
		"\2\u0388\u0395\5\u0128\u0095\2\u0389\u0395\5\u012a\u0096\2\u038a\u0395"+
		"\5\u012c\u0097\2\u038b\u0395\5\u012e\u0098\2\u038c\u0395\5\u0130\u0099"+
		"\2\u038d\u0395\5\u0136\u009c\2\u038e\u0395\5\u0166\u00b4\2\u038f\u0395"+
		"\5\u0168\u00b5\2\u0390\u0395\5\u016a\u00b6\2\u0391\u0395\5\u016c\u00b7"+
		"\2\u0392\u0395\5\u016e\u00b8\2\u0393\u0395\5\u0170\u00b9\2\u0394\u0385"+
		"\3\2\2\2\u0394\u0386\3\2\2\2\u0394\u0387\3\2\2\2\u0394\u0388\3\2\2\2\u0394"+
		"\u0389\3\2\2\2\u0394\u038a\3\2\2\2\u0394\u038b\3\2\2\2\u0394\u038c\3\2"+
		"\2\2\u0394\u038d\3\2\2\2\u0394\u038e\3\2\2\2\u0394\u038f\3\2\2\2\u0394"+
		"\u0390\3\2\2\2\u0394\u0391\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0393\3\2"+
		"\2\2\u0395\13\3\2\2\2\u0396\u03a0\5\u013e\u00a0\2\u0397\u03a0\5\u0140"+
		"\u00a1\2\u0398\u03a0\5\u0142\u00a2\2\u0399\u03a0\5\u0144\u00a3\2\u039a"+
		"\u03a0\5\u0146\u00a4\2\u039b\u03a0\5\u0148\u00a5\2\u039c\u03a0\5\u014a"+
		"\u00a6\2\u039d\u03a0\5\u014c\u00a7\2\u039e\u03a0\5\u014e\u00a8\2\u039f"+
		"\u0396\3\2\2\2\u039f\u0397\3\2\2\2\u039f\u0398\3\2\2\2\u039f\u0399\3\2"+
		"\2\2\u039f\u039a\3\2\2\2\u039f\u039b\3\2\2\2\u039f\u039c\3\2\2\2\u039f"+
		"\u039d\3\2\2\2\u039f\u039e\3\2\2\2\u03a0\r\3\2\2\2\u03a1\u03a5\5\u0172"+
		"\u00ba\2\u03a2\u03a5\5\u0174\u00bb\2\u03a3\u03a5\5\u0176\u00bc\2\u03a4"+
		"\u03a1\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a4\u03a3\3\2\2\2\u03a5\17\3\2\2"+
		"\2\u03a6\u03b1\5\u017a\u00be\2\u03a7\u03b1\5\u0180\u00c1\2\u03a8\u03b1"+
		"\5\u0186\u00c4\2\u03a9\u03b1\5\u018c\u00c7\2\u03aa\u03b1\5\u018e\u00c8"+
		"\2\u03ab\u03b1\5\u0190\u00c9\2\u03ac\u03b1\5\u0194\u00cb\2\u03ad\u03b1"+
		"\5\u018a\u00c6\2\u03ae\u03b1\5\u0192\u00ca\2\u03af\u03b1\5\u0196\u00cc"+
		"\2\u03b0\u03a6\3\2\2\2\u03b0\u03a7\3\2\2\2\u03b0\u03a8\3\2\2\2\u03b0\u03a9"+
		"\3\2\2\2\u03b0\u03aa\3\2\2\2\u03b0\u03ab\3\2\2\2\u03b0\u03ac\3\2\2\2\u03b0"+
		"\u03ad\3\2\2\2\u03b0\u03ae\3\2\2\2\u03b0\u03af\3\2\2\2\u03b1\21\3\2\2"+
		"\2\u03b2\u03cc\5\u01a4\u00d3\2\u03b3\u03cc\5\u01a6\u00d4\2\u03b4\u03cc"+
		"\5\u01a8\u00d5\2\u03b5\u03cc\5\u01aa\u00d6\2\u03b6\u03cc\5\u01ac\u00d7"+
		"\2\u03b7\u03cc\5\u01ae\u00d8\2\u03b8\u03cc\5\u01b0\u00d9\2\u03b9\u03cc"+
		"\5\u01b2\u00da\2\u03ba\u03cc\5\u01c8\u00e5\2\u03bb\u03cc\5\u01ca\u00e6"+
		"\2\u03bc\u03cc\5\u01cc\u00e7\2\u03bd\u03cc\5\u01ce\u00e8\2\u03be\u03cc"+
		"\5\u01d0\u00e9\2\u03bf\u03cc\5\u01d4\u00eb\2\u03c0\u03cc\5\u01d6\u00ec"+
		"\2\u03c1\u03cc\5\u01d8\u00ed\2\u03c2\u03cc\5\u01da\u00ee\2\u03c3\u03cc"+
		"\5\u01de\u00f0\2\u03c4\u03cc\5\u01ea\u00f6\2\u03c5\u03cc\5\u01ec\u00f7"+
		"\2\u03c6\u03cc\5\u01ee\u00f8\2\u03c7\u03cc\5\u01f0\u00f9\2\u03c8\u03cc"+
		"\5\u01f2\u00fa\2\u03c9\u03cc\5\u01f4\u00fb\2\u03ca\u03cc\5\u01f6\u00fc"+
		"\2\u03cb\u03b2\3\2\2\2\u03cb\u03b3\3\2\2\2\u03cb\u03b4\3\2\2\2\u03cb\u03b5"+
		"\3\2\2\2\u03cb\u03b6\3\2\2\2\u03cb\u03b7\3\2\2\2\u03cb\u03b8\3\2\2\2\u03cb"+
		"\u03b9\3\2\2\2\u03cb\u03ba\3\2\2\2\u03cb\u03bb\3\2\2\2\u03cb\u03bc\3\2"+
		"\2\2\u03cb\u03bd\3\2\2\2\u03cb\u03be\3\2\2\2\u03cb\u03bf\3\2\2\2\u03cb"+
		"\u03c0\3\2\2\2\u03cb\u03c1\3\2\2\2\u03cb\u03c2\3\2\2\2\u03cb\u03c3\3\2"+
		"\2\2\u03cb\u03c4\3\2\2\2\u03cb\u03c5\3\2\2\2\u03cb\u03c6\3\2\2\2\u03cb"+
		"\u03c7\3\2\2\2\u03cb\u03c8\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03ca\3\2"+
		"\2\2\u03cc\23\3\2\2\2\u03cd\u03d2\5\u0200\u0101\2\u03ce\u03d2\5\u0202"+
		"\u0102\2\u03cf\u03d2\5\u0204\u0103\2\u03d0\u03d2\5\u0206\u0104\2\u03d1"+
		"\u03cd\3\2\2\2\u03d1\u03ce\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d1\u03d0\3\2"+
		"\2\2\u03d2\25\3\2\2\2\u03d3\u03d4\7 \2\2\u03d4\u03d6\7$\2\2\u03d5\u03d7"+
		"\5\u031e\u0190\2\u03d6\u03d5\3\2\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d8\3"+
		"\2\2\2\u03d8\u03dc\5\u0248\u0125\2\u03d9\u03db\5Z.\2\u03da\u03d9\3\2\2"+
		"\2\u03db\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\27"+
		"\3\2\2\2\u03de\u03dc\3\2\2\2\u03df\u03e0\7 \2\2\u03e0\u03e2\7\u0093\2"+
		"\2\u03e1\u03e3\5\u031e\u0190\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3\3\2\2\2"+
		"\u03e3\u03e4\3\2\2\2\u03e4\u03e8\5\u0248\u0125\2\u03e5\u03e7\5Z.\2\u03e6"+
		"\u03e5\3\2\2\2\u03e7\u03ea\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e9\3\2"+
		"\2\2\u03e9\31\3\2\2\2\u03ea\u03e8\3\2\2\2\u03eb\u03ed\7 \2\2\u03ec\u03ee"+
		"\5R*\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef"+
		"\u03f1\7\u0143\2\2\u03f0\u03f2\5\u031e\u0190\2\u03f1\u03f0\3\2\2\2\u03f1"+
		"\u03f2\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f4\5\u0248\u0125\2\u03f4\u03f5"+
		"\7s\2\2\u03f5\u03f6\7\u01e6\2\2\u03f6\u03fd\5\\/\2\u03f7\u03f8\7s\2\2"+
		"\u03f8\u03fa\7\u011f\2\2\u03f9\u03fb\7n\2\2\u03fa\u03f9\3\2\2\2\u03fa"+
		"\u03fb\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe\7\u01c1\2\2\u03fd\u03f7"+
		"\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u0400\3\2\2\2\u03ff\u0401\5`\61\2\u0400"+
		"\u03ff\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0404\3\2\2\2\u0402\u0403\7\u011c"+
		"\2\2\u0403\u0405\5\u0272\u013a\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2"+
		"\2\u0405\u0406\3\2\2\2\u0406\u0407\7\u0135\2\2\u0407\u0408\5\4\3\2\u0408"+
		"\33\3\2\2\2\u0409\u040b\7 \2\2\u040a\u040c\5\u0324\u0193\2\u040b\u040a"+
		"\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040e\3\2\2\2\u040d\u040f\5\u0326\u0194"+
		"\2\u040e\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411"+
		"\7I\2\2\u0411\u0413\5\u0248\u0125\2\u0412\u0414\5\u032a\u0196\2\u0413"+
		"\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0416\7s"+
		"\2\2\u0416\u0417\5\u00caf\2\u0417\u0418\7\u02ae\2\2\u0418\u041d\5\36\20"+
		"\2\u0419\u041a\7\u02b2\2\2\u041a\u041c\5\36\20\2\u041b\u0419\3\2\2\2\u041c"+
		"\u041f\3\2\2\2\u041d\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u0420\3\2"+
		"\2\2\u041f\u041d\3\2\2\2\u0420\u0424\7\u02af\2\2\u0421\u0423\5 \21\2\u0422"+
		"\u0421\3\2\2\2\u0423\u0426\3\2\2\2\u0424\u0422\3\2\2\2\u0424\u0425\3\2"+
		"\2\2\u0425\35\3\2\2\2\u0426\u0424\3\2\2\2\u0427\u042c\5\u0272\u013a\2"+
		"\u0428\u0429\7\u02ae\2\2\u0429\u042a\5\u0272\u013a\2\u042a\u042b\7\u02af"+
		"\2\2\u042b\u042d\3\2\2\2\u042c\u0428\3\2\2\2\u042c\u042d\3\2\2\2\u042d"+
		"\u042f\3\2\2\2\u042e\u0430\5\u0322\u0192\2\u042f\u042e\3\2\2\2\u042f\u0430"+
		"\3\2\2\2\u0430\37\3\2\2\2\u0431\u0435\5b\62\2\u0432\u0435\5\"\22\2\u0433"+
		"\u0435\5$\23\2\u0434\u0431\3\2\2\2\u0434\u0432\3\2\2\2\u0434\u0433\3\2"+
		"\2\2\u0435!\3\2\2\2\u0436\u0438\7\u0100\2\2\u0437\u0439\7\u02a1\2\2\u0438"+
		"\u0437\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\t\2"+
		"\2\2\u043b#\3\2\2\2\u043c\u043e\7_\2\2\u043d\u043f\7\u02a1\2\2\u043e\u043d"+
		"\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0441\t\3\2\2\u0441"+
		"%\3\2\2\2\u0442\u0443\7 \2\2\u0443\u0444\7\u017a\2\2\u0444\u0445\7C\2"+
		"\2\u0445\u0446\5\u0248\u0125\2\u0446\u0447\7\7\2\2\u0447\u0448\7\u0215"+
		"\2\2\u0448\u044e\5\u0272\u013a\2\u0449\u044b\7\u0166\2\2\u044a\u044c\7"+
		"\u02a1\2\2\u044b\u044a\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044d\3\2\2\2"+
		"\u044d\u044f\5\u0272\u013a\2\u044e\u0449\3\2\2\2\u044e\u044f\3\2\2\2\u044f"+
		"\u0455\3\2\2\2\u0450\u0452\7\u0216\2\2\u0451\u0453\7\u02a1\2\2\u0452\u0451"+
		"\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456\5\u0272\u013a"+
		"\2\u0455\u0450\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u045c\3\2\2\2\u0457\u0459"+
		"\7\u01cb\2\2\u0458\u045a\7\u02a1\2\2\u0459\u0458\3\2\2\2\u0459\u045a\3"+
		"\2\2\2\u045a\u045b\3\2\2\2\u045b\u045d\5\u0272\u013a\2\u045c\u0457\3\2"+
		"\2\2\u045c\u045d\3\2\2\2\u045d\u0463\3\2\2\2\u045e\u0460\7\u01a5\2\2\u045f"+
		"\u0461\7\u02a1\2\2\u0460\u045f\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462"+
		"\3\2\2\2\u0462\u0464\5\u0248\u0125\2\u0463\u045e\3\2\2\2\u0463\u0464\3"+
		"\2\2\2\u0464\u0466\3\2\2\2\u0465\u0467\7\u0222\2\2\u0466\u0465\3\2\2\2"+
		"\u0466\u0467\3\2\2\2\u0467\u046d\3\2\2\2\u0468\u046a\7\u011c\2\2\u0469"+
		"\u046b\7\u02a1\2\2\u046a\u0469\3\2\2\2\u046a\u046b\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\5\u0272\u013a\2\u046d\u0468\3\2"+
		"\2\2\u046d\u046e\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0471\7\u013d\2\2\u0470"+
		"\u0472\7\u02a1\2\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473"+
		"\3\2\2\2\u0473\u0474\5\u020a\u0106\2\u0474\'\3\2\2\2\u0475\u0477\7 \2"+
		"\2\u0476\u0478\5R*\2\u0477\u0476\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0479"+
		"\3\2\2\2\u0479\u047a\7\u0080\2\2\u047a\u047b\5\u0248\u0125\2\u047b\u047d"+
		"\7\u02ae\2\2\u047c\u047e\5r:\2\u047d\u047c\3\2\2\2\u047d\u047e\3\2\2\2"+
		"\u047e\u0483\3\2\2\2\u047f\u0480\7\u02b2\2\2\u0480\u0482\5r:\2\u0481\u047f"+
		"\3\2\2\2\u0482\u0485\3\2\2\2\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2\u0484"+
		"\u0486\3\2\2\2\u0485\u0483\3\2\2\2\u0486\u048a\7\u02af\2\2\u0487\u0489"+
		"\5t;\2\u0488\u0487\3\2\2\2\u0489\u048c\3\2\2\2\u048a\u0488\3\2\2\2\u048a"+
		"\u048b\3\2\2\2\u048b\u048d\3\2\2\2\u048c\u048a\3\2\2\2\u048d\u048e\5\4"+
		"\3\2\u048e)\3\2\2\2\u048f\u0491\7 \2\2\u0490\u0492\5R*\2\u0491\u0490\3"+
		"\2\2\2\u0491\u0492\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\7\u0158\2\2"+
		"\u0494\u0495\5\u0248\u0125\2\u0495\u0497\7\u02ae\2\2\u0496\u0498\5r:\2"+
		"\u0497\u0496\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049d\3\2\2\2\u0499\u049a"+
		"\7\u02b2\2\2\u049a\u049c\5r:\2\u049b\u0499\3\2\2\2\u049c\u049f\3\2\2\2"+
		"\u049d\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0\3\2\2\2\u049f\u049d"+
		"\3\2\2\2\u04a0\u04a1\7\u02af\2\2\u04a1\u04a2\7\u01de\2\2\u04a2\u04a6\5"+
		"\u0236\u011c\2\u04a3\u04a5\5t;\2\u04a4\u04a3\3\2\2\2\u04a5\u04a8\3\2\2"+
		"\2\u04a6\u04a4\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a9\3\2\2\2\u04a8\u04a6"+
		"\3\2\2\2\u04a9\u04aa\5\4\3\2\u04aa+\3\2\2\2\u04ab\u04ac\7 \2\2\u04ac\u04ad"+
		"\7\u01e8\2\2\u04ad\u04ae\5\u0248\u0125\2\u04ae\u04af\7?\2\2\u04af\u04b0"+
		"\7\u012a\2\2\u04b0\u04b1\7\u0226\2\2\u04b1\u04b2\5\u0248\u0125\2\u04b2"+
		"\u04b3\7\u01b0\2\2\u04b3\u04b4\7\u02ae\2\2\u04b4\u04b9\5.\30\2\u04b5\u04b6"+
		"\7\u02b2\2\2\u04b6\u04b8\5.\30\2\u04b7\u04b5\3\2\2\2\u04b8\u04bb\3\2\2"+
		"\2\u04b9\u04b7\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bc\3\2\2\2\u04bb\u04b9"+
		"\3\2\2\2\u04bc\u04bd\7\u02af\2\2\u04bd-\3\2\2\2\u04be\u04bf\7\u0160\2"+
		"\2\u04bf\u04cd\5\u0272\u013a\2\u04c0\u04c1\7$\2\2\u04c1\u04cd\5\u0272"+
		"\u013a\2\u04c2\u04c3\7\u021b\2\2\u04c3\u04cd\5\u0272\u013a\2\u04c4\u04c5"+
		"\7\u01b8\2\2\u04c5\u04cd\5\u0272\u013a\2\u04c6\u04c7\7\u01f1\2\2\u04c7"+
		"\u04cd\5\u0272\u013a\2\u04c8\u04c9\7\u01b1\2\2\u04c9\u04cd\5\u0272\u013a"+
		"\2\u04ca\u04cb\7\u01bd\2\2\u04cb\u04cd\5\u0272\u013a\2\u04cc\u04be\3\2"+
		"\2\2\u04cc\u04c0\3\2\2\2\u04cc\u04c2\3\2\2\2\u04cc\u04c4\3\2\2\2\u04cc"+
		"\u04c6\3\2\2\2\u04cc\u04c8\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cd/\3\2\2\2"+
		"\u04ce\u04d0\7 \2\2\u04cf\u04d1\7\u020d\2\2\u04d0\u04cf\3\2\2\2\u04d0"+
		"\u04d1\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d4\7\u00a5\2\2\u04d3\u04d5"+
		"\5\u031e\u0190\2\u04d4\u04d3\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d6\3"+
		"\2\2\2\u04d6\u04e5\5\u0248\u0125\2\u04d7\u04d9\7\u02ae\2\2\u04d8\u04d7"+
		"\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04df\5\62\32\2"+
		"\u04db\u04dc\7\u02b2\2\2\u04dc\u04de\5\62\32\2\u04dd\u04db\3\2\2\2\u04de"+
		"\u04e1\3\2\2\2\u04df\u04dd\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04e3\3\2"+
		"\2\2\u04e1\u04df\3\2\2\2\u04e2\u04e4\7\u02af\2\2\u04e3\u04e2\3\2\2\2\u04e3"+
		"\u04e4\3\2\2\2\u04e4\u04e6\3\2\2\2\u04e5\u04d8\3\2\2\2\u04e5\u04e6\3\2"+
		"\2\2\u04e6\u04f1\3\2\2\2\u04e7\u04ee\5D#\2\u04e8\u04ea\7\u02b2\2\2\u04e9"+
		"\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ed\5D"+
		"#\2\u04ec\u04e9\3\2\2\2\u04ed\u04f0\3\2\2\2\u04ee\u04ec\3\2\2\2\u04ee"+
		"\u04ef\3\2\2\2\u04ef\u04f2\3\2\2\2\u04f0\u04ee\3\2\2\2\u04f1\u04e7\3\2"+
		"\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f4\3\2\2\2\u04f3\u04f5\5F$\2\u04f4\u04f3"+
		"\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04fa\3\2\2\2\u04f6\u04f8\7\f\2\2\u04f7"+
		"\u04f6\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fb\5\u00b4"+
		"[\2\u04fa\u04f7\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb\61\3\2\2\2\u04fc\u0500"+
		"\5\64\33\2\u04fd\u0500\5\66\34\2\u04fe\u0500\5:\36\2\u04ff\u04fc\3\2\2"+
		"\2\u04ff\u04fd\3\2\2\2\u04ff\u04fe\3\2\2\2\u0500\63\3\2\2\2\u0501\u0503"+
		"\5\u0248\u0125\2\u0502\u0504\5\u0236\u011c\2\u0503\u0502\3\2\2\2\u0503"+
		"\u0504\3\2\2\2\u0504\u0508\3\2\2\2\u0505\u0507\58\35\2\u0506\u0505\3\2"+
		"\2\2\u0507\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2\2\2\u0509"+
		"\65\3\2\2\2\u050a\u0508\3\2\2\2\u050b\u050c\7Z\2\2\u050c\u050d\5\u0248"+
		"\u0125\2\u050d\67\3\2\2\2\u050e\u0537\5\u0214\u010b\2\u050f\u0537\5\u0216"+
		"\u010c\2\u0510\u0537\5\u0276\u013c\2\u0511\u0537\7\u0106\2\2\u0512\u0514"+
		"\7\177\2\2\u0513\u0512\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515\3\2\2\2"+
		"\u0515\u0537\7T\2\2\u0516\u0518\7\u00b0\2\2\u0517\u0519\7T\2\2\u0518\u0517"+
		"\3\2\2\2\u0518\u0519\3\2\2\2\u0519\u0537\3\2\2\2\u051a\u051b\7\u011c\2"+
		"\2\u051b\u0537\5\u0272\u013a\2\u051c\u051d\7\u011b\2\2\u051d\u0537\t\4"+
		"\2\2\u051e\u051f\7\u0204\2\2\u051f\u0537\t\5\2\2\u0520\u0521\7\u0086\2"+
		"\2\u0521\u0522\5\u0248\u0125\2\u0522\u0523\7\u02ae\2\2\u0523\u0528\5<"+
		"\37\2\u0524\u0525\7\u02b2\2\2\u0525\u0527\5<\37\2\u0526\u0524\3\2\2\2"+
		"\u0527\u052a\3\2\2\2\u0528\u0526\3\2\2\2\u0528\u0529\3\2\2\2\u0529\u052b"+
		"\3\2\2\2\u052a\u0528\3\2\2\2\u052b\u052e\7\u02af\2\2\u052c\u052d\7e\2"+
		"\2\u052d\u052f\5> \2\u052e\u052c\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0533"+
		"\3\2\2\2\u0530\u0532\5@!\2\u0531\u0530\3\2\2\2\u0532\u0535\3\2\2\2\u0533"+
		"\u0531\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0537\3\2\2\2\u0535\u0533\3\2"+
		"\2\2\u0536\u050e\3\2\2\2\u0536\u050f\3\2\2\2\u0536\u0510\3\2\2\2\u0536"+
		"\u0511\3\2\2\2\u0536\u0513\3\2\2\2\u0536\u0516\3\2\2\2\u0536\u051a\3\2"+
		"\2\2\u0536\u051c\3\2\2\2\u0536\u051e\3\2\2\2\u0536\u0520\3\2\2\2\u0537"+
		"9\3\2\2\2\u0538\u053a\7\35\2\2\u0539\u053b\5\u0248\u0125\2\u053a\u0539"+
		"\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u053d\3\2\2\2\u053c\u0538\3\2\2\2\u053c"+
		"\u053d\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u053f\7\177\2\2\u053f\u0541\7"+
		"T\2\2\u0540\u0542\5\u032a\u0196\2\u0541\u0540\3\2\2\2\u0541\u0542\3\2"+
		"\2\2\u0542\u0543\3\2\2\2\u0543\u0544\7\u02ae\2\2\u0544\u0549\5<\37\2\u0545"+
		"\u0546\7\u02b2\2\2\u0546\u0548\5<\37\2\u0547\u0545\3\2\2\2\u0548\u054b"+
		"\3\2\2\2\u0549\u0547\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054c\3\2\2\2\u054b"+
		"\u0549\3\2\2\2\u054c\u0550\7\u02af\2\2\u054d\u054f\5b\62\2\u054e\u054d"+
		"\3\2\2\2\u054f\u0552\3\2\2\2\u0550\u054e\3\2\2\2\u0550\u0551\3\2\2\2\u0551"+
		"\u0600\3\2\2\2\u0552\u0550\3\2\2\2\u0553\u0555\7I\2\2\u0554\u0556\5\u0248"+
		"\u0125\2\u0555\u0554\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0558\3\2\2\2\u0557"+
		"\u0559\5\u032a\u0196\2\u0558\u0557\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u055a"+
		"\3\2\2\2\u055a\u055b\7\u02ae\2\2\u055b\u0560\5<\37\2\u055c\u055d\7\u02b2"+
		"\2\2\u055d\u055f\5<\37\2\u055e\u055c\3\2\2\2\u055f\u0562\3\2\2\2\u0560"+
		"\u055e\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0563\3\2\2\2\u0562\u0560\3\2"+
		"\2\2\u0563\u0567\7\u02af\2\2\u0564\u0566\5b\62\2\u0565\u0564\3\2\2\2\u0566"+
		"\u0569\3\2\2\2\u0567\u0565\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0600\3\2"+
		"\2\2\u0569\u0567\3\2\2\2\u056a\u056c\7T\2\2\u056b\u056d\5\u0248\u0125"+
		"\2\u056c\u056b\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056f\3\2\2\2\u056e\u0570"+
		"\5\u032a\u0196\2\u056f\u056e\3\2\2\2\u056f\u0570\3\2\2\2\u0570\u0571\3"+
		"\2\2\2\u0571\u0572\7\u02ae\2\2\u0572\u0577\5<\37\2\u0573\u0574\7\u02b2"+
		"\2\2\u0574\u0576\5<\37\2\u0575\u0573\3\2\2\2\u0576\u0579\3\2\2\2\u0577"+
		"\u0575\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u057a\3\2\2\2\u0579\u0577\3\2"+
		"\2\2\u057a\u057e\7\u02af\2\2\u057b\u057d\5b\62\2\u057c\u057b\3\2\2\2\u057d"+
		"\u0580\3\2\2\2\u057e\u057c\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0600\3\2"+
		"\2\2\u0580\u057e\3\2\2\2\u0581\u0583\7\35\2\2\u0582\u0584\5\u0248\u0125"+
		"\2\u0583\u0582\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0586\3\2\2\2\u0585\u0581"+
		"\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0589\7\u00b0\2"+
		"\2\u0588\u058a\5\u0328\u0195\2\u0589\u0588\3\2\2\2\u0589\u058a\3\2\2\2"+
		"\u058a\u058c\3\2\2\2\u058b\u058d\5\u0248\u0125\2\u058c\u058b\3\2\2\2\u058c"+
		"\u058d\3\2\2\2\u058d\u058f\3\2\2\2\u058e\u0590\5\u032a\u0196\2\u058f\u058e"+
		"\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592\7\u02ae\2"+
		"\2\u0592\u0597\5<\37\2\u0593\u0594\7\u02b2\2\2\u0594\u0596\5<\37\2\u0595"+
		"\u0593\3\2\2\2\u0596\u0599\3\2\2\2\u0597\u0595\3\2\2\2\u0597\u0598\3\2"+
		"\2\2\u0598\u059a\3\2\2\2\u0599\u0597\3\2\2\2\u059a\u059e\7\u02af\2\2\u059b"+
		"\u059d\5b\62\2\u059c\u059b\3\2\2\2\u059d\u05a0\3\2\2\2\u059e\u059c\3\2"+
		"\2\2\u059e\u059f\3\2\2\2\u059f\u0600\3\2\2\2\u05a0\u059e\3\2\2\2\u05a1"+
		"\u05a3\7A\2\2\u05a2\u05a4\5\u0328\u0195\2\u05a3\u05a2\3\2\2\2\u05a3\u05a4"+
		"\3\2\2\2\u05a4\u05a6\3\2\2\2\u05a5\u05a7\5\u0248\u0125\2\u05a6\u05a5\3"+
		"\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05a9\7\u02ae\2\2"+
		"\u05a9\u05ae\5<\37\2\u05aa\u05ab\7\u02b2\2\2\u05ab\u05ad\5<\37\2\u05ac"+
		"\u05aa\3\2\2\2\u05ad\u05b0\3\2\2\2\u05ae\u05ac\3\2\2\2\u05ae\u05af\3\2"+
		"\2\2\u05af\u05b1\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b1\u05b5\7\u02af\2\2\u05b2"+
		"\u05b4\5b\62\2\u05b3\u05b2\3\2\2\2\u05b4\u05b7\3\2\2\2\u05b5\u05b3\3\2"+
		"\2\2\u05b5\u05b6\3\2\2\2\u05b6\u0600\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b8"+
		"\u05ba\7\u009a\2\2\u05b9\u05bb\5\u0328\u0195\2\u05ba\u05b9\3\2\2\2\u05ba"+
		"\u05bb\3\2\2\2\u05bb\u05bd\3\2\2\2\u05bc\u05be\5\u0248\u0125\2\u05bd\u05bc"+
		"\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf\u05c0\7\u02ae\2"+
		"\2\u05c0\u05c5\5<\37\2\u05c1\u05c2\7\u02b2\2\2\u05c2\u05c4\5<\37\2\u05c3"+
		"\u05c1\3\2\2\2\u05c4\u05c7\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c5\u05c6\3\2"+
		"\2\2\u05c6\u05c8\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c8\u05cc\7\u02af\2\2\u05c9"+
		"\u05cb\5b\62\2\u05ca\u05c9\3\2\2\2\u05cb\u05ce\3\2\2\2\u05cc\u05ca\3\2"+
		"\2\2\u05cc\u05cd\3\2\2\2\u05cd\u0600\3\2\2\2\u05ce\u05cc\3\2\2\2\u05cf"+
		"\u05d1\7\35\2\2\u05d0\u05d2\5\u0248\u0125\2\u05d1\u05d0\3\2\2\2\u05d1"+
		"\u05d2\3\2\2\2\u05d2\u05d4\3\2\2\2\u05d3\u05cf\3\2\2\2\u05d3\u05d4\3\2"+
		"\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d6\7?\2\2\u05d6\u05d8\7T\2\2\u05d7\u05d9"+
		"\5\u0248\u0125\2\u05d8\u05d7\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05da\3"+
		"\2\2\2\u05da\u05db\7\u02ae\2\2\u05db\u05e0\5<\37\2\u05dc\u05dd\7\u02b2"+
		"\2\2\u05dd\u05df\5<\37\2\u05de\u05dc\3\2\2\2\u05df\u05e2\3\2\2\2\u05e0"+
		"\u05de\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e3\3\2\2\2\u05e2\u05e0\3\2"+
		"\2\2\u05e3\u05e4\7\u02af\2\2\u05e4\u05e5\7\u0086\2\2\u05e5\u05e6\5\u0248"+
		"\u0125\2\u05e6\u05e7\7\u02ae\2\2\u05e7\u05ec\5<\37\2\u05e8\u05e9\7\u02b2"+
		"\2\2\u05e9\u05eb\5<\37\2\u05ea\u05e8\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec"+
		"\u05ea\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05ef\3\2\2\2\u05ee\u05ec\3\2"+
		"\2\2\u05ef\u05f2\7\u02af\2\2\u05f0\u05f1\7e\2\2\u05f1\u05f3\5> \2\u05f2"+
		"\u05f0\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f7\3\2\2\2\u05f4\u05f6\5@"+
		"!\2\u05f5\u05f4\3\2\2\2\u05f6\u05f9\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f7"+
		"\u05f8\3\2\2\2\u05f8\u0600\3\2\2\2\u05f9\u05f7\3\2\2\2\u05fa\u05fb\7\31"+
		"\2\2\u05fb\u05fc\7\u02ae\2\2\u05fc\u05fd\5\u0272\u013a\2\u05fd\u05fe\7"+
		"\u02af\2\2\u05fe\u0600\3\2\2\2\u05ff\u053c\3\2\2\2\u05ff\u0553\3\2\2\2"+
		"\u05ff\u056a\3\2\2\2\u05ff\u0585\3\2\2\2\u05ff\u05a1\3\2\2\2\u05ff\u05b8"+
		"\3\2\2\2\u05ff\u05d3\3\2\2\2\u05ff\u05fa\3\2\2\2\u0600;\3\2\2\2\u0601"+
		"\u0606\5\u0272\u013a\2\u0602\u0603\7\u02ae\2\2\u0603\u0604\5\u0272\u013a"+
		"\2\u0604\u0605\7\u02af\2\2\u0605\u0607\3\2\2\2\u0606\u0602\3\2\2\2\u0606"+
		"\u0607\3\2\2\2\u0607\u0609\3\2\2\2\u0608\u060a\5\u0322\u0192\2\u0609\u0608"+
		"\3\2\2\2\u0609\u060a\3\2\2\2\u060a=\3\2\2\2\u060b\u060c\t\6\2\2\u060c"+
		"?\3\2\2\2\u060d\u060e\7s\2\2\u060e\u060f\7*\2\2\u060f\u0614\5B\"\2\u0610"+
		"\u0611\7s\2\2\u0611\u0612\7\u00b3\2\2\u0612\u0614\5B\"\2\u0613\u060d\3"+
		"\2\2\2\u0613\u0610\3\2\2\2\u0614A\3\2\2\2\u0615\u061c\7\u008d\2\2\u0616"+
		"\u061c\7\24\2\2\u0617\u0618\7\u0096\2\2\u0618\u061c\7p\2\2\u0619\u061a"+
		"\7\u01a4\2\2\u061a\u061c\7\u00fc\2\2\u061b\u0615\3\2\2\2\u061b\u0616\3"+
		"\2\2\2\u061b\u0617\3\2\2\2\u061b\u0619\3\2\2\2\u061cC\3\2\2\2\u061d\u0639"+
		"\5\u0278\u013d\2\u061e\u0639\5\u027a\u013e\2\u061f\u0639\5\u027c\u013f"+
		"\2\u0620\u0639\5\u027e\u0140\2\u0621\u0639\5\u0280\u0141\2\u0622\u0639"+
		"\5\u0282\u0142\2\u0623\u0639\5\u0284\u0143\2\u0624\u0639\5\u0286\u0144"+
		"\2\u0625\u0639\5\u0288\u0145\2\u0626\u0639\5\u028a\u0146\2\u0627\u0639"+
		"\5\u028c\u0147\2\u0628\u0639\5\u028e\u0148\2\u0629\u0639\5\u0290\u0149"+
		"\2\u062a\u0639\5\u0292\u014a\2\u062b\u0639\5\u0294\u014b\2\u062c\u0639"+
		"\5\u0296\u014c\2\u062d\u0639\5\u0298\u014d\2\u062e\u0639\5\u029a\u014e"+
		"\2\u062f\u0639\5\u029c\u014f\2\u0630\u0639\5\u029e\u0150\2\u0631\u0639"+
		"\5\u02a0\u0151\2\u0632\u0639\5\u02a2\u0152\2\u0633\u0639\5\u02a4\u0153"+
		"\2\u0634\u0639\5\u02a6\u0154\2\u0635\u0639\5\u02a8\u0155\2\u0636\u0639"+
		"\5\u02aa\u0156\2\u0637\u0639\5\u02ac\u0157\2\u0638\u061d\3\2\2\2\u0638"+
		"\u061e\3\2\2\2\u0638\u061f\3\2\2\2\u0638\u0620\3\2\2\2\u0638\u0621\3\2"+
		"\2\2\u0638\u0622\3\2\2\2\u0638\u0623\3\2\2\2\u0638\u0624\3\2\2\2\u0638"+
		"\u0625\3\2\2\2\u0638\u0626\3\2\2\2\u0638\u0627\3\2\2\2\u0638\u0628\3\2"+
		"\2\2\u0638\u0629\3\2\2\2\u0638\u062a\3\2\2\2\u0638\u062b\3\2\2\2\u0638"+
		"\u062c\3\2\2\2\u0638\u062d\3\2\2\2\u0638\u062e\3\2\2\2\u0638\u062f\3\2"+
		"\2\2\u0638\u0630\3\2\2\2\u0638\u0631\3\2\2\2\u0638\u0632\3\2\2\2\u0638"+
		"\u0633\3\2\2\2\u0638\u0634\3\2\2\2\u0638\u0635\3\2\2\2\u0638\u0636\3\2"+
		"\2\2\u0638\u0637\3\2\2\2\u0639E\3\2\2\2\u063a\u063b\7&\2\2\u063b\u063c"+
		"\7\22\2\2\u063c\u063d\7\u015e\2\2\u063d\u063e\7\u02ae\2\2\u063e\u063f"+
		"\5\u0272\u013a\2\u063f\u0641\7\u02af\2\2\u0640\u0642\5H%\2\u0641\u0640"+
		"\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u064d\3\2\2\2\u0643\u0644\7&\2\2\u0644"+
		"\u0645\7\22\2\2\u0645\u0646\7\u0083\2\2\u0646\u0647\7\u02ae\2\2\u0647"+
		"\u0648\5\u0272\u013a\2\u0648\u064a\7\u02af\2\2\u0649\u064b\5H%\2\u064a"+
		"\u0649\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064d\3\2\2\2\u064c\u063a\3\2"+
		"\2\2\u064c\u0643\3\2\2\2\u064dG\3\2\2\2\u064e\u064f\7\u00a6\2\2\u064f"+
		"\u0650\7\22\2\2\u0650\u0651\7\u015e\2\2\u0651\u0652\7\u02ae\2\2\u0652"+
		"\u0653\5\u0272\u013a\2\u0653\u0656\7\u02af\2\2\u0654\u0655\7\u00a7\2\2"+
		"\u0655\u0657\5\u0272\u013a\2\u0656\u0654\3\2\2\2\u0656\u0657\3\2\2\2\u0657"+
		"\u068b\3\2\2\2\u0658\u0659\7\u00a6\2\2\u0659\u065a\7\22\2\2\u065a\u065b"+
		"\7\u0083\2\2\u065b\u065c\7\u02ae\2\2\u065c\u065d\5\u0272\u013a\2\u065d"+
		"\u0660\7\u02af\2\2\u065e\u065f\7\u00a7\2\2\u065f\u0661\5\u0272\u013a\2"+
		"\u0660\u065e\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u068b\3\2\2\2\u0662\u0663"+
		"\7\u00a6\2\2\u0663\u0664\7\22\2\2\u0664\u0665\7g\2\2\u0665\u0666\7\u02ae"+
		"\2\2\u0666\u0667\5\u0272\u013a\2\u0667\u066a\7\u02af\2\2\u0668\u0669\7"+
		"\u00a7\2\2\u0669\u066b\5\u0272\u013a\2\u066a\u0668\3\2\2\2\u066a\u066b"+
		"\3\2\2\2\u066b\u068b\3\2\2\2\u066c\u066d\7\u00a6\2\2\u066d\u066e\7\22"+
		"\2\2\u066e\u066f\7.\2\2\u066f\u0670\7\u02ae\2\2\u0670\u0671\5\u0272\u013a"+
		"\2\u0671\u0674\7\u02af\2\2\u0672\u0673\7\u00a7\2\2\u0673\u0675\5\u0272"+
		"\u013a\2\u0674\u0672\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u068b\3\2\2\2\u0676"+
		"\u0677\7\u00a6\2\2\u0677\u0678\7\22\2\2\u0678\u0679\7\u023f\2\2\u0679"+
		"\u067a\7\u02ae\2\2\u067a\u067b\5\u0272\u013a\2\u067b\u067e\7\u02af\2\2"+
		"\u067c\u067d\7\u00a7\2\2\u067d\u067f\5\u0272\u013a\2\u067e\u067c\3\2\2"+
		"\2\u067e\u067f\3\2\2\2\u067f\u068b\3\2\2\2\u0680\u0681\7\u00a6\2\2\u0681"+
		"\u0682\7\22\2\2\u0682\u0683\7h\2\2\u0683\u0684\7\u02ae\2\2\u0684\u0685"+
		"\5\u0272\u013a\2\u0685\u0688\7\u02af\2\2\u0686\u0687\7\u00a7\2\2\u0687"+
		"\u0689\5\u0272\u013a\2\u0688\u0686\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068b"+
		"\3\2\2\2\u068a\u064e\3\2\2\2\u068a\u0658\3\2\2\2\u068a\u0662\3\2\2\2\u068a"+
		"\u066c\3\2\2\2\u068a\u0676\3\2\2\2\u068a\u0680\3\2\2\2\u068bI\3\2\2\2"+
		"\u068c\u068f\5L\'\2\u068d\u068f\5N(\2\u068e\u068c\3\2\2\2\u068e\u068d"+
		"\3\2\2\2\u068fK\3\2\2\2\u0690\u0691\7 \2\2\u0691\u0692\7\u020c\2\2\u0692"+
		"\u0693\5\u0248\u0125\2\u0693\u0694\7\7\2\2\u0694\u0695\7\u012b\2\2\u0695"+
		"\u0699\5\u0272\u013a\2\u0696\u0697\7\u0150\2\2\u0697\u0698\7\u02a1\2\2"+
		"\u0698\u069a\5\u0272\u013a\2\u0699\u0696\3\2\2\2\u0699\u069a\3\2\2\2\u069a"+
		"\u06a0\3\2\2\2\u069b\u069d\7\u013d\2\2\u069c\u069e\7\u02a1\2\2\u069d\u069c"+
		"\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a1\5\u020a\u0106"+
		"\2\u06a0\u069b\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1M\3\2\2\2\u06a2\u06a3"+
		"\7 \2\2\u06a3\u06a4\7\u020c\2\2\u06a4\u06a5\5\u0248\u0125\2\u06a5\u06a6"+
		"\7\7\2\2\u06a6\u06a7\7\u012b\2\2\u06a7\u06a8\5\u0272\u013a\2\u06a8\u06a9"+
		"\7\u00b5\2\2\u06a9\u06aa\7\u017a\2\2\u06aa\u06ab\7C\2\2\u06ab\u06b1\5"+
		"\u0248\u0125\2\u06ac\u06ae\7\u014c\2\2\u06ad\u06af\7\u02a1\2\2\u06ae\u06ad"+
		"\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b2\5\u0272\u013a"+
		"\2\u06b1\u06ac\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b8\3\2\2\2\u06b3\u06b5"+
		"\7\u0166\2\2\u06b4\u06b6\7\u02a1\2\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3"+
		"\2\2\2\u06b6\u06b7\3\2\2\2\u06b7\u06b9\5\u0272\u013a\2\u06b8\u06b3\3\2"+
		"\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bf\3\2\2\2\u06ba\u06bc\7\u0105\2\2\u06bb"+
		"\u06bd\7\u02a1\2\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06be"+
		"\3\2\2\2\u06be\u06c0\5\u0272\u013a\2\u06bf\u06ba\3\2\2\2\u06bf\u06c0\3"+
		"\2\2\2\u06c0\u06c6\3\2\2\2\u06c1\u06c3\7\u0194\2\2\u06c2\u06c4\7\u02a1"+
		"\2\2\u06c3\u06c2\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5"+
		"\u06c7\5\u0272\u013a\2\u06c6\u06c1\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06cd"+
		"\3\2\2\2\u06c8\u06ca\7\u01a5\2\2\u06c9\u06cb\7\u02a1\2\2\u06ca\u06c9\3"+
		"\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce\5\u0248\u0125"+
		"\2\u06cd\u06c8\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06d0\3\2\2\2\u06cf\u06d1"+
		"\7\u0222\2\2\u06d0\u06cf\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d7\3\2\2"+
		"\2\u06d2\u06d4\7\u011c\2\2\u06d3\u06d5\7\u02a1\2\2\u06d4\u06d3\3\2\2\2"+
		"\u06d4\u06d5\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d8\5\u0272\u013a\2\u06d7"+
		"\u06d2\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\7\u013d"+
		"\2\2\u06da\u06dc\7\u02a1\2\2\u06db\u06da\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc"+
		"\u06dd\3\2\2\2\u06dd\u06de\5\u020a\u0106\2\u06deO\3\2\2\2\u06df\u06e1"+
		"\7 \2\2\u06e0\u06e2\5R*\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2"+
		"\u06e3\3\2\2\2\u06e3\u06e4\7\u00ac\2\2\u06e4\u06e5\5\u0248\u0125\2\u06e5"+
		"\u06e6\t\7\2\2\u06e6\u06e7\t\b\2\2\u06e7\u06e8\7s\2\2\u06e8\u06e9\5\u0248"+
		"\u0125\2\u06e9\u06ea\7=\2\2\u06ea\u06eb\7\63\2\2\u06eb\u06ed\7\u01e2\2"+
		"\2\u06ec\u06ee\5T+\2\u06ed\u06ec\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef"+
		"\3\2\2\2\u06ef\u06f0\5\4\3\2\u06f0Q\3\2\2\2\u06f1\u06f2\7\u012e\2\2\u06f2"+
		"\u06f9\7\u02a1\2\2\u06f3\u06f6\7\"\2\2\u06f4\u06f5\7\u02ae\2\2\u06f5\u06f7"+
		"\7\u02af\2\2\u06f6\u06f4\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06fa\3\2\2"+
		"\2\u06f8\u06fa\5\u0248\u0125\2\u06f9\u06f3\3\2\2\2\u06f9\u06f8\3\2\2\2"+
		"\u06faS\3\2\2\2\u06fb\u06fc\t\t\2\2\u06fc\u06fd\5\u0248\u0125\2\u06fd"+
		"U\3\2\2\2\u06fe\u0700\7 \2\2\u06ff\u0701\5\u031a\u018e\2\u0700\u06ff\3"+
		"\2\2\2\u0700\u0701\3\2\2\2\u0701\u0703\3\2\2\2\u0702\u0704\5\"\22\2\u0703"+
		"\u0702\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0706\3\2\2\2\u0705\u0707\5R"+
		"*\2\u0706\u0705\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u070b\3\2\2\2\u0708"+
		"\u0709\7\u009b\2\2\u0709\u070a\7\u01e7\2\2\u070a\u070c\t\n\2\2\u070b\u0708"+
		"\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u070d\3\2\2\2\u070d\u070e\7\u0221\2"+
		"\2\u070e\u071a\5\u0248\u0125\2\u070f\u0710\7\u02ae\2\2\u0710\u0715\5\64"+
		"\33\2\u0711\u0712\7\u02b2\2\2\u0712\u0714\5\64\33\2\u0713\u0711\3\2\2"+
		"\2\u0714\u0717\3\2\2\2\u0715\u0713\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0718"+
		"\3\2\2\2\u0717\u0715\3\2\2\2\u0718\u0719\7\u02af\2\2\u0719\u071b\3\2\2"+
		"\2\u071a\u070f\3\2\2\2\u071a\u071b\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071d"+
		"\7\f\2\2\u071d\u071f\5\u00b4[\2\u071e\u0720\5X-\2\u071f\u071e\3\2\2\2"+
		"\u071f\u0720\3\2\2\2\u0720W\3\2\2\2\u0721\u0723\7\u00bc\2\2\u0722\u0724"+
		"\t\13\2\2\u0723\u0722\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0725\3\2\2\2"+
		"\u0725\u0726\7\31\2\2\u0726\u0727\7u\2\2\u0727Y\3\2\2\2\u0728\u072b\5"+
		"\u027c\u013f\2\u0729\u072b\5\u0282\u0142\2\u072a\u0728\3\2\2\2\u072a\u0729"+
		"\3\2\2\2\u072b[\3\2\2\2\u072c\u072d\7\u0102\2\2\u072d\u0731\5^\60\2\u072e"+
		"\u0730\5\u0272\u013a\2\u072f\u072e\3\2\2\2\u0730\u0733\3\2\2\2\u0731\u072f"+
		"\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u074f\3\2\2\2\u0733\u0731\3\2\2\2\u0734"+
		"\u0737\7\u0145\2\2\u0735\u0738\5\u0272\u013a\2\u0736\u0738\5\u0272\u013a"+
		"\2\u0737\u0735\3\2\2\2\u0737\u0736\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u0742"+
		"\5\u024c\u0127\2\u073a\u073b\7\u01fe\2\2\u073b\u073f\5^\60\2\u073c\u073e"+
		"\5\u0272\u013a\2\u073d\u073c\3\2\2\2\u073e\u0741\3\2\2\2\u073f\u073d\3"+
		"\2\2\2\u073f\u0740\3\2\2\2\u0740\u0743\3\2\2\2\u0741\u073f\3\2\2\2\u0742"+
		"\u073a\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u074c\3\2\2\2\u0744\u0745\7\u013c"+
		"\2\2\u0745\u0749\5^\60\2\u0746\u0748\5\u0272\u013a\2\u0747\u0746\3\2\2"+
		"\2\u0748\u074b\3\2\2\2\u0749\u0747\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074d"+
		"\3\2\2\2\u074b\u0749\3\2\2\2\u074c\u0744\3\2\2\2\u074c\u074d\3\2\2\2\u074d"+
		"\u074f\3\2\2\2\u074e\u072c\3\2\2\2\u074e\u0734\3\2\2\2\u074f]\3\2\2\2"+
		"\u0750\u0755\7\u00f0\2\2\u0751\u0755\5\u0272\u013a\2\u0752\u0755\5\u0272"+
		"\u013a\2\u0753\u0755\5\u0272\u013a\2\u0754\u0750\3\2\2\2\u0754\u0751\3"+
		"\2\2\2\u0754\u0752\3\2\2\2\u0754\u0753\3\2\2\2\u0755_\3\2\2\2\u0756\u075c"+
		"\7\u0139\2\2\u0757\u075c\7\u0132\2\2\u0758\u0759\7\u0132\2\2\u0759\u075a"+
		"\7s\2\2\u075a\u075c\7\u01ee\2\2\u075b\u0756\3\2\2\2\u075b\u0757\3\2\2"+
		"\2\u075b\u0758\3\2\2\2\u075ca\3\2\2\2\u075d\u0765\5d\63\2\u075e\u0765"+
		"\5f\64\2\u075f\u0765\5h\65\2\u0760\u0765\5j\66\2\u0761\u0765\5l\67\2\u0762"+
		"\u0765\5n8\2\u0763\u0765\5p9\2\u0764\u075d\3\2\2\2\u0764\u075e\3\2\2\2"+
		"\u0764\u075f\3\2\2\2\u0764\u0760\3\2\2\2\u0764\u0761\3\2\2\2\u0764\u0762"+
		"\3\2\2\2\u0764\u0763\3\2\2\2\u0765c\3\2\2\2\u0766\u0768\7\u0172\2\2\u0767"+
		"\u0769\7\u02a1\2\2\u0768\u0767\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u076a"+
		"\3\2\2\2\u076a\u076b\5\u0272\u013a\2\u076be\3\2\2\2\u076c\u076d\7\u00b6"+
		"\2\2\u076d\u076e\7\u010e\2\2\u076eg\3\2\2\2\u076f\u0770\7\u00b6\2\2\u0770"+
		"\u0771\7\u015e\2\2\u0771i\3\2\2\2\u0772\u0773\7\u00bc\2\2\u0773\u0774"+
		"\7\u01b4\2\2\u0774\u0775\5\u0248\u0125\2\u0775k\3\2\2\2\u0776\u0777\7"+
		"\u00b8\2\2\u0777m\3\2\2\2\u0778\u0779\7M\2\2\u0779o\3\2\2\2\u077a\u077b"+
		"\7\u011c\2\2\u077b\u077c\5\u0272\u013a\2\u077cq\3\2\2\2\u077d\u077f\t"+
		"\f\2\2\u077e\u077d\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0780\3\2\2\2\u0780"+
		"\u0781\5\u0248\u0125\2\u0781\u0782\5\u0236\u011c\2\u0782s\3\2\2\2\u0783"+
		"\u0784\7\u011c\2\2\u0784\u079b\5\u0272\u013a\2\u0785\u0786\7\u0173\2\2"+
		"\u0786\u079b\7\u009b\2\2\u0787\u0789\7n\2\2\u0788\u0787\3\2\2\2\u0788"+
		"\u0789\3\2\2\2\u0789\u078a\3\2\2\2\u078a\u079b\7-\2\2\u078b\u078c\7\u0125"+
		"\2\2\u078c\u0796\7\u009b\2\2\u078d\u078e\7\u01a4\2\2\u078e\u0796\7\u009b"+
		"\2\2\u078f\u0790\7\u0085\2\2\u0790\u0791\7\u009b\2\2\u0791\u0796\7\u012a"+
		"\2\2\u0792\u0793\7i\2\2\u0793\u0794\7\u009b\2\2\u0794\u0796\7\u012a\2"+
		"\2\u0795\u078b\3\2\2\2\u0795\u078d\3\2\2\2\u0795\u078f\3\2\2\2\u0795\u0792"+
		"\3\2\2\2\u0796\u079b\3\2\2\2\u0797\u0798\7\u009b\2\2\u0798\u0799\7\u01e7"+
		"\2\2\u0799\u079b\t\n\2\2\u079a\u0783\3\2\2\2\u079a\u0785\3\2\2\2\u079a"+
		"\u0788\3\2\2\2\u079a\u0795\3\2\2\2\u079a\u0797\3\2\2\2\u079bu\3\2\2\2"+
		"\u079c\u079d\7\t\2\2\u079d\u079f\7$\2\2\u079e\u07a0\5\u0248\u0125\2\u079f"+
		"\u079e\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a2\3\2\2\2\u07a1\u07a3\5Z"+
		".\2\u07a2\u07a1\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a2\3\2\2\2\u07a4"+
		"\u07a5\3\2\2\2\u07a5\u07af\3\2\2\2\u07a6\u07a7\7\t\2\2\u07a7\u07a8\7$"+
		"\2\2\u07a8\u07a9\5\u0248\u0125\2\u07a9\u07aa\7\u021a\2\2\u07aa\u07ab\7"+
		"\u012a\2\2\u07ab\u07ac\7\u0131\2\2\u07ac\u07ad\7\u019f\2\2\u07ad\u07af"+
		"\3\2\2\2\u07ae\u079c\3\2\2\2\u07ae\u07a6\3\2\2\2\u07afw\3\2\2\2\u07b0"+
		"\u07b1\7\t\2\2\u07b1\u07b3\7\u0093\2\2\u07b2\u07b4\5\u0248\u0125\2\u07b3"+
		"\u07b2\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b6\3\2\2\2\u07b5\u07b7\5Z"+
		".\2\u07b6\u07b5\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b8"+
		"\u07b9\3\2\2\2\u07b9\u07c3\3\2\2\2\u07ba\u07bb\7\t\2\2\u07bb\u07bc\7\u0093"+
		"\2\2\u07bc\u07bd\5\u0248\u0125\2\u07bd\u07be\7\u021a\2\2\u07be\u07bf\7"+
		"\u012a\2\2\u07bf\u07c0\7\u0131\2\2\u07c0\u07c1\7\u019f\2\2\u07c1\u07c3"+
		"\3\2\2\2\u07c2\u07b0\3\2\2\2\u07c2\u07ba\3\2\2\2\u07c3y\3\2\2\2\u07c4"+
		"\u07c6\7\t\2\2\u07c5\u07c7\5R*\2\u07c6\u07c5\3\2\2\2\u07c6\u07c7\3\2\2"+
		"\2\u07c7\u07c8\3\2\2\2\u07c8\u07c9\7\u0143\2\2\u07c9\u07cd\5\u0248\u0125"+
		"\2\u07ca\u07cb\7s\2\2\u07cb\u07cc\7\u01e6\2\2\u07cc\u07ce\5\\/\2\u07cd"+
		"\u07ca\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d5\3\2\2\2\u07cf\u07d0\7s"+
		"\2\2\u07d0\u07d2\7\u011f\2\2\u07d1\u07d3\7n\2\2\u07d2\u07d1\3\2\2\2\u07d2"+
		"\u07d3\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6\7\u01c1\2\2\u07d5\u07cf"+
		"\3\2\2\2\u07d5\u07d6\3\2\2\2\u07d6\u07da\3\2\2\2\u07d7\u07d8\7\u0089\2"+
		"\2\u07d8\u07d9\7\u00aa\2\2\u07d9\u07db\5\u0248\u0125\2\u07da\u07d7\3\2"+
		"\2\2\u07da\u07db\3\2\2\2\u07db\u07dd\3\2\2\2\u07dc\u07de\5`\61\2\u07dd"+
		"\u07dc\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07e1\3\2\2\2\u07df\u07e0\7\u011c"+
		"\2\2\u07e0\u07e2\5\u0272\u013a\2\u07e1\u07df\3\2\2\2\u07e1\u07e2\3\2\2"+
		"\2\u07e2\u07e5\3\2\2\2\u07e3\u07e4\7\u0135\2\2\u07e4\u07e6\5\4\3\2\u07e5"+
		"\u07e3\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6{\3\2\2\2\u07e7\u07e8\7\t\2\2"+
		"\u07e8\u07e9\7\u0158\2\2\u07e9\u07ed\5\u0248\u0125\2\u07ea\u07ec\5t;\2"+
		"\u07eb\u07ea\3\2\2\2\u07ec\u07ef\3\2\2\2\u07ed\u07eb\3\2\2\2\u07ed\u07ee"+
		"\3\2\2\2\u07ee}\3\2\2\2\u07ef\u07ed\3\2\2\2\u07f0\u07f1\7\t\2\2\u07f1"+
		"\u07f2\7\u016a\2\2\u07f2\u07f3\7\u01e1\2\2\u07f3\u07f4\7\u0277\2\2\u07f4"+
		"\u07f5\7\u017c\2\2\u07f5\u07f6\7T\2\2\u07f6\177\3\2\2\2\u07f7\u07f8\7"+
		"\t\2\2\u07f8\u07f9\7\u017a\2\2\u07f9\u07fa\7C\2\2\u07fa\u07fb\5\u0248"+
		"\u0125\2\u07fb\u07fc\7\7\2\2\u07fc\u07fd\7\u0215\2\2\u07fd\u0803\5\u0272"+
		"\u013a\2\u07fe\u0800\7\u0166\2\2\u07ff\u0801\7\u02a1\2\2\u0800\u07ff\3"+
		"\2\2\2\u0800\u0801\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0804\5\u0272\u013a"+
		"\2\u0803\u07fe\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0806\3\2\2\2\u0805\u0807"+
		"\7\u0222\2\2\u0806\u0805\3\2\2\2\u0806\u0807\3\2\2\2\u0807\u0808\3\2\2"+
		"\2\u0808\u080a\7\u013d\2\2\u0809\u080b\7\u02a1\2\2\u080a\u0809\3\2\2\2"+
		"\u080a\u080b\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\5\u020a\u0106\2\u080d"+
		"\u0081\3\2\2\2\u080e\u080f\7\t\2\2\u080f\u0810\7\u0080\2\2\u0810\u0814"+
		"\5\u0248\u0125\2\u0811\u0813\5t;\2\u0812\u0811\3\2\2\2\u0813\u0816\3\2"+
		"\2\2\u0814\u0812\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0083\3\2\2\2\u0816"+
		"\u0814\3\2\2\2\u0817\u0818\7\t\2\2\u0818\u0819\7\u01e8\2\2\u0819\u081a"+
		"\5\u0248\u0125\2\u081a\u081b\7\u01b0\2\2\u081b\u081c\7\u02ae\2\2\u081c"+
		"\u0821\5.\30\2\u081d\u081e\7\u02b2\2\2\u081e\u0820\5.\30\2\u081f\u081d"+
		"\3\2\2\2\u0820\u0823\3\2\2\2\u0821\u081f\3\2\2\2\u0821\u0822\3\2\2\2\u0822"+
		"\u0824\3\2\2\2\u0823\u0821\3\2\2\2\u0824\u0825\7\u02af\2\2\u0825\u0085"+
		"\3\2\2\2\u0826\u0828\7\t\2\2\u0827\u0829\5\u0324\u0193\2\u0828\u0827\3"+
		"\2\2\2\u0828\u0829\3\2\2\2\u0829\u082b\3\2\2\2\u082a\u082c\7G\2\2\u082b"+
		"\u082a\3\2\2\2\u082b\u082c\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082e\7\u00a5"+
		"\2\2\u082e\u082f\5\u0248\u0125\2\u082f\u0834\5\u0088E\2\u0830\u0831\7"+
		"\u02b2\2\2\u0831\u0833\5\u0088E\2\u0832\u0830\3\2\2\2\u0833\u0836\3\2"+
		"\2\2\u0834\u0832\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0838\3\2\2\2\u0836"+
		"\u0834\3\2\2\2\u0837\u0839\5F$\2\u0838\u0837\3\2\2\2\u0838\u0839\3\2\2"+
		"\2\u0839\u0087\3\2\2\2\u083a\u0945\5D#\2\u083b\u083d\7\7\2\2\u083c\u083e"+
		"\7\33\2\2\u083d\u083c\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u083f\3\2\2\2"+
		"\u083f\u0843\5\64\33\2\u0840\u0844\7\u0152\2\2\u0841\u0842\7\u00fd\2\2"+
		"\u0842\u0844\5\u0248\u0125\2\u0843\u0840\3\2\2\2\u0843\u0841\3\2\2\2\u0843"+
		"\u0844\3\2\2\2\u0844\u0945\3\2\2\2\u0845\u0847\7\7\2\2\u0846\u0848\7\33"+
		"\2\2\u0847\u0846\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u0849\3\2\2\2\u0849"+
		"\u084a\7\u02ae\2\2\u084a\u084f\5\64\33\2\u084b\u084c\7\u02b2\2\2\u084c"+
		"\u084e\5\64\33\2\u084d\u084b\3\2\2\2\u084e\u0851\3\2\2\2\u084f\u084d\3"+
		"\2\2\2\u084f\u0850\3\2\2\2\u0850\u0852\3\2\2\2\u0851\u084f\3\2\2\2\u0852"+
		"\u0853\7\u02af\2\2\u0853\u0945\3\2\2\2\u0854\u0855\7\7\2\2\u0855\u0945"+
		"\5:\36\2\u0856\u0858\7\u0100\2\2\u0857\u0859\7\u02a1\2\2\u0858\u0857\3"+
		"\2\2\2\u0858\u0859\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u0945\t\r\2\2\u085b"+
		"\u085d\7\t\2\2\u085c\u085e\7\33\2\2\u085d\u085c\3\2\2\2\u085d\u085e\3"+
		"\2\2\2\u085e\u085f\3\2\2\2\u085f\u0860\5\u0248\u0125\2\u0860\u0861\5\u008a"+
		"F\2\u0861\u0945\3\2\2\2\u0862\u0863\7\t\2\2\u0863\u0864\7I\2\2\u0864\u0865"+
		"\5\u0248\u0125\2\u0865\u0866\5\u032e\u0198\2\u0866\u0945\3\2\2\2\u0867"+
		"\u0869\7\27\2\2\u0868\u086a\7\33\2\2\u0869\u0868\3\2\2\2\u0869\u086a\3"+
		"\2\2\2\u086a\u086b\3\2\2\2\u086b\u086c\5\u0248\u0125\2\u086c\u086e\5\64"+
		"\33\2\u086d\u086f\3\2\2\2\u086e\u086d\3\2\2\2\u086e\u086f\3\2\2\2\u086f"+
		"\u0945\3\2\2\2\u0870\u0872\7(\2\2\u0871\u0870\3\2\2\2\u0871\u0872\3\2"+
		"\2\2\u0872\u0873\3\2\2\2\u0873\u0874\7\30\2\2\u0874\u0875\7\u0096\2\2"+
		"\u0875\u0876\7\u02a1\2\2\u0876\u087a\5\u0272\u013a\2\u0877\u0878\7\32"+
		"\2\2\u0878\u0879\7\u02a1\2\2\u0879\u087b\5\u0272\u013a\2\u087a\u0877\3"+
		"\2\2\2\u087a\u087b\3\2\2\2\u087b\u0945\3\2\2\2\u087c\u087d\7\37\2\2\u087d"+
		"\u087e\7\u00aa\2\2\u087e\u087f\7\30\2\2\u087f\u0880\7\u0096\2\2\u0880"+
		"\u0883\5\u0272\u013a\2\u0881\u0882\7\32\2\2\u0882\u0884\5\u0272\u013a"+
		"\2\u0883\u0881\3\2\2\2\u0883\u0884\3\2\2\2\u0884\u0945\3\2\2\2\u0885\u0886"+
		"\7\u0132\2\2\u0886\u0945\7U\2\2\u0887\u0888\7\u0139\2\2\u0888\u0945\7"+
		"U\2\2\u0889\u088a\7\u0133\2\2\u088a\u0945\7\u020c\2\2\u088b\u088c\7\u0164"+
		"\2\2\u088c\u0945\7\u020c\2\2\u088d\u088f\7\62\2\2\u088e\u0890\7\33\2\2"+
		"\u088f\u088e\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0891\3\2\2\2\u0891\u0945"+
		"\5\u0248\u0125\2\u0892\u0893\7\62\2\2\u0893\u0894\7I\2\2\u0894\u0945\5"+
		"\u0248\u0125\2\u0895\u0896\7\62\2\2\u0896\u0897\7T\2\2\u0897\u0945\5\u0248"+
		"\u0125\2\u0898\u0899\7\62\2\2\u0899\u089a\7\177\2\2\u089a\u0945\7T\2\2"+
		"\u089b\u089c\7\62\2\2\u089c\u089d\7?\2\2\u089d\u089e\7T\2\2\u089e\u0945"+
		"\5\u0248\u0125\2\u089f\u0945\7>\2\2\u08a0\u08a2\7_\2\2\u08a1\u08a3\7\u02a1"+
		"\2\2\u08a2\u08a1\3\2\2\2\u08a2\u08a3\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4"+
		"\u0945\t\3\2\2\u08a5\u08a7\7\u019c\2\2\u08a6\u08a8\7\33\2\2\u08a7\u08a6"+
		"\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08ad\5\64\33\2"+
		"\u08aa\u08ae\7\u0152\2\2\u08ab\u08ac\7\u00fd\2\2\u08ac\u08ae\5\u0248\u0125"+
		"\2\u08ad\u08aa\3\2\2\2\u08ad\u08ab\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u0945"+
		"\3\2\2\2\u08af\u08b0\7x\2\2\u08b0\u08b1\7\22\2\2\u08b1\u08b6\5\u0272\u013a"+
		"\2\u08b2\u08b3\7\u02b2\2\2\u08b3\u08b5\5\u0272\u013a\2\u08b4\u08b2\3\2"+
		"\2\2\u08b5\u08b8\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b6\u08b7\3\2\2\2\u08b7"+
		"\u0945\3\2\2\2\u08b8\u08b6\3\2\2\2\u08b9\u08ba\7\u0089\2\2\u08ba\u08bb"+
		"\7\33\2\2\u08bb\u08bc\5\u0248\u0125\2\u08bc\u08bd\7\u00aa\2\2\u08bd\u08be"+
		"\5\u0248\u0125\2\u08be\u0945\3\2\2\2\u08bf\u08c0\7\u0089\2\2\u08c0\u08c1"+
		"\7I\2\2\u08c1\u08c2\5\u0248\u0125\2\u08c2\u08c3\7\u00aa\2\2\u08c3\u08c4"+
		"\5\u0248\u0125\2\u08c4\u0945\3\2\2\2\u08c5\u08c6\7\u0089\2\2\u08c6\u08c7"+
		"\7T\2\2\u08c7\u08c8\5\u0248\u0125\2\u08c8\u08c9\7\u00aa\2\2\u08c9\u08ca"+
		"\5\u0248\u0125\2\u08ca\u0945\3\2\2\2\u08cb\u08cd\7\u0089\2\2\u08cc\u08ce"+
		"\t\16\2\2\u08cd\u08cc\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08cf\3\2\2\2"+
		"\u08cf\u0945\5\u0248\u0125\2\u08d0\u08d1\7\u0224\2\2\u08d1\u0945\7\u021e"+
		"\2\2\u08d2\u08d3\7\u00bc\2\2\u08d3\u0945\7\u021e\2\2\u08d4\u08d5\7\62"+
		"\2\2\u08d5\u08d6\7|\2\2\u08d6\u08db\5\u0272\u013a\2\u08d7\u08d8\7\u02b2"+
		"\2\2\u08d8\u08da\5\u0272\u013a\2\u08d9\u08d7\3\2\2\2\u08da\u08dd\3\2\2"+
		"\2\u08db\u08d9\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u0945\3\2\2\2\u08dd\u08db"+
		"\3\2\2\2\u08de\u08df\7\u0133\2\2\u08df\u08e0\7|\2\2\u08e0\u08e5\5\u008c"+
		"G\2\u08e1\u08e2\7\u02b2\2\2\u08e2\u08e4\5\u008cG\2\u08e3\u08e1\3\2\2\2"+
		"\u08e4\u08e7\3\2\2\2\u08e5\u08e3\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u08e8"+
		"\3\2\2\2\u08e7\u08e5\3\2\2\2\u08e8\u08e9\7\u020c\2\2\u08e9\u0945\3\2\2"+
		"\2\u08ea\u08eb\7\u0164\2\2\u08eb\u08ec\7|\2\2\u08ec\u08f1\5\u008cG\2\u08ed"+
		"\u08ee\7\u02b2\2\2\u08ee\u08f0\5\u008cG\2\u08ef\u08ed\3\2\2\2\u08f0\u08f3"+
		"\3\2\2\2\u08f1\u08ef\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u08f4\3\2\2\2\u08f3"+
		"\u08f1\3\2\2\2\u08f4\u08f5\7\u020c\2\2\u08f5\u0945\3\2\2\2\u08f6\u08f7"+
		"\7\u0213\2\2\u08f7\u08f8\7|\2\2\u08f8\u08fd\5\u008cG\2\u08f9\u08fa\7\u02b2"+
		"\2\2\u08fa\u08fc\5\u008cG\2\u08fb\u08f9\3\2\2\2\u08fc\u08ff\3\2\2\2\u08fd"+
		"\u08fb\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u0945\3\2\2\2\u08ff\u08fd\3\2"+
		"\2\2\u0900\u0901\7\u0118\2\2\u0901\u0902\7|\2\2\u0902\u0945\5\u0272\u013a"+
		"\2\u0903\u0904\7\u0146\2\2\u0904\u0905\7|\2\2\u0905\u0906\5\u0248\u0125"+
		"\2\u0906\u0907\7\u00bc\2\2\u0907\u0908\7\u00a5\2\2\u0908\u090c\5\u0248"+
		"\u0125\2\u0909\u090a\5\u032c\u0197\2\u090a\u090b\7\u021e\2\2\u090b\u090d"+
		"\3\2\2\2\u090c\u0909\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u0945\3\2\2\2\u090e"+
		"\u090f\7\n\2\2\u090f\u0910\7|\2\2\u0910\u0915\5\u008cG\2\u0911\u0912\7"+
		"\u02b2\2\2\u0912\u0914\5\u008cG\2\u0913\u0911\3\2\2\2\u0914\u0917\3\2"+
		"\2\2\u0915\u0913\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u0945\3\2\2\2\u0917"+
		"\u0915\3\2\2\2\u0918\u0919\7\31\2\2\u0919\u091a\7|\2\2\u091a\u091f\5\u008c"+
		"G\2\u091b\u091c\7\u02b2\2\2\u091c\u091e\5\u008cG\2\u091d\u091b\3\2\2\2"+
		"\u091e\u0921\3\2\2\2\u091f\u091d\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0945"+
		"\3\2\2\2\u0921\u091f\3\2\2\2\u0922\u0923\7t\2\2\u0923\u0924\7|\2\2\u0924"+
		"\u0929\5\u008cG\2\u0925\u0926\7\u02b2\2\2\u0926\u0928\5\u008cG\2\u0927"+
		"\u0925\3\2\2\2\u0928\u092b\3\2\2\2\u0929\u0927\3\2\2\2\u0929\u092a\3\2"+
		"\2\2\u092a\u0945\3\2\2\2\u092b\u0929\3\2\2\2\u092c\u092d\7\u01c9\2\2\u092d"+
		"\u092e\7|\2\2\u092e\u0933\5\u008cG\2\u092f\u0930\7\u02b2\2\2\u0930\u0932"+
		"\5\u008cG\2\u0931\u092f\3\2\2\2\u0932\u0935\3\2\2\2\u0933\u0931\3\2\2"+
		"\2\u0933\u0934\3\2\2\2\u0934\u0945\3\2\2\2\u0935\u0933\3\2\2\2\u0936\u0937"+
		"\7\u01d3\2\2\u0937\u0938\7|\2\2\u0938\u093d\5\u008cG\2\u0939\u093a\7\u02b2"+
		"\2\2\u093a\u093c\5\u008cG\2\u093b\u0939\3\2\2\2\u093c\u093f\3\2\2\2\u093d"+
		"\u093b\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u0945\3\2\2\2\u093f\u093d\3\2"+
		"\2\2\u0940\u0941\7\u01d1\2\2\u0941\u0945\7\u01b6\2\2\u0942\u0943\7\u021a"+
		"\2\2\u0943\u0945\7\u01b6\2\2\u0944\u083a\3\2\2\2\u0944\u083b\3\2\2\2\u0944"+
		"\u0845\3\2\2\2\u0944\u0854\3\2\2\2\u0944\u0856\3\2\2\2\u0944\u085b\3\2"+
		"\2\2\u0944\u0862\3\2\2\2\u0944\u0867\3\2\2\2\u0944\u0871\3\2\2\2\u0944"+
		"\u087c\3\2\2\2\u0944\u0885\3\2\2\2\u0944\u0887\3\2\2\2\u0944\u0889\3\2"+
		"\2\2\u0944\u088b\3\2\2\2\u0944\u088d\3\2\2\2\u0944\u0892\3\2\2\2\u0944"+
		"\u0895\3\2\2\2\u0944\u0898\3\2\2\2\u0944\u089b\3\2\2\2\u0944\u089f\3\2"+
		"\2\2\u0944\u08a0\3\2\2\2\u0944\u08a5\3\2\2\2\u0944\u08af\3\2\2\2\u0944"+
		"\u08b9\3\2\2\2\u0944\u08bf\3\2\2\2\u0944\u08c5\3\2\2\2\u0944\u08cb\3\2"+
		"\2\2\u0944\u08d0\3\2\2\2\u0944\u08d2\3\2\2\2\u0944\u08d4\3\2\2\2\u0944"+
		"\u08de\3\2\2\2\u0944\u08ea\3\2\2\2\u0944\u08f6\3\2\2\2\u0944\u0900\3\2"+
		"\2\2\u0944\u0903\3\2\2\2\u0944\u090e\3\2\2\2\u0944\u0918\3\2\2\2\u0944"+
		"\u0922\3\2\2\2\u0944\u092c\3\2\2\2\u0944\u0936\3\2\2\2\u0944\u0940\3\2"+
		"\2\2\u0944\u0942\3\2\2\2\u0945\u0089\3\2\2\2\u0946\u0947\7\u0096\2\2\u0947"+
		"\u0948\7(\2\2\u0948\u094c\5\u0272\u013a\2\u0949\u094a\7\62\2\2\u094a\u094c"+
		"\7(\2\2\u094b\u0946\3\2\2\2\u094b\u0949\3\2\2\2\u094c\u008b\3\2\2\2\u094d"+
		"\u0950\5\u02b2\u015a\2\u094e\u0950\5\u0272\u013a\2\u094f\u094d\3\2\2\2"+
		"\u094f\u094e\3\2\2\2\u0950\u008d\3\2\2\2\u0951\u0952\7\t\2\2\u0952\u0953"+
		"\7\u020c\2\2\u0953\u0954\5\u0248\u0125\2\u0954\u0955\t\17\2\2\u0955\u0956"+
		"\7\u012b\2\2\u0956\u095a\5\u0272\u013a\2\u0957\u0958\7\u0166\2\2\u0958"+
		"\u0959\7\u02a1\2\2\u0959\u095b\5\u0272\u013a\2\u095a\u0957\3\2\2\2\u095a"+
		"\u095b\3\2\2\2\u095b\u095d\3\2\2\2\u095c\u095e\7\u0222\2\2\u095d\u095c"+
		"\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u095f\3\2\2\2\u095f\u0961\7\u013d\2"+
		"\2\u0960\u0962\7\u02a1\2\2\u0961\u0960\3\2\2\2\u0961\u0962\3\2\2\2\u0962"+
		"\u0963\3\2\2\2\u0963\u0964\5\u020a\u0106\2\u0964\u008f\3\2\2\2\u0965\u0969"+
		"\7\t\2\2\u0966\u0967\7\u0100\2\2\u0967\u0968\7\u02a1\2\2\u0968\u096a\t"+
		"\20\2\2\u0969\u0966\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096c\3\2\2\2\u096b"+
		"\u096d\5R*\2\u096c\u096b\3\2\2\2\u096c\u096d\3\2\2\2\u096d\u0971\3\2\2"+
		"\2\u096e\u096f\7\u009b\2\2\u096f\u0970\7\u01e7\2\2\u0970\u0972\t\n\2\2"+
		"\u0971\u096e\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0974"+
		"\7\u0221\2\2\u0974\u0980\5\u0248\u0125\2\u0975\u0976\7\u02ae\2\2\u0976"+
		"\u097b\5\u0272\u013a\2\u0977\u0978\7\u02b2\2\2\u0978\u097a\5\u0272\u013a"+
		"\2\u0979\u0977\3\2\2\2\u097a\u097d\3\2\2\2\u097b\u0979\3\2\2\2\u097b\u097c"+
		"\3\2\2\2\u097c\u097e\3\2\2\2\u097d\u097b\3\2\2\2\u097e\u097f\7\u02af\2"+
		"\2\u097f\u0981\3\2\2\2\u0980\u0975\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0982"+
		"\3\2\2\2\u0982\u0983\7\f\2\2\u0983\u098a\5\u00b2Z\2\u0984\u0986\7\u00bc"+
		"\2\2\u0985\u0987\t\13\2\2\u0986\u0985\3\2\2\2\u0986\u0987\3\2\2\2\u0987"+
		"\u0988\3\2\2\2\u0988\u0989\7\31\2\2\u0989\u098b\7u\2\2\u098a\u0984\3\2"+
		"\2\2\u098a\u098b\3\2\2\2\u098b\u0091\3\2\2\2\u098c\u098d\7\62\2\2\u098d"+
		"\u098f\7$\2\2\u098e\u0990\5\u031c\u018f\2\u098f\u098e\3\2\2\2\u098f\u0990"+
		"\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u0992\5\u0248\u0125\2\u0992\u0093\3"+
		"\2\2\2\u0993\u0994\7\62\2\2\u0994\u0996\7\u0093\2\2\u0995\u0997\5\u031c"+
		"\u018f\2\u0996\u0995\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0998\3\2\2\2\u0998"+
		"\u0999\5\u0248\u0125\2\u0999\u0095\3\2\2\2\u099a\u099b\7\62\2\2\u099b"+
		"\u099d\7\u0143\2\2\u099c\u099e\5\u031c\u018f\2\u099d\u099c\3\2\2\2\u099d"+
		"\u099e\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u09a0\5\u0248\u0125\2\u09a0\u0097"+
		"\3\2\2\2\u09a1\u09a2\7\62\2\2\u09a2\u09a4\7I\2\2\u09a3\u09a5\5\u0324\u0193"+
		"\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a7"+
		"\5\u0248\u0125\2\u09a7\u09a8\7s\2\2\u09a8\u09ac\5\u0248\u0125\2\u09a9"+
		"\u09ab\5\u009aN\2\u09aa\u09a9\3\2\2\2\u09ab\u09ae\3\2\2\2\u09ac\u09aa"+
		"\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u0099\3\2\2\2\u09ae\u09ac\3\2\2\2\u09af"+
		"\u09b2\5\"\22\2\u09b0\u09b2\5$\23\2\u09b1\u09af\3\2\2\2\u09b1\u09b0\3"+
		"\2\2\2\u09b2\u009b\3\2\2\2\u09b3\u09b4\7\62\2\2\u09b4\u09b5\7\u017a\2"+
		"\2\u09b5\u09b6\7C\2\2\u09b6\u09b7\5\u0248\u0125\2\u09b7\u09b8\7\u013d"+
		"\2\2\u09b8\u09b9\7\u02a1\2\2\u09b9\u09ba\5\u020a\u0106\2\u09ba\u009d\3"+
		"\2\2\2\u09bb\u09bc\7\62\2\2\u09bc\u09be\7\u0080\2\2\u09bd\u09bf\5\u031c"+
		"\u018f\2\u09be\u09bd\3\2\2\2\u09be\u09bf\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0"+
		"\u09c1\5\u0248\u0125\2\u09c1\u009f\3\2\2\2\u09c2\u09c3\7\62\2\2\u09c3"+
		"\u09c5\7\u0158\2\2\u09c4\u09c6\5\u031c\u018f\2\u09c5\u09c4\3\2\2\2\u09c5"+
		"\u09c6\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7\u09c8\5\u0248\u0125\2\u09c8\u00a1"+
		"\3\2\2\2\u09c9\u09ca\7\62\2\2\u09ca\u09cc\7\u01e8\2\2\u09cb\u09cd\5\u031c"+
		"\u018f\2\u09cc\u09cb\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce"+
		"\u09cf\5\u0248\u0125\2\u09cf\u00a3\3\2\2\2\u09d0\u09d2\7\62\2\2\u09d1"+
		"\u09d3\7\u020d\2\2\u09d2\u09d1\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3\u09d4"+
		"\3\2\2\2\u09d4\u09d6\7\u00a5\2\2\u09d5\u09d7\5\u031c\u018f\2\u09d6\u09d5"+
		"\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09dd\5\u0248\u0125"+
		"\2\u09d9\u09da\7\u02b2\2\2\u09da\u09dc\5\u0248\u0125\2\u09db\u09d9\3\2"+
		"\2\2\u09dc\u09df\3\2\2\2\u09dd\u09db\3\2\2\2\u09dd\u09de\3\2\2\2\u09de"+
		"\u09e1\3\2\2\2\u09df\u09dd\3\2\2\2\u09e0\u09e2\t\21\2\2\u09e1\u09e0\3"+
		"\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u00a5\3\2\2\2\u09e3\u09e4\7\62\2\2\u09e4"+
		"\u09e5\7\u020c\2\2\u09e5\u09eb\5\u0248\u0125\2\u09e6\u09e8\7\u013d\2\2"+
		"\u09e7\u09e9\7\u02a1\2\2\u09e8\u09e7\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9"+
		"\u09ea\3\2\2\2\u09ea\u09ec\5\u020a\u0106\2\u09eb\u09e6\3\2\2\2\u09eb\u09ec"+
		"\3\2\2\2\u09ec\u00a7\3\2\2\2\u09ed\u09ee\7\62\2\2\u09ee\u09f0\7\u00ac"+
		"\2\2\u09ef\u09f1\5\u031c\u018f\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1\3\2\2"+
		"\2\u09f1\u09f2\3\2\2\2\u09f2\u09f3\5\u0248\u0125\2\u09f3\u00a9\3\2\2\2"+
		"\u09f4\u09f5\7\62\2\2\u09f5\u09f7\7\u0221\2\2\u09f6\u09f8\5\u031c\u018f"+
		"\2\u09f7\u09f6\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fe"+
		"\5\u0248\u0125\2\u09fa\u09fb\7\u02b2\2\2\u09fb\u09fd\5\u0248\u0125\2\u09fc"+
		"\u09fa\3\2\2\2\u09fd\u0a00\3\2\2\2\u09fe\u09fc\3\2\2\2\u09fe\u09ff\3\2"+
		"\2\2\u09ff\u0a02\3\2\2\2\u0a00\u09fe\3\2\2\2\u0a01\u0a03\t\21\2\2\u0a02"+
		"\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u00ab\3\2\2\2\u0a04\u0a05\7\u0089"+
		"\2\2\u0a05\u0a06\7\u00a5\2\2\u0a06\u0a0b\5\u00aeX\2\u0a07\u0a08\7\u02b2"+
		"\2\2\u0a08\u0a0a\5\u00aeX\2\u0a09\u0a07\3\2\2\2\u0a0a\u0a0d\3\2\2\2\u0a0b"+
		"\u0a09\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u00ad\3\2\2\2\u0a0d\u0a0b\3\2"+
		"\2\2\u0a0e\u0a0f\5\u0248\u0125\2\u0a0f\u0a10\7\u00aa\2\2\u0a10\u0a11\5"+
		"\u0248\u0125\2\u0a11\u00af\3\2\2\2\u0a12\u0a14\7\u0213\2\2\u0a13\u0a15"+
		"\7\u00a5\2\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15\u0a16\3\2\2"+
		"\2\u0a16\u0a17\5\u0248\u0125\2\u0a17\u00b1\3\2\2\2\u0a18\u0a19\5\u00b4"+
		"[\2\u0a19\u00b3\3\2\2\2\u0a1a\u0a1d\5\u00b6\\\2\u0a1b\u0a1d\5\u00be`\2"+
		"\u0a1c\u0a1a\3\2\2\2\u0a1c\u0a1b\3\2\2\2\u0a1d\u00b5\3\2\2\2\u0a1e\u0a21"+
		"\5\u00b8]\2\u0a1f\u0a21\5\u00bc_\2\u0a20\u0a1e\3\2\2\2\u0a20\u0a1f\3\2"+
		"\2\2\u0a21\u00b7\3\2\2\2\u0a22\u0a24\7\u0095\2\2\u0a23\u0a25\5\u00c0a"+
		"\2\u0a24\u0a23\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a27\3\2\2\2\u0a26\u0a28"+
		"\7E\2\2\u0a27\u0a26\3\2\2\2\u0a27\u0a28\3\2\2\2\u0a28\u0a2a\3\2\2\2\u0a29"+
		"\u0a2b\7\u00a4\2\2\u0a2a\u0a29\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2d"+
		"\3\2\2\2\u0a2c\u0a2e\7\u00a1\2\2\u0a2d\u0a2c\3\2\2\2\u0a2d\u0a2e\3\2\2"+
		"\2\u0a2e\u0a30\3\2\2\2\u0a2f\u0a31\7\u009f\2\2\u0a30\u0a2f\3\2\2\2\u0a30"+
		"\u0a31\3\2\2\2\u0a31\u0a33\3\2\2\2\u0a32\u0a34\7\u01f9\2\2\u0a33\u0a32"+
		"\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a36\3\2\2\2\u0a35\u0a37\5\u00ba^"+
		"\2\u0a36\u0a35\3\2\2\2\u0a36\u0a37\3\2\2\2\u0a37\u0a39\3\2\2\2\u0a38\u0a3a"+
		"\7\u00a0\2\2\u0a39\u0a38\3\2\2\2\u0a39\u0a3a\3\2\2\2\u0a3a\u0a3b\3\2\2"+
		"\2\u0a3b\u0a40\5\u00c4c\2\u0a3c\u0a3d\7\u02b2\2\2\u0a3d\u0a3f\5\u00c4"+
		"c\2\u0a3e\u0a3c\3\2\2\2\u0a3f\u0a42\3\2\2\2\u0a40\u0a3e\3\2\2\2\u0a40"+
		"\u0a41\3\2\2\2\u0a41\u0a44\3\2\2\2\u0a42\u0a40\3\2\2\2\u0a43\u0a45\5\u00c8"+
		"e\2\u0a44\u0a43\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a47\3\2\2\2\u0a46"+
		"\u0a48\5\u00dco\2\u0a47\u0a46\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a4a"+
		"\3\2\2\2\u0a49\u0a4b\5\u00dep\2\u0a4a\u0a49\3\2\2\2\u0a4a\u0a4b\3\2\2"+
		"\2\u0a4b\u0a4d\3\2\2\2\u0a4c\u0a4e\5\u00e4s\2\u0a4d\u0a4c\3\2\2\2\u0a4d"+
		"\u0a4e\3\2\2\2\u0a4e\u0a50\3\2\2\2\u0a4f\u0a51\5\u00e8u\2\u0a50\u0a4f"+
		"\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a53\3\2\2\2\u0a52\u0a54\5\u00eav"+
		"\2\u0a53\u0a52\3\2\2\2\u0a53\u0a54\3\2\2\2\u0a54\u0a56\3\2\2\2\u0a55\u0a57"+
		"\5\u00ecw\2\u0a56\u0a55\3\2\2\2\u0a56\u0a57\3\2\2\2\u0a57\u00b9\3\2\2"+
		"\2\u0a58\u0a59\t\22\2\2\u0a59\u00bb\3\2\2\2\u0a5a\u0a5b\7\u02ae\2\2\u0a5b"+
		"\u0a5c\5\u00b4[\2\u0a5c\u0a5e\7\u02af\2\2\u0a5d\u0a5f\5\u00e4s\2\u0a5e"+
		"\u0a5d\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a61\3\2\2\2\u0a60\u0a62\5\u00e8"+
		"u\2\u0a61\u0a60\3\2\2\2\u0a61\u0a62\3\2\2\2\u0a62\u0a64\3\2\2\2\u0a63"+
		"\u0a65\5\u00ecw\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u00bd"+
		"\3\2\2\2\u0a66\u0a6a\5\u00b6\\\2\u0a67\u0a68\5\u00c2b\2\u0a68\u0a69\5"+
		"\u00b6\\\2\u0a69\u0a6b\3\2\2\2\u0a6a\u0a67\3\2\2\2\u0a6b\u0a6c\3\2\2\2"+
		"\u0a6c\u0a6a\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6f\3\2\2\2\u0a6e\u0a70"+
		"\5\u00e4s\2\u0a6f\u0a6e\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a72\3\2\2"+
		"\2\u0a71\u0a73\5\u00e8u\2\u0a72\u0a71\3\2\2\2\u0a72\u0a73\3\2\2\2\u0a73"+
		"\u0a75\3\2\2\2\u0a74\u0a76\5\u00ecw\2\u0a75\u0a74\3\2\2\2\u0a75\u0a76"+
		"\3\2\2\2\u0a76\u00bf\3\2\2\2\u0a77\u0a78\t\23\2\2\u0a78\u00c1\3\2\2\2"+
		"\u0a79\u0a7b\7\u00af\2\2\u0a7a\u0a7c\t\24\2\2\u0a7b\u0a7a\3\2\2\2\u0a7b"+
		"\u0a7c\3\2\2\2\u0a7c\u00c3\3\2\2\2\u0a7d\u0a82\5\u0272\u013a\2\u0a7e\u0a80"+
		"\7\f\2\2\u0a7f\u0a7e\3\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u0a81\3\2\2\2\u0a81"+
		"\u0a83\5\u00c6d\2\u0a82\u0a7f\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83\u00c5"+
		"\3\2\2\2\u0a84\u0a87\5\u0248\u0125\2\u0a85\u0a87\5\u024a\u0126\2\u0a86"+
		"\u0a84\3\2\2\2\u0a86\u0a85\3\2\2\2\u0a87\u00c7\3\2\2\2\u0a88\u0a89\7@"+
		"\2\2\u0a89\u0a8a\5\u00caf\2\u0a8a\u00c9\3\2\2\2\u0a8b\u0a8e\5\u00ccg\2"+
		"\u0a8c\u0a8e\5\u00ceh\2\u0a8d\u0a8b\3\2\2\2\u0a8d\u0a8c\3\2\2\2\u0a8e"+
		"\u00cb\3\2\2\2\u0a8f\u0a91\5\u0248\u0125\2\u0a90\u0a92\5\u00d0i\2\u0a91"+
		"\u0a90\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0aa1\3\2\2\2\u0a93\u0a95\7\f"+
		"\2\2\u0a94\u0a93\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96"+
		"\u0a9f\5\u0248\u0125\2\u0a97\u0a9c\5\u00d2j\2\u0a98\u0a99\7\u02b2\2\2"+
		"\u0a99\u0a9b\5\u00d2j\2\u0a9a\u0a98\3\2\2\2\u0a9b\u0a9e\3\2\2\2\u0a9c"+
		"\u0a9a\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u0aa0\3\2\2\2\u0a9e\u0a9c\3\2"+
		"\2\2\u0a9f\u0a97\3\2\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u0aa2\3\2\2\2\u0aa1"+
		"\u0a94\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0ac1\3\2\2\2\u0aa3\u0aa4\7\u02ae"+
		"\2\2\u0aa4\u0aa5\5\u00b4[\2\u0aa5\u0aa7\7\u02af\2\2\u0aa6\u0aa8\7\f\2"+
		"\2\u0aa7\u0aa6\3\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0ab5"+
		"\5\u0248\u0125\2\u0aaa\u0aab\7\u02ae\2\2\u0aab\u0ab0\5\u0272\u013a\2\u0aac"+
		"\u0aad\7\u02b2\2\2\u0aad\u0aaf\5\u0272\u013a\2\u0aae\u0aac\3\2\2\2\u0aaf"+
		"\u0ab2\3\2\2\2\u0ab0\u0aae\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab3\3\2"+
		"\2\2\u0ab2\u0ab0\3\2\2\2\u0ab3\u0ab4\7\u02af\2\2\u0ab4\u0ab6\3\2\2\2\u0ab5"+
		"\u0aaa\3\2\2\2\u0ab5\u0ab6\3\2\2\2\u0ab6\u0ac1\3\2\2\2\u0ab7\u0ab8\7\u02b0"+
		"\2\2\u0ab8\u0ab9\7\u01a9\2\2\u0ab9\u0aba\5\u00caf\2\u0aba\u0abb\7\u02b1"+
		"\2\2\u0abb\u0ac1\3\2\2\2\u0abc\u0abd\7\u02ae\2\2\u0abd\u0abe\5\u00caf"+
		"\2\u0abe\u0abf\7\u02af\2\2\u0abf\u0ac1\3\2\2\2\u0ac0\u0a8f\3\2\2\2\u0ac0"+
		"\u0aa3\3\2\2\2\u0ac0\u0ab7\3\2\2\2\u0ac0\u0abc\3\2\2\2\u0ac1\u00cd\3\2"+
		"\2\2\u0ac2\u0ac4\5\u00ccg\2\u0ac3\u0ac5\5\u00d8m\2\u0ac4\u0ac3\3\2\2\2"+
		"\u0ac5\u0ac6\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7\u00cf"+
		"\3\2\2\2\u0ac8\u0ac9\7|\2\2\u0ac9\u0aca\7\u02ae\2\2\u0aca\u0acf\5\u0272"+
		"\u013a\2\u0acb\u0acc\7\u02b2\2\2\u0acc\u0ace\5\u0272\u013a\2\u0acd\u0acb"+
		"\3\2\2\2\u0ace\u0ad1\3\2\2\2\u0acf\u0acd\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0"+
		"\u0ad2\3\2\2\2\u0ad1\u0acf\3\2\2\2\u0ad2\u0ad3\7\u02af\2\2\u0ad3\u00d1"+
		"\3\2\2\2\u0ad4\u0ad5\7\u00b5\2\2\u0ad5\u0ad8\7I\2\2\u0ad6\u0ad7\7=\2\2"+
		"\u0ad7\u0ad9\5\u00d4k\2\u0ad8\u0ad6\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9"+
		"\u0ada\3\2\2\2\u0ada\u0adb\7\u02ae\2\2\u0adb\u0ae0\5\u0272\u013a\2\u0adc"+
		"\u0add\7\u02b2\2\2\u0add\u0adf\5\u0272\u013a\2\u0ade\u0adc\3\2\2\2\u0adf"+
		"\u0ae2\3\2\2\2\u0ae0\u0ade\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae3\3\2"+
		"\2\2\u0ae2\u0ae0\3\2\2\2\u0ae3\u0ae4\7\u02af\2\2\u0ae4\u0b3b\3\2\2\2\u0ae5"+
		"\u0ae6\7\u00b5\2\2\u0ae6\u0ae9\7T\2\2\u0ae7\u0ae8\7=\2\2\u0ae8\u0aea\5"+
		"\u00d4k\2\u0ae9\u0ae7\3\2\2\2\u0ae9\u0aea\3\2\2\2\u0aea\u0aeb\3\2\2\2"+
		"\u0aeb\u0aec\7\u02ae\2\2\u0aec\u0af1\5\u0272\u013a\2\u0aed\u0aee\7\u02b2"+
		"\2\2\u0aee\u0af0\5\u0272\u013a\2\u0aef\u0aed\3\2\2\2\u0af0\u0af3\3\2\2"+
		"\2\u0af1\u0aef\3\2\2\2\u0af1\u0af2\3\2\2\2\u0af2\u0af4\3\2\2\2\u0af3\u0af1"+
		"\3\2\2\2\u0af4\u0af5\7\u02af\2\2\u0af5\u0b3b\3\2\2\2\u0af6\u0af7\7G\2"+
		"\2\u0af7\u0afa\7I\2\2\u0af8\u0af9\7=\2\2\u0af9\u0afb\5\u00d4k\2\u0afa"+
		"\u0af8\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0afc\3\2\2\2\u0afc\u0afd\7\u02ae"+
		"\2\2\u0afd\u0b02\5\u0272\u013a\2\u0afe\u0aff\7\u02b2\2\2\u0aff\u0b01\5"+
		"\u0272\u013a\2\u0b00\u0afe\3\2\2\2\u0b01\u0b04\3\2\2\2\u0b02\u0b00\3\2"+
		"\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b05\3\2\2\2\u0b04\u0b02\3\2\2\2\u0b05"+
		"\u0b06\7\u02af\2\2\u0b06\u0b3b\3\2\2\2\u0b07\u0b08\7G\2\2\u0b08\u0b0b"+
		"\7T\2\2\u0b09\u0b0a\7=\2\2\u0b0a\u0b0c\5\u00d4k\2\u0b0b\u0b09\3\2\2\2"+
		"\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b0d\3\2\2\2\u0b0d\u0b0e\7\u02ae\2\2\u0b0e"+
		"\u0b13\5\u0272\u013a\2\u0b0f\u0b10\7\u02b2\2\2\u0b10\u0b12\5\u0272\u013a"+
		"\2\u0b11\u0b0f\3\2\2\2\u0b12\u0b15\3\2\2\2\u0b13\u0b11\3\2\2\2\u0b13\u0b14"+
		"\3\2\2\2\u0b14\u0b16\3\2\2\2\u0b15\u0b13\3\2\2\2\u0b16\u0b17\7\u02af\2"+
		"\2\u0b17\u0b3b\3\2\2\2\u0b18\u0b19\7>\2\2\u0b19\u0b1c\7I\2\2\u0b1a\u0b1b"+
		"\7=\2\2\u0b1b\u0b1d\5\u00d4k\2\u0b1c\u0b1a\3\2\2\2\u0b1c\u0b1d\3\2\2\2"+
		"\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b1f\7\u02ae\2\2\u0b1f\u0b24\5\u0272\u013a"+
		"\2\u0b20\u0b21\7\u02b2\2\2\u0b21\u0b23\5\u0272\u013a\2\u0b22\u0b20\3\2"+
		"\2\2\u0b23\u0b26\3\2\2\2\u0b24\u0b22\3\2\2\2\u0b24\u0b25\3\2\2\2\u0b25"+
		"\u0b27\3\2\2\2\u0b26\u0b24\3\2\2\2\u0b27\u0b28\7\u02af\2\2\u0b28\u0b3b"+
		"\3\2\2\2\u0b29\u0b2a\7>\2\2\u0b2a\u0b2d\7T\2\2\u0b2b\u0b2c\7=\2\2\u0b2c"+
		"\u0b2e\5\u00d4k\2\u0b2d\u0b2b\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f"+
		"\3\2\2\2\u0b2f\u0b30\7\u02ae\2\2\u0b30\u0b35\5\u0272\u013a\2\u0b31\u0b32"+
		"\7\u02b2\2\2\u0b32\u0b34\5\u0272\u013a\2\u0b33\u0b31\3\2\2\2\u0b34\u0b37"+
		"\3\2\2\2\u0b35\u0b33\3\2\2\2\u0b35\u0b36\3\2\2\2\u0b36\u0b38\3\2\2\2\u0b37"+
		"\u0b35\3\2\2\2\u0b38\u0b39\7\u02af\2\2\u0b39\u0b3b\3\2\2\2\u0b3a\u0ad4"+
		"\3\2\2\2\u0b3a\u0ae5\3\2\2\2\u0b3a\u0af6\3\2\2\2\u0b3a\u0b07\3\2\2\2\u0b3a"+
		"\u0b18\3\2\2\2\u0b3a\u0b29\3\2\2\2\u0b3b\u00d3\3\2\2\2\u0b3c\u0b42\7S"+
		"\2\2\u0b3d\u0b3e\7x\2\2\u0b3e\u0b42\7\22\2\2\u0b3f\u0b40\7C\2\2\u0b40"+
		"\u0b42\7\22\2\2\u0b41\u0b3c\3\2\2\2\u0b41\u0b3d\3\2\2\2\u0b41\u0b3f\3"+
		"\2\2\2\u0b42\u00d5\3\2\2\2\u0b43\u0b44\t\25\2\2\u0b44\u00d7\3\2\2\2\u0b45"+
		"\u0b46\5\u00d6l\2\u0b46\u0b48\5\u00ccg\2\u0b47\u0b49\5\u00dan\2\u0b48"+
		"\u0b47\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u00d9\3\2\2\2\u0b4a\u0b4b\7s"+
		"\2\2\u0b4b\u0b59\5\u0272\u013a\2\u0b4c\u0b4d\7\u00b6\2\2\u0b4d\u0b4e\7"+
		"\u02ae\2\2\u0b4e\u0b53\5\u0272\u013a\2\u0b4f\u0b50\7\u02b2\2\2\u0b50\u0b52"+
		"\5\u0272\u013a\2\u0b51\u0b4f\3\2\2\2\u0b52\u0b55\3\2\2\2\u0b53\u0b51\3"+
		"\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u0b56\3\2\2\2\u0b55\u0b53\3\2\2\2\u0b56"+
		"\u0b57\7\u02af\2\2\u0b57\u0b59\3\2\2\2\u0b58\u0b4a\3\2\2\2\u0b58\u0b4c"+
		"\3\2\2\2\u0b59\u00db\3\2\2\2\u0b5a\u0b5b\7\u00ba\2\2\u0b5b\u0b5c\5\u0272"+
		"\u013a\2\u0b5c\u00dd\3\2\2\2\u0b5d\u0b5e\7C\2\2\u0b5e\u0b5f\7\22\2\2\u0b5f"+
		"\u0b64\5\u00e2r\2\u0b60\u0b61\7\u02b2\2\2\u0b61\u0b63\5\u00e2r\2\u0b62"+
		"\u0b60\3\2\2\2\u0b63\u0b66\3\2\2\2\u0b64\u0b62\3\2\2\2\u0b64\u0b65\3\2"+
		"\2\2\u0b65\u0b68\3\2\2\2\u0b66\u0b64\3\2\2\2\u0b67\u0b69\5\u0320\u0191"+
		"\2\u0b68\u0b67\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69\u0b6b\3\2\2\2\u0b6a\u0b5d"+
		"\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u0b6d\3\2\2\2\u0b6c\u0b6e\5\u00e0q"+
		"\2\u0b6d\u0b6c\3\2\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u00df\3\2\2\2\u0b6f\u0b70"+
		"\7D\2\2\u0b70\u0b71\5\u0272\u013a\2\u0b71\u00e1\3\2\2\2\u0b72\u0b73\5"+
		"\u0272\u013a\2\u0b73\u00e3\3\2\2\2\u0b74\u0b75\7x\2\2\u0b75\u0b76\7\22"+
		"\2\2\u0b76\u0b7b\5\u00e6t\2\u0b77\u0b78\7\u02b2\2\2\u0b78\u0b7a\5\u00e6"+
		"t\2\u0b79\u0b77\3\2\2\2\u0b7a\u0b7d\3\2\2\2\u0b7b\u0b79\3\2\2\2\u0b7b"+
		"\u0b7c\3\2\2\2\u0b7c\u0b7f\3\2\2\2\u0b7d\u0b7b\3\2\2\2\u0b7e\u0b80\5\u0320"+
		"\u0191\2\u0b7f\u0b7e\3\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80\u00e5\3\2\2\2\u0b81"+
		"\u0b83\5\u0272\u013a\2\u0b82\u0b84\5\u0322\u0192\2\u0b83\u0b82\3\2\2\2"+
		"\u0b83\u0b84\3\2\2\2\u0b84\u00e7\3\2\2\2\u0b85\u0b90\7[\2\2\u0b86\u0b87"+
		"\5\u0272\u013a\2\u0b87\u0b88\7\u02b2\2\2\u0b88\u0b8a\3\2\2\2\u0b89\u0b86"+
		"\3\2\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u0b8b\3\2\2\2\u0b8b\u0b91\5\u0272\u013a"+
		"\2\u0b8c\u0b8d\5\u0272\u013a\2\u0b8d\u0b8e\7\u01a8\2\2\u0b8e\u0b8f\5\u0272"+
		"\u013a\2\u0b8f\u0b91\3\2\2\2\u0b90\u0b89\3\2\2\2\u0b90\u0b8c\3\2\2\2\u0b91"+
		"\u00e9\3\2\2\2\u0b92\u0b93\7P\2\2\u0b93\u0b98\5\u0272\u013a\2\u0b94\u0b95"+
		"\7\u02b2\2\2\u0b95\u0b97\5\u0272\u013a\2\u0b96\u0b94\3\2\2\2\u0b97\u0b9a"+
		"\3\2\2\2\u0b98\u0b96\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99\u0bb5\3\2\2\2\u0b9a"+
		"\u0b98\3\2\2\2\u0b9b\u0b9c\7P\2\2\u0b9c\u0b9d\7\u0136\2\2\u0b9d\u0bb5"+
		"\5\u0272\u013a\2\u0b9e\u0b9f\7P\2\2\u0b9f\u0ba0\7{\2\2\u0ba0\u0ba2\5\u0272"+
		"\u013a\2\u0ba1\u0ba3\5\u027c\u013f\2\u0ba2\u0ba1\3\2\2\2\u0ba2\u0ba3\3"+
		"\2\2\2\u0ba3\u0baa\3\2\2\2\u0ba4\u0ba6\t\26\2\2\u0ba5\u0ba7\5\u011c\u008f"+
		"\2\u0ba6\u0ba5\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u0ba6\3\2\2\2\u0ba8\u0ba9"+
		"\3\2\2\2\u0ba9\u0bab\3\2\2\2\u0baa\u0ba4\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab"+
		"\u0bb2\3\2\2\2\u0bac\u0bae\7]\2\2\u0bad\u0baf\5\u011e\u0090\2\u0bae\u0bad"+
		"\3\2\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bae\3\2\2\2\u0bb0\u0bb1\3\2\2\2\u0bb1"+
		"\u0bb3\3\2\2\2\u0bb2\u0bac\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb5\3\2"+
		"\2\2\u0bb4\u0b92\3\2\2\2\u0bb4\u0b9b\3\2\2\2\u0bb4\u0b9e\3\2\2\2\u0bb5"+
		"\u00eb\3\2\2\2\u0bb6\u0bb7\7=\2\2\u0bb7\u0bc1\t\27\2\2\u0bb8\u0bb9\7q"+
		"\2\2\u0bb9\u0bbe\5\u0272\u013a\2\u0bba\u0bbb\7\u02b2\2\2\u0bbb\u0bbd\5"+
		"\u0272\u013a\2\u0bbc\u0bba\3\2\2\2\u0bbd\u0bc0\3\2\2\2\u0bbe\u0bbc\3\2"+
		"\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0bc2\3\2\2\2\u0bc0\u0bbe\3\2\2\2\u0bc1"+
		"\u0bb8\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc4\3\2\2\2\u0bc3\u0bc5\5\u00ee"+
		"x\2\u0bc4\u0bc3\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bcb\3\2\2\2\u0bc6"+
		"\u0bc7\7_\2\2\u0bc7\u0bc8\7H\2\2\u0bc8\u0bc9\7\u01ea\2\2\u0bc9\u0bcb\7"+
		"\u019b\2\2\u0bca\u0bb6\3\2\2\2\u0bca\u0bc6\3\2\2\2\u0bcb\u00ed\3\2\2\2"+
		"\u0bcc\u0bcd\7\u0099\2\2\u0bcd\u0bd0\7`\2\2\u0bce\u0bd0\7m\2\2\u0bcf\u0bcc"+
		"\3\2\2\2\u0bcf\u0bce\3\2\2\2\u0bd0\u00ef\3\2\2\2\u0bd1\u0bd3\7\u0095\2"+
		"\2\u0bd2\u0bd4\5\u00c0a\2\u0bd3\u0bd2\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4"+
		"\u0bd6\3\2\2\2\u0bd5\u0bd7\7E\2\2\u0bd6\u0bd5\3\2\2\2\u0bd6\u0bd7\3\2"+
		"\2\2\u0bd7\u0bd9\3\2\2\2\u0bd8\u0bda\7\u00a4\2\2\u0bd9\u0bd8\3\2\2\2\u0bd9"+
		"\u0bda\3\2\2\2\u0bda\u0bdc\3\2\2\2\u0bdb\u0bdd\7\u00a1\2\2\u0bdc\u0bdb"+
		"\3\2\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0bdf\3\2\2\2\u0bde\u0be0\7\u009f\2"+
		"\2\u0bdf\u0bde\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be2\3\2\2\2\u0be1\u0be3"+
		"\7\u01f9\2\2\u0be2\u0be1\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be5\3\2\2"+
		"\2\u0be4\u0be6\5\u00ba^\2\u0be5\u0be4\3\2\2\2\u0be5\u0be6\3\2\2\2\u0be6"+
		"\u0be8\3\2\2\2\u0be7\u0be9\7\u00a0\2\2\u0be8\u0be7\3\2\2\2\u0be8\u0be9"+
		"\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0bef\5\u00c4c\2\u0beb\u0bec\7\u02b2"+
		"\2\2\u0bec\u0bee\5\u00c4c\2\u0bed\u0beb\3\2\2\2\u0bee\u0bf1\3\2\2\2\u0bef"+
		"\u0bed\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf2\3\2\2\2\u0bf1\u0bef\3\2"+
		"\2\2\u0bf2\u0bf3\7P\2\2\u0bf3\u0bf8\5\u00f2z\2\u0bf4\u0bf5\7\u02b2\2\2"+
		"\u0bf5\u0bf7\5\u00f2z\2\u0bf6\u0bf4\3\2\2\2\u0bf7\u0bfa\3\2\2\2\u0bf8"+
		"\u0bf6\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9\u0bfc\3\2\2\2\u0bfa\u0bf8\3\2"+
		"\2\2\u0bfb\u0bfd\5\u00c8e\2\u0bfc\u0bfb\3\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd"+
		"\u0bff\3\2\2\2\u0bfe\u0c00\5\u00dco\2\u0bff\u0bfe\3\2\2\2\u0bff\u0c00"+
		"\3\2\2\2\u0c00\u0c02\3\2\2\2\u0c01\u0c03\5\u00dep\2\u0c02\u0c01\3\2\2"+
		"\2\u0c02\u0c03\3\2\2\2\u0c03\u0c05\3\2\2\2\u0c04\u0c06\5\u00e4s\2\u0c05"+
		"\u0c04\3\2\2\2\u0c05\u0c06\3\2\2\2\u0c06\u0c08\3\2\2\2\u0c07\u0c09\5\u00e8"+
		"u\2\u0c08\u0c07\3\2\2\2\u0c08\u0c09\3\2\2\2\u0c09\u0c0b\3\2\2\2\u0c0a"+
		"\u0c0c\5\u00eav\2\u0c0b\u0c0a\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u0c0e"+
		"\3\2\2\2\u0c0d\u0c0f\5\u00ecw\2\u0c0e\u0c0d\3\2\2\2\u0c0e\u0c0f\3\2\2"+
		"\2\u0c0f\u00f1\3\2\2\2\u0c10\u0c11\5\u0272\u013a\2\u0c11\u00f3\3\2\2\2"+
		"\u0c12\u0c14\7N\2\2\u0c13\u0c15\5\u0330\u0199\2\u0c14\u0c13\3\2\2\2\u0c14"+
		"\u0c15\3\2\2\2\u0c15\u0c17\3\2\2\2\u0c16\u0c18\7G\2\2\u0c17\u0c16\3\2"+
		"\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c1a\3\2\2\2\u0c19\u0c1b\7P\2\2\u0c1a"+
		"\u0c19\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c28\5\u00ca"+
		"f\2\u0c1d\u0c1e\7\u02ae\2\2\u0c1e\u0c23\5\u0272\u013a\2\u0c1f\u0c20\7"+
		"\u02b2\2\2\u0c20\u0c22\5\u0272\u013a\2\u0c21\u0c1f\3\2\2\2\u0c22\u0c25"+
		"\3\2\2\2\u0c23\u0c21\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c26\3\2\2\2\u0c25"+
		"\u0c23\3\2\2\2\u0c26\u0c27\7\u02af\2\2\u0c27\u0c29\3\2\2\2\u0c28\u0c1d"+
		"\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2a\3\2\2\2\u0c2a\u0c2c\5\u00f6|"+
		"\2\u0c2b\u0c2d\5\u00fc\177\2\u0c2c\u0c2b\3\2\2\2\u0c2c\u0c2d\3\2\2\2\u0c2d"+
		"\u00f5\3\2\2\2\u0c2e\u0c32\5\u00f8}\2\u0c2f\u0c32\5\u0100\u0081\2\u0c30"+
		"\u0c32\5\u00b4[\2\u0c31\u0c2e\3\2\2\2\u0c31\u0c2f\3\2\2\2\u0c31\u0c30"+
		"\3\2\2\2\u0c32\u00f7\3\2\2\2\u0c33\u0c34\t\30\2\2\u0c34\u0c39\5\u00fa"+
		"~\2\u0c35\u0c36\7\u02b2\2\2\u0c36\u0c38\5\u00fa~\2\u0c37\u0c35\3\2\2\2"+
		"\u0c38\u0c3b\3\2\2\2\u0c39\u0c37\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u00f9"+
		"\3\2\2\2\u0c3b\u0c39\3\2\2\2\u0c3c\u0c3d\7\u02ae\2\2\u0c3d\u0c42\5\u0272"+
		"\u013a\2\u0c3e\u0c3f\7\u02b2\2\2\u0c3f\u0c41\5\u0272\u013a\2\u0c40\u0c3e"+
		"\3\2\2\2\u0c41\u0c44\3\2\2\2\u0c42\u0c40\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43"+
		"\u0c45\3\2\2\2\u0c44\u0c42\3\2\2\2\u0c45\u0c46\7\u02af\2\2\u0c46\u00fb"+
		"\3\2\2\2\u0c47\u0c48\7s\2\2\u0c48\u0c49\7\u0137\2\2\u0c49\u0c4a\7T\2\2"+
		"\u0c4a\u0c4b\7\u00b3\2\2\u0c4b\u0c50\5\u02ae\u0158\2\u0c4c\u0c4d\7\u02b2"+
		"\2\2\u0c4d\u0c4f\5\u02ae\u0158\2\u0c4e\u0c4c\3\2\2\2\u0c4f\u0c52\3\2\2"+
		"\2\u0c50\u0c4e\3\2\2\2\u0c50\u0c51\3\2\2\2\u0c51\u00fd\3\2\2\2\u0c52\u0c50"+
		"\3\2\2\2\u0c53\u0c55\7\u00b3\2\2\u0c54\u0c56\7b\2\2\u0c55\u0c54\3\2\2"+
		"\2\u0c55\u0c56\3\2\2\2\u0c56\u0c58\3\2\2\2\u0c57\u0c59\7G\2\2\u0c58\u0c57"+
		"\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5c\5\u00caf"+
		"\2\u0c5b\u0c5d\5\u0100\u0081\2\u0c5c\u0c5b\3\2\2\2\u0c5c\u0c5d\3\2\2\2"+
		"\u0c5d\u0c5f\3\2\2\2\u0c5e\u0c60\5\u00dco\2\u0c5f\u0c5e\3\2\2\2\u0c5f"+
		"\u0c60\3\2\2\2\u0c60\u0c62\3\2\2\2\u0c61\u0c63\5\u00e4s\2\u0c62\u0c61"+
		"\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c65\3\2\2\2\u0c64\u0c66\5\u00e8u"+
		"\2\u0c65\u0c64\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u00ff\3\2\2\2\u0c67\u0c68"+
		"\7\u0096\2\2\u0c68\u0c6d\5\u0102\u0082\2\u0c69\u0c6a\7\u02b2\2\2\u0c6a"+
		"\u0c6c\5\u0102\u0082\2\u0c6b\u0c69\3\2\2\2\u0c6c\u0c6f\3\2\2\2\u0c6d\u0c6b"+
		"\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0101\3\2\2\2\u0c6f\u0c6d\3\2\2\2\u0c70"+
		"\u0c71\5\u0272\u013a\2\u0c71\u0c72\7\u02a1\2\2\u0c72\u0c73\5\u0272\u013a"+
		"\2\u0c73\u0103\3\2\2\2\u0c74\u0c76\7*\2\2\u0c75\u0c77\7b\2\2\u0c76\u0c75"+
		"\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c79\3\2\2\2\u0c78\u0c7a\7\u01c8\2"+
		"\2\u0c79\u0c78\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c7c\3\2\2\2\u0c7b\u0c7d"+
		"\7G\2\2\u0c7c\u0c7b\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d\u0c7e\3\2\2\2\u0c7e"+
		"\u0c7f\7@\2\2\u0c7f\u0c81\5\u00caf\2\u0c80\u0c82\5\u0106\u0084\2\u0c81"+
		"\u0c80\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c84\3\2\2\2\u0c83\u0c85\5\u00dc"+
		"o\2\u0c84\u0c83\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u0c87\3\2\2\2\u0c86"+
		"\u0c88\5\u00e4s\2\u0c87\u0c86\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0c8a"+
		"\3\2\2\2\u0c89\u0c8b\5\u00e8u\2\u0c8a\u0c89\3\2\2\2\u0c8a\u0c8b\3\2\2"+
		"\2\u0c8b\u0105\3\2\2\2\u0c8c\u0c8d\7\u00b6\2\2\u0c8d\u0c8e\5\u00caf\2"+
		"\u0c8e\u0107\3\2\2\2\u0c8f\u0c91\7\u008b\2\2\u0c90\u0c92\5\u0330\u0199"+
		"\2\u0c91\u0c90\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u0c94\3\2\2\2\u0c93\u0c95"+
		"\7P\2\2\u0c94\u0c93\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96"+
		"\u0ca2\5\u00caf\2\u0c97\u0c98\7\u02ae\2\2\u0c98\u0c9d\5\u0272\u013a\2"+
		"\u0c99\u0c9a\7\u02b2\2\2\u0c9a\u0c9c\5\u0272\u013a\2\u0c9b\u0c99\3\2\2"+
		"\2\u0c9c\u0c9f\3\2\2\2\u0c9d\u0c9b\3\2\2\2\u0c9d\u0c9e\3\2\2\2\u0c9e\u0ca0"+
		"\3\2\2\2\u0c9f\u0c9d\3\2\2\2\u0ca0\u0ca1\7\u02af\2\2\u0ca1\u0ca3\3\2\2"+
		"\2\u0ca2\u0c97\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0ca5"+
		"\5\u010a\u0086\2\u0ca5\u0109\3\2\2\2\u0ca6\u0caa\5\u00f8}\2\u0ca7\u0caa"+
		"\5\u0100\u0081\2\u0ca8\u0caa\5\u00b4[\2\u0ca9\u0ca6\3\2\2\2\u0ca9\u0ca7"+
		"\3\2\2\2\u0ca9\u0ca8\3\2\2\2\u0caa\u010b\3\2\2\2\u0cab\u0cac\7\23\2\2"+
		"\u0cac\u0cad\5\u0272\u013a\2\u0cad\u010d\3\2\2\2\u0cae\u0caf\7^\2\2\u0caf"+
		"\u0cb1\7\u012a\2\2\u0cb0\u0cb2\5\u0330\u0199\2\u0cb1\u0cb0\3\2\2\2\u0cb1"+
		"\u0cb2\3\2\2\2\u0cb2\u0cb4\3\2\2\2\u0cb3\u0cb5\7\u0179\2\2\u0cb4\u0cb3"+
		"\3\2\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cb6\3\2\2\2\u0cb6\u0cb7\7J\2\2\u0cb7"+
		"\u0cb9\5\u0272\u013a\2\u0cb8\u0cba\t\31\2\2\u0cb9\u0cb8\3\2\2\2\u0cb9"+
		"\u0cba\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb\u0cbc\7P\2\2\u0cbc\u0cbd\7\u00a5"+
		"\2\2\u0cbd\u0cca\5\u0248\u0125\2\u0cbe\u0cbf\7|\2\2\u0cbf\u0cc0\7\u02ae"+
		"\2\2\u0cc0\u0cc5\5\u0272\u013a\2\u0cc1\u0cc2\7\u02b2\2\2\u0cc2\u0cc4\5"+
		"\u0272\u013a\2\u0cc3\u0cc1\3\2\2\2\u0cc4\u0cc7\3\2\2\2\u0cc5\u0cc3\3\2"+
		"\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc8\3\2\2\2\u0cc7\u0cc5\3\2\2\2\u0cc8"+
		"\u0cc9\7\u02af\2\2\u0cc9\u0ccb\3\2\2\2\u0cca\u0cbe\3\2\2\2\u0cca\u0ccb"+
		"\3\2\2\2\u0ccb\u0ccf\3\2\2\2\u0ccc\u0ccd\7\30\2\2\u0ccd\u0cce\7\u0096"+
		"\2\2\u0cce\u0cd0\5\u0272\u013a\2\u0ccf\u0ccc\3\2\2\2\u0ccf\u0cd0\3\2\2"+
		"\2\u0cd0\u0cd7\3\2\2\2\u0cd1\u0cd3\t\26\2\2\u0cd2\u0cd4\5\u011c\u008f"+
		"\2\u0cd3\u0cd2\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cd3\3\2\2\2\u0cd5\u0cd6"+
		"\3\2\2\2\u0cd6\u0cd8\3\2\2\2\u0cd7\u0cd1\3\2\2\2\u0cd7\u0cd8\3\2\2\2\u0cd8"+
		"\u0cdf\3\2\2\2\u0cd9\u0cdb\7]\2\2\u0cda\u0cdc\5\u011e\u0090\2\u0cdb\u0cda"+
		"\3\2\2\2\u0cdc\u0cdd\3\2\2\2\u0cdd\u0cdb\3\2\2\2\u0cdd\u0cde\3\2\2\2\u0cde"+
		"\u0ce0\3\2\2\2\u0cdf\u0cd9\3\2\2\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce5\3\2"+
		"\2\2\u0ce1\u0ce2\7G\2\2\u0ce2\u0ce3\5\u0272\u013a\2\u0ce3\u0ce4\t\32\2"+
		"\2\u0ce4\u0ce6\3\2\2\2\u0ce5\u0ce1\3\2\2\2\u0ce5\u0ce6\3\2\2\2\u0ce6\u0cf2"+
		"\3\2\2\2\u0ce7\u0ce8\7\u02ae\2\2\u0ce8\u0ced\5\u0272\u013a\2\u0ce9\u0cea"+
		"\7\u02b2\2\2\u0cea\u0cec\5\u0272\u013a\2\u0ceb\u0ce9\3\2\2\2\u0cec\u0cef"+
		"\3\2\2\2\u0ced\u0ceb\3\2\2\2\u0ced\u0cee\3\2\2\2\u0cee\u0cf0\3\2\2\2\u0cef"+
		"\u0ced\3\2\2\2\u0cf0\u0cf1\7\u02af\2\2\u0cf1\u0cf3\3\2\2\2\u0cf2\u0ce7"+
		"\3\2\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3\u0cf5\3\2\2\2\u0cf4\u0cf6\5\u0100\u0081"+
		"\2\u0cf5\u0cf4\3\2\2\2\u0cf5\u0cf6\3\2\2\2\u0cf6\u010f\3\2\2\2\u0cf7\u0cf8"+
		"\7^\2\2\u0cf8\u0cfa\7\u0229\2\2\u0cf9\u0cfb\5\u0330\u0199\2\u0cfa\u0cf9"+
		"\3\2\2\2\u0cfa\u0cfb\3\2\2\2\u0cfb\u0cfd\3\2\2\2\u0cfc\u0cfe\7\u0179\2"+
		"\2\u0cfd\u0cfc\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d00"+
		"\7J\2\2\u0d00\u0d02\5\u0272\u013a\2\u0d01\u0d03\t\31\2\2\u0d02\u0d01\3"+
		"\2\2\2\u0d02\u0d03\3\2\2\2\u0d03\u0d04\3\2\2\2\u0d04\u0d05\7P\2\2\u0d05"+
		"\u0d06\7\u00a5\2\2\u0d06\u0d0a\5\u0248\u0125\2\u0d07\u0d08\7\30\2\2\u0d08"+
		"\u0d09\7\u0096\2\2\u0d09\u0d0b\5\u0272\u013a\2\u0d0a\u0d07\3\2\2\2\u0d0a"+
		"\u0d0b\3\2\2\2\u0d0b\u0d13\3\2\2\2\u0d0c\u0d0d\7\u01e3\2\2\u0d0d\u0d0e"+
		"\7\u0162\2\2\u0d0e\u0d0f\7\22\2\2\u0d0f\u0d10\7\u02a2\2\2\u0d10\u0d11"+
		"\5\u0272\u013a\2\u0d11\u0d12\7\u02a3\2\2\u0d12\u0d14\3\2\2\2\u0d13\u0d0c"+
		"\3\2\2\2\u0d13\u0d14\3\2\2\2\u0d14\u0d19\3\2\2\2\u0d15\u0d16\7G\2\2\u0d16"+
		"\u0d17\5\u0272\u013a\2\u0d17\u0d18\t\32\2\2\u0d18\u0d1a\3\2\2\2\u0d19"+
		"\u0d15\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0d26\3\2\2\2\u0d1b\u0d1c\7\u02ae"+
		"\2\2\u0d1c\u0d21\5\u0272\u013a\2\u0d1d\u0d1e\7\u02b2\2\2\u0d1e\u0d20\5"+
		"\u0272\u013a\2\u0d1f\u0d1d\3\2\2\2\u0d20\u0d23\3\2\2\2\u0d21\u0d1f\3\2"+
		"\2\2\u0d21\u0d22\3\2\2\2\u0d22\u0d24\3\2\2\2\u0d23\u0d21\3\2\2\2\u0d24"+
		"\u0d25\7\u02af\2\2\u0d25\u0d27\3\2\2\2\u0d26\u0d1b\3\2\2\2\u0d26\u0d27"+
		"\3\2\2\2\u0d27\u0d29\3\2\2\2\u0d28\u0d2a\5\u0100\u0081\2\u0d29\u0d28\3"+
		"\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u0111\3\2\2\2\u0d2b\u0d2c\7\u0135\2\2"+
		"\u0d2c\u0d31\5\u0272\u013a\2\u0d2d\u0d2e\7\u02b2\2\2\u0d2e\u0d30\5\u0272"+
		"\u013a\2\u0d2f\u0d2d\3\2\2\2\u0d30\u0d33\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d31"+
		"\u0d32\3\2\2\2\u0d32\u0113\3\2\2\2\u0d33\u0d31\3\2\2\2\u0d34\u0d38\5\u0116"+
		"\u008c\2\u0d35\u0d38\5\u0118\u008d\2\u0d36\u0d38\5\u011a\u008e\2\u0d37"+
		"\u0d34\3\2\2\2\u0d37\u0d35\3\2\2\2\u0d37\u0d36\3\2\2\2\u0d38\u0115\3\2"+
		"\2\2\u0d39\u0d3a\7\u015d\2\2\u0d3a\u0d3b\5\u0248\u0125\2\u0d3b\u0d40\7"+
		"\u01ae\2\2\u0d3c\u0d3e\7\f\2\2\u0d3d\u0d3c\3\2\2\2\u0d3d\u0d3e\3\2\2\2"+
		"\u0d3e\u0d3f\3\2\2\2\u0d3f\u0d41\5\u0248\u0125\2\u0d40\u0d3d\3\2\2\2\u0d40"+
		"\u0d41\3\2\2\2\u0d41\u0117\3\2\2\2\u0d42\u0d43\7\u015d\2\2\u0d43\u0d44"+
		"\5\u0248\u0125\2\u0d44\u0d46\7\u0084\2\2\u0d45\u0d47\5\u0248\u0125\2\u0d46"+
		"\u0d45\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d54\3\2\2\2\u0d48\u0d49\5\u0274"+
		"\u013b\2\u0d49\u0d4a\7\u02ae\2\2\u0d4a\u0d4f\5\u0272\u013a\2\u0d4b\u0d4c"+
		"\7\u02b2\2\2\u0d4c\u0d4e\5\u0272\u013a\2\u0d4d\u0d4b\3\2\2\2\u0d4e\u0d51"+
		"\3\2\2\2\u0d4f\u0d4d\3\2\2\2\u0d4f\u0d50\3\2\2\2\u0d50\u0d52\3\2\2\2\u0d51"+
		"\u0d4f\3\2\2\2\u0d52\u0d53\7\u02af\2\2\u0d53\u0d55\3\2\2\2\u0d54\u0d48"+
		"\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d57\3\2\2\2\u0d56\u0d58\t\33\2\2"+
		"\u0d57\u0d56\3\2\2\2\u0d57\u0d58\3\2\2\2\u0d58\u0d5a\3\2\2\2\u0d59\u0d5b"+
		"\5\u00dco\2\u0d5a\u0d59\3\2\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5d\3\2\2"+
		"\2\u0d5c\u0d5e\5\u00e8u\2\u0d5d\u0d5c\3\2\2\2\u0d5d\u0d5e\3\2\2\2\u0d5e"+
		"\u0119\3\2\2\2\u0d5f\u0d60\7\u015d\2\2\u0d60\u0d61\5\u0248\u0125\2\u0d61"+
		"\u0d62\7\u0117\2\2\u0d62\u011b\3\2\2\2\u0d63\u0d64\7\u00a8\2\2\u0d64\u0d65"+
		"\7\22\2\2\u0d65\u0d70\5\u0272\u013a\2\u0d66\u0d68\7v\2\2\u0d67\u0d66\3"+
		"\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u0d69\3\2\2\2\u0d69\u0d6a\7\66\2\2\u0d6a"+
		"\u0d6b\7\22\2\2\u0d6b\u0d70\5\u0272\u013a\2\u0d6c\u0d6d\7\67\2\2\u0d6d"+
		"\u0d6e\7\22\2\2\u0d6e\u0d70\5\u0272\u013a\2\u0d6f\u0d63\3\2\2\2\u0d6f"+
		"\u0d67\3\2\2\2\u0d6f\u0d6c\3\2\2\2\u0d70\u011d\3\2\2\2\u0d71\u0d72\7\u00a3"+
		"\2\2\u0d72\u0d73\7\22\2\2\u0d73\u0d78\5\u0272\u013a\2\u0d74\u0d75\7\u00a8"+
		"\2\2\u0d75\u0d76\7\22\2\2\u0d76\u0d78\5\u0272\u013a\2\u0d77\u0d71\3\2"+
		"\2\2\u0d77\u0d74\3\2\2\2\u0d78\u011f\3\2\2\2\u0d79\u0d7a\7\u01fd\2\2\u0d7a"+
		"\u0d83\7\u0211\2\2\u0d7b\u0d80\5\u0122\u0092\2\u0d7c\u0d7d\7\u02b2\2\2"+
		"\u0d7d\u0d7f\5\u0122\u0092\2\u0d7e\u0d7c\3\2\2\2\u0d7f\u0d82\3\2\2\2\u0d80"+
		"\u0d7e\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d84\3\2\2\2\u0d82\u0d80\3\2"+
		"\2\2\u0d83\u0d7b\3\2\2\2\u0d83\u0d84\3\2\2\2\u0d84\u0121\3\2\2\2\u0d85"+
		"\u0d86\7\u00bc\2\2\u0d86\u0d87\7\u0124\2\2\u0d87\u0d8d\7\u01f0\2\2\u0d88"+
		"\u0d89\7\u0084\2\2\u0d89\u0d8d\7\u00bd\2\2\u0d8a\u0d8b\7\u0084\2\2\u0d8b"+
		"\u0d8d\7\u01ad\2\2\u0d8c\u0d85\3\2\2\2\u0d8c\u0d88\3\2\2\2\u0d8c\u0d8a"+
		"\3\2\2\2\u0d8d\u0123\3\2\2\2\u0d8e\u0d90\7\u0108\2\2\u0d8f\u0d91\7\u0225"+
		"\2\2\u0d90\u0d8f\3\2\2\2\u0d90\u0d91\3\2\2\2\u0d91\u0125\3\2\2\2\u0d92"+
		"\u0d94\7\u011d\2\2\u0d93\u0d95\7\u0225\2\2\u0d94\u0d93\3\2\2\2\u0d94\u0d95"+
		"\3\2\2\2\u0d95\u0d9b\3\2\2\2\u0d96\u0d98\7\13\2\2\u0d97\u0d99\7\u01a4"+
		"\2\2\u0d98\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9a\3\2\2\2\u0d9a"+
		"\u0d9c\7\u0111\2\2\u0d9b\u0d96\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0da1"+
		"\3\2\2\2\u0d9d\u0d9f\7\u01a4\2\2\u0d9e\u0d9d\3\2\2\2\u0d9e\u0d9f\3\2\2"+
		"\2\u0d9f\u0da0\3\2\2\2\u0da0\u0da2\7\u0088\2\2\u0da1\u0d9e\3\2\2\2\u0da1"+
		"\u0da2\3\2\2\2\u0da2\u0127\3\2\2\2\u0da3\u0da5\7\u01df\2\2\u0da4\u0da6"+
		"\7\u0225\2\2\u0da5\u0da4\3\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u0dac\3\2\2"+
		"\2\u0da7\u0da9\7\13\2\2\u0da8\u0daa\7\u01a4\2\2\u0da9\u0da8\3\2\2\2\u0da9"+
		"\u0daa\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0dad\7\u0111\2\2\u0dac\u0da7"+
		"\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad\u0db2\3\2\2\2\u0dae\u0db0\7\u01a4\2"+
		"\2\u0daf\u0dae\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db1\3\2\2\2\u0db1\u0db3"+
		"\7\u0088\2\2\u0db2\u0daf\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0129\3\2\2"+
		"\2\u0db4\u0db5\7\u01e5\2\2\u0db5\u0db6\5\u0248\u0125\2\u0db6\u012b\3\2"+
		"\2\2\u0db7\u0db9\7\u01df\2\2\u0db8\u0dba\7\u0225\2\2\u0db9\u0db8\3\2\2"+
		"\2\u0db9\u0dba\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0dbd\7\u00aa\2\2\u0dbc"+
		"\u0dbe\7\u01e5\2\2\u0dbd\u0dbc\3\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe\u0dbf"+
		"\3\2\2\2\u0dbf\u0dc0\5\u0248\u0125\2\u0dc0\u012d\3\2\2\2\u0dc1\u0dc2\7"+
		"\u0088\2\2\u0dc2\u0dc3\7\u01e5\2\2\u0dc3\u0dc4\5\u0248\u0125\2\u0dc4\u012f"+
		"\3\2\2\2\u0dc5\u0dc6\7_\2\2\u0dc6\u0dc7\7\u0242\2\2\u0dc7\u0dcc\5\u0132"+
		"\u009a\2\u0dc8\u0dc9\7\u02b2\2\2\u0dc9\u0dcb\5\u0132\u009a\2\u0dca\u0dc8"+
		"\3\2\2\2\u0dcb\u0dce\3\2\2\2\u0dcc\u0dca\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd"+
		"\u0131\3\2\2\2\u0dce\u0dcc\3\2\2\2\u0dcf\u0dd4\5\u0248\u0125\2\u0dd0\u0dd2"+
		"\7\f\2\2\u0dd1\u0dd0\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3"+
		"\u0dd5\5\u0248\u0125\2\u0dd4\u0dd1\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0dd6"+
		"\3\2\2\2\u0dd6\u0dd7\5\u0134\u009b\2\u0dd7\u0133\3\2\2\2\u0dd8\u0dda\7"+
		"\u0084\2\2\u0dd9\u0ddb\7\u0179\2\2\u0dda\u0dd9\3\2\2\2\u0dda\u0ddb\3\2"+
		"\2\2\u0ddb\u0de1\3\2\2\2\u0ddc\u0dde\7b\2\2\u0ddd\u0ddc\3\2\2\2\u0ddd"+
		"\u0dde\3\2\2\2\u0dde\u0ddf\3\2\2\2\u0ddf\u0de1\7\u00bd\2\2\u0de0\u0dd8"+
		"\3\2\2\2\u0de0\u0ddd\3\2\2\2\u0de1\u0135\3\2\2\2\u0de2\u0de3\7\u00b1\2"+
		"\2\u0de3\u0de4\7\u0242\2\2\u0de4\u0137\3\2\2\2\u0de5\u0de6\7\u0096\2\2"+
		"\u0de6\u0de7\7\u0104\2\2\u0de7\u0de8\7\u02a1\2\2\u0de8\u0de9\5\u0272\u013a"+
		"\2\u0de9\u0139\3\2\2\2\u0dea\u0deb\7\u016f\2\2\u0deb\u0dec\7\u0177\2\2"+
		"\u0dec\u0df2\5\u013c\u009f\2\u0ded\u0dee\7\u0084\2\2\u0dee\u0df2\7\u00bd"+
		"\2\2\u0def\u0df0\7\u0084\2\2\u0df0\u0df2\7\u01ad\2\2\u0df1\u0dea\3\2\2"+
		"\2\u0df1\u0ded\3\2\2\2\u0df1\u0def\3\2\2\2\u0df2\u013b\3\2\2\2\u0df3\u0df4"+
		"\7\u027e\2\2\u0df4\u0dfb\7\u0084\2\2\u0df5\u0df6\7\u0084\2\2\u0df6\u0dfb"+
		"\7\u027f\2\2\u0df7\u0df8\7\u0084\2\2\u0df8\u0dfb\7\u0280\2\2\u0df9\u0dfb"+
		"\7\u0281\2\2\u0dfa\u0df3\3\2\2\2\u0dfa\u0df5\3\2\2\2\u0dfa\u0df7\3\2\2"+
		"\2\u0dfa\u0df9\3\2\2\2\u0dfb\u013d\3\2\2\2\u0dfc\u0dfd\7\27\2\2\u0dfd"+
		"\u0dfe\7\u017c\2\2\u0dfe\u0dff\7\u00aa\2\2\u0dff\u0e04\5\u0150\u00a9\2"+
		"\u0e00\u0e01\7\u02b2\2\2\u0e01\u0e03\5\u0150\u00a9\2\u0e02\u0e00\3\2\2"+
		"\2\u0e03\u0e06\3\2\2\2\u0e04\u0e02\3\2\2\2\u0e04\u0e05\3\2\2\2\u0e05\u0e08"+
		"\3\2\2\2\u0e06\u0e04\3\2\2\2\u0e07\u0e09\5\u0158\u00ad\2\u0e08\u0e07\3"+
		"\2\2\2\u0e08\u0e09\3\2\2\2\u0e09\u013f\3\2\2\2\u0e0a\u0e0b\7\27\2\2\u0e0b"+
		"\u0e0c\7\u01db\2\2\u0e0c\u0e0d\7\u0151\2\2\u0e0d\u0e12\5\u015a\u00ae\2"+
		"\u0e0e\u0e0f\7\u02b2\2\2\u0e0f\u0e11\5\u015a\u00ae\2\u0e10\u0e0e\3\2\2"+
		"\2\u0e11\u0e14\3\2\2\2\u0e12\u0e10\3\2\2\2\u0e12\u0e13\3\2\2\2\u0e13\u0141"+
		"\3\2\2\2\u0e14\u0e12\3\2\2\2\u0e15\u0e16\7\u0081\2\2\u0e16\u0e17\t\34"+
		"\2\2\u0e17\u0e1c\7\u017b\2\2\u0e18\u0e19\7\u00aa\2\2\u0e19\u0e1d\5\u0272"+
		"\u013a\2\u0e1a\u0e1b\7\16\2\2\u0e1b\u0e1d\5\u0272\u013a\2\u0e1c\u0e18"+
		"\3\2\2\2\u0e1c\u0e1a\3\2\2\2\u0e1d\u0143\3\2\2\2\u0e1e\u0e1f\7\u01dc\2"+
		"\2\u0e1f\u0e20\7\u017c\2\2\u0e20\u0145\3\2\2\2\u0e21\u0e22\7\u01dc\2\2"+
		"\u0e22\u0e24\7\u01ee\2\2\u0e23\u0e25\7\b\2\2\u0e24\u0e23\3\2\2\2\u0e24"+
		"\u0e25\3\2\2\2\u0e25\u0e27\3\2\2\2\u0e26\u0e28\5\u0158\u00ad\2\u0e27\u0e26"+
		"\3\2\2\2\u0e27\u0e28\3\2\2\2\u0e28\u0147\3\2\2\2\u0e29\u0e2a\7\u01fd\2"+
		"\2\u0e2a\u0e33\7\u01ee\2\2\u0e2b\u0e30\5\u015e\u00b0\2\u0e2c\u0e2d\7\u02b2"+
		"\2\2\u0e2d\u0e2f\5\u015e\u00b0\2\u0e2e\u0e2c\3\2\2\2\u0e2f\u0e32\3\2\2"+
		"\2\u0e30\u0e2e\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e34\3\2\2\2\u0e32\u0e30"+
		"\3\2\2\2\u0e33\u0e2b\3\2\2\2\u0e33\u0e34\3\2\2\2\u0e34\u0e37\3\2\2\2\u0e35"+
		"\u0e36\7\u0219\2\2\u0e36\u0e38\5\u0160\u00b1\2\u0e37\u0e35\3\2\2\2\u0e37"+
		"\u0e38\3\2\2\2\u0e38\u0e3c\3\2\2\2\u0e39\u0e3b\5\u0162\u00b2\2\u0e3a\u0e39"+
		"\3\2\2\2\u0e3b\u0e3e\3\2\2\2\u0e3c\u0e3a\3\2\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d"+
		"\u0e40\3\2\2\2\u0e3e\u0e3c\3\2\2\2\u0e3f\u0e41\5\u0158\u00ad\2\u0e40\u0e3f"+
		"\3\2\2\2\u0e40\u0e41\3\2\2\2\u0e41\u0149\3\2\2\2\u0e42\u0e43\7\u0203\2"+
		"\2\u0e43\u0e4c\7\u01ee\2\2\u0e44\u0e49\5\u015e\u00b0\2\u0e45\u0e46\7\u02b2"+
		"\2\2\u0e46\u0e48\5\u015e\u00b0\2\u0e47\u0e45\3\2\2\2\u0e48\u0e4b\3\2\2"+
		"\2\u0e49\u0e47\3\2\2\2\u0e49\u0e4a\3\2\2\2\u0e4a\u0e4d\3\2\2\2\u0e4b\u0e49"+
		"\3\2\2\2\u0e4c\u0e44\3\2\2\2\u0e4c\u0e4d\3\2\2\2\u0e4d\u014b\3\2\2\2\u0e4e"+
		"\u0e4f\7\u01fd\2\2\u0e4f\u0e50\7\u015c\2\2\u0e50\u014d\3\2\2\2\u0e51\u0e52"+
		"\7\u0203\2\2\u0e52\u0e53\7\u015c\2\2\u0e53\u014f\3\2\2\2\u0e54\u0e55\5"+
		"\u0152\u00aa\2\u0e55\u0e56\7\u02a1\2\2\u0e56\u0e57\5\u0272\u013a\2\u0e57"+
		"\u0e72\3\2\2\2\u0e58\u0e59\5\u0154\u00ab\2\u0e59\u0e5a\7\u02a1\2\2\u0e5a"+
		"\u0e5b\5\u0272\u013a\2\u0e5b\u0e72\3\2\2\2\u0e5c\u0e5d\5\u0156\u00ac\2"+
		"\u0e5d\u0e5e\7\u02a1\2\2\u0e5e\u0e5f\5\u0272\u013a\2\u0e5f\u0e72\3\2\2"+
		"\2\u0e60\u0e61\7\u0180\2\2\u0e61\u0e62\7\u02a1\2\2\u0e62\u0e72\5\u0272"+
		"\u013a\2\u0e63\u0e64\7\u0163\2\2\u0e64\u0e65\7\u02a1\2\2\u0e65\u0e6e\7"+
		"\u02ae\2\2\u0e66\u0e6b\5\u0248\u0125\2\u0e67\u0e68\7\u02b2\2\2\u0e68\u0e6a"+
		"\5\u0248\u0125\2\u0e69\u0e67\3\2\2\2\u0e6a\u0e6d\3\2\2\2\u0e6b\u0e69\3"+
		"\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0e6f\3\2\2\2\u0e6d\u0e6b\3\2\2\2\u0e6e"+
		"\u0e66\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f\u0e70\3\2\2\2\u0e70\u0e72\7\u02af"+
		"\2\2\u0e71\u0e54\3\2\2\2\u0e71\u0e58\3\2\2\2\u0e71\u0e5c\3\2\2\2\u0e71"+
		"\u0e60\3\2\2\2\u0e71\u0e63\3\2\2\2\u0e72\u0151\3\2\2\2\u0e73\u0e74\t\35"+
		"\2\2\u0e74\u0153\3\2\2\2\u0e75\u0e76\t\36\2\2\u0e76\u0155\3\2\2\2\u0e77"+
		"\u0e78\t\37\2\2\u0e78\u0157\3\2\2\2\u0e79\u0e7a\7=\2\2\u0e7a\u0e7b\7\u0113"+
		"\2\2\u0e7b\u0e7c\5\u0272\u013a\2\u0e7c\u0159\3\2\2\2\u0e7d\u0e7e\7\u01d4"+
		"\2\2\u0e7e\u0e7f\7\u02a1\2\2\u0e7f\u0e80\7\u02ae\2\2\u0e80\u0e85\5\u0272"+
		"\u013a\2\u0e81\u0e82\7\u02b2\2\2\u0e82\u0e84\5\u0272\u013a\2\u0e83\u0e81"+
		"\3\2\2\2\u0e84\u0e87\3\2\2\2\u0e85\u0e83\3\2\2\2\u0e85\u0e86\3\2\2\2\u0e86"+
		"\u0e88\3\2\2\2\u0e87\u0e85\3\2\2\2\u0e88\u0e89\7\u02af\2\2\u0e89\u0ecb"+
		"\3\2\2\2\u0e8a\u0e8b\7\u01d6\2\2\u0e8b\u0e8c\7\u02a1\2\2\u0e8c\u0e8d\7"+
		"\u02ae\2\2\u0e8d\u0e92\5\u0272\u013a\2\u0e8e\u0e8f\7\u02b2\2\2\u0e8f\u0e91"+
		"\5\u0272\u013a\2\u0e90\u0e8e\3\2\2\2\u0e91\u0e94\3\2\2\2\u0e92\u0e90\3"+
		"\2\2\2\u0e92\u0e93\3\2\2\2\u0e93\u0e95\3\2\2\2\u0e94\u0e92\3\2\2\2\u0e95"+
		"\u0e96\7\u02af\2\2\u0e96\u0ecb\3\2\2\2\u0e97\u0e98\7\u01d5\2\2\u0e98\u0e99"+
		"\7\u02a1\2\2\u0e99\u0e9a\7\u02ae\2\2\u0e9a\u0e9f\5\u0272\u013a\2\u0e9b"+
		"\u0e9c\7\u02b2\2\2\u0e9c\u0e9e\5\u0272\u013a\2\u0e9d\u0e9b\3\2\2\2\u0e9e"+
		"\u0ea1\3\2\2\2\u0e9f\u0e9d\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0\u0ea2\3\2"+
		"\2\2\u0ea1\u0e9f\3\2\2\2\u0ea2\u0ea3\7\u02af\2\2\u0ea3\u0ecb\3\2\2\2\u0ea4"+
		"\u0ea5\7\u01d7\2\2\u0ea5\u0ea6\7\u02a1\2\2\u0ea6\u0ea7\7\u02ae\2\2\u0ea7"+
		"\u0eac\5\u0272\u013a\2\u0ea8\u0ea9\7\u02b2\2\2\u0ea9\u0eab\5\u0272\u013a"+
		"\2\u0eaa\u0ea8\3\2\2\2\u0eab\u0eae\3\2\2\2\u0eac\u0eaa\3\2\2\2\u0eac\u0ead"+
		"\3\2\2\2\u0ead\u0eaf\3\2\2\2\u0eae\u0eac\3\2\2\2\u0eaf\u0eb0\7\u02af\2"+
		"\2\u0eb0\u0ecb\3\2\2\2\u0eb1\u0eb2\7\u01d9\2\2\u0eb2\u0eb3\7\u02a1\2\2"+
		"\u0eb3\u0eb4\7\u02ae\2\2\u0eb4\u0eb5\5\u0220\u0111\2\u0eb5\u0eb6\7\u02af"+
		"\2\2\u0eb6\u0ecb\3\2\2\2\u0eb7\u0eb8\7\u01da\2\2\u0eb8\u0eb9\7\u02a1\2"+
		"\2\u0eb9\u0eba\7\u02ae\2\2\u0eba\u0ebb\5\u0220\u0111\2\u0ebb\u0ebc\7\u02af"+
		"\2\2\u0ebc\u0ecb\3\2\2\2\u0ebd\u0ebe\7\u01d8\2\2\u0ebe\u0ebf\7\u02a1\2"+
		"\2\u0ebf\u0ec0\7\u02ae\2\2\u0ec0\u0ec5\5\u015c\u00af\2\u0ec1\u0ec2\7\u02b2"+
		"\2\2\u0ec2\u0ec4\5\u015c\u00af\2\u0ec3\u0ec1\3\2\2\2\u0ec4\u0ec7\3\2\2"+
		"\2\u0ec5\u0ec3\3\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6\u0ec8\3\2\2\2\u0ec7\u0ec5"+
		"\3\2\2\2\u0ec8\u0ec9\7\u02af\2\2\u0ec9\u0ecb\3\2\2\2\u0eca\u0e7d\3\2\2"+
		"\2\u0eca\u0e8a\3\2\2\2\u0eca\u0e97\3\2\2\2\u0eca\u0ea4\3\2\2\2\u0eca\u0eb1"+
		"\3\2\2\2\u0eca\u0eb7\3\2\2\2\u0eca\u0ebd\3\2\2\2\u0ecb\u015b\3\2\2\2\u0ecc"+
		"\u0ecd\7\u02ae\2\2\u0ecd\u0ece\5\u0248\u0125\2\u0ece\u0ecf\7\u02b2\2\2"+
		"\u0ecf\u0ed0\5\u0248\u0125\2\u0ed0\u0ed1\7\u02af\2\2\u0ed1\u015d\3\2\2"+
		"\2\u0ed2\u0ed3\t \2\2\u0ed3\u015f\3\2\2\2\u0ed4\u0ed5\t!\2\2\u0ed5\u0ed6"+
		"\7\u02a1\2\2\u0ed6\u0ee9\5\u0164\u00b3\2\u0ed7\u0ed8\7\u0182\2\2\u0ed8"+
		"\u0ed9\7\u02a1\2\2\u0ed9\u0eda\5\u0272\u013a\2\u0eda\u0edb\7\u02b2\2\2"+
		"\u0edb\u0edc\7\u0183\2\2\u0edc\u0edd\7\u02a1\2\2\u0edd\u0ede\5\u0272\u013a"+
		"\2\u0ede\u0ee9\3\2\2\2\u0edf\u0ee0\7\u01ce\2\2\u0ee0\u0ee1\7\u02a1\2\2"+
		"\u0ee1\u0ee2\5\u0272\u013a\2\u0ee2\u0ee3\7\u02b2\2\2\u0ee3\u0ee4\7\u01cf"+
		"\2\2\u0ee4\u0ee5\7\u02a1\2\2\u0ee5\u0ee6\5\u0272\u013a\2\u0ee6\u0ee9\3"+
		"\2\2\2\u0ee7\u0ee9\7\u01f7\2\2\u0ee8\u0ed4\3\2\2\2\u0ee8\u0ed7\3\2\2\2"+
		"\u0ee8\u0edf\3\2\2\2\u0ee8\u0ee7\3\2\2\2\u0ee9\u0161\3\2\2\2\u0eea\u0eeb"+
		"\7\u021b\2\2\u0eeb\u0eec\7\u02a1\2\2\u0eec\u0ef7\5\u0272\u013a\2\u0eed"+
		"\u0eee\7\u01b8\2\2\u0eee\u0eef\7\u02a1\2\2\u0eef\u0ef7\5\u0272\u013a\2"+
		"\u0ef0\u0ef1\7\u012d\2\2\u0ef1\u0ef2\7\u02a1\2\2\u0ef2\u0ef7\5\u0272\u013a"+
		"\2\u0ef3\u0ef4\7\u01bb\2\2\u0ef4\u0ef5\7\u02a1\2\2\u0ef5\u0ef7\5\u0272"+
		"\u013a\2\u0ef6\u0eea\3\2\2\2\u0ef6\u0eed\3\2\2\2\u0ef6\u0ef0\3\2\2\2\u0ef6"+
		"\u0ef3\3\2\2\2\u0ef7\u0163\3\2\2\2\u0ef8\u0efd\5\u020c\u0107\2\u0ef9\u0efa"+
		"\7\u02b2\2\2\u0efa\u0efc\5\u020c\u0107\2\u0efb\u0ef9\3\2\2\2\u0efc\u0eff"+
		"\3\2\2\2\u0efd\u0efb\3\2\2\2\u0efd\u0efe\3\2\2\2\u0efe\u0f02\3\2\2\2\u0eff"+
		"\u0efd\3\2\2\2\u0f00\u0f02\5\u0272\u013a\2\u0f01\u0ef8\3\2\2\2\u0f01\u0f00"+
		"\3\2\2\2\u0f02\u0165\3\2\2\2\u0f03\u0f04\7\u0228\2\2\u0f04\u0f05\t\"\2"+
		"\2\u0f05\u0f07\5\u020e\u0108\2\u0f06\u0f08\t#\2\2\u0f07\u0f06\3\2\2\2"+
		"\u0f07\u0f08\3\2\2\2\u0f08\u0167\3\2\2\2\u0f09\u0f0a\7\u0228\2\2\u0f0a"+
		"\u0f0b\7\u013b\2\2\u0f0b\u0f11\5\u020e\u0108\2\u0f0c\u0f0f\7\u0209\2\2"+
		"\u0f0d\u0f0e\7=\2\2\u0f0e\u0f10\7\u0199\2\2\u0f0f\u0f0d\3\2\2\2\u0f0f"+
		"\u0f10\3\2\2\2\u0f10\u0f12\3\2\2\2\u0f11\u0f0c\3\2\2\2\u0f11\u0f12\3\2"+
		"\2\2\u0f12\u0169\3\2\2\2\u0f13\u0f14\7\u0228\2\2\u0f14\u0f15\7\u01c0\2"+
		"\2\u0f15\u0f16\5\u020e\u0108\2\u0f16\u016b\3\2\2\2\u0f17\u0f18\7\u0228"+
		"\2\2\u0f18\u0f19\7\u011d\2\2\u0f19\u0f1c\5\u020e\u0108\2\u0f1a\u0f1b\7"+
		"\u01ab\2\2\u0f1b\u0f1d\7\u01b9\2\2\u0f1c\u0f1a\3\2\2\2\u0f1c\u0f1d\3\2"+
		"\2\2\u0f1d\u016d\3\2\2\2\u0f1e\u0f1f\7\u0228\2\2\u0f1f\u0f20\7\u01df\2"+
		"\2\u0f20\u0f21\5\u020e\u0108\2\u0f21\u016f\3\2\2\2\u0f22\u0f23\7\u0228"+
		"\2\2\u0f23\u0f26\7\u01ca\2\2\u0f24\u0f25\7\37\2\2\u0f25\u0f27\5\u020e"+
		"\u0108\2\u0f26\u0f24\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0171\3\2\2\2\u0f28"+
		"\u0f29\7\u01c0\2\2\u0f29\u0f2a\5\u0248\u0125\2\u0f2a\u0f2b\7@\2\2\u0f2b"+
		"\u0f2c\5\u0272\u013a\2\u0f2c\u0173\3\2\2\2\u0f2d\u0f2e\7\u0244\2\2\u0f2e"+
		"\u0f31\5\u0248\u0125\2\u0f2f\u0f30\7\u00b6\2\2\u0f30\u0f32\5\u0222\u0112"+
		"\2\u0f31\u0f2f\3\2\2\2\u0f31\u0f32\3\2\2\2\u0f32\u0175\3\2\2\2\u0f33\u0f34"+
		"\t$\2\2\u0f34\u0f35\7\u01c0\2\2\u0f35\u0f36\5\u0248\u0125\2\u0f36\u0177"+
		"\3\2\2\2\u0f37\u0f38\5\4\3\2\u0f38\u0f39\t%\2\2\u0f39\u0179\3\2\2\2\u0f3a"+
		"\u0f3b\5\u0248\u0125\2\u0f3b\u0f3c\7\u02b8\2\2\u0f3c\u0f3e\3\2\2\2\u0f3d"+
		"\u0f3a\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f43\7\u0108"+
		"\2\2\u0f40\u0f42\5\u017c\u00bf\2\u0f41\u0f40\3\2\2\2\u0f42\u0f45\3\2\2"+
		"\2\u0f43\u0f41\3\2\2\2\u0f43\u0f44\3\2\2\2\u0f44\u0f46\3\2\2\2\u0f45\u0f43"+
		"\3\2\2\2\u0f46\u0f48\7\u013b\2\2\u0f47\u0f49\5\u0248\u0125\2\u0f48\u0f47"+
		"\3\2\2\2\u0f48\u0f49\3\2\2\2\u0f49\u017b\3\2\2\2\u0f4a\u0f4b\5\u017e\u00c0"+
		"\2\u0f4b\u0f4c\t%\2\2\u0f4c\u017d\3\2\2\2\u0f4d\u0f4e\5\4\3\2\u0f4e\u017f"+
		"\3\2\2\2\u0f4f\u0f51\7\25\2\2\u0f50\u0f52\5\u0272\u013a\2\u0f51\u0f50"+
		"\3\2\2\2\u0f51\u0f52\3\2\2\2\u0f52\u0f54\3\2\2\2\u0f53\u0f55\5\u0182\u00c2"+
		"\2\u0f54\u0f53\3\2\2\2\u0f55\u0f56\3\2\2\2\u0f56\u0f54\3\2\2\2\u0f56\u0f57"+
		"\3\2\2\2\u0f57\u0f59\3\2\2\2\u0f58\u0f5a\5\u0184\u00c3\2\u0f59\u0f58\3"+
		"\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0f5b\3\2\2\2\u0f5b\u0f5c\7\u013b\2\2"+
		"\u0f5c\u0f5d\7\25\2\2\u0f5d\u0181\3\2\2\2\u0f5e\u0f5f\7\u00b9\2\2\u0f5f"+
		"\u0f60\5\u0272\u013a\2\u0f60\u0f61\7\u00a9\2\2\u0f61\u0f62\5\u0178\u00bd"+
		"\2\u0f62\u0183\3\2\2\2\u0f63\u0f65\7\64\2\2\u0f64\u0f66\5\u0178\u00bd"+
		"\2\u0f65\u0f64\3\2\2\2\u0f66\u0f67\3\2\2\2\u0f67\u0f65\3\2\2\2\u0f67\u0f68"+
		"\3\2\2\2\u0f68\u0185\3\2\2\2\u0f69\u0f6a\7F\2\2\u0f6a\u0f6b\5\u0272\u013a"+
		"\2\u0f6b\u0f6d\7\u00a9\2\2\u0f6c\u0f6e\5\u0178\u00bd\2\u0f6d\u0f6c\3\2"+
		"\2\2\u0f6e\u0f6f\3\2\2\2\u0f6f\u0f6d\3\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70"+
		"\u0f74\3\2\2\2\u0f71\u0f73\5\u0188\u00c5\2\u0f72\u0f71\3\2\2\2\u0f73\u0f76"+
		"\3\2\2\2\u0f74\u0f72\3\2\2\2\u0f74\u0f75\3\2\2\2\u0f75\u0f7d\3\2\2\2\u0f76"+
		"\u0f74\3\2\2\2\u0f77\u0f79\7\64\2\2\u0f78\u0f7a\5\u0178\u00bd\2\u0f79"+
		"\u0f78\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0f79\3\2\2\2\u0f7b\u0f7c\3\2"+
		"\2\2\u0f7c\u0f7e\3\2\2\2\u0f7d\u0f77\3\2\2\2\u0f7d\u0f7e\3\2\2\2\u0f7e"+
		"\u0f7f\3\2\2\2\u0f7f\u0f80\7\u013b\2\2\u0f80\u0f81\7F\2\2\u0f81\u0187"+
		"\3\2\2\2\u0f82\u0f83\7\65\2\2\u0f83\u0f84\5\u0272\u013a\2\u0f84\u0f86"+
		"\7\u00a9\2\2\u0f85\u0f87\5\u0178\u00bd\2\u0f86\u0f85\3\2\2\2\u0f87\u0f88"+
		"\3\2\2\2\u0f88\u0f86\3\2\2\2\u0f88\u0f89\3\2\2\2\u0f89\u0189\3\2\2\2\u0f8a"+
		"\u0f8b\7R\2\2\u0f8b\u0f8c\5\u0248\u0125\2\u0f8c\u018b\3\2\2\2\u0f8d\u0f8e"+
		"\7X\2\2\u0f8e\u0f8f\5\u0248\u0125\2\u0f8f\u018d\3\2\2\2\u0f90\u0f91\5"+
		"\u0248\u0125\2\u0f91\u0f92\7\u02b8\2\2\u0f92\u0f94\3\2\2\2\u0f93\u0f90"+
		"\3\2\2\2\u0f93\u0f94\3\2\2\2\u0f94\u0f95\3\2\2\2\u0f95\u0f97\7a\2\2\u0f96"+
		"\u0f98\5\u017c\u00bf\2\u0f97\u0f96\3\2\2\2\u0f98\u0f99\3\2\2\2\u0f99\u0f97"+
		"\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a\u0f9b\3\2\2\2\u0f9b\u0f9c\7\u013b\2"+
		"\2\u0f9c\u0f9e\7a\2\2\u0f9d\u0f9f\5\u0248\u0125\2\u0f9e\u0f9d\3\2\2\2"+
		"\u0f9e\u0f9f\3\2\2\2\u0f9f\u018f\3\2\2\2\u0fa0\u0fa1\5\u0248\u0125\2\u0fa1"+
		"\u0fa2\7\u02b8\2\2\u0fa2\u0fa4\3\2\2\2\u0fa3\u0fa0\3\2\2\2\u0fa3\u0fa4"+
		"\3\2\2\2\u0fa4\u0fa5\3\2\2\2\u0fa5\u0fa7\7\u008a\2\2\u0fa6\u0fa8\5\u017c"+
		"\u00bf\2\u0fa7\u0fa6\3\2\2\2\u0fa8\u0fa9\3\2\2\2\u0fa9\u0fa7\3\2\2\2\u0fa9"+
		"\u0faa\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0fac\7\u0219\2\2\u0fac\u0fad"+
		"\5\u0272\u013a\2\u0fad\u0fae\7\u013b\2\2\u0fae\u0fb0\7\u008a\2\2\u0faf"+
		"\u0fb1\5\u0248\u0125\2\u0fb0\u0faf\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u0191"+
		"\3\2\2\2\u0fb2\u0fb3\7\u008e\2\2\u0fb3\u0fb4\5\u0272\u013a\2\u0fb4\u0193"+
		"\3\2\2\2\u0fb5\u0fb6\5\u0248\u0125\2\u0fb6\u0fb7\7\u02b8\2\2\u0fb7\u0fb9"+
		"\3\2\2\2\u0fb8\u0fb5\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9\u0fba\3\2\2\2\u0fba"+
		"\u0fbb\7\u00bb\2\2\u0fbb\u0fbc\5\u0272\u013a\2\u0fbc\u0fbe\7\u0135\2\2"+
		"\u0fbd\u0fbf\5\u017c\u00bf\2\u0fbe\u0fbd\3\2\2\2\u0fbf\u0fc0\3\2\2\2\u0fc0"+
		"\u0fbe\3\2\2\2\u0fc0\u0fc1\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fc3\7\u013b"+
		"\2\2\u0fc3\u0fc5\7\u00bb\2\2\u0fc4\u0fc6\5\u0248\u0125\2\u0fc5\u0fc4\3"+
		"\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6\u0195\3\2\2\2\u0fc7\u0fc8\7\u0117\2\2"+
		"\u0fc8\u0fdd\5\u0248\u0125\2\u0fc9\u0fce\7<\2\2\u0fca\u0fcc\7\u01a3\2"+
		"\2\u0fcb\u0fca\3\2\2\2\u0fcb\u0fcc\3\2\2\2\u0fcc\u0fcd\3\2\2\2\u0fcd\u0fcf"+
		"\7@\2\2\u0fce\u0fcb\3\2\2\2\u0fce\u0fcf\3\2\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0"+
		"\u0fd1\5\u0248\u0125\2\u0fd1\u0fd2\7P\2\2\u0fd2\u0fd7\5\u0272\u013a\2"+
		"\u0fd3\u0fd4\7\u02b2\2\2\u0fd4\u0fd6\5\u0272\u013a\2\u0fd5\u0fd3\3\2\2"+
		"\2\u0fd6\u0fd9\3\2\2\2\u0fd7\u0fd5\3\2\2\2\u0fd7\u0fd8\3\2\2\2\u0fd8\u0fdd"+
		"\3\2\2\2\u0fd9\u0fd7\3\2\2\2\u0fda\u0fdb\7\u01ae\2\2\u0fdb\u0fdd\5\u0248"+
		"\u0125\2\u0fdc\u0fc7\3\2\2\2\u0fdc\u0fc9\3\2\2\2\u0fdc\u0fda\3\2\2\2\u0fdd"+
		"\u0197\3\2\2\2\u0fde\u0fe3\5\u019a\u00ce\2\u0fdf\u0fe3\5\u019c\u00cf\2"+
		"\u0fe0\u0fe3\5\u019e\u00d0\2\u0fe1\u0fe3\5\u01a0\u00d1\2\u0fe2\u0fde\3"+
		"\2\2\2\u0fe2\u0fdf\3\2\2\2\u0fe2\u0fe0\3\2\2\2\u0fe2\u0fe1\3\2\2\2\u0fe3"+
		"\u0199\3\2\2\2\u0fe4\u0fe5\7\'\2\2\u0fe5\u0fea\5\u0272\u013a\2\u0fe6\u0fe7"+
		"\7\u02b2\2\2\u0fe7\u0fe9\5\u0272\u013a\2\u0fe8\u0fe6\3\2\2\2\u0fe9\u0fec"+
		"\3\2\2\2\u0fea\u0fe8\3\2\2\2\u0fea\u0feb\3\2\2\2\u0feb\u0fed\3\2\2\2\u0fec"+
		"\u0fea\3\2\2\2\u0fed\u0fee\5\u0236\u011c\2\u0fee\u0fef\5\u0276\u013c\2"+
		"\u0fef\u019b\3\2\2\2\u0ff0\u0ff1\7\'\2\2\u0ff1\u0ff2\5\u0248\u0125\2\u0ff2"+
		"\u0ff3\7\34\2\2\u0ff3\u0ffa\7=\2\2\u0ff4\u0ffb\5\u0272\u013a\2\u0ff5\u0ff7"+
		"\7\u009d\2\2\u0ff6\u0ff8\7\u021f\2\2\u0ff7\u0ff6\3\2\2\2\u0ff7\u0ff8\3"+
		"\2\2\2\u0ff8\u0ff9\3\2\2\2\u0ff9\u0ffb\5\u0272\u013a\2\u0ffa\u0ff4\3\2"+
		"\2\2\u0ffa\u0ff5\3\2\2\2\u0ffb\u019d\3\2\2\2\u0ffc\u0ffd\7\'\2\2\u0ffd"+
		"\u0ffe\5\u0248\u0125\2\u0ffe\u0fff\7#\2\2\u0fff\u1000\7=\2\2\u1000\u1001"+
		"\5\u00b2Z\2\u1001\u019f\3\2\2\2\u1002\u1003\7\'\2\2\u1003\u1004\t&\2\2"+
		"\u1004\u1005\7\u015d\2\2\u1005\u1006\7=\2\2\u1006\u100b\5\u01a2\u00d2"+
		"\2\u1007\u1008\7\u02b2\2\2\u1008\u100a\5\u01a2\u00d2\2\u1009\u1007\3\2"+
		"\2\2\u100a\u100d\3\2\2\2\u100b\u1009\3\2\2\2\u100b\u100c\3\2\2\2\u100c"+
		"\u100e\3\2\2\2\u100d\u100b\3\2\2\2\u100e\u100f\5\4\3\2\u100f\u01a1\3\2"+
		"\2\2\u1010\u101c\5\u0272\u013a\2\u1011\u1013\7\u009d\2\2\u1012\u1014\7"+
		"\u021f\2\2\u1013\u1012\3\2\2\2\u1013\u1014\3\2\2\2\u1014\u1015\3\2\2\2"+
		"\u1015\u101c\5\u0272\u013a\2\u1016\u101c\5\u0248\u0125\2\u1017\u101c\7"+
		"\u009e\2\2\u1018\u1019\7n\2\2\u1019\u101c\7\u0156\2\2\u101a\u101c\7\u009c"+
		"\2\2\u101b\u1010\3\2\2\2\u101b\u1011\3\2\2\2\u101b\u1016\3\2\2\2\u101b"+
		"\u1017\3\2\2\2\u101b\u1018\3\2\2\2\u101b\u101a\3\2\2\2\u101c\u01a3\3\2"+
		"\2\2\u101d\u101e\7\t\2\2\u101e\u1020\7\u021b\2\2\u101f\u1021\5\u031c\u018f"+
		"\2\u1020\u101f\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u1027"+
		"\5\u01b4\u00db\2\u1023\u1024\7\u02b2\2\2\u1024\u1026\5\u01b4\u00db\2\u1025"+
		"\u1023\3\2\2\2\u1026\u1029\3\2\2\2\u1027\u1025\3\2\2\2\u1027\u1028\3\2"+
		"\2\2\u1028\u1057\3\2\2\2\u1029\u1027\3\2\2\2\u102a\u102b\7\t\2\2\u102b"+
		"\u102d\7\u021b\2\2\u102c\u102e\5\u031c\u018f\2\u102d\u102c\3\2\2\2\u102d"+
		"\u102e\3\2\2\2\u102e\u102f\3\2\2\2\u102f\u1034\5\u01b6\u00dc\2\u1030\u1031"+
		"\7\u02b2\2\2\u1031\u1033\5\u01b6\u00dc\2\u1032\u1030\3\2\2\2\u1033\u1036"+
		"\3\2\2\2\u1034\u1032\3\2\2\2\u1034\u1035\3\2\2\2\u1035\u1045\3\2\2\2\u1036"+
		"\u1034\3\2\2\2\u1037\u1043\7\u008c\2\2\u1038\u1044\7\u01a6\2\2\u1039\u1040"+
		"\5\u01b8\u00dd\2\u103a\u103c\7\13\2\2\u103b\u103a\3\2\2\2\u103b\u103c"+
		"\3\2\2\2\u103c\u103d\3\2\2\2\u103d\u103f\5\u01b8\u00dd\2\u103e\u103b\3"+
		"\2\2\2\u103f\u1042\3\2\2\2\u1040\u103e";
	private static final String _serializedATNSegment2 =
		"\3\2\2\2\u1040\u1041\3\2\2\2\u1041\u1044\3\2\2\2\u1042\u1040\3\2\2\2\u1043"+
		"\u1038\3\2\2\2\u1043\u1039\3\2\2\2\u1044\u1046\3\2\2\2\u1045\u1037\3\2"+
		"\2\2\u1045\u1046\3\2\2\2\u1046\u104d\3\2\2\2\u1047\u1049\7\u00bc\2\2\u1048"+
		"\u104a\5\u01ba\u00de\2\u1049\u1048\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u1049"+
		"\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u104e\3\2\2\2\u104d\u1047\3\2\2\2\u104d"+
		"\u104e\3\2\2\2\u104e\u1053\3\2\2\2\u104f\u1052\5\u01bc\u00df\2\u1050\u1052"+
		"\5\u01be\u00e0\2\u1051\u104f\3\2\2\2\u1051\u1050\3\2\2\2\u1052\u1055\3"+
		"\2\2\2\u1053\u1051\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1057\3\2\2\2\u1055"+
		"\u1053\3\2\2\2\u1056\u101d\3\2\2\2\u1056\u102a\3\2\2\2\u1057\u01a5\3\2"+
		"\2\2\u1058\u1059\7 \2\2\u1059\u105b\7\u021b\2\2\u105a\u105c\5\u031e\u0190"+
		"\2\u105b\u105a\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u105d\3\2\2\2\u105d\u1062"+
		"\5\u01b6\u00dc\2\u105e\u105f\7\u02b2\2\2\u105f\u1061\5\u01b6\u00dc\2\u1060"+
		"\u105e\3\2\2\2\u1061\u1064\3\2\2\2\u1062\u1060\3\2\2\2\u1062\u1063\3\2"+
		"\2\2\u1063\u1073\3\2\2\2\u1064\u1062\3\2\2\2\u1065\u1071\7\u008c\2\2\u1066"+
		"\u1072\7\u01a6\2\2\u1067\u106e\5\u01b8\u00dd\2\u1068\u106a\7\13\2\2\u1069"+
		"\u1068\3\2\2\2\u1069\u106a\3\2\2\2\u106a\u106b\3\2\2\2\u106b\u106d\5\u01b8"+
		"\u00dd\2\u106c\u1069\3\2\2\2\u106d\u1070\3\2\2\2\u106e\u106c\3\2\2\2\u106e"+
		"\u106f\3\2\2\2\u106f\u1072\3\2\2\2\u1070\u106e\3\2\2\2\u1071\u1066\3\2"+
		"\2\2\u1071\u1067\3\2\2\2\u1072\u1074\3\2\2\2\u1073\u1065\3\2\2\2\u1073"+
		"\u1074\3\2\2\2\u1074\u107b\3\2\2\2\u1075\u1077\7\u00bc\2\2\u1076\u1078"+
		"\5\u01ba\u00de\2\u1077\u1076\3\2\2\2\u1078\u1079\3\2\2\2\u1079\u1077\3"+
		"\2\2\2\u1079\u107a\3\2\2\2\u107a\u107c\3\2\2\2\u107b\u1075\3\2\2\2\u107b"+
		"\u107c\3\2\2\2\u107c\u1081\3\2\2\2\u107d\u1080\5\u01bc\u00df\2\u107e\u1080"+
		"\5\u01be\u00e0\2\u107f\u107d\3\2\2\2\u107f\u107e\3\2\2\2\u1080\u1083\3"+
		"\2\2\2\u1081\u107f\3\2\2\2\u1081\u1082\3\2\2\2\u1082\u01a7\3\2\2\2\u1083"+
		"\u1081\3\2\2\2\u1084\u1085\7\62\2\2\u1085\u1087\7\u021b\2\2\u1086\u1088"+
		"\5\u031c\u018f\2\u1087\u1086\3\2\2\2\u1087\u1088\3\2\2\2\u1088\u1089\3"+
		"\2\2\2\u1089\u108e\5\u0248\u0125\2\u108a\u108b\7\u02b2\2\2\u108b\u108d"+
		"\5\u0248\u0125\2\u108c\u108a\3\2\2\2\u108d\u1090\3\2\2\2\u108e\u108c\3"+
		"\2\2\2\u108e\u108f\3\2\2\2\u108f\u01a9\3\2\2\2\u1090\u108e\3\2\2\2\u1091"+
		"\u1092\7B\2\2\u1092\u1097\5\u01c0\u00e1\2\u1093\u1094\7\u02b2\2\2\u1094"+
		"\u1096\5\u01c0\u00e1\2\u1095\u1093\3\2\2\2\u1096\u1099\3\2\2\2\u1097\u1095"+
		"\3\2\2\2\u1097\u1098\3\2\2\2\u1098\u109a\3\2\2\2\u1099\u1097\3\2\2\2\u109a"+
		"\u109c\7s\2\2\u109b\u109d\t\'\2\2\u109c\u109b\3\2\2\2\u109c\u109d\3\2"+
		"\2\2\u109d\u109e\3\2\2\2\u109e\u109f\5\u01c4\u00e3\2\u109f\u10a0\7\u00aa"+
		"\2\2\u10a0\u10a5\5\u01b6\u00dc\2\u10a1\u10a2\7\u02b2\2\2\u10a2\u10a4\5"+
		"\u01b6\u00dc\2\u10a3\u10a1\3\2\2\2\u10a4\u10a7\3\2\2\2\u10a5\u10a3\3\2"+
		"\2\2\u10a5\u10a6\3\2\2\2\u10a6\u10b6\3\2\2\2\u10a7\u10a5\3\2\2\2\u10a8"+
		"\u10b4\7\u008c\2\2\u10a9\u10b5\7\u01a6\2\2\u10aa\u10b1\5\u01b8\u00dd\2"+
		"\u10ab\u10ad\7\13\2\2\u10ac\u10ab\3\2\2\2\u10ac\u10ad\3\2\2\2\u10ad\u10ae"+
		"\3\2\2\2\u10ae\u10b0\5\u01b8\u00dd\2\u10af\u10ac\3\2\2\2\u10b0\u10b3\3"+
		"\2\2\2\u10b1\u10af\3\2\2\2\u10b1\u10b2\3\2\2\2\u10b2\u10b5\3\2\2\2\u10b3"+
		"\u10b1\3\2\2\2\u10b4\u10a9\3\2\2\2\u10b4\u10aa\3\2\2\2\u10b5\u10b7\3\2"+
		"\2\2\u10b6\u10a8\3\2\2\2\u10b6\u10b7\3\2\2\2\u10b7\u10c1\3\2\2\2\u10b8"+
		"\u10be\7\u00bc\2\2\u10b9\u10ba\7B\2\2\u10ba\u10bd\7u\2\2\u10bb\u10bd\5"+
		"\u01ba\u00de\2\u10bc\u10b9\3\2\2\2\u10bc\u10bb\3\2\2\2\u10bd\u10c0\3\2"+
		"\2\2\u10be\u10bc\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u10c2\3\2\2\2\u10c0"+
		"\u10be\3\2\2\2\u10c1\u10b8\3\2\2\2\u10c1\u10c2\3\2\2\2\u10c2\u01ab\3\2"+
		"\2\2\u10c3\u10c4\7B\2\2\u10c4\u10c5\7\u01c6\2\2\u10c5\u10c6\7s\2\2\u10c6"+
		"\u10c7\5\u0248\u0125\2\u10c7\u10c8\7\u00aa\2\2\u10c8\u10cd\5\u0248\u0125"+
		"\2\u10c9\u10ca\7\u02b2\2\2\u10ca\u10cc\5\u0248\u0125\2\u10cb\u10c9\3\2"+
		"\2\2\u10cc\u10cf\3\2\2\2\u10cd\u10cb\3\2\2\2\u10cd\u10ce\3\2\2\2\u10ce"+
		"\u10d3\3\2\2\2\u10cf\u10cd\3\2\2\2\u10d0\u10d1\7\u00bc\2\2\u10d1\u10d2"+
		"\7B\2\2\u10d2\u10d4\7u\2\2\u10d3\u10d0\3\2\2\2\u10d3\u10d4\3\2\2\2\u10d4"+
		"\u01ad\3\2\2\2\u10d5\u10d6\7\u0089\2\2\u10d6\u10d7\7\u021b\2\2\u10d7\u10dc"+
		"\5\u01c6\u00e4\2\u10d8\u10d9\7\u02b2\2\2\u10d9\u10db\5\u01c6\u00e4\2\u10da"+
		"\u10d8\3\2\2\2\u10db\u10de\3\2\2\2\u10dc\u10da\3\2\2\2\u10dc\u10dd\3\2"+
		"\2\2\u10dd\u01af\3\2\2\2\u10de\u10dc\3\2\2\2\u10df\u10e0\7\u008f\2\2\u10e0"+
		"\u10e5\5\u01c0\u00e1\2\u10e1\u10e2\7\u02b2\2\2\u10e2\u10e4\5\u01c0\u00e1"+
		"\2\u10e3\u10e1\3\2\2\2\u10e4\u10e7\3\2\2\2\u10e5\u10e3\3\2\2\2\u10e5\u10e6"+
		"\3\2\2\2\u10e6\u10e8\3\2\2\2\u10e7\u10e5\3\2\2\2\u10e8\u10ea\7s\2\2\u10e9"+
		"\u10eb\t\'\2\2\u10ea\u10e9\3\2\2\2\u10ea\u10eb\3\2\2\2\u10eb\u10ec\3\2"+
		"\2\2\u10ec\u10ed\5\u01c4\u00e3\2\u10ed\u10ee\7@\2\2\u10ee\u10f3\5\u0248"+
		"\u0125\2\u10ef\u10f0\7\u02b2\2\2\u10f0\u10f2\5\u0248\u0125\2\u10f1\u10ef"+
		"\3\2\2\2\u10f2\u10f5\3\2\2\2\u10f3\u10f1\3\2\2\2\u10f3\u10f4\3\2\2\2\u10f4"+
		"\u1108\3\2\2\2\u10f5\u10f3\3\2\2\2\u10f6\u10f7\7\u008f\2\2\u10f7\u10f9"+
		"\7\b\2\2\u10f8\u10fa\7\u024a\2\2\u10f9\u10f8\3\2\2\2\u10f9\u10fa\3\2\2"+
		"\2\u10fa\u10fb\3\2\2\2\u10fb\u10fc\7\u02b2\2\2\u10fc\u10fd\7B\2\2\u10fd"+
		"\u10fe\7u\2\2\u10fe\u10ff\7@\2\2\u10ff\u1104\5\u0248\u0125\2\u1100\u1101"+
		"\7\u02b2\2\2\u1101\u1103\5\u0248\u0125\2\u1102\u1100\3\2\2\2\u1103\u1106"+
		"\3\2\2\2\u1104\u1102\3\2\2\2\u1104\u1105\3\2\2\2\u1105\u1108\3\2\2\2\u1106"+
		"\u1104\3\2\2\2\u1107\u10df\3\2\2\2\u1107\u10f6\3\2\2\2\u1108\u01b1\3\2"+
		"\2\2\u1109\u110a\7\u008f\2\2\u110a\u110b\7\u01c6\2\2\u110b\u110c\7s\2"+
		"\2\u110c\u110d\5\u0248\u0125\2\u110d\u110e\7@\2\2\u110e\u1113\5\u0248"+
		"\u0125\2\u110f\u1110\7\u02b2\2\2\u1110\u1112\5\u0248\u0125\2\u1111\u110f"+
		"\3\2\2\2\u1112\u1115\3\2\2\2\u1113\u1111\3\2\2\2\u1113\u1114\3\2\2\2\u1114"+
		"\u01b3\3\2\2\2\u1115\u1113\3\2\2\2\u1116\u1117\5\u0248\u0125\2\u1117\u1118"+
		"\5\u01bc\u00df\2\u1118\u01b5\3\2\2\2\u1119\u111a\5\u0248\u0125\2\u111a"+
		"\u111b\7\u0162\2\2\u111b\u111c\7\22\2\2\u111c\u111d\7\u01b8\2\2\u111d"+
		"\u111e\5\u0272\u013a\2\u111e\u1132\3\2\2\2\u111f\u1120\5\u0248\u0125\2"+
		"\u1120\u1123\7\u0162\2\2\u1121\u1122\7\u00bc\2\2\u1122\u1124\5\u0212\u010a"+
		"\2\u1123\u1121\3\2\2\2\u1123\u1124\3\2\2\2\u1124\u1125\3\2\2\2\u1125\u1126"+
		"\7\22\2\2\u1126\u1127\5\u0272\u013a\2\u1127\u1132\3\2\2\2\u1128\u1129"+
		"\5\u0248\u0125\2\u1129\u112a\7\u0162\2\2\u112a\u112b\7\u00bc\2\2\u112b"+
		"\u112e\5\u0212\u010a\2\u112c\u112d\7\f\2\2\u112d\u112f\5\u0272\u013a\2"+
		"\u112e\u112c\3\2\2\2\u112e\u112f\3\2\2\2\u112f\u1132\3\2\2\2\u1130\u1132"+
		"\5\u0248\u0125\2\u1131\u1119\3\2\2\2\u1131\u111f\3\2\2\2\u1131\u1128\3"+
		"\2\2\2\u1131\u1130\3\2\2\2\u1132\u01b7\3\2\2\2\u1133\u113c\7\u00a2\2\2"+
		"\u1134\u113c\7\u0227\2\2\u1135\u1136\7\u0115\2\2\u1136\u113c\5\u0272\u013a"+
		"\2\u1137\u1138\7\u0170\2\2\u1138\u113c\5\u0272\u013a\2\u1139\u113a\7\u0206"+
		"\2\2\u113a\u113c\5\u0272\u013a\2\u113b\u1133\3\2\2\2\u113b\u1134\3\2\2"+
		"\2\u113b\u1135\3\2\2\2\u113b\u1137\3\2\2\2\u113b\u1139\3\2\2\2\u113c\u01b9"+
		"\3\2\2\2\u113d\u113e\7\u0192\2\2\u113e\u1146\5\u0272\u013a\2\u113f\u1140"+
		"\7\u0195\2\2\u1140\u1146\5\u0272\u013a\2\u1141\u1142\7\u0191\2\2\u1142"+
		"\u1146\5\u0272\u013a\2\u1143\u1144\7\u0196\2\2\u1144\u1146\5\u0272\u013a"+
		"\2\u1145\u113d\3\2\2\2\u1145\u113f\3\2\2\2\u1145\u1141\3\2\2\2\u1145\u1143"+
		"\3\2\2\2\u1146\u01bb\3\2\2\2\u1147\u1148\7\u01b8\2\2\u1148\u114f\7\u0149"+
		"\2\2\u1149\u1150\7(\2\2\u114a\u1150\7\u01a2\2\2\u114b\u114c\7O\2\2\u114c"+
		"\u114d\5\u0272\u013a\2\u114d\u114e\7\u023c\2\2\u114e\u1150\3\2\2\2\u114f"+
		"\u1149\3\2\2\2\u114f\u114a\3\2\2\2\u114f\u114b\3\2\2\2\u114f\u1150\3\2"+
		"\2\2\u1150\u01bd\3\2\2\2\u1151\u1152\7\u00fb\2\2\u1152\u1153\t(\2\2\u1153"+
		"\u01bf\3\2\2\2\u1154\u1160\5\u01c2\u00e2\2\u1155\u1156\7\u02ae\2\2\u1156"+
		"\u115b\5\u0272\u013a\2\u1157\u1158\7\u02b2\2\2\u1158\u115a\5\u0272\u013a"+
		"\2\u1159\u1157\3\2\2\2\u115a\u115d\3\2\2\2\u115b\u1159\3\2\2\2\u115b\u115c"+
		"\3\2\2\2\u115c\u115e\3\2\2\2\u115d\u115b\3\2\2\2\u115e\u115f\7\u02af\2"+
		"\2\u115f\u1161\3\2\2\2\u1160\u1155\3\2\2\2\u1160\u1161\3\2\2\2\u1161\u01c1"+
		"\3\2\2\2\u1162\u1164\7\b\2\2\u1163\u1165\7\u024a\2\2\u1164\u1163\3\2\2"+
		"\2\u1164\u1165\3\2\2\2\u1165\u118d\3\2\2\2\u1166\u1168\7\t\2\2\u1167\u1169"+
		"\7\u0243\2\2\u1168\u1167\3\2\2\2\u1168\u1169\3\2\2\2\u1169\u118d\3\2\2"+
		"\2\u116a\u1171\7 \2\2\u116b\u116c\7\u020d\2\2\u116c\u1172\7\u0242\2\2"+
		"\u116d\u1172\7\u0243\2\2\u116e\u1172\7\u0221\2\2\u116f\u1172\7\u021b\2"+
		"\2\u1170\u1172\7\u020c\2\2\u1171\u116b\3\2\2\2\u1171\u116d\3\2\2\2\u1171"+
		"\u116e\3\2\2\2\u1171\u116f\3\2\2\2\u1171\u1170\3\2\2\2\u1171\u1172\3\2"+
		"\2\2\u1172\u118d\3\2\2\2\u1173\u118d\7*\2\2\u1174\u118d\7\62\2\2\u1175"+
		"\u118d\7\u0143\2\2\u1176\u118d\7\u0244\2\2\u1177\u118d\7\u0245\2\2\u1178"+
		"\u1179\7B\2\2\u1179\u118d\7u\2\2\u117a\u118d\7I\2\2\u117b\u118d\7N\2\2"+
		"\u117c\u117d\7_\2\2\u117d\u118d\7\u0242\2\2\u117e\u118d\7\u0246\2\2\u117f"+
		"\u118d\7\u01c6\2\2\u1180\u118d\7\u0086\2\2\u1181\u118d\7\u0247\2\2\u1182"+
		"\u1183\7\u01db\2\2\u1183\u118d\t)\2\2\u1184\u118d\7\u0095\2\2\u1185\u1186"+
		"\7\u0098\2\2\u1186\u118d\t*\2\2\u1187\u118d\7\u0248\2\2\u1188\u118d\7"+
		"\u0249\2\2\u1189\u118d\7\u00ac\2\2\u118a\u118d\7\u00b3\2\2\u118b\u118d"+
		"\7\u00b4\2\2\u118c\u1162\3\2\2\2\u118c\u1166\3\2\2\2\u118c\u116a\3\2\2"+
		"\2\u118c\u1173\3\2\2\2\u118c\u1174\3\2\2\2\u118c\u1175\3\2\2\2\u118c\u1176"+
		"\3\2\2\2\u118c\u1177\3\2\2\2\u118c\u1178\3\2\2\2\u118c\u117a\3\2\2\2\u118c"+
		"\u117b\3\2\2\2\u118c\u117c\3\2\2\2\u118c\u117e\3\2\2\2\u118c\u117f\3\2"+
		"\2\2\u118c\u1180\3\2\2\2\u118c\u1181\3\2\2\2\u118c\u1182\3\2\2\2\u118c"+
		"\u1184\3\2\2\2\u118c\u1185\3\2\2\2\u118c\u1187\3\2\2\2\u118c\u1188\3\2"+
		"\2\2\u118c\u1189\3\2\2\2\u118c\u118a\3\2\2\2\u118c\u118b\3\2\2\2\u118d"+
		"\u01c3\3\2\2\2\u118e\u119c\7\u029a\2\2\u118f\u1190\7\u029a\2\2\u1190\u1191"+
		"\7\u02ad\2\2\u1191\u119c\7\u029a\2\2\u1192\u1193\5\u0248\u0125\2\u1193"+
		"\u1194\7\u02ad\2\2\u1194\u1195\7\u029a\2\2\u1195\u119c\3\2\2\2\u1196\u1197"+
		"\5\u0248\u0125\2\u1197\u1198\7\u02ad\2\2\u1198\u1199\5\u0248\u0125\2\u1199"+
		"\u119c\3\2\2\2\u119a\u119c\5\u0248\u0125\2\u119b\u118e\3\2\2\2\u119b\u118f"+
		"\3\2\2\2\u119b\u1192\3\2\2\2\u119b\u1196\3\2\2\2\u119b\u119a\3\2\2\2\u119c"+
		"\u01c5\3\2\2\2\u119d\u119e\5\u0248\u0125\2\u119e\u119f\7\u00aa\2\2\u119f"+
		"\u11a0\5\u0248\u0125\2\u11a0\u01c7\3\2\2\2\u11a1\u11a3\7\n\2\2\u11a2\u11a4"+
		"\t+\2\2\u11a3\u11a2\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a5\3\2\2\2\u11a5"+
		"\u11a6\7\u00a5\2\2\u11a6\u11ab\5\u0272\u013a\2\u11a7\u11a8\7\u02b2\2\2"+
		"\u11a8\u11aa\5\u0272\u013a\2\u11a9\u11a7\3\2\2\2\u11aa\u11ad\3\2\2\2\u11ab"+
		"\u11a9\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u01c9\3\2\2\2\u11ad\u11ab\3\2"+
		"\2\2\u11ae\u11af\7\31\2\2\u11af\u11b0\7\u00a5\2\2\u11b0\u11b5\5\u0272"+
		"\u013a\2\u11b1\u11b2\7\u02b2\2\2\u11b2\u11b4\5\u0272\u013a\2\u11b3\u11b1"+
		"\3\2\2\2\u11b4\u11b7\3\2\2\2\u11b5\u11b3\3\2\2\2\u11b5\u11b6\3\2\2\2\u11b6"+
		"\u11bb\3\2\2\2\u11b7\u11b5\3\2\2\2\u11b8\u11ba\5\u01d2\u00ea\2\u11b9\u11b8"+
		"\3\2\2\2\u11ba\u11bd\3\2\2\2\u11bb\u11b9\3\2\2\2\u11bb\u11bc\3\2\2\2\u11bc"+
		"\u01cb\3\2\2\2\u11bd\u11bb\3\2\2\2\u11be\u11bf\7\u0114\2\2\u11bf\u11c0"+
		"\7\u00a5\2\2\u11c0\u11c5\5\u0272\u013a\2\u11c1\u11c2\7\u02b2\2\2\u11c2"+
		"\u11c4\5\u0272\u013a\2\u11c3\u11c1\3\2\2\2\u11c4\u11c7\3\2\2\2\u11c5\u11c3"+
		"\3\2\2\2\u11c5\u11c6\3\2\2\2\u11c6\u11c9\3\2\2\2\u11c7\u11c5\3\2\2\2\u11c8"+
		"\u11ca\t,\2\2\u11c9\u11c8\3\2\2\2\u11c9\u11ca\3\2\2\2\u11ca\u01cd\3\2"+
		"\2\2\u11cb\u11cd\7t\2\2\u11cc\u11ce\t+\2\2\u11cd\u11cc\3\2\2\2\u11cd\u11ce"+
		"\3\2\2\2\u11ce\u11cf\3\2\2\2\u11cf\u11d0\7\u00a5\2\2\u11d0\u11d5\5\u0272"+
		"\u013a\2\u11d1\u11d2\7\u02b2\2\2\u11d2\u11d4\5\u0272\u013a\2\u11d3\u11d1"+
		"\3\2\2\2\u11d4\u11d7\3\2\2\2\u11d5\u11d3\3\2\2\2\u11d5\u11d6\3\2\2\2\u11d6"+
		"\u01cf\3\2\2\2\u11d7\u11d5\3\2\2\2\u11d8\u11da\7\u01d3\2\2\u11d9\u11db"+
		"\t+\2\2\u11da\u11d9\3\2\2\2\u11da\u11db\3\2\2\2\u11db\u11dc\3\2\2\2\u11dc"+
		"\u11dd\7\u00a5\2\2\u11dd\u11e2\5\u0272\u013a\2\u11de\u11df\7\u02b2\2\2"+
		"\u11df\u11e1\5\u0272\u013a\2\u11e0\u11de\3\2\2\2\u11e1\u11e4\3\2\2\2\u11e2"+
		"\u11e0\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3\u11e6\3\2\2\2\u11e4\u11e2\3\2"+
		"\2\2\u11e5\u11e7\7\u01c8\2\2\u11e6\u11e5\3\2\2\2\u11e6\u11e7\3\2\2\2\u11e7"+
		"\u11e9\3\2\2\2\u11e8\u11ea\7\u014b\2\2\u11e9\u11e8\3\2\2\2\u11e9\u11ea"+
		"\3\2\2\2\u11ea\u11ec\3\2\2\2\u11eb\u11ed\7\u021c\2\2\u11ec\u11eb\3\2\2"+
		"\2\u11ec\u11ed\3\2\2\2\u11ed\u01d1\3\2\2\2\u11ee\u11ef\7=\2\2\u11ef\u11f6"+
		"\7\u021a\2\2\u11f0\u11f6\7\u01c8\2\2\u11f1\u11f6\7\u014d\2\2\u11f2\u11f6"+
		"\7\u0197\2\2\u11f3\u11f6\7\u014b\2\2\u11f4\u11f6\7\u0112\2\2\u11f5\u11ee"+
		"\3\2\2\2\u11f5\u11f0\3\2\2\2\u11f5\u11f1\3\2\2\2\u11f5\u11f2\3\2\2\2\u11f5"+
		"\u11f3\3\2\2\2\u11f5\u11f4\3\2\2\2\u11f6\u01d3\3\2\2\2\u11f7\u11f9\7 "+
		"\2\2\u11f8\u11fa\7\u00ff\2\2\u11f9\u11f8\3\2\2\2\u11f9\u11fa\3\2\2\2\u11fa"+
		"\u11fb\3\2\2\2\u11fb\u11fc\7\u0158\2\2\u11fc\u11fd\5\u0248\u0125\2\u11fd"+
		"\u11fe\7\u01de\2\2\u11fe\u11ff\t-\2\2\u11ff\u1200\7\u01f3\2\2\u1200\u1201"+
		"\5\u0272\u013a\2\u1201\u01d5\3\2\2\2\u1202\u1203\7\u0169\2\2\u1203\u1204"+
		"\7\u01ba\2\2\u1204\u1205\5\u0248\u0125\2\u1205\u1206\7\u01f3\2\2\u1206"+
		"\u1207\5\u0272\u013a\2\u1207\u01d7\3\2\2\2\u1208\u1209\7\u0217\2\2\u1209"+
		"\u120a\7\u01ba\2\2\u120a\u120b\5\u0248\u0125\2\u120b\u01d9\3\2\2\2\u120c"+
		"\u120d\7\u0096\2\2\u120d\u120e\7(\2\2\u120e\u120f\7\u0090\2\2\u120f\u1214"+
		"\5\u01dc\u00ef\2\u1210\u1211\7\u02b2\2\2\u1211\u1213\5\u01dc\u00ef\2\u1212"+
		"\u1210\3\2\2\2\u1213\u1216\3\2\2\2\u1214\u1212\3\2\2\2\u1214\u1215\3\2"+
		"\2\2\u1215\u1217\3\2\2\2\u1216\u1214\3\2\2\2\u1217\u1218\7\u00aa\2\2\u1218"+
		"\u121d\5\u0272\u013a\2\u1219\u121a\7\u02b2\2\2\u121a\u121c\5\u0272\u013a"+
		"\2\u121b\u1219\3\2\2\2\u121c\u121f\3\2\2\2\u121d\u121b\3\2\2\2\u121d\u121e"+
		"\3\2\2\2\u121e\u124e\3\2\2\2\u121f\u121d\3\2\2\2\u1220\u1221\7\u0096\2"+
		"\2\u1221\u1224\7\u01b8\2\2\u1222\u1223\7=\2\2\u1223\u1225\5\u0272\u013a"+
		"\2\u1224\u1222\3\2\2\2\u1224\u1225\3\2\2\2\u1225\u1226\3\2\2\2\u1226\u1227"+
		"\7\u02a1\2\2\u1227\u122a\5\u0272\u013a\2\u1228\u1229\7\u008b\2\2\u1229"+
		"\u122b\5\u0272\u013a\2\u122a\u1228\3\2\2\2\u122a\u122b\3\2\2\2\u122b\u124e"+
		"\3\2\2\2\u122c\u122d\7\u0096\2\2\u122d\u1232\5\u02ae\u0158\2\u122e\u122f"+
		"\7\u02b2\2\2\u122f\u1231\5\u02ae\u0158\2\u1230\u122e\3\2\2\2\u1231\u1234"+
		"\3\2\2\2\u1232\u1230\3\2\2\2\u1232\u1233\3\2\2\2\u1233\u124e\3\2\2\2\u1234"+
		"\u1232\3\2\2\2\u1235\u1236\7\u0096\2\2\u1236\u1237\7\30\2\2\u1237\u1238"+
		"\7\u0096\2\2\u1238\u124e\5\u0272\u013a\2\u1239\u123a\7\u0096\2\2\u123a"+
		"\u123b\7\u028a\2\2\u123b\u124e\5\u0272\u013a\2\u123c\u123d\7\u0096\2\2"+
		"\u123d\u123e\7\u01a0\2\2\u123e\u124e\5\u0272\u013a\2\u123f\u1241\7\u0096"+
		"\2\2\u1240\u1242\t.\2\2\u1241\u1240\3\2\2\2\u1241\u1242\3\2\2\2\u1242"+
		"\u1243\3\2\2\2\u1243\u1244\7\u0211\2\2\u1244\u1249\5\u013a\u009e\2\u1245"+
		"\u1246\7\u02b2\2\2\u1246\u1248\5\u013a\u009e\2\u1247\u1245\3\2\2\2\u1248"+
		"\u124b\3\2\2\2\u1249\u1247\3\2\2\2\u1249\u124a\3\2\2\2\u124a\u124e\3\2"+
		"\2\2\u124b\u1249\3\2\2\2\u124c\u124e\5\u0138\u009d\2\u124d\u120c\3\2\2"+
		"\2\u124d\u1220\3\2\2\2\u124d\u122c\3\2\2\2\u124d\u1235\3\2\2\2\u124d\u1239"+
		"\3\2\2\2\u124d\u123c\3\2\2\2\u124d\u123f\3\2\2\2\u124d\u124c\3\2\2\2\u124e"+
		"\u01db\3\2\2\2\u124f\u1253\5\u02b2\u015a\2\u1250\u1253\5\u02b4\u015b\2"+
		"\u1251\u1253\5\u0272\u013a\2\u1252\u124f\3\2\2\2\u1252\u1250\3\2\2\2\u1252"+
		"\u1251\3\2\2\2\u1253\u01dd\3\2\2\2\u1254\u1255\7\u0098\2\2\u1255\u1256"+
		"\t\34\2\2\u1256\u1304\7\u017b\2\2\u1257\u1258\7\u0098\2\2\u1258\u1259"+
		"\t/\2\2\u1259\u125c\7\u0144\2\2\u125a\u125b\7H\2\2\u125b\u125d\5\u0272"+
		"\u013a\2\u125c\u125a\3\2\2\2\u125c\u125d\3\2\2\2\u125d\u1260\3\2\2\2\u125e"+
		"\u125f\7@\2\2\u125f\u1261\5\u0272\u013a\2\u1260\u125e\3\2\2\2\u1260\u1261"+
		"\3\2\2\2\u1261\u1269\3\2\2\2\u1262\u1266\7[\2\2\u1263\u1264\5\u0272\u013a"+
		"\2\u1264\u1265\7\u02b2\2\2\u1265\u1267\3\2\2\2\u1266\u1263\3\2\2\2\u1266"+
		"\u1267\3\2\2\2\u1267\u1268\3\2\2\2\u1268\u126a\5\u0272\u013a\2\u1269\u1262"+
		"\3\2\2\2\u1269\u126a\3\2\2\2\u126a\u1304\3\2\2\2\u126b\u126c\7\u0098\2"+
		"\2\u126c\u126e\5\u01e0\u00f1\2\u126d\u126f\5\u01e2\u00f2\2\u126e\u126d"+
		"\3\2\2\2\u126e\u126f\3\2\2\2\u126f\u1304\3\2\2\2\u1270\u1272\7\u0098\2"+
		"\2\u1271\u1273\7\u0157\2\2\u1272\u1271\3\2\2\2\u1272\u1273\3\2\2\2\u1273"+
		"\u1274\3\2\2\2\u1274\u1275\t\26\2\2\u1275\u1276\t\60\2\2\u1276\u1279\5"+
		"\u0248\u0125\2\u1277\u1278\t\60\2\2\u1278\u127a\5\u0248\u0125\2\u1279"+
		"\u1277\3\2\2\2\u1279\u127a\3\2\2\2\u127a\u127c\3\2\2\2\u127b\u127d\5\u01e2"+
		"\u00f2\2\u127c\u127b\3\2\2\2\u127c\u127d\3\2\2\2\u127d\u1304\3\2\2\2\u127e"+
		"\u127f\7\u0098\2\2\u127f\u1280\7 \2\2\u1280\u1282\t\61\2\2\u1281\u1283"+
		"\5\u031e\u0190\2\u1282\u1281\3\2\2\2\u1282\u1283\3\2\2\2\u1283\u1284\3"+
		"\2\2\2\u1284\u1304\5\u0248\u0125\2\u1285\u1286\7\u0098\2\2\u1286\u1287"+
		"\7 \2\2\u1287\u1288\t\62\2\2\u1288\u1304\5\u0248\u0125\2\u1289\u128a\7"+
		"\u0098\2\2\u128a\u128b\7 \2\2\u128b\u128c\7\u021b\2\2\u128c\u1304\5\u0248"+
		"\u0125\2\u128d\u128e\7\u0098\2\2\u128e\u128f\7\u013d\2\2\u128f\u1290\5"+
		"\u020a\u0106\2\u1290\u1291\t\63\2\2\u1291\u1304\3\2\2\2\u1292\u1293\7"+
		"\u0098\2\2\u1293\u1304\5\u01e4\u00f3\2\u1294\u1295\7\u0098\2\2\u1295\u1296"+
		"\t\64\2\2\u1296\u129a\7[\2\2\u1297\u1298\5\u0272\u013a\2\u1298\u1299\7"+
		"\u02b2\2\2\u1299\u129b\3\2\2\2\u129a\u1297\3\2\2\2\u129a\u129b\3\2\2\2"+
		"\u129b\u129c\3\2\2\2\u129c\u1304\5\u0272\u013a\2\u129d\u129e\7\u0098\2"+
		"\2\u129e\u129f\7\u00e2\2\2\u129f\u12a0\7\u02ae\2\2\u12a0\u12a1\7\u029a"+
		"\2\2\u12a1\u12a2\7\u02af\2\2\u12a2\u1304\t\64\2\2\u12a3\u12a4\7\u0098"+
		"\2\2\u12a4\u12a7\5\u01e6\u00f4\2\u12a5\u12a6\t\60\2\2\u12a6\u12a8\5\u0248"+
		"\u0125\2\u12a7\u12a5\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12aa\3\2\2\2\u12a9"+
		"\u12ab\5\u01e2\u00f2\2\u12aa\u12a9\3\2\2\2\u12aa\u12ab\3\2\2\2\u12ab\u1304"+
		"\3\2\2\2\u12ac\u12ad\7\u0098\2\2\u12ad\u12ae\t\65\2\2\u12ae\u12af\7\u0119"+
		"\2\2\u12af\u1304\5\u0248\u0125\2\u12b0\u12b1\7\u0098\2\2\u12b1\u12b4\7"+
		"\u015b\2\2\u12b2\u12b3\7=\2\2\u12b3\u12b5\5\u0248\u0125\2\u12b4\u12b2"+
		"\3\2\2\2\u12b4\u12b5\3\2\2\2\u12b5\u1304\3\2\2\2\u12b6\u12b7\7\u0098\2"+
		"\2\u12b7\u12b8\7I\2\2\u12b8\u12b9\t\60\2\2\u12b9\u12bc\5\u0248\u0125\2"+
		"\u12ba\u12bb\t\60\2\2\u12bb\u12bd\5\u0248\u0125\2\u12bc\u12ba\3\2\2\2"+
		"\u12bc\u12bd\3\2\2\2\u12bd\u12c0\3\2\2\2\u12be\u12bf\7\u00ba\2\2\u12bf"+
		"\u12c1\5\u0272\u013a\2\u12c0\u12be\3\2\2\2\u12c0\u12c1\3\2\2\2\u12c1\u1304"+
		"\3\2\2\2\u12c2\u12c3\7\u0098\2\2\u12c3\u12c4\7T\2\2\u12c4\u12c5\t\60\2"+
		"\2\u12c5\u12c8\5\u0248\u0125\2\u12c6\u12c7\t\60\2\2\u12c7\u12c9\5\u0248"+
		"\u0125\2\u12c8\u12c6\3\2\2\2\u12c8\u12c9\3\2\2\2\u12c9\u12cc\3\2\2\2\u12ca"+
		"\u12cb\7\u00ba\2\2\u12cb\u12cd\5\u0272\u013a\2\u12cc\u12ca\3\2\2\2\u12cc"+
		"\u12cd\3\2\2\2\u12cd\u1304\3\2\2\2\u12ce\u12cf\7\u0098\2\2\u12cf\u12d0"+
		"\7U\2\2\u12d0\u12d1\t\60\2\2\u12d1\u12d4\5\u0248\u0125\2\u12d2\u12d3\t"+
		"\60\2\2\u12d3\u12d5\5\u0248\u0125\2\u12d4\u12d2\3\2\2\2\u12d4\u12d5\3"+
		"\2\2\2\u12d5\u12d8\3\2\2\2\u12d6\u12d7\7\u00ba\2\2\u12d7\u12d9\5\u0272"+
		"\u013a\2\u12d8\u12d6\3\2\2\2\u12d8\u12d9\3\2\2\2\u12d9\u1304\3\2\2\2\u12da"+
		"\u12db\7\u0098\2\2\u12db\u12dc\7\u01ae\2\2\u12dc\u12df\7\u0242\2\2\u12dd"+
		"\u12de\t\60\2\2\u12de\u12e0\5\u0248\u0125\2\u12df\u12dd\3\2\2\2\u12df"+
		"\u12e0\3\2\2\2\u12e0\u12e2\3\2\2\2\u12e1\u12e3\5\u01e2\u00f2\2\u12e2\u12e1"+
		"\3\2\2\2\u12e2\u12e3\3\2\2\2\u12e3\u1304\3\2\2\2\u12e4\u12e5\7\u0098\2"+
		"\2\u12e5\u12e6\7\u01c4\2\2\u12e6\u12eb\5\u01e8\u00f5\2\u12e7\u12e8\7\u02b2"+
		"\2\2\u12e8\u12ea\5\u01e8\u00f5\2\u12e9\u12e7\3\2\2\2\u12ea\u12ed\3\2\2"+
		"\2\u12eb\u12e9\3\2\2\2\u12eb\u12ec\3\2\2\2\u12ec\u12f1\3\2\2\2\u12ed\u12eb"+
		"\3\2\2\2\u12ee\u12ef\7=\2\2\u12ef\u12f0\7\u01c7\2\2\u12f0\u12f2\5\u0272"+
		"\u013a\2\u12f1\u12ee\3\2\2\2\u12f1\u12f2\3\2\2\2\u12f2\u12f3\3\2\2\2\u12f3"+
		"\u12f7\7[\2\2\u12f4\u12f5\5\u0272\u013a\2\u12f5\u12f6\7\u02b2\2\2\u12f6"+
		"\u12f8\3\2\2\2\u12f7\u12f4\3\2\2\2\u12f7\u12f8\3\2\2\2\u12f8\u12f9\3\2"+
		"\2\2\u12f9\u12fa\5\u0272\u013a\2\u12fa\u1304\3\2\2\2\u12fb\u12fc\7\u0098"+
		"\2\2\u12fc\u12fd\7\u01ee\2\2\u12fd\u1301\7\u0202\2\2\u12fe\u12ff\7=\2"+
		"\2\u12ff\u1300\7\u0113\2\2\u1300\u1302\5\u0272\u013a\2\u1301\u12fe\3\2"+
		"\2\2\u1301\u1302\3\2\2\2\u1302\u1304\3\2\2\2\u1303\u1254\3\2\2\2\u1303"+
		"\u1257\3\2\2\2\u1303\u126b\3\2\2\2\u1303\u1270\3\2\2\2\u1303\u127e\3\2"+
		"\2\2\u1303\u1285\3\2\2\2\u1303\u1289\3\2\2\2\u1303\u128d\3\2\2\2\u1303"+
		"\u1292\3\2\2\2\u1303\u1294\3\2\2\2\u1303\u129d\3\2\2\2\u1303\u12a3\3\2"+
		"\2\2\u1303\u12ac\3\2\2\2\u1303\u12b0\3\2\2\2\u1303\u12b6\3\2\2\2\u1303"+
		"\u12c2\3\2\2\2\u1303\u12ce\3\2\2\2\u1303\u12da\3\2\2\2\u1303\u12e4\3\2"+
		"\2\2\u1303\u12fb\3\2\2\2\u1304\u01df\3\2\2\2\u1305\u1306\7\30\2\2\u1306"+
		"\u1313\7\u0096\2\2\u1307\u1313\7\u02d5\2\2\u1308\u1313\7%\2\2\u1309\u1313"+
		"\7\u0094\2\2\u130a\u130b\7\u0158\2\2\u130b\u1313\7\u0202\2\2\u130c\u130d"+
		"\7\u0080\2\2\u130d\u1313\7\u0202\2\2\u130e\u1310\t.\2\2\u130f\u130e\3"+
		"\2\2\2\u130f\u1310\3\2\2\2\u1310\u1311\3\2\2\2\u1311\u1313\t\66\2\2\u1312"+
		"\u1305\3\2\2\2\u1312\u1307\3\2\2\2\u1312\u1308\3\2\2\2\u1312\u1309\3\2"+
		"\2\2\u1312\u130a\3\2\2\2\u1312\u130c\3\2\2\2\u1312\u130f\3\2\2\2\u1313"+
		"\u01e1\3\2\2\2\u1314\u1315\7Z\2\2\u1315\u1319\5\u0272\u013a\2\u1316\u1317"+
		"\7\u00ba\2\2\u1317\u1319\5\u0272\u013a\2\u1318\u1314\3\2\2\2\u1318\u1316"+
		"\3\2\2\2\u1319\u01e3\3\2\2\2\u131a\u131c\7\u0204\2\2\u131b\u131a\3\2\2"+
		"\2\u131b\u131c\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u132c\7\u013e\2\2\u131e"+
		"\u131f\7\u017c\2\2\u131f\u132c\7\u0202\2\2\u1320\u132c\7\u01bc\2\2\u1321"+
		"\u132c\7\u024a\2\2\u1322\u1324\7\u0157\2\2\u1323\u1322\3\2\2\2\u1323\u1324"+
		"\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u132c\7\u01c3\2\2\u1326\u132c\7\u01c5"+
		"\2\2\u1327\u1328\7\u01ee\2\2\u1328\u132c\7\u0161\2\2\u1329\u132c\7\u0103"+
		"\2\2\u132a\u132c\7\u0127\2\2\u132b\u131b\3\2\2\2\u132b\u131e\3\2\2\2\u132b"+
		"\u1320\3\2\2\2\u132b\u1321\3\2\2\2\u132b\u1323\3\2\2\2\u132b\u1326\3\2"+
		"\2\2\u132b\u1327\3\2\2\2\u132b\u1329\3\2\2\2\u132b\u132a\3\2\2\2\u132c"+
		"\u01e5\3\2\2\2\u132d\u1336\7\u0144\2\2\u132e\u132f\7\u00a5\2\2\u132f\u1336"+
		"\7\u0202\2\2\u1330\u1332\7\u0157\2\2\u1331\u1330\3\2\2\2\u1331\u1332\3"+
		"\2\2\2\u1332\u1333\3\2\2\2\u1333\u1336\7\u0242\2\2\u1334\u1336\7\u0212"+
		"\2\2\u1335\u132d\3\2\2\2\u1335\u132e\3\2\2\2\u1335\u1331\3\2\2\2\u1335"+
		"\u1334\3\2\2\2\u1336\u01e7\3\2\2\2\u1337\u1344\7\b\2\2\u1338\u1339\7\u010b"+
		"\2\2\u1339\u1344\7\u016c\2\2\u133a\u133b\7\u0126\2\2\u133b\u1344\7\u020b"+
		"\2\2\u133c\u1344\7\u0129\2\2\u133d\u1344\7\u016e\2\2\u133e\u1344\7\u0278"+
		"\2\2\u133f\u1340\7\u01b3\2\2\u1340\u1344\7\u014e\2\2\u1341\u1344\7\u01f5"+
		"\2\2\u1342\u1344\7\u020a\2\2\u1343\u1337\3\2\2\2\u1343\u1338\3\2\2\2\u1343"+
		"\u133a\3\2\2\2\u1343\u133c\3\2\2\2\u1343\u133d\3\2\2\2\u1343\u133e\3\2"+
		"\2\2\u1343\u133f\3\2\2\2\u1343\u1341\3\2\2\2\u1343\u1342\3\2\2\2\u1344"+
		"\u01e9\3\2\2\2\u1345\u1346\7\u0109\2\2\u1346\u1347\5\u0272\u013a\2\u1347"+
		"\u01eb\3\2\2\2\u1348\u1349\7\u010f\2\2\u1349\u134a\7I\2\2\u134a\u134f"+
		"\5\u01f8\u00fd\2\u134b\u134c\7\u02b2\2\2\u134c\u134e\5\u01f8\u00fd\2\u134d"+
		"\u134b\3\2\2\2\u134e\u1351\3\2\2\2\u134f\u134d\3\2\2\2\u134f\u1350\3\2"+
		"\2\2\u1350\u1360\3\2\2\2\u1351\u134f\3\2\2\2\u1352\u1353\7|\2\2\u1353"+
		"\u135d\7\u02ae\2\2\u1354\u1359\5\u0272\u013a\2\u1355\u1356\7\u02b2\2\2"+
		"\u1356\u1358\5\u0272\u013a\2\u1357\u1355\3\2\2\2\u1358\u135b\3\2\2\2\u1359"+
		"\u1357\3\2\2\2\u1359\u135a\3\2\2\2\u135a\u135e\3\2\2\2\u135b\u1359\3\2"+
		"\2\2\u135c\u135e\7\b\2\2\u135d\u1354\3\2\2\2\u135d\u135c\3\2\2\2\u135e"+
		"\u135f\3\2\2\2\u135f\u1361\7\u02af\2\2\u1360\u1352\3\2\2\2\u1360\u1361"+
		"\3\2\2\2\u1361\u1362\3\2\2\2\u1362\u1363\7H\2\2\u1363\u1364\5\u0248\u0125"+
		"\2\u1364\u01ed\3\2\2\2\u1365\u1367\7\u0154\2\2\u1366\u1368\t+\2\2\u1367"+
		"\u1366\3\2\2\2\u1367\u1368\3\2\2\2\u1368\u1369\3\2\2\2\u1369\u136e\5\u01fa"+
		"\u00fe\2\u136a\u136b\7\u02b2\2\2\u136b\u136d\5\u01fa\u00fe\2\u136c\u136a"+
		"\3\2\2\2\u136d\u1370\3\2\2\2\u136e\u136c\3\2\2\2\u136e\u136f\3\2\2\2\u136f"+
		"\u01ef\3\2\2\2\u1370\u136e\3\2\2\2\u1371\u1373\7V\2\2\u1372\u1374\t\67"+
		"\2\2\u1373\u1372\3\2\2\2\u1373\u1374\3\2\2\2\u1374\u1376\3\2\2\2\u1375"+
		"\u1377\5\u0272\u013a\2\u1376\u1375\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u1376"+
		"\3\2\2\2\u1378\u1379\3\2\2\2\u1379\u01f1\3\2\2\2\u137a\u137b\7^\2\2\u137b"+
		"\u137c\7I\2\2\u137c\u137d\7P\2\2\u137d\u137e\7\u010f\2\2\u137e\u1383\5"+
		"\u01fe\u0100\2\u137f\u1380\7\u02b2\2\2\u1380\u1382\5\u01fe\u0100\2\u1381"+
		"\u137f\3\2\2\2\u1382\u1385\3\2\2\2\u1383\u1381\3\2\2\2\u1383\u1384\3\2"+
		"\2\2\u1384\u01f3\3\2\2\2\u1385\u1383\3\2\2\2\u1386\u1387\7\u01dc\2\2\u1387"+
		"\u1388\7\u01c7\2\2\u1388\u1389\7\u010f\2\2\u1389\u01f5\3\2\2\2\u138a\u138b"+
		"\7\u0248\2\2\u138b\u01f7\3\2\2\2\u138c\u139b\5\u0248\u0125\2\u138d\u138f"+
		"\5\u0328\u0195\2\u138e\u138d\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u1390\3"+
		"\2\2\2\u1390\u1391\7\u02ae\2\2\u1391\u1396\5\u0272\u013a\2\u1392\u1393"+
		"\7\u02b2\2\2\u1393\u1395\5\u0272\u013a\2\u1394\u1392\3\2\2\2\u1395\u1398"+
		"\3\2\2\2\u1396\u1394\3\2\2\2\u1396\u1397\3\2\2\2\u1397\u1399\3\2\2\2\u1398"+
		"\u1396\3\2\2\2\u1399\u139a\7\u02af\2\2\u139a\u139c\3\2\2\2\u139b\u138e"+
		"\3\2\2\2\u139b\u139c\3\2\2\2\u139c\u01f9\3\2\2\2\u139d\u13b0\7\u0130\2"+
		"\2\u139e\u13b0\7\u0161\2\2\u139f\u13a1\t8\2\2\u13a0\u139f\3\2\2\2\u13a0"+
		"\u13a1\3\2\2\2\u13a1\u13a2\3\2\2\2\u13a2\u13b0\7\u017b\2\2\u13a3\u13b0"+
		"\7\u01af\2\2\u13a4\u13b0\7\u024a\2\2\u13a5\u13a6\7\u01c7\2\2\u13a6\u13b0"+
		"\7\u010f\2\2\u13a7\u13b0\7\u0202\2\2\u13a8\u13b0\7\u021d\2\2\u13a9\u13ad"+
		"\7\u0242\2\2\u13aa\u13ab\7\u00bc\2\2\u13ab\u13ac\7\u0084\2\2\u13ac\u13ae"+
		"\7_\2\2\u13ad\u13aa\3\2\2\2\u13ad\u13ae\3\2\2\2\u13ae\u13b0\3\2\2\2\u13af"+
		"\u139d\3\2\2\2\u13af\u139e\3\2\2\2\u13af\u13a0\3\2\2\2\u13af\u13a3\3\2"+
		"\2\2\u13af\u13a4\3\2\2\2\u13af\u13a5\3\2\2\2\u13af\u13a7\3\2\2\2\u13af"+
		"\u13a8\3\2\2\2\u13af\u13a9\3\2\2\2\u13b0\u13c3\3\2\2\2\u13b1\u13b2\7\u01cd"+
		"\2\2\u13b2\u13b4\7\u017b\2\2\u13b3\u13b5\5\u0158\u00ad\2\u13b4\u13b3\3"+
		"\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u13c3\3\2\2\2\u13b6\u13b7\7\u0242\2\2"+
		"\u13b7\u13bc\5\u0272\u013a\2\u13b8\u13b9\7\u02b2\2\2\u13b9\u13bb\5\u0272"+
		"\u013a\2\u13ba\u13b8\3\2\2\2\u13bb\u13be\3\2\2\2\u13bc\u13ba\3\2\2\2\u13bc"+
		"\u13bd\3\2\2\2\u13bd\u13c0\3\2\2\2\u13be\u13bc\3\2\2\2\u13bf\u13c1\5\u01fc"+
		"\u00ff\2\u13c0\u13bf\3\2\2\2\u13c0\u13c1\3\2\2\2\u13c1\u13c3\3\2\2\2\u13c2"+
		"\u13af\3\2\2\2\u13c2\u13b1\3\2\2\2\u13c2\u13b6\3\2\2\2\u13c3\u01fb\3\2"+
		"\2\2\u13c4\u13c5\7\u00bc\2\2\u13c5\u13c6\7\u0084\2\2\u13c6\u13ca\7_\2"+
		"\2\u13c7\u13c8\7=\2\2\u13c8\u13ca\7\u014a\2\2\u13c9\u13c4\3\2\2\2\u13c9"+
		"\u13c7\3\2\2\2\u13ca\u01fd\3\2\2\2\u13cb\u13da\5\u0248\u0125\2\u13cc\u13cd"+
		"\7|\2\2\u13cd\u13d7\7\u02ae\2\2\u13ce\u13d3\5\u0272\u013a\2\u13cf\u13d0"+
		"\7\u02b2\2\2\u13d0\u13d2\5\u0272\u013a\2\u13d1\u13cf\3\2\2\2\u13d2\u13d5"+
		"\3\2\2\2\u13d3\u13d1\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4\u13d8\3\2\2\2\u13d5"+
		"\u13d3\3\2\2\2\u13d6\u13d8\7\b\2\2\u13d7\u13ce\3\2\2\2\u13d7\u13d6\3\2"+
		"\2\2\u13d8\u13d9\3\2\2\2\u13d9\u13db\7\u02af\2\2\u13da\u13cc\3\2\2\2\u13da"+
		"\u13db\3\2\2\2\u13db\u13ea\3\2\2\2\u13dc\u13de\5\u0328\u0195\2\u13dd\u13dc"+
		"\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u13df\3\2\2\2\u13df\u13e0\7\u02ae\2"+
		"\2\u13e0\u13e5\5\u0272\u013a\2\u13e1\u13e2\7\u02b2\2\2\u13e2\u13e4\5\u0272"+
		"\u013a\2\u13e3\u13e1\3\2\2\2\u13e4\u13e7\3\2\2\2\u13e5\u13e3\3\2\2\2\u13e5"+
		"\u13e6\3\2\2\2\u13e6\u13e8\3\2\2\2\u13e7\u13e5\3\2\2\2\u13e8\u13e9\7\u02af"+
		"\2\2\u13e9\u13eb\3\2\2\2\u13ea\u13dd\3\2\2\2\u13ea\u13eb\3\2\2\2\u13eb"+
		"\u13ee\3\2\2\2\u13ec\u13ed\7G\2\2\u13ed\u13ef\7\u0175\2\2\u13ee\u13ec"+
		"\3\2\2\2\u13ee\u13ef\3\2\2\2\u13ef\u01ff\3\2\2\2\u13f0\u13f1\t9\2\2\u13f1"+
		"\u13f4\5\u0248\u0125\2\u13f2\u13f5\5\u0248\u0125\2\u13f3\u13f5\5\u0272"+
		"\u013a\2\u13f4\u13f2\3\2\2\2\u13f4\u13f3\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5"+
		"\u0201\3\2\2\2\u13f6\u13fa\t9\2\2\u13f7\u13f8\t:\2\2\u13f8\u13f9\7\u02a1"+
		"\2\2\u13f9\u13fb\t;\2\2\u13fa\u13f7\3\2\2\2\u13fa\u13fb\3\2\2\2\u13fb"+
		"\u13fc\3\2\2\2\u13fc\u13fd\5\u0208\u0105\2\u13fd\u0203\3\2\2\2\u13fe\u13ff"+
		"\7\u015f\2\2\u13ff\u1400\5\u0272\u013a\2\u1400\u0205\3\2\2\2\u1401\u1402"+
		"\7\u00b5\2\2\u1402\u1403\5\u0248\u0125\2\u1403\u0207\3\2\2\2\u1404\u140a"+
		"\5\u00b2Z\2\u1405\u140a\5\u0104\u0083\2\u1406\u140a\5\u00f4{\2\u1407\u140a"+
		"\5\u0108\u0085\2\u1408\u140a\5\u00fe\u0080\2\u1409\u1404\3\2\2\2\u1409"+
		"\u1405\3\2\2\2\u1409\u1406\3\2\2\2\u1409\u1407\3\2\2\2\u1409\u1408\3\2"+
		"\2\2\u140a\u140f\3\2\2\2\u140b\u140c\7=\2\2\u140c\u140d\7\u0123\2\2\u140d"+
		"\u140f\5\u0248\u0125\2\u140e\u1409\3\2\2\2\u140e\u140b\3\2\2\2\u140f\u0209"+
		"\3\2\2\2\u1410\u1411\t<\2\2\u1411\u020b\3\2\2\2\u1412\u1413\5\u0272\u013a"+
		"\2\u1413\u1414\7\u0299\2\2\u1414\u1415\5\u0272\u013a\2\u1415\u1416\7\u0299"+
		"\2\2\u1416\u1417\5\u0272\u013a\2\u1417\u1418\7\u0299\2\2\u1418\u1419\5"+
		"\u0272\u013a\2\u1419\u141a\7\u0299\2\2\u141a\u1420\5\u0272\u013a\2\u141b"+
		"\u141c\7\u02b8\2\2\u141c\u141d\5\u0272\u013a\2\u141d\u141e\7\u0299\2\2"+
		"\u141e\u141f\5\u0272\u013a\2\u141f\u1421\3\2\2\2\u1420\u141b\3\2\2\2\u1421"+
		"\u1422\3\2\2\2\u1422\u1420\3\2\2\2\u1422\u1423\3\2\2\2\u1423\u020d\3\2"+
		"\2\2\u1424\u142b\5\u0210\u0109\2\u1425\u1426\7\u02b2\2\2\u1426\u1429\5"+
		"\u0210\u0109\2\u1427\u1428\7\u02b2\2\2\u1428\u142a\5\u0272\u013a\2\u1429"+
		"\u1427\3\2\2\2\u1429\u142a\3\2\2\2\u142a\u142c\3\2\2\2\u142b\u1425\3\2"+
		"\2\2\u142b\u142c\3\2\2\2\u142c\u020f\3\2\2\2\u142d\u1435\5\u0272\u013a"+
		"\2\u142e\u1435\7\u02c6\2\2\u142f\u1431\7\u02c5\2\2\u1430\u142f\3\2\2\2"+
		"\u1431\u1432\3\2\2\2\u1432\u1430\3\2\2\2\u1432\u1433\3\2\2\2\u1433\u1435"+
		"\3\2\2\2\u1434\u142d\3\2\2\2\u1434\u142e\3\2\2\2\u1434\u1430\3\2\2\2\u1435"+
		"\u0211\3\2\2\2\u1436\u1439\5\u0248\u0125\2\u1437\u1439\5\u0272\u013a\2"+
		"\u1438\u1436\3\2\2\2\u1438\u1437\3\2\2\2\u1439\u0213\3\2\2\2\u143a\u143b"+
		"\t=\2\2\u143b\u0215\3\2\2\2\u143c\u143d\7n\2\2\u143d\u143e\5\u0214\u010b"+
		"\2\u143e\u0217\3\2\2\2\u143f\u1441\t>\2\2\u1440\u1442\5\u021a\u010e\2"+
		"\u1441\u1440\3\2\2\2\u1441\u1442\3\2\2\2\u1442\u1454\3\2\2\2\u1443\u1445"+
		"\7\u00d1\2\2\u1444\u1446\5\u021a\u010e\2\u1445\u1444\3\2\2\2\u1445\u1446"+
		"\3\2\2\2\u1446\u1448\3\2\2\2\u1447\u1449\5\u027c\u013f\2\u1448\u1447\3"+
		"\2\2\2\u1448\u1449\3\2\2\2\u1449\u1454\3\2\2\2\u144a\u1454\t?\2\2\u144b"+
		"\u144d\7\u00c9\2\2\u144c\u144e\5\u021c\u010f\2\u144d\u144c\3\2\2\2\u144d"+
		"\u144e\3\2\2\2\u144e\u1454\3\2\2\2\u144f\u1451\t@\2\2\u1450\u1452\7\u00c4"+
		"\2\2\u1451\u1450\3\2\2\2\u1451\u1452\3\2\2\2\u1452\u1454\3\2\2\2\u1453"+
		"\u143f\3\2\2\2\u1453\u1443\3\2\2\2\u1453\u144a\3\2\2\2\u1453\u144b\3\2"+
		"\2\2\u1453\u144f\3\2\2\2\u1454\u0219\3\2\2\2\u1455\u1456\7\u02ae\2\2\u1456"+
		"\u1457\5\u0272\u013a\2\u1457\u1458\7\u02af\2\2\u1458\u021b\3\2\2\2\u1459"+
		"\u145a\7\u02ae\2\2\u145a\u145b\5\u0272\u013a\2\u145b\u145c\7\u02b2\2\2"+
		"\u145c\u145d\5\u0272\u013a\2\u145d\u145e\7\u02af\2\2\u145e\u021d\3\2\2"+
		"\2\u145f\u1460\7\u02ae\2\2\u1460\u1463\5\u0272\u013a\2\u1461\u1462\7\u02b2"+
		"\2\2\u1462\u1464\5\u0272\u013a\2\u1463\u1461\3\2\2\2\u1463\u1464\3\2\2"+
		"\2\u1464\u1465\3\2\2\2\u1465\u1466\7\u02af\2\2\u1466\u021f\3\2\2\2\u1467"+
		"\u146c\5\u0272\u013a\2\u1468\u1469\7\u02b2\2\2\u1469\u146b\5\u0272\u013a"+
		"\2\u146a\u1468\3\2\2\2\u146b\u146e\3\2\2\2\u146c\u146a\3\2\2\2\u146c\u146d"+
		"\3\2\2\2\u146d\u0221\3\2\2\2\u146e\u146c\3\2\2\2\u146f\u1474\7\u02d7\2"+
		"\2\u1470\u1471\7\u02b2\2\2\u1471\u1473\7\u02d7\2\2\u1472\u1470\3\2\2\2"+
		"\u1473\u1476\3\2\2\2\u1474\u1472\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u0223"+
		"\3\2\2\2\u1476\u1474\3\2\2\2\u1477\u1478\7\u0177\2\2\u1478\u147d\5\u0226"+
		"\u0114\2\u1479\u147a\7\u02b2\2\2\u147a\u147c\5\u0226\u0114\2\u147b\u1479"+
		"\3\2\2\2\u147c\u147f\3\2\2\2\u147d\u147b\3\2\2\2\u147d\u147e\3\2\2\2\u147e"+
		"\u1486\3\2\2\2\u147f\u147d\3\2\2\2\u1480\u1481\7\u0177\2\2\u1481\u1482"+
		"\5\u0272\u013a\2\u1482\u1483\7\u0299\2\2\u1483\u1484\5\u0272\u013a\2\u1484"+
		"\u1486\3\2\2\2\u1485\u1477\3\2\2\2\u1485\u1480\3\2\2\2\u1486\u0225\3\2"+
		"\2\2\u1487\u1489\5\u0272\u013a\2\u1488\u148a\tA\2\2\u1489\u1488\3\2\2"+
		"\2\u1489\u148a\3\2\2\2\u148a\u0227\3\2\2\2\u148b\u148c\tB\2\2\u148c\u148e"+
		"\7\u02ae\2\2\u148d\u148f\t\24\2\2\u148e\u148d\3\2\2\2\u148e\u148f\3\2"+
		"\2\2\u148f\u1490\3\2\2\2\u1490\u1495\5\u0272\u013a\2\u1491\u1492\7\u02b2"+
		"\2\2\u1492\u1494\5\u0272\u013a\2\u1493\u1491\3\2\2\2\u1494\u1497\3\2\2"+
		"\2\u1495\u1493\3\2\2\2\u1495\u1496\3\2\2\2\u1496\u1498\3\2\2\2\u1497\u1495"+
		"\3\2\2\2\u1498\u1499\7\u02af\2\2\u1499\u14de\3\2\2\2\u149a\u149b\7\u00e2"+
		"\2\2\u149b\u14a8\7\u02ae\2\2\u149c\u14a9\7\u029a\2\2\u149d\u149f\7\b\2"+
		"\2\u149e\u149d\3\2\2\2\u149e\u149f\3\2\2\2\u149f\u14a0\3\2\2\2\u14a0\u14a5"+
		"\5\u0272\u013a\2\u14a1\u14a2\7\u02b2\2\2\u14a2\u14a4\5\u0272\u013a\2\u14a3"+
		"\u14a1\3\2\2\2\u14a4\u14a7\3\2\2\2\u14a5\u14a3\3\2\2\2\u14a5\u14a6\3\2"+
		"\2\2\u14a6\u14a9\3\2\2\2\u14a7\u14a5\3\2\2\2\u14a8\u149c\3\2\2\2\u14a8"+
		"\u149e\3\2\2\2\u14a9\u14aa\3\2\2\2\u14aa\u14de\7\u02af\2\2\u14ab\u14ac"+
		"\7\u00e2\2\2\u14ac\u14ad\7\u02ae\2\2\u14ad\u14ae\7/\2\2\u14ae\u14b3\5"+
		"\u0272\u013a\2\u14af\u14b0\7\u02b2\2\2\u14b0\u14b2\5\u0272\u013a\2\u14b1"+
		"\u14af\3\2\2\2\u14b2\u14b5\3\2\2\2\u14b3\u14b1\3\2\2\2\u14b3\u14b4\3\2"+
		"\2\2\u14b4\u14b6\3\2\2\2\u14b5\u14b3\3\2\2\2\u14b6\u14b7\7\u02af\2\2\u14b7"+
		"\u14de\3\2\2\2\u14b8\u14b9\tC\2\2\u14b9\u14bb\7\u02ae\2\2\u14ba\u14bc"+
		"\7\b\2\2\u14bb\u14ba\3\2\2\2\u14bb\u14bc\3\2\2\2\u14bc\u14bd\3\2\2\2\u14bd"+
		"\u14c2\5\u0272\u013a\2\u14be\u14bf\7\u02b2\2\2\u14bf\u14c1\5\u0272\u013a"+
		"\2\u14c0\u14be\3\2\2\2\u14c1\u14c4\3\2\2\2\u14c2\u14c0\3\2\2\2\u14c2\u14c3"+
		"\3\2\2\2\u14c3\u14c5\3\2\2\2\u14c4\u14c2\3\2\2\2\u14c5\u14c6\7\u02af\2"+
		"\2\u14c6\u14de\3\2\2\2\u14c7\u14c8\7\u00e3\2\2\u14c8\u14ca\7\u02ae\2\2"+
		"\u14c9\u14cb\7/\2\2\u14ca\u14c9\3\2\2\2\u14ca\u14cb\3\2\2\2\u14cb\u14cc"+
		"\3\2\2\2\u14cc\u14d1\5\u0272\u013a\2\u14cd\u14ce\7\u02b2\2\2\u14ce\u14d0"+
		"\5\u0272\u013a\2\u14cf\u14cd\3\2\2\2\u14d0\u14d3\3\2\2\2\u14d1\u14cf\3"+
		"\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u14d5\3\2\2\2\u14d3\u14d1\3\2\2\2\u14d4"+
		"\u14d6\5\u00e4s\2\u14d5\u14d4\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u14d9"+
		"\3\2\2\2\u14d7\u14d8\7\u0097\2\2\u14d8\u14da\5\u0272\u013a\2\u14d9\u14d7"+
		"\3\2\2\2\u14d9\u14da\3\2\2\2\u14da\u14db\3\2\2\2\u14db\u14dc\7\u02af\2"+
		"\2\u14dc\u14de\3\2\2\2\u14dd\u148b\3\2\2\2\u14dd\u149a\3\2\2\2\u14dd\u14ab"+
		"\3\2\2\2\u14dd\u14b8\3\2\2\2\u14dd\u14c7\3\2\2\2\u14de\u0229\3\2\2\2\u14df"+
		"\u14e0\tD\2\2\u14e0\u022b\3\2\2\2\u14e1\u14e2\tE\2\2\u14e2\u022d\3\2\2"+
		"\2\u14e3\u14e4\tF\2\2\u14e4\u022f\3\2\2\2\u14e5\u14e6\tG\2\2\u14e6\u0231"+
		"\3\2\2\2\u14e7\u14e8\tH\2\2\u14e8\u0233\3\2\2\2\u14e9\u14f8\5\u022a\u0116"+
		"\2\u14ea\u14f8\5\u022c\u0117\2\u14eb\u14f8\5\u020a\u0106\2\u14ec\u14f8"+
		"\5\u022e\u0118\2\u14ed\u14f8\5\u0230\u0119\2\u14ee\u14f8\5\u0232\u011a"+
		"\2\u14ef\u14f8\7N\2\2\u14f0\u14f8\7Y\2\2\u14f1\u14f8\7\u028c\2\2\u14f2"+
		"\u14f8\7\u008b\2\2\u14f3\u14f8\7\u028d\2\2\u14f4\u14f8\7\u0091\2\2\u14f5"+
		"\u14f8\7\u00f5\2\2\u14f6\u14f8\7\u00f6\2\2\u14f7\u14e9\3\2\2\2\u14f7\u14ea"+
		"\3\2\2\2\u14f7\u14eb\3\2\2\2\u14f7\u14ec\3\2\2\2\u14f7\u14ed\3\2\2\2\u14f7"+
		"\u14ee\3\2\2\2\u14f7\u14ef\3\2\2\2\u14f7\u14f0\3\2\2\2\u14f7\u14f1\3\2"+
		"\2\2\u14f7\u14f2\3\2\2\2\u14f7\u14f3\3\2\2\2\u14f7\u14f4\3\2\2\2\u14f7"+
		"\u14f5\3\2\2\2\u14f7\u14f6\3\2\2\2\u14f8\u0235\3\2\2\2\u14f9\u1501\5\u023a"+
		"\u011e\2\u14fa\u1501\5\u0238\u011d\2\u14fb\u1501\5\u023c\u011f\2\u14fc"+
		"\u1501\5\u023e\u0120\2\u14fd\u1501\5\u0240\u0121\2\u14fe\u1501\5\u0242"+
		"\u0122\2\u14ff\u1501\5\u0244\u0123\2\u1500\u14f9\3\2\2\2\u1500\u14fa\3"+
		"\2\2\2\u1500\u14fb\3\2\2\2\u1500\u14fc\3\2\2\2\u1500\u14fd\3\2\2\2\u1500"+
		"\u14fe\3\2\2\2\u1500\u14ff\3\2\2\2\u1501\u0237\3\2\2\2\u1502\u1507\7\u010a"+
		"\2\2\u1503\u1504\7\u02ae\2\2\u1504\u1505\5\u0272\u013a\2\u1505\u1506\7"+
		"\u02af\2\2\u1506\u1508\3\2\2\2\u1507\u1503\3\2\2\2\u1507\u1508\3\2\2\2"+
		"\u1508\u15ed\3\2\2\2\u1509\u150e\7\u00c0\2\2\u150a\u150b\7\u02ae\2\2\u150b"+
		"\u150c\5\u0272\u013a\2\u150c\u150d\7\u02af\2\2\u150d\u150f\3\2\2\2\u150e"+
		"\u150a\3\2\2\2\u150e\u150f\3\2\2\2\u150f\u1511\3\2\2\2\u1510\u1512\7\u00b2"+
		"\2\2\u1511\u1510\3\2\2\2\u1511\u1512\3\2\2\2\u1512\u1514\3\2\2\2\u1513"+
		"\u1515\7\u00bf\2\2\u1514\u1513\3\2\2\2\u1514\u1515\3\2\2\2\u1515\u15ed"+
		"\3\2\2\2\u1516\u151b\7\u00c1\2\2\u1517\u1518\7\u02ae\2\2\u1518\u1519\5"+
		"\u0272\u013a\2\u1519\u151a\7\u02af\2\2\u151a\u151c\3\2\2\2\u151b\u1517"+
		"\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u151e\3\2\2\2\u151d\u151f\7\u00b2\2"+
		"\2\u151e\u151d\3\2\2\2\u151e\u151f\3\2\2\2\u151f\u1521\3\2\2\2\u1520\u1522"+
		"\7\u00bf\2\2\u1521\u1520\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u15ed\3\2\2"+
		"\2\u1523\u1528\7\u00c2\2\2\u1524\u1525\7\u02ae\2\2\u1525\u1526\5\u0272"+
		"\u013a\2\u1526\u1527\7\u02af\2\2\u1527\u1529\3\2\2\2\u1528\u1524\3\2\2"+
		"\2\u1528\u1529\3\2\2\2\u1529\u152b\3\2\2\2\u152a\u152c\7\u00b2\2\2\u152b"+
		"\u152a\3\2\2\2\u152b\u152c\3\2\2\2\u152c\u152e\3\2\2\2\u152d\u152f\7\u00bf"+
		"\2\2\u152e\u152d\3\2\2\2\u152e\u152f\3\2\2\2\u152f\u15ed\3\2\2\2\u1530"+
		"\u1535\7\u00c3\2\2\u1531\u1532\7\u02ae\2\2\u1532\u1533\5\u0272\u013a\2"+
		"\u1533\u1534\7\u02af\2\2\u1534\u1536\3\2\2\2\u1535\u1531\3\2\2\2\u1535"+
		"\u1536\3\2\2\2\u1536\u1538\3\2\2\2\u1537\u1539\7\u00b2\2\2\u1538\u1537"+
		"\3\2\2\2\u1538\u1539\3\2\2\2\u1539\u153b\3\2\2\2\u153a\u153c\7\u00bf\2"+
		"\2\u153b\u153a\3\2\2\2\u153b\u153c\3\2\2\2\u153c\u15ed\3\2\2\2\u153d\u1542"+
		"\7\u00c4\2\2\u153e\u153f\7\u02ae\2\2\u153f\u1540\5\u0272\u013a\2\u1540"+
		"\u1541\7\u02af\2\2\u1541\u1543\3\2\2\2\u1542\u153e\3\2\2\2\u1542\u1543"+
		"\3\2\2\2\u1543\u1545\3\2\2\2\u1544\u1546\7\u00b2\2\2\u1545\u1544\3\2\2"+
		"\2\u1545\u1546\3\2\2\2\u1546\u1548\3\2\2\2\u1547\u1549\7\u00bf\2\2\u1548"+
		"\u1547\3\2\2\2\u1548\u1549\3\2\2\2\u1549\u15ed\3\2\2\2\u154a\u154f\7\u00c5"+
		"\2\2\u154b\u154c\7\u02ae\2\2\u154c\u154d\5\u0272\u013a\2\u154d\u154e\7"+
		"\u02af\2\2\u154e\u1550\3\2\2\2\u154f\u154b\3\2\2\2\u154f\u1550\3\2\2\2"+
		"\u1550\u1552\3\2\2\2\u1551\u1553\7\u00b2\2\2\u1552\u1551\3\2\2\2\u1552"+
		"\u1553\3\2\2\2\u1553\u1555\3\2\2\2\u1554\u1556\7\u00bf\2\2\u1555\u1554"+
		"\3\2\2\2\u1555\u1556\3\2\2\2\u1556\u15ed\3\2\2\2\u1557\u1560\7\u00c9\2"+
		"\2\u1558\u1559\7\u02ae\2\2\u1559\u155c\5\u0272\u013a\2\u155a\u155b\7\u02b2"+
		"\2\2\u155b\u155d\5\u0272\u013a\2\u155c\u155a\3\2\2\2\u155c\u155d\3\2\2"+
		"\2\u155d\u155e\3\2\2\2\u155e\u155f\7\u02af\2\2\u155f\u1561\3\2\2\2\u1560"+
		"\u1558\3\2\2\2\u1560\u1561\3\2\2\2\u1561\u1563\3\2\2\2\u1562\u1564\7\u00b2"+
		"\2\2\u1563\u1562\3\2\2\2\u1563\u1564\3\2\2\2\u1564\u1566\3\2\2\2\u1565"+
		"\u1567\7\u00bf\2\2\u1566\u1565\3\2\2\2\u1566\u1567\3\2\2\2\u1567\u15ed"+
		"\3\2\2\2\u1568\u1571\7\u00ca\2\2\u1569\u156a\7\u02ae\2\2\u156a\u156d\5"+
		"\u0272\u013a\2\u156b\u156c\7\u02b2\2\2\u156c\u156e\5\u0272\u013a\2\u156d"+
		"\u156b\3\2\2\2\u156d\u156e\3\2\2\2\u156e\u156f\3\2\2\2\u156f\u1570\7\u02af"+
		"\2\2\u1570\u1572\3\2\2\2\u1571\u1569\3\2\2\2\u1571\u1572\3\2\2\2\u1572"+
		"\u1574\3\2\2\2\u1573\u1575\7\u00b2\2\2\u1574\u1573\3\2\2\2\u1574\u1575"+
		"\3\2\2\2\u1575\u1577\3\2\2\2\u1576\u1578\7\u00bf\2\2\u1577\u1576\3\2\2"+
		"\2\u1577\u1578\3\2\2\2\u1578\u15ed\3\2\2\2\u1579\u1582\7\u00cb\2\2\u157a"+
		"\u157b\7\u02ae\2\2\u157b\u157e\5\u0272\u013a\2\u157c\u157d\7\u02b2\2\2"+
		"\u157d\u157f\5\u0272\u013a\2\u157e\u157c\3\2\2\2\u157e\u157f\3\2\2\2\u157f"+
		"\u1580\3\2\2\2\u1580\u1581\7\u02af\2\2\u1581\u1583\3\2\2\2\u1582\u157a"+
		"\3\2\2\2\u1582\u1583\3\2\2\2\u1583\u1585\3\2\2\2\u1584\u1586\7\u00b2\2"+
		"\2\u1585\u1584\3\2\2\2\u1585\u1586\3\2\2\2\u1586\u1588\3\2\2\2\u1587\u1589"+
		"\7\u00bf\2\2\u1588\u1587\3\2\2\2\u1588\u1589\3\2\2\2\u1589\u15ed\3\2\2"+
		"\2\u158a\u1593\7\u0153\2\2\u158b\u158c\7\u02ae\2\2\u158c\u158f\5\u0272"+
		"\u013a\2\u158d\u158e\7\u02b2\2\2\u158e\u1590\5\u0272\u013a\2\u158f\u158d"+
		"\3\2\2\2\u158f\u1590\3\2\2\2\u1590\u1591\3\2\2\2\u1591\u1592\7\u02af\2"+
		"\2\u1592\u1594\3\2\2\2\u1593\u158b\3\2\2\2\u1593\u1594\3\2\2\2\u1594\u1596"+
		"\3\2\2\2\u1595\u1597\7\u00b2\2\2\u1596\u1595\3\2\2\2\u1596\u1597\3\2\2"+
		"\2\u1597\u1599\3\2\2\2\u1598\u159a\7\u00bf\2\2\u1599\u1598\3\2\2\2\u1599"+
		"\u159a\3\2\2\2\u159a\u15ed\3\2\2\2\u159b\u15a7\7\u00c8\2\2\u159c\u159d"+
		"\7\u02ae\2\2\u159d\u15a2\5\u0272\u013a\2\u159e\u159f\7\u02b2\2\2\u159f"+
		"\u15a1\5\u0272\u013a\2\u15a0\u159e\3\2\2\2\u15a1\u15a4\3\2\2\2\u15a2\u15a0"+
		"\3\2\2\2\u15a2\u15a3\3\2\2\2\u15a3\u15a5\3\2\2\2\u15a4\u15a2\3\2\2\2\u15a5"+
		"\u15a6\7\u02af\2\2\u15a6\u15a8\3\2\2\2\u15a7\u159c\3\2\2\2\u15a7\u15a8"+
		"\3\2\2\2\u15a8\u15aa\3\2\2\2\u15a9\u15ab\7\u00b2\2\2\u15aa\u15a9\3\2\2"+
		"\2\u15aa\u15ab\3\2\2\2\u15ab\u15ad\3\2\2\2\u15ac\u15ae\7\u00bf\2\2\u15ad"+
		"\u15ac\3\2\2\2\u15ad\u15ae\3\2\2\2\u15ae\u15ed\3\2\2\2\u15af\u15bb\7\u00c7"+
		"\2\2\u15b0\u15b1\7\u02ae\2\2\u15b1\u15b6\5\u0272\u013a\2\u15b2\u15b3\7"+
		"\u02b2\2\2\u15b3\u15b5\5\u0272\u013a\2\u15b4\u15b2\3\2\2\2\u15b5\u15b8"+
		"\3\2\2\2\u15b6\u15b4\3\2\2\2\u15b6\u15b7\3\2\2\2\u15b7\u15b9\3\2\2\2\u15b8"+
		"\u15b6\3\2\2\2\u15b9\u15ba\7\u02af\2\2\u15ba\u15bc\3\2\2\2\u15bb\u15b0"+
		"\3\2\2\2\u15bb\u15bc\3\2\2\2\u15bc\u15be\3\2\2\2\u15bd\u15bf\7\u00b2\2"+
		"\2\u15be\u15bd\3\2\2\2\u15be\u15bf\3\2\2\2\u15bf\u15c1\3\2\2\2\u15c0\u15c2"+
		"\7\u00bf\2\2\u15c1\u15c0\3\2\2\2\u15c1\u15c2\3\2\2\2\u15c2\u15ed\3\2\2"+
		"\2\u15c3\u15c4\7\u00c7\2\2\u15c4\u15d0\7\u01bf\2\2\u15c5\u15c6\7\u02ae"+
		"\2\2\u15c6\u15cb\5\u0272\u013a\2\u15c7\u15c8\7\u02b2\2\2\u15c8\u15ca\5"+
		"\u0272\u013a\2\u15c9\u15c7\3\2\2\2\u15ca\u15cd\3\2\2\2\u15cb\u15c9\3\2"+
		"\2\2\u15cb\u15cc\3\2\2\2\u15cc\u15ce\3\2\2\2\u15cd\u15cb\3\2\2\2\u15ce"+
		"\u15cf\7\u02af\2\2\u15cf\u15d1\3\2\2\2\u15d0\u15c5\3\2\2\2\u15d0\u15d1"+
		"\3\2\2\2\u15d1\u15d3\3\2\2\2\u15d2\u15d4\7\u00b2\2\2\u15d3\u15d2\3\2\2"+
		"\2\u15d3\u15d4\3\2\2\2\u15d4\u15d6\3\2\2\2\u15d5\u15d7\7\u00bf\2\2\u15d6"+
		"\u15d5\3\2\2\2\u15d6\u15d7\3\2\2\2\u15d7\u15ed\3\2\2\2\u15d8\u15e4\7\u00c6"+
		"\2\2\u15d9\u15da\7\u02ae\2\2\u15da\u15df\5\u0272\u013a\2\u15db\u15dc\7"+
		"\u02b2\2\2\u15dc\u15de\5\u0272\u013a\2\u15dd\u15db\3\2\2\2\u15de\u15e1"+
		"\3\2\2\2\u15df\u15dd\3\2\2\2\u15df\u15e0\3\2\2\2\u15e0\u15e2\3\2\2\2\u15e1"+
		"\u15df\3\2\2\2\u15e2\u15e3\7\u02af\2\2\u15e3\u15e5\3\2\2\2\u15e4\u15d9"+
		"\3\2\2\2\u15e4\u15e5\3\2\2\2\u15e5\u15e7\3\2\2\2\u15e6\u15e8\7\u00b2\2"+
		"\2\u15e7\u15e6\3\2\2\2\u15e7\u15e8\3\2\2\2\u15e8\u15ea\3\2\2\2\u15e9\u15eb"+
		"\7\u00bf\2\2\u15ea\u15e9\3\2\2\2\u15ea\u15eb\3\2\2\2\u15eb\u15ed\3\2\2"+
		"\2\u15ec\u1502\3\2\2\2\u15ec\u1509\3\2\2\2\u15ec\u1516\3\2\2\2\u15ec\u1523"+
		"\3\2\2\2\u15ec\u1530\3\2\2\2\u15ec\u153d\3\2\2\2\u15ec\u154a\3\2\2\2\u15ec"+
		"\u1557\3\2\2\2\u15ec\u1568\3\2\2\2\u15ec\u1579\3\2\2\2\u15ec\u158a\3\2"+
		"\2\2\u15ec\u159b\3\2\2\2\u15ec\u15af\3\2\2\2\u15ec\u15c3\3\2\2\2\u15ec"+
		"\u15d8\3\2\2\2\u15ed\u0239\3\2\2\2\u15ee\u15f3\7\u00d1\2\2\u15ef\u15f0"+
		"\7\u02ae\2\2\u15f0\u15f1\5\u0272\u013a\2\u15f1\u15f2\7\u02af\2\2\u15f2"+
		"\u15f4\3\2\2\2\u15f3\u15ef\3\2\2\2\u15f3\u15f4\3\2\2\2\u15f4\u15f6\3\2"+
		"\2\2\u15f5\u15f7\5\u027c\u013f\2\u15f6\u15f5\3\2\2\2\u15f6\u15f7\3\2\2"+
		"\2\u15f7\u15f9\3\2\2\2\u15f8\u15fa\5\u0282\u0142\2\u15f9\u15f8\3\2\2\2"+
		"\u15f9\u15fa\3\2\2\2\u15fa\u1687\3\2\2\2\u15fb\u15fc\7j\2\2\u15fc\u1601"+
		"\7\u00d1\2\2\u15fd\u15fe\7\u02ae\2\2\u15fe\u15ff\5\u0272\u013a\2\u15ff"+
		"\u1600\7\u02af\2\2\u1600\u1602\3\2\2\2\u1601\u15fd\3\2\2\2\u1601\u1602"+
		"\3\2\2\2\u1602\u1604\3\2\2\2\u1603\u1605\5\u027c\u013f\2\u1604\u1603\3"+
		"\2\2\2\u1604\u1605\3\2\2\2\u1605\u1607\3\2\2\2\u1606\u1608\5\u0282\u0142"+
		"\2\u1607\u1606\3\2\2\2\u1607\u1608\3\2\2\2\u1608\u1687\3\2\2\2\u1609\u160e"+
		"\7\u00d2\2\2\u160a\u160b\7\u02ae\2\2\u160b\u160c\5\u0272\u013a\2\u160c"+
		"\u160d\7\u02af\2\2\u160d\u160f\3\2\2\2\u160e\u160a\3\2\2\2\u160e\u160f"+
		"\3\2\2\2\u160f\u1611\3\2\2\2\u1610\u1612\5\u027c\u013f\2\u1611\u1610\3"+
		"\2\2\2\u1611\u1612\3\2\2\2\u1612\u1614\3\2\2\2\u1613\u1615\5\u0282\u0142"+
		"\2\u1614\u1613\3\2\2\2\u1614\u1615\3\2\2\2\u1615\u1687\3\2\2\2\u1616\u1617"+
		"\7j\2\2\u1617\u161c\7\u00d2\2\2\u1618\u1619\7\u02ae\2\2\u1619\u161a\5"+
		"\u0272\u013a\2\u161a\u161b\7\u02af\2\2\u161b\u161d\3\2\2\2\u161c\u1618"+
		"\3\2\2\2\u161c\u161d\3\2\2\2\u161d\u161f\3\2\2\2\u161e\u1620\5\u027c\u013f"+
		"\2\u161f\u161e\3\2\2\2\u161f\u1620\3\2\2\2\u1620\u1622\3\2\2\2\u1621\u1623"+
		"\5\u0282\u0142\2\u1622\u1621\3\2\2\2\u1622\u1623\3\2\2\2\u1623\u1687\3"+
		"\2\2\2\u1624\u1629\7\u00d3\2\2\u1625\u1626\7\u02ae\2\2\u1626\u1627\5\u0272"+
		"\u013a\2\u1627\u1628\7\u02af\2\2\u1628\u162a\3\2\2\2\u1629\u1625\3\2\2"+
		"\2\u1629\u162a\3\2\2\2\u162a\u1687\3\2\2\2\u162b\u1630\7\u00d4\2\2\u162c"+
		"\u162d\7\u02ae\2\2\u162d\u162e\5\u0272\u013a\2\u162e\u162f\7\u02af\2\2"+
		"\u162f\u1631\3\2\2\2\u1630\u162c\3\2\2\2\u1630\u1631\3\2\2\2\u1631\u1687"+
		"\3\2\2\2\u1632\u1687\7\u00d5\2\2\u1633\u1635\7\u00d9\2\2\u1634\u1636\5"+
		"\u027c\u013f\2\u1635\u1634\3\2\2\2\u1635\u1636\3\2\2\2\u1636\u1638\3\2"+
		"\2\2\u1637\u1639\5\u0282\u0142\2\u1638\u1637\3\2\2\2\u1638\u1639\3\2\2"+
		"\2\u1639\u1687\3\2\2\2\u163a\u163f\7\u00d6\2\2\u163b\u163c\7\u02ae\2\2"+
		"\u163c\u163d\5\u0272\u013a\2\u163d\u163e\7\u02af\2\2\u163e\u1640\3\2\2"+
		"\2\u163f\u163b\3\2\2\2\u163f\u1640\3\2\2\2\u1640\u1687\3\2\2\2\u1641\u1646"+
		"\7\u00da\2\2\u1642\u1643\7\u02ae\2\2\u1643\u1644\5\u0272\u013a\2\u1644"+
		"\u1645\7\u02af\2\2\u1645\u1647\3\2\2\2\u1646\u1642\3\2\2\2\u1646\u1647"+
		"\3\2\2\2\u1647\u1649\3\2\2\2\u1648\u164a\5\u027c\u013f\2\u1649\u1648\3"+
		"\2\2\2\u1649\u164a\3\2\2\2\u164a\u164c\3\2\2\2\u164b\u164d\5\u0282\u0142"+
		"\2\u164c\u164b\3\2\2\2\u164c\u164d\3\2\2\2\u164d\u1687\3\2\2\2\u164e\u1687"+
		"\7\u00d7\2\2\u164f\u1651\7\u00db\2\2\u1650\u1652\5\u027c\u013f\2\u1651"+
		"\u1650\3\2\2\2\u1651\u1652\3\2\2\2\u1652\u1654\3\2\2\2\u1653\u1655\5\u0282"+
		"\u0142\2\u1654\u1653\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u1687\3\2\2\2\u1656"+
		"\u1687\7\u00d8\2\2\u1657\u1659\7\u00dc\2\2\u1658\u165a\5\u027c\u013f\2"+
		"\u1659\u1658\3\2\2\2\u1659\u165a\3\2\2\2\u165a\u165c\3\2\2\2\u165b\u165d"+
		"\5\u0282\u0142\2\u165c\u165b\3\2\2\2\u165c\u165d\3\2\2\2\u165d\u1687\3"+
		"\2\2\2\u165e\u166a\7\u00dd\2\2\u165f\u1660\7\u02ae\2\2\u1660\u1665\5\u0272"+
		"\u013a\2\u1661\u1662\7\u02b2\2\2\u1662\u1664\5\u0272\u013a\2\u1663\u1661"+
		"\3\2\2\2\u1664\u1667\3\2\2\2\u1665\u1663\3\2\2\2\u1665\u1666\3\2\2\2\u1666"+
		"\u1668\3\2\2\2\u1667\u1665\3\2\2\2\u1668\u1669\7\u02af\2\2\u1669\u166b"+
		"\3\2\2\2\u166a\u165f\3\2\2\2\u166a\u166b\3\2\2\2\u166b\u166d\3\2\2\2\u166c"+
		"\u166e\5\u027c\u013f\2\u166d\u166c\3\2\2\2\u166d\u166e\3\2\2\2\u166e\u1670"+
		"\3\2\2\2\u166f\u1671\5\u0282\u0142\2\u1670\u166f\3\2\2\2\u1670\u1671\3"+
		"\2\2\2\u1671\u1687\3\2\2\2\u1672\u167e\7\u0096\2\2\u1673\u1674\7\u02ae"+
		"\2\2\u1674\u1679\5\u0272\u013a\2\u1675\u1676\7\u02b2\2\2\u1676\u1678\5"+
		"\u0272\u013a\2\u1677\u1675\3\2\2\2\u1678\u167b\3\2\2\2\u1679\u1677\3\2"+
		"\2\2\u1679\u167a\3\2\2\2\u167a\u167c\3\2\2\2\u167b\u1679\3\2\2\2\u167c"+
		"\u167d\7\u02af\2\2\u167d\u167f\3\2\2\2\u167e\u1673\3\2\2\2\u167e\u167f"+
		"\3\2\2\2\u167f\u1681\3\2\2\2\u1680\u1682\5\u027c\u013f\2\u1681\u1680\3"+
		"\2\2\2\u1681\u1682\3\2\2\2\u1682\u1684\3\2\2\2\u1683\u1685\5\u0282\u0142"+
		"\2\u1684\u1683\3\2\2\2\u1684\u1685\3\2\2\2\u1685\u1687\3\2\2\2\u1686\u15ee"+
		"\3\2\2\2\u1686\u15fb\3\2\2\2\u1686\u1609\3\2\2\2\u1686\u1616\3\2\2\2\u1686"+
		"\u1624\3\2\2\2\u1686\u162b\3\2\2\2\u1686\u1632\3\2\2\2\u1686\u1633\3\2"+
		"\2\2\u1686\u163a\3\2\2\2\u1686\u1641\3\2\2\2\u1686\u164e\3\2\2\2\u1686"+
		"\u164f\3\2\2\2\u1686\u1656\3\2\2\2\u1686\u1657\3\2\2\2\u1686\u165e\3\2"+
		"\2\2\u1686\u1672\3\2\2\2\u1687\u023b\3\2\2\2\u1688\u16a6\7\u00cc\2\2\u1689"+
		"\u168e\7\u00cf\2\2\u168a\u168b\7\u02ae\2\2\u168b\u168c\5\u0272\u013a\2"+
		"\u168c\u168d\7\u02af\2\2\u168d\u168f\3\2\2\2\u168e\u168a\3\2\2\2\u168e"+
		"\u168f\3\2\2\2\u168f\u16a6\3\2\2\2\u1690\u1695\7\u00ce\2\2\u1691\u1692"+
		"\7\u02ae\2\2\u1692\u1693\5\u0272\u013a\2\u1693\u1694\7\u02af\2\2\u1694"+
		"\u1696\3\2\2\2\u1695\u1691\3\2\2\2\u1695\u1696\3\2\2\2\u1696\u16a6\3\2"+
		"\2\2\u1697\u169c\7\u00cd\2\2\u1698\u1699\7\u02ae\2\2\u1699\u169a\5\u0272"+
		"\u013a\2\u169a\u169b\7\u02af\2\2\u169b\u169d\3\2\2\2\u169c\u1698\3\2\2"+
		"\2\u169c\u169d\3\2\2\2\u169d\u16a6\3\2\2\2\u169e\u16a3\7\u00d0\2\2\u169f"+
		"\u16a0\7\u02ae\2\2\u16a0\u16a1\5\u0272\u013a\2\u16a1\u16a2\7\u02af\2\2"+
		"\u16a2\u16a4\3\2\2\2\u16a3\u169f\3\2\2\2\u16a3\u16a4\3\2\2\2\u16a4\u16a6"+
		"\3\2\2\2\u16a5\u1688\3\2\2\2\u16a5\u1689\3\2\2\2\u16a5\u1690\3\2\2\2\u16a5"+
		"\u1697\3\2\2\2\u16a5\u169e\3\2\2\2\u16a6\u023d\3\2\2\2\u16a7\u16b0\7\u0282"+
		"\2\2\u16a8\u16b0\7\u0288\2\2\u16a9\u16b0\7\u0284\2\2\u16aa\u16b0\7\u0289"+
		"\2\2\u16ab\u16b0\7\u0286\2\2\u16ac\u16b0\7\u0285\2\2\u16ad\u16b0\7\u0287"+
		"\2\2\u16ae\u16b0\7\u0283\2\2\u16af\u16a7\3\2\2\2\u16af\u16a8\3\2\2\2\u16af"+
		"\u16a9\3\2\2\2\u16af\u16aa\3\2\2\2\u16af\u16ab\3\2\2\2\u16af\u16ac\3\2"+
		"\2\2\u16af\u16ad\3\2\2\2\u16af\u16ae\3\2\2\2\u16b0\u023f\3\2\2\2\u16b1"+
		"\u16b4\7\u010c\2\2\u16b2\u16b4\7\u010d\2\2\u16b3\u16b1\3\2\2\2\u16b3\u16b2"+
		"\3\2\2\2\u16b4\u0241\3\2\2\2\u16b5\u16b6\7\u0171\2\2\u16b6\u0243\3\2\2"+
		"\2\u16b7\u16c4\5\u0248\u0125\2\u16b8\u16ba\7\u02ae\2\2\u16b9\u16bb\5\u0272"+
		"\u013a\2\u16ba\u16b9\3\2\2\2\u16ba\u16bb\3\2\2\2\u16bb\u16c0\3\2\2\2\u16bc"+
		"\u16bd\7\u02b2\2\2\u16bd\u16bf\5\u0272\u013a\2\u16be\u16bc\3\2\2\2\u16bf"+
		"\u16c2\3\2\2\2\u16c0\u16be\3\2\2\2\u16c0\u16c1\3\2\2\2\u16c1\u16c3\3\2"+
		"\2\2\u16c2\u16c0\3\2\2\2\u16c3\u16c5\7\u02af\2\2\u16c4\u16b8\3\2\2\2\u16c4"+
		"\u16c5\3\2\2\2\u16c5\u0245\3\2\2\2\u16c6\u16cd\7\u029a\2\2\u16c7\u16cd"+
		"\7\u02bd\2\2\u16c8\u16cd\5\u0234\u011b\2\u16c9\u16cd\7\u02bf\2\2\u16ca"+
		"\u16cd\7\u02bb\2\2\u16cb\u16cd\7\u02be\2\2\u16cc\u16c6\3\2\2\2\u16cc\u16c7"+
		"\3\2\2\2\u16cc\u16c8\3\2\2\2\u16cc\u16c9\3\2\2\2\u16cc\u16ca\3\2\2\2\u16cc"+
		"\u16cb\3\2\2\2\u16cd\u0247\3\2\2\2\u16ce\u16d7\5\u0246\u0124\2\u16cf\u16d2"+
		"\5\u0246\u0124\2\u16d0\u16d1\7\u02ad\2\2\u16d1\u16d3\5\u0246\u0124\2\u16d2"+
		"\u16d0\3\2\2\2\u16d3\u16d4\3\2\2\2\u16d4\u16d2\3\2\2\2\u16d4\u16d5\3\2"+
		"\2\2\u16d5\u16d7\3\2\2\2\u16d6\u16ce\3\2\2\2\u16d6\u16cf\3\2\2\2\u16d7"+
		"\u0249\3\2\2\2\u16d8\u16f5\7\u02c1\2\2\u16d9\u16f5\7\u02c0\2\2\u16da\u16f5"+
		"\7\u02be\2\2\u16db\u16dc\7\u02c2\2\2\u16dc\u16f5\7\u02c0\2\2\u16dd\u16df"+
		"\7\u0299\2\2\u16de\u16dd\3\2\2\2\u16de\u16df\3\2\2\2\u16df\u16e0\3\2\2"+
		"\2\u16e0\u16f5\7\u02c3\2\2\u16e1\u16e3\7\u0299\2\2\u16e2\u16e1\3\2\2\2"+
		"\u16e2\u16e3\3\2\2\2\u16e3\u16e4\3\2\2\2\u16e4\u16f5\7\u02c4\2\2\u16e5"+
		"\u16e6\7\u00cc\2\2\u16e6\u16f5\5\u0272\u013a\2\u16e7\u16e8\7\u00cd\2\2"+
		"\u16e8\u16f5\5\u0272\u013a\2\u16e9\u16ea\7\u00ce\2\2\u16ea\u16f5\5\u0272"+
		"\u013a\2\u16eb\u16ec\7O\2\2\u16ec\u16ed\5\u0272\u013a\2\u16ed\u16ee\5"+
		"\u024c\u0127\2\u16ee\u16f5\3\2\2\2\u16ef\u16f5\7\u02c5\2\2\u16f0\u16f5"+
		"\7\u02c6\2\2\u16f1\u16f5\7;\2\2\u16f2\u16f5\7\u00ad\2\2\u16f3\u16f5\7"+
		"p\2\2\u16f4\u16d8\3\2\2\2\u16f4\u16d9\3\2\2\2\u16f4\u16da\3\2\2\2\u16f4"+
		"\u16db\3\2\2\2\u16f4\u16de\3\2\2\2\u16f4\u16e2\3\2\2\2\u16f4\u16e5\3\2"+
		"\2\2\u16f4\u16e7\3\2\2\2\u16f4\u16e9\3\2\2\2\u16f4\u16eb\3\2\2\2\u16f4"+
		"\u16ef\3\2\2\2\u16f4\u16f0\3\2\2\2\u16f4\u16f1\3\2\2\2\u16f4\u16f2\3\2"+
		"\2\2\u16f4\u16f3\3\2\2\2\u16f5\u024b\3\2\2\2\u16f6\u16f7\tI\2\2\u16f7"+
		"\u024d\3\2\2\2\u16f8\u16fa\7\u02ae\2\2\u16f9\u16f8\3\2\2\2\u16f9\u16fa"+
		"\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fc\5\u0250\u0129\2\u16fc\u16fe\5"+
		"\u0272\u013a\2\u16fd\u16ff\7\u02af\2\2\u16fe\u16fd\3\2\2\2\u16fe\u16ff"+
		"\3\2\2\2\u16ff\u024f\3\2\2\2\u1700\u1701\tJ\2\2\u1701\u0251\3\2\2\2\u1702"+
		"\u1703\7\u02ba\2\2\u1703\u0253\3\2\2\2\u1704\u1705\7\u02b4\2\2\u1705\u1706"+
		"\5\u0246\u0124\2\u1706\u0255\3\2\2\2\u1707\u1708\7\u02b4\2\2\u1708\u1709"+
		"\7\u02b4\2\2\u1709\u170a\5\u0246\u0124\2\u170a\u0257\3\2\2\2\u170b\u170c"+
		"\7\u02b4\2\2\u170c\u170d\7\u02b4\2\2\u170d\u170e\7\u015a\2\2\u170e\u1711"+
		"\7\u02ad\2\2\u170f\u1711\7\u015a\2\2\u1710\u170b\3\2\2\2\u1710\u170f\3"+
		"\2\2\2\u1711\u1712\3\2\2\2\u1712\u1713\5\u0246\u0124\2\u1713\u0259\3\2"+
		"\2\2\u1714\u1715\7\u02b4\2\2\u1715\u1716\7\u02b4\2\2\u1716\u1717\7\u01e9"+
		"\2\2\u1717\u171a\7\u02ad\2\2\u1718\u171a\7\u01e9\2\2\u1719\u1714\3\2\2"+
		"\2\u1719\u1718\3\2\2\2\u171a\u171b\3\2\2\2\u171b\u171c\5\u0246\u0124\2"+
		"\u171c\u025b\3\2\2\2\u171d\u171e\7\u02b4\2\2\u171e\u171f\7\u02b4\2\2\u171f"+
		"\u1720\7}\2\2\u1720\u1723\7\u02ad\2\2\u1721\u1723\7}\2\2\u1722\u171d\3"+
		"\2\2\2\u1722\u1721\3\2\2\2\u1723\u1724\3\2\2\2\u1724\u1725\5\u0246\u0124"+
		"\2\u1725\u025d\3\2\2\2\u1726\u1727\7\u02b4\2\2\u1727\u1728\7\u02b4\2\2"+
		"\u1728\u1729\7~\2\2\u1729\u172c\7\u02ad\2\2\u172a\u172c\7~\2\2\u172b\u1726"+
		"\3\2\2\2\u172b\u172a\3\2\2\2\u172c\u172d\3\2\2\2\u172d\u172e\5\u0246\u0124"+
		"\2\u172e\u025f\3\2\2\2\u172f\u1730\7\u01e2\2\2\u1730\u1731\7\u02ae\2\2"+
		"\u1731\u1736\5\u0272\u013a\2\u1732\u1733\7\u02b2\2\2\u1733\u1735\5\u0272"+
		"\u013a\2\u1734\u1732\3\2\2\2\u1735\u1738\3\2\2\2\u1736\u1734\3\2\2\2\u1736"+
		"\u1737\3\2\2\2\u1737\u1739\3\2\2\2\u1738\u1736\3\2\2\2\u1739\u173a\7\u02af"+
		"\2\2\u173a\u0261\3\2\2\2\u173b\u173d\7\u02ae\2\2\u173c\u173b\3\2\2\2\u173c"+
		"\u173d\3\2\2\2\u173d\u173e\3\2\2\2\u173e\u1740\5\u00b4[\2\u173f\u1741"+
		"\7\u02af\2\2\u1740\u173f\3\2\2\2\u1740\u1741\3\2\2\2\u1741\u0263\3\2\2"+
		"\2\u1742\u1743\7e\2\2\u1743\u1744\7\u02ae\2\2\u1744\u1749\5\u0272\u013a"+
		"\2\u1745\u1746\7\u02b2\2\2\u1746\u1748\5\u0272\u013a\2\u1747\u1745\3\2"+
		"\2\2\u1748\u174b\3\2\2\2\u1749\u1747\3\2\2\2\u1749\u174a\3\2\2\2\u174a"+
		"\u174c\3\2\2\2\u174b\u1749\3\2\2\2\u174c\u174d\7\u02af\2\2\u174d\u174e"+
		"\7\u00fe\2\2\u174e\u174f\7\u02ae\2\2\u174f\u1751\5\u0272\u013a\2\u1750"+
		"\u1752\5\u0266\u0134\2\u1751\u1750\3\2\2\2\u1751\u1752\3\2\2\2\u1752\u1753"+
		"\3\2\2\2\u1753\u1754\7\u02af\2\2\u1754\u0265\3\2\2\2\u1755\u1756\7H\2"+
		"\2\u1756\u1757\7k\2\2\u1757\u1758\7\u0173\2\2\u1758\u1767\7\u019b\2\2"+
		"\u1759\u175a\7H\2\2\u175a\u175b\7k\2\2\u175b\u175c\7\u0173\2\2\u175c\u175d"+
		"\7\u019b\2\2\u175d\u175e\7\u00bc\2\2\u175e\u175f\7\u01c7\2\2\u175f\u1767"+
		"\7\u0148\2\2\u1760\u1761\7H\2\2\u1761\u1762\7\u010d\2\2\u1762\u1767\7"+
		"\u019b\2\2\u1763\u1764\7\u00bc\2\2\u1764\u1765\7\u01c7\2\2\u1765\u1767"+
		"\7\u0148\2\2\u1766\u1755\3\2\2\2\u1766\u1759\3\2\2\2\u1766\u1760\3\2\2"+
		"\2\u1766\u1763\3\2\2\2\u1767\u0267\3\2\2\2\u1768\u176a\7\25\2\2\u1769"+
		"\u176b\5\u0272\u013a\2\u176a\u1769\3\2\2\2\u176a\u176b\3\2\2\2\u176b\u176d"+
		"\3\2\2\2\u176c\u176e\5\u026a\u0136\2\u176d\u176c\3\2\2\2\u176e\u176f\3"+
		"\2\2\2\u176f\u176d\3\2\2\2\u176f\u1770\3\2\2\2\u1770\u1772\3\2\2\2\u1771"+
		"\u1773\5\u026c\u0137\2\u1772\u1771\3\2\2\2\u1772\u1773\3\2\2\2\u1773\u1774"+
		"\3\2\2\2\u1774\u1775\7\u013b\2\2\u1775\u0269\3\2\2\2\u1776\u1778\7\u00b9"+
		"\2\2\u1777\u1779\5\u0272\u013a\2\u1778\u1777\3\2\2\2\u1778\u1779\3\2\2"+
		"\2\u1779\u177a\3\2\2\2\u177a\u177b\7\u00a9\2\2\u177b\u177c\5\u0272\u013a"+
		"\2\u177c\u026b\3\2\2\2\u177d\u177e\7\64\2\2\u177e\u177f\5\u0272\u013a"+
		"\2\u177f\u026d\3\2\2\2\u1780\u1781\7\u02ae\2\2\u1781\u1786\5\u0272\u013a"+
		"\2\u1782\u1783\7\u02b2\2\2\u1783\u1785\5\u0272\u013a\2\u1784\u1782\3\2"+
		"\2\2\u1785\u1788\3\2\2\2\u1786\u1784\3\2\2\2\u1786\u1787\3\2\2\2\u1787"+
		"\u1789\3\2\2\2\u1788\u1786\3\2\2\2\u1789\u178a\7\u02af\2\2\u178a\u026f"+
		"\3\2\2\2\u178b\u179c\5\u0252\u012a\2\u178c\u179c\5\u0254\u012b\2\u178d"+
		"\u179c\5\u0256\u012c\2\u178e\u179c\5\u0258\u012d\2\u178f\u179c\5\u025a"+
		"\u012e\2\u1790\u179c\5\u025c\u012f\2\u1791\u179c\5\u025e\u0130\2\u1792"+
		"\u179c\5\u02c4\u0163\2\u1793\u179c\5\u024a\u0126\2\u1794\u179c\5\u024e"+
		"\u0128\2\u1795\u179c\5\u0248\u0125\2\u1796\u179c\5\u0260\u0131\2\u1797"+
		"\u179c\5\u0264\u0133\2\u1798\u179c\5\u0268\u0135\2\u1799\u179c\5\u0262"+
		"\u0132\2\u179a\u179c\5\u026e\u0138\2\u179b\u178b\3\2\2\2\u179b\u178c\3"+
		"\2\2\2\u179b\u178d\3\2\2\2\u179b\u178e\3\2\2\2\u179b\u178f\3\2\2\2\u179b"+
		"\u1790\3\2\2\2\u179b\u1791\3\2\2\2\u179b\u1792\3\2\2\2\u179b\u1793\3\2"+
		"\2\2\u179b\u1794\3\2\2\2\u179b\u1795\3\2\2\2\u179b\u1796\3\2\2\2\u179b"+
		"\u1797\3\2\2\2\u179b\u1798\3\2\2\2\u179b\u1799\3\2\2\2\u179b\u179a\3\2"+
		"\2\2\u179c\u0271\3\2\2\2\u179d\u179e\b\u013a\1\2\u179e\u179f\7#\2\2\u179f"+
		"\u17a0\7\u02ae\2\2\u17a0\u17a1\5\u00b4[\2\u17a1\u17a2\7\u02af\2\2\u17a2"+
		"\u1818\3\2\2\2\u17a3\u17a4\7\u0101\2\2\u17a4\u17a5\7\u02ae\2\2\u17a5\u17a6"+
		"\5\u0272\u013a\2\u17a6\u17a7\7\u02af\2\2\u17a7\u1818\3\2\2\2\u17a8\u17a9"+
		"\7\b\2\2\u17a9\u17aa\7\u02ae\2\2\u17aa\u17ab\5\u0272\u013a\2\u17ab\u17ac"+
		"\7\u02af\2\2\u17ac\u1818\3\2\2\2\u17ad\u17ae\7\u01f2\2\2\u17ae\u17af\7"+
		"\u02ae\2\2\u17af\u17b0\5\u0272\u013a\2\u17b0\u17b1\7\u02af\2\2\u17b1\u1818"+
		"\3\2\2\2\u17b2\u17b3\7l\2\2\u17b3\u17b4\7\u02ad\2\2\u17b4\u1818\5\u0248"+
		"\u0125\2\u17b5\u17b6\7r\2\2\u17b6\u17b7\7\u02ad\2\2\u17b7\u1818\5\u0248"+
		"\u0125\2\u17b8\u17c5\5\u02c6\u0164\2\u17b9\u17c2\7\u02ae\2\2\u17ba\u17bf"+
		"\5\u0272\u013a\2\u17bb\u17bc\7\u02b2\2\2\u17bc\u17be\5\u0272\u013a\2\u17bd"+
		"\u17bb\3\2\2\2\u17be\u17c1\3\2\2\2\u17bf\u17bd\3\2\2\2\u17bf\u17c0\3\2"+
		"\2\2\u17c0\u17c3\3\2\2\2\u17c1\u17bf\3\2\2\2\u17c2\u17ba\3\2\2\2\u17c2"+
		"\u17c3\3\2\2\2\u17c3\u17c4\3\2\2\2\u17c4\u17c6\7\u02af\2\2\u17c5\u17b9"+
		"\3\2\2\2\u17c5\u17c6\3\2\2\2\u17c6\u1818\3\2\2\2\u17c7\u17c8\7\u02ae\2"+
		"\2\u17c8\u17c9\5\u0272\u013a\2\u17c9\u17ca\7\u02ac\2\2\u17ca\u17cb\5\u0272"+
		"\u013a\2\u17cb\u17cc\7\u02af\2\2\u17cc\u1818\3\2\2\2\u17cd\u17ce\7\u02ae"+
		"\2\2\u17ce\u17cf\5\u0272\u013a\2\u17cf\u17d0\tK\2\2\u17d0\u17d1\5\u0272"+
		"\u013a\2\u17d1\u17d2\7\u02af\2\2\u17d2\u1818\3\2\2\2\u17d3\u17d4\7\u02ae"+
		"\2\2\u17d4\u17d5\5\u0272\u013a\2\u17d5\u17d6\tL\2\2\u17d6\u17d7\5\u0272"+
		"\u013a\2\u17d7\u17d8\7\u02af\2\2\u17d8\u1818\3\2\2\2\u17d9\u17da\7\u02ae"+
		"\2\2\u17da\u17db\5\u0272\u013a\2\u17db\u17dc\tL\2\2\u17dc\u17dd\5\u0272"+
		"\u013a\2\u17dd\u17de\7\u02af\2\2\u17de\u1818\3\2\2\2\u17df\u17e0\7\u02ae"+
		"\2\2\u17e0\u17e1\5\u0272\u013a\2\u17e1\u17e2\tM\2\2\u17e2\u17e3\5\u0272"+
		"\u013a\2\u17e3\u17e4\7\u02af\2\2\u17e4\u1818\3\2\2\2\u17e5\u17e6\7\u02ae"+
		"\2\2\u17e6\u17e7\5\u0272\u013a\2\u17e7\u17e8\7\u02ab\2\2\u17e8\u17e9\5"+
		"\u0272\u013a\2\u17e9\u17ea\7\u02af\2\2\u17ea\u1818\3\2\2\2\u17eb\u17ec"+
		"\7\u02ae\2\2\u17ec\u17ed\5\u0272\u013a\2\u17ed\u17ee\7\u02aa\2\2\u17ee"+
		"\u17ef\5\u0272\u013a\2\u17ef\u17f0\7\u02af\2\2\u17f0\u1818\3\2\2\2\u17f1"+
		"\u17f2\7\u02ae\2\2\u17f2\u17f3\5\u0272\u013a\2\u17f3\u17f4\5\u0274\u013b"+
		"\2\u17f4\u17f5\5\u0272\u013a\2\u17f5\u17f6\7\u02af\2\2\u17f6\u1818\3\2"+
		"\2\2\u17f7\u1818\5\u02b8\u015d\2\u17f8\u1818\5\u0270\u0139\2\u17f9\u17fa"+
		"\7\u02ae\2\2\u17fa\u17fb\5\u0272\u013a\2\u17fb\u17fc\7\32\2\2\u17fc\u17fd"+
		"\5\u0272\u013a\2\u17fd\u17fe\7\u02af\2\2\u17fe\u1818\3\2\2\2\u17ff\u1800"+
		"\7\u02ae\2\2\u1800\u1801\5\u0272\u013a\2\u1801\u1802\tN\2\2\u1802\u1803"+
		"\5\u0272\u013a\2\u1803\u1804\7\u02af\2\2\u1804\u1818\3\2\2\2\u1805\u1806"+
		"\7\u02ae\2\2\u1806\u1807\5\u0272\u013a\2\u1807\u1808\7\u00be\2\2\u1808"+
		"\u1809\5\u0272\u013a\2\u1809\u180a\7\u02af\2\2\u180a\u1818\3\2\2\2\u180b"+
		"\u180c\7\u02ae\2\2\u180c\u180d\5\u0272\u013a\2\u180d\u180e\tO\2\2\u180e"+
		"\u180f\5\u0272\u013a\2\u180f\u1810\7\u02af\2\2\u1810\u1818\3\2\2\2\u1811"+
		"\u1812\7\u02ae\2\2\u1812\u1813\5\u0272\u013a\2\u1813\u1814\7\u028f\2\2"+
		"\u1814\u1815\5\u0272\u013a\2\u1815\u1816\7\u02af\2\2\u1816\u1818\3\2\2"+
		"\2\u1817\u179d\3\2\2\2\u1817\u17a3\3\2\2\2\u1817\u17a8\3\2\2\2\u1817\u17ad"+
		"\3\2\2\2\u1817\u17b2\3\2\2\2\u1817\u17b5\3\2\2\2\u1817\u17b8\3\2\2\2\u1817"+
		"\u17c7\3\2\2\2\u1817\u17cd\3\2\2\2\u1817\u17d3\3\2\2\2\u1817\u17d9\3\2"+
		"\2\2\u1817\u17df\3\2\2\2\u1817\u17e5\3\2\2\2\u1817\u17eb\3\2\2\2\u1817"+
		"\u17f1\3\2\2\2\u1817\u17f7\3\2\2\2\u1817\u17f8\3\2\2\2\u1817\u17f9\3\2"+
		"\2\2\u1817\u17ff\3\2\2\2\u1817\u1805\3\2\2\2\u1817\u180b\3\2\2\2\u1817"+
		"\u1811\3\2\2\2\u1818\u1895\3\2\2\2\u1819\u181a\f\'\2\2\u181a\u181b\7\u00aa"+
		"\2\2\u181b\u1894\5\u0272\u013a(\u181c\u181d\f\36\2\2\u181d\u181e\7\u02ac"+
		"\2\2\u181e\u1894\5\u0272\u013a\37\u181f\u1820\f\35\2\2\u1820\u1821\tK"+
		"\2\2\u1821\u1894\5\u0272\u013a\36\u1822\u1823\f\34\2\2\u1823\u1824\tL"+
		"\2\2\u1824\u1894\5\u0272\u013a\35\u1825\u1826\f\33\2\2\u1826\u1827\tM"+
		"\2\2\u1827\u1894\5\u0272\u013a\34\u1828\u1829\f\32\2\2\u1829\u182a\7\u02ab"+
		"\2\2\u182a\u1894\5\u0272\u013a\33\u182b\u182c\f\31\2\2\u182c\u182d\7\u02aa"+
		"\2\2\u182d\u1894\5\u0272\u013a\32\u182e\u182f\f\30\2\2\u182f\u1830\5\u0274"+
		"\u013b\2\u1830\u1831\5\u0272\u013a\31\u1831\u1894\3\2\2\2\u1832\u1833"+
		"\f\25\2\2\u1833\u1834\7\u01f4\2\2\u1834\u1835\7Z\2\2\u1835\u1894\5\u0272"+
		"\u013a\26\u1836\u1838\f\23\2\2\u1837\u1839\7n\2\2\u1838\u1837\3\2\2\2"+
		"\u1838\u1839\3\2\2\2\u1839\u183a\3\2\2\2\u183a\u183b\7\u0092\2\2\u183b"+
		"\u1894\5\u0272\u013a\24\u183c\u183e\f\22\2\2\u183d\u183f\7n\2\2\u183e"+
		"\u183d\3\2\2\2\u183e\u183f\3\2\2\2\u183f\u1840\3\2\2\2\u1840\u1841\7\u0087"+
		"\2\2\u1841\u1894\5\u0272\u013a\23\u1842\u1844\f\20\2\2\u1843\u1845\7n"+
		"\2\2\u1844\u1843\3\2\2\2\u1844\u1845\3\2\2\2\u1845\u1846\3\2\2\2\u1846"+
		"\u1847\7\17\2\2\u1847\u1848\5\u0272\u013a\2\u1848\u1849\7\13\2\2\u1849"+
		"\u184a\5\u0272\u013a\21\u184a\u1894\3\2\2\2\u184b\u184c\f\13\2\2\u184c"+
		"\u184d\7\32\2\2\u184d\u1894\5\u0272\u013a\f\u184e\u184f\f\6\2\2\u184f"+
		"\u1850\tN\2\2\u1850\u1894\5\u0272\u013a\7\u1851\u1852\f\5\2\2\u1852\u1853"+
		"\7\u00be\2\2\u1853\u1894\5\u0272\u013a\6\u1854\u1855\f\4\2\2\u1855\u1856"+
		"\tO\2\2\u1856\u1894\5\u0272\u013a\5\u1857\u1858\f\3\2\2\u1858\u1859\7"+
		"\u028f\2\2\u1859\u1894\5\u0272\u013a\4\u185a\u185b\f(\2\2\u185b\u1867"+
		"\7\u02ae\2\2\u185c\u185e\5\u00c0a\2\u185d\u185c\3\2\2\2\u185d\u185e\3"+
		"\2\2\2\u185e\u185f\3\2\2\2\u185f\u1864\5\u0272\u013a\2\u1860\u1861\7\u02b2"+
		"\2\2\u1861\u1863\5\u0272\u013a\2\u1862\u1860\3\2\2\2\u1863\u1866\3\2\2"+
		"\2\u1864\u1862\3\2\2\2\u1864\u1865\3\2\2\2\u1865\u1868\3\2\2\2\u1866\u1864"+
		"\3\2\2\2\u1867\u185d\3\2\2\2\u1867\u1868\3\2\2\2\u1868\u1869\3\2\2\2\u1869"+
		"\u1894\7\u02af\2\2\u186a\u186b\f\27\2\2\u186b\u186d\7Q\2\2\u186c\u186e"+
		"\7n\2\2\u186d\u186c\3\2\2\2\u186d\u186e\3\2\2\2\u186e\u186f\3\2\2\2\u186f"+
		"\u1894\tP\2\2\u1870\u1872\f\26\2\2\u1871\u1873\7n\2\2\u1872\u1871\3\2"+
		"\2\2\u1872\u1873\3\2\2\2\u1873\u1874\3\2\2\2\u1874\u1875\7H\2\2\u1875"+
		"\u1876\7\u02ae\2\2\u1876\u187b\5\u0272\u013a\2\u1877\u1878\7\u02b2\2\2"+
		"\u1878\u187a\5\u0272\u013a\2\u1879\u1877\3\2\2\2\u187a\u187d\3\2\2\2\u187b"+
		"\u1879\3\2\2\2\u187b\u187c\3\2\2\2\u187c\u187e\3\2\2\2\u187d\u187b\3\2"+
		"\2\2\u187e\u187f\7\u02af\2\2\u187f\u1894\3\2\2\2\u1880\u1882\f\24\2\2"+
		"\u1881\u1883\7n\2\2\u1882\u1881\3\2\2\2\u1882\u1883\3\2\2\2\u1883\u1884"+
		"\3\2\2\2\u1884\u1885\7Z\2\2\u1885\u1888\5\u0272\u013a\2\u1886\u1887\7"+
		"\u0141\2\2\u1887\u1889\5\u0272\u013a\2\u1888\u1886\3\2\2\2\u1888\u1889"+
		"\3\2\2\2\u1889\u1894\3\2\2\2\u188a\u188b\f\21\2\2\u188b\u188d\7Q\2\2\u188c"+
		"\u188e\7n\2\2\u188d\u188c\3\2\2\2\u188d\u188e\3\2\2\2\u188e\u188f\3\2"+
		"\2\2\u188f\u1894\7p\2\2\u1890\u1891\f\r\2\2\u1891\u1892\7\u02ad\2\2\u1892"+
		"\u1894\5\u0248\u0125\2\u1893\u1819\3\2\2\2\u1893\u181c\3\2\2\2\u1893\u181f"+
		"\3\2\2\2\u1893\u1822\3\2\2\2\u1893\u1825\3\2\2\2\u1893\u1828\3\2\2\2\u1893"+
		"\u182b\3\2\2\2\u1893\u182e\3\2\2\2\u1893\u1832\3\2\2\2\u1893\u1836\3\2"+
		"\2\2\u1893\u183c\3\2\2\2\u1893\u1842\3\2\2\2\u1893\u184b\3\2\2\2\u1893"+
		"\u184e\3\2\2\2\u1893\u1851\3\2\2\2\u1893\u1854\3\2\2\2\u1893\u1857\3\2"+
		"\2\2\u1893\u185a\3\2\2\2\u1893\u186a\3\2\2\2\u1893\u1870\3\2\2\2\u1893"+
		"\u1880\3\2\2\2\u1893\u188a\3\2\2\2\u1893\u1890\3\2\2\2\u1894\u1897\3\2"+
		"\2\2\u1895\u1893\3\2\2\2\u1895\u1896\3\2\2\2\u1896\u0273\3\2\2\2\u1897"+
		"\u1895\3\2\2\2\u1898\u18a8\7\u02a1\2\2\u1899\u18a8\7\u02a7\2\2\u189a\u18a8"+
		"\7\u02a6\2\2\u189b\u189c\7\u02a8\2\2\u189c\u18a8\7\u02a1\2\2\u189d\u189e"+
		"\7\u02a2\2\2\u189e\u18a8\7\u02a3\2\2\u189f\u18a8\7\u02a3\2\2\u18a0\u18a8"+
		"\7\u02a5\2\2\u18a1\u18a2\7\u02a3\2\2\u18a2\u18a8\7\u02a1\2\2\u18a3\u18a8"+
		"\7\u02a2\2\2\u18a4\u18a8\7\u02a4\2\2\u18a5\u18a6\7\u02a2\2\2\u18a6\u18a8"+
		"\7\u02a1\2\2\u18a7\u1898\3\2\2\2\u18a7\u1899\3\2\2\2\u18a7\u189a\3\2\2"+
		"\2\u18a7\u189b\3\2\2\2\u18a7\u189d\3\2\2\2\u18a7\u189f\3\2\2\2\u18a7\u18a0"+
		"\3\2\2\2\u18a7\u18a1\3\2\2\2\u18a7\u18a3\3\2\2\2\u18a7\u18a4\3\2\2\2\u18a7"+
		"\u18a5\3\2\2\2\u18a8\u0275\3\2\2\2\u18a9\u18aa\7(\2\2\u18aa\u18ab\5\u0272"+
		"\u013a\2\u18ab\u0277\3\2\2\2\u18ac\u18ae\7\u0106\2\2\u18ad\u18af\7\u02a1"+
		"\2\2\u18ae\u18ad\3\2\2\2\u18ae\u18af\3\2\2\2\u18af\u18b0\3\2\2\2\u18b0"+
		"\u18b1\5\u0272\u013a\2\u18b1\u0279\3\2\2\2\u18b2\u18b4\7\u0107\2\2\u18b3"+
		"\u18b5\7\u02a1\2\2\u18b4\u18b3\3\2\2\2\u18b4\u18b5\3\2\2\2\u18b5\u18b6"+
		"\3\2\2\2\u18b6\u18b7\5\u0272\u013a\2\u18b7\u027b\3\2\2\2\u18b8\u18ba\7"+
		"(\2\2\u18b9\u18b8\3\2\2\2\u18b9\u18ba\3\2\2\2\u18ba\u18bb\3\2\2\2\u18bb"+
		"\u18bc\7\30\2\2\u18bc\u18be\7\u0096\2\2\u18bd\u18bf\7\u02a1\2\2\u18be"+
		"\u18bd\3\2\2\2\u18be\u18bf\3\2\2\2\u18bf\u18c0\3\2\2\2\u18c0\u18c1\5\u0248"+
		"\u0125\2\u18c1\u027d\3\2\2\2\u18c2\u18c4\7(\2\2\u18c3\u18c2\3\2\2\2\u18c3"+
		"\u18c4\3\2\2\2\u18c4\u18c5\3\2\2\2\u18c5\u18c7\7\u028a\2\2\u18c6\u18c8"+
		"\7\u02a1\2\2\u18c7\u18c6\3\2\2\2\u18c7\u18c8\3\2\2\2\u18c8\u18c9\3\2\2"+
		"\2\u18c9\u18ca\5\u0248\u0125\2\u18ca\u027f\3\2\2\2\u18cb\u18cd\7\u0114"+
		"\2\2\u18cc\u18ce\7\u02a1\2\2\u18cd\u18cc\3\2\2\2\u18cd\u18ce\3\2\2\2\u18ce"+
		"\u18cf\3\2\2\2\u18cf\u18d0\5\u0272\u013a\2\u18d0\u0281\3\2\2\2\u18d1\u18d3"+
		"\7(\2\2\u18d2\u18d1\3\2\2\2\u18d2\u18d3\3\2\2\2\u18d3\u18d4\3\2\2\2\u18d4"+
		"\u18d6\7\32\2\2\u18d5\u18d7\7\u02a1\2\2\u18d6\u18d5\3\2\2\2\u18d6\u18d7"+
		"\3\2\2\2\u18d7\u18d8\3\2\2\2\u18d8\u18d9\5\u0248\u0125\2\u18d9\u0283\3"+
		"\2\2\2\u18da\u18dc\7\u011c\2\2\u18db\u18dd\7\u02a1\2\2\u18dc\u18db\3\2"+
		"\2\2\u18dc\u18dd\3\2\2\2\u18dd\u18de\3\2\2\2\u18de\u18df\5\u0272\u013a"+
		"\2\u18df\u0285\3\2\2\2\u18e0\u18e2\7\u0121\2\2\u18e1\u18e3\7\u02a1\2\2"+
		"\u18e2\u18e1\3\2\2\2\u18e2\u18e3\3\2\2\2\u18e3\u18e4\3\2\2\2\u18e4\u18e5"+
		"\5\u0272\u013a\2\u18e5\u0287\3\2\2\2\u18e6\u18e8\7\u0123\2\2\u18e7\u18e9"+
		"\7\u02a1\2\2\u18e8\u18e7\3\2\2\2\u18e8\u18e9\3\2\2\2\u18e9\u18ea\3\2\2"+
		"\2\u18ea\u18eb\5\u0272\u013a\2\u18eb\u0289\3\2\2\2\u18ec\u18ed\7\u012a"+
		"\2\2\u18ed\u18ef\7\u0131\2\2\u18ee\u18f0\7\u02a1\2\2\u18ef\u18ee\3\2\2"+
		"\2\u18ef\u18f0\3\2\2\2\u18f0\u18f1\3\2\2\2\u18f1\u18f2\5\u0272\u013a\2"+
		"\u18f2\u028b\3\2\2\2\u18f3\u18f4\7I\2\2\u18f4\u18f6\7\u0131\2\2\u18f5"+
		"\u18f7\7\u02a1\2\2\u18f6\u18f5\3\2\2\2\u18f6\u18f7\3\2\2\2\u18f7\u18f8"+
		"\3\2\2\2\u18f8\u18f9\5\u0272\u013a\2\u18f9\u028d\3\2\2\2\u18fa\u18fc\7"+
		"\u012f\2\2\u18fb\u18fd\7\u02a1\2\2\u18fc\u18fb\3\2\2\2\u18fc\u18fd\3\2"+
		"\2\2\u18fd\u18fe\3\2\2\2\u18fe\u18ff\5\u0272\u013a\2\u18ff\u028f\3\2\2"+
		"\2\u1900\u1902\7\u013a\2\2\u1901\u1903\7\u02a1\2\2\u1902\u1901\3\2\2\2"+
		"\u1902\u1903\3\2\2\2\u1903\u1904\3\2\2\2\u1904\u1905\5\u0272\u013a\2\u1905"+
		"\u0291\3\2\2\2\u1906\u1908\7\u013d\2\2\u1907\u1909\7\u02a1\2\2\u1908\u1907"+
		"\3\2\2\2\u1908\u1909\3\2\2\2\u1909\u190a\3\2\2\2\u190a\u190b\5\u0272\u013a"+
		"\2\u190b\u0293\3\2\2\2\u190c\u190e\7\u0168\2\2\u190d\u190f\7\u02a1\2\2"+
		"\u190e\u190d\3\2\2\2\u190e\u190f\3\2\2\2\u190f\u1910\3\2\2\2\u1910\u1911"+
		"\tQ\2\2\u1911\u0295\3\2\2\2\u1912\u1914\7\u0172\2\2\u1913\u1915\7\u02a1"+
		"\2\2\u1914\u1913\3\2\2\2\u1914\u1915\3\2\2\2\u1915\u1916\3\2\2\2\u1916"+
		"\u1917\5\u0272\u013a\2\u1917\u0297\3\2\2\2\u1918\u191a\7\u0193\2\2\u1919"+
		"\u191b\7\u02a1\2\2\u191a\u1919\3\2\2\2\u191a\u191b\3\2\2\2\u191b\u191c"+
		"\3\2\2\2\u191c\u191d\5\u0272\u013a\2\u191d\u0299\3\2\2\2\u191e\u1920\7"+
		"\u019a\2\2\u191f\u1921\7\u02a1\2\2\u1920\u191f\3\2\2\2\u1920\u1921\3\2"+
		"\2\2\u1921\u1922\3\2\2\2\u1922\u1923\5\u0272\u013a\2\u1923\u029b\3\2\2"+
		"\2\u1924\u1926\7\u01b2\2\2\u1925\u1927\7\u02a1\2\2\u1926\u1925\3\2\2\2"+
		"\u1926\u1927\3\2\2\2\u1927\u1928\3\2\2\2\u1928\u1929\5\u0272\u013a\2\u1929"+
		"\u029d\3\2\2\2\u192a\u192c\7\u01b8\2\2\u192b\u192d\7\u02a1\2\2\u192c\u192b"+
		"\3\2\2\2\u192c\u192d\3\2\2\2\u192d\u192e\3\2\2\2\u192e\u192f\5\u0272\u013a"+
		"\2\u192f\u029f\3\2\2\2\u1930\u1932\7\u01e4\2\2\u1931\u1933\7\u02a1\2\2"+
		"\u1932\u1931\3\2\2\2\u1932\u1933\3\2\2\2\u1933\u1934\3\2\2\2\u1934\u1935"+
		"\tR\2\2\u1935\u02a1\3\2\2\2\u1936\u1938\7\u01ff\2\2\u1937\u1939\7\u02a1"+
		"\2\2\u1938\u1937\3\2\2\2\u1938\u1939\3\2\2\2\u1939\u193a\3\2\2\2\u193a"+
		"\u193b\5\u0272\u013a\2\u193b\u02a3\3\2\2\2\u193c\u193e\7\u0200\2\2\u193d"+
		"\u193f\7\u02a1\2\2\u193e\u193d\3\2\2\2\u193e\u193f\3\2\2\2\u193f\u1940"+
		"\3\2\2\2\u1940\u1941\5\u0272\u013a\2\u1941\u02a5\3\2\2\2\u1942\u1944\7"+
		"\u0201\2\2\u1943\u1945\7\u02a1\2\2\u1944\u1943\3\2\2\2\u1944\u1945\3\2"+
		"\2\2\u1945\u1946\3\2\2\2\u1946\u1947\5\u0272\u013a\2\u1947\u02a7\3\2\2"+
		"\2\u1948\u1949\7\u020c\2\2\u1949\u194c\5\u0248\u0125\2\u194a\u194b\7\u0204"+
		"\2\2\u194b\u194d\t\5\2\2\u194c\u194a\3\2\2\2\u194c\u194d\3\2\2\2\u194d"+
		"\u02a9\3\2\2\2\u194e\u1950\7\u00af\2\2\u194f\u1951\7\u02a1\2\2\u1950\u194f"+
		"\3\2\2\2\u1950\u1951\3\2\2\2\u1951\u1952\3\2\2\2\u1952\u1953\5\u0272\u013a"+
		"\2\u1953\u02ab\3\2\2\2\u1954\u1955\7\21\2\2\u1955\u02ad\3\2\2\2\u1956"+
		"\u1957\5\u0272\u013a\2\u1957\u1958\7\u02a1\2\2\u1958\u1959\5\u0272\u013a"+
		"\2\u1959\u02af\3\2\2\2\u195a\u195b\7(\2\2\u195b\u02b1\3\2\2\2\u195c\u195d"+
		"\7\b\2\2\u195d\u02b3\3\2\2\2\u195e\u195f\7\u01a6\2\2\u195f\u02b5\3\2\2"+
		"\2\u1960\u1961\7f\2\2\u1961\u02b7\3\2\2\2\u1962\u1965\5\u02ba\u015e\2"+
		"\u1963\u1965\5\u02c0\u0161\2\u1964\u1962\3\2\2\2\u1964\u1963\3\2\2\2\u1965"+
		"\u02b9\3\2\2\2\u1966\u1967\7n\2\2\u1967\u1968\5\u0272\u013a\2\u1968\u02bb"+
		"\3\2\2\2\u1969\u196a\7\u02d6\2\2\u196a\u196b\7\u0171\2\2\u196b\u02bd\3"+
		"\2\2\2\u196c\u196e\5\u0272\u013a\2\u196d\u196f\7\f\2\2\u196e\u196d\3\2"+
		"\2\2\u196e\u196f\3\2\2\2\u196f\u1972\3\2\2\2\u1970\u1973\5\u0272\u013a"+
		"\2\u1971\u1973\5\u0236\u011c\2\u1972\u1970\3\2\2\2\u1972\u1971\3\2\2\2"+
		"\u1973\u02bf\3\2\2\2\u1974\u1975\78\2\2\u1975\u1976\7\u02ae\2\2\u1976"+
		"\u1977\5\u00b4[\2\u1977\u1978\7\u02af\2\2\u1978\u02c1\3\2\2\2\u1979\u197a"+
		"\7\26\2\2\u197a\u197b\7\u02ae\2\2\u197b\u197c\5\u0272\u013a\2\u197c\u197d"+
		"\7\f\2\2\u197d\u197e\5\u0236\u011c\2\u197e\u197f\7\u02af\2\2\u197f\u19e1"+
		"\3\2\2\2\u1980\u1981\7\u00d1\2\2\u1981\u1982\7\u02ae\2\2\u1982\u1987\5"+
		"\u0272\u013a\2\u1983\u1984\7\u02b2\2\2\u1984\u1986\5\u0272\u013a\2\u1985"+
		"\u1983\3\2\2\2\u1986\u1989\3\2\2\2\u1987\u1985\3\2\2\2\u1987\u1988\3\2"+
		"\2\2\u1988\u198c\3\2\2\2\u1989\u1987\3\2\2\2\u198a\u198b\7\u00b6\2\2\u198b"+
		"\u198d\5\u0272\u013a\2\u198c\u198a\3\2\2\2\u198c\u198d\3\2\2\2\u198d\u198e"+
		"\3\2\2\2\u198e\u198f\7\u02af\2\2\u198f\u19e1\3\2\2\2\u1990\u1991\7\37"+
		"\2\2\u1991\u1992\7\u02ae\2\2\u1992\u1993\5\u0272\u013a\2\u1993\u1994\7"+
		"\u02b2\2\2\u1994\u1995\5\u0218\u010d\2\u1995\u1996\7\u02af\2\2\u1996\u19e1"+
		"\3\2\2\2\u1997\u1998\7\37\2\2\u1998\u1999\7\u02ae\2\2\u1999\u199a\5\u0272"+
		"\u013a\2\u199a\u199b\7\u00b6\2\2\u199b\u199c\5\u0272\u013a\2\u199c\u199d"+
		"\7\u02af\2\2\u199d\u19e1\3\2\2\2\u199e\u199f\7\u00b7\2\2\u199f\u19a0\7"+
		"\u02ae\2\2\u19a0\u19a1\5\u0272\u013a\2\u19a1\u19a2\7\u02af\2\2\u19a2\u19e1"+
		"\3\2\2\2\u19a3\u19a4\7\u00f4\2\2\u19a4\u19a5\7\u02ae\2\2\u19a5\u19a6\5"+
		"\u0272\u013a\2\u19a6\u19a9\7H\2\2\u19a7\u19aa\5\u0272\u013a\2\u19a8\u19aa"+
		"\5\u0272\u013a\2\u19a9\u19a7\3\2\2\2\u19a9\u19a8\3\2\2\2\u19aa\u19ab\3"+
		"\2\2\2\u19ab\u19ac\7\u02af\2\2\u19ac\u19e1\3\2\2\2\u19ad\u19ae\tS\2\2"+
		"\u19ae\u19af\7\u02ae\2\2\u19af\u19b0\5\u0272\u013a\2\u19b0\u19b1\7@\2"+
		"\2\u19b1\u19b4\5\u0272\u013a\2\u19b2\u19b3\7=\2\2\u19b3\u19b5\5\u0272"+
		"\u013a\2\u19b4\u19b2\3\2\2\2\u19b4\u19b5\3\2\2\2\u19b5\u19b6\3\2\2\2\u19b6"+
		"\u19b7\7\u02af\2\2\u19b7\u19e1\3\2\2\2\u19b8\u19b9\7\u00f7\2\2\u19b9\u19ba"+
		"\7\u02ae\2\2\u19ba\u19bc\tT\2\2\u19bb\u19bd\5\u0272\u013a\2\u19bc\u19bb"+
		"\3\2\2\2\u19bc\u19bd\3\2\2\2\u19bd\u19be\3\2\2\2\u19be\u19bf\7@\2\2\u19bf"+
		"\u19c0\5\u0272\u013a\2\u19c0\u19c1\7\u02af\2\2\u19c1\u19e1\3\2\2\2\u19c2"+
		"\u19c3\7\u00f7\2\2\u19c3\u19c4\7\u02ae\2\2\u19c4\u19c5\5\u0272\u013a\2"+
		"\u19c5\u19c6\7@\2\2\u19c6\u19c7\5\u0272\u013a\2\u19c7\u19c8\7\u02af\2"+
		"\2\u19c8\u19e1\3\2\2\2\u19c9\u19ca\7\u028e\2\2\u19ca\u19cb\7\u02ae\2\2"+
		"\u19cb\u19d2\5\u0272\u013a\2\u19cc\u19cd\7\f\2\2\u19cd\u19ce\tU\2\2\u19ce"+
		"\u19cf\7\u02ae\2\2\u19cf\u19d0\5\u0272\u013a\2\u19d0\u19d1\7\u02af\2\2"+
		"\u19d1\u19d3\3\2\2\2\u19d2\u19cc\3\2\2\2\u19d2\u19d3\3\2\2\2\u19d3\u19d5"+
		"\3\2\2\2\u19d4\u19d6\5\u0224\u0113\2\u19d5\u19d4\3\2\2\2\u19d5\u19d6\3"+
		"\2\2\2\u19d6\u19d7\3\2\2\2\u19d7\u19d8\7\u02af\2\2\u19d8\u19e1\3\2\2\2"+
		"\u19d9\u19da\7\u028b\2\2\u19da\u19db\7\u02ae\2\2\u19db\u19dc\t?\2\2\u19dc"+
		"\u19dd\7\u02b2\2\2\u19dd\u19de\5\u0272\u013a\2\u19de\u19df\7\u02af\2\2"+
		"\u19df\u19e1\3\2\2\2\u19e0\u1979\3\2\2\2\u19e0\u1980\3\2\2\2\u19e0\u1990"+
		"\3\2\2\2\u19e0\u1997\3\2\2\2\u19e0\u199e\3\2\2\2\u19e0\u19a3\3\2\2\2\u19e0"+
		"\u19ad\3\2\2\2\u19e0\u19b8\3\2\2\2\u19e0\u19c2\3\2\2\2\u19e0\u19c9\3\2"+
		"\2\2\u19e0\u19d9\3\2\2\2\u19e1\u02c3\3\2\2\2\u19e2\u19ef\5\u02c2\u0162"+
		"\2\u19e3\u19ef\5\u02ce\u0168\2\u19e4\u19ef\5\u02d2\u016a\2\u19e5\u19ef"+
		"\5\u02d4\u016b\2\u19e6\u19ef\5\u02d6\u016c\2\u19e7\u19ef\5\u02da\u016e"+
		"\2\u19e8\u19ef\5\u02f4\u017b\2\u19e9\u19ef\5\u02fa\u017e\2\u19ea\u19ef"+
		"\5\u02fc\u017f\2\u19eb\u19ef\5\u02fe\u0180\2\u19ec\u19ef\5\u0316\u018c"+
		"\2\u19ed\u19ef\5\u0302\u0182\2\u19ee\u19e2\3\2\2\2\u19ee\u19e3\3\2\2\2"+
		"\u19ee\u19e4\3\2\2\2\u19ee\u19e5\3\2\2\2\u19ee\u19e6\3\2\2\2\u19ee\u19e7"+
		"\3\2\2\2\u19ee\u19e8\3\2\2\2\u19ee\u19e9\3\2\2\2\u19ee\u19ea\3\2\2\2\u19ee"+
		"\u19eb\3\2\2\2\u19ee\u19ec\3\2\2\2\u19ee\u19ed\3\2\2\2\u19ef\u02c5\3\2"+
		"\2\2\u19f0\u19f1\tV\2\2\u19f1\u02c7\3\2\2\2\u19f2\u19f3\7\u00f4\2\2\u19f3"+
		"\u19f4\7\u02ae\2\2\u19f4\u19f5\5\u0272\u013a\2\u19f5\u19f6\7H\2\2\u19f6"+
		"\u19f7\5\u0272\u013a\2\u19f7\u19f8\7\u02af\2\2\u19f8\u02c9\3\2\2\2\u19f9"+
		"\u19fa\7\u00f5\2\2\u19fa\u19fb\7\u02ae\2\2\u19fb\u19fc\5\u0272\u013a\2"+
		"\u19fc\u19fd\7@\2\2\u19fd\u1a00\5\u0272\u013a\2\u19fe\u19ff\7=\2\2\u19ff"+
		"\u1a01\5\u0272\u013a\2\u1a00\u19fe\3\2\2\2\u1a00\u1a01\3\2\2\2\u1a01\u1a02"+
		"\3\2\2\2\u1a02\u1a03\7\u02af\2\2\u1a03\u02cb\3\2\2\2\u1a04\u1a05\7\u00f6"+
		"\2\2\u1a05\u1a06\7\u02ae\2\2\u1a06\u1a07\5\u0272\u013a\2\u1a07\u1a08\7"+
		"@\2\2\u1a08\u1a0b\5\u0272\u013a\2\u1a09\u1a0a\7=\2\2\u1a0a\u1a0c\5\u0272"+
		"\u013a\2\u1a0b\u1a09\3\2\2\2\u1a0b\u1a0c\3\2\2\2\u1a0c\u1a0d\3\2\2\2\u1a0d"+
		"\u1a0e\7\u02af\2\2\u1a0e\u02cd\3\2\2\2\u1a0f\u1a10\7\u00f7\2\2\u1a10\u1a18"+
		"\7\u02ae\2\2\u1a11\u1a13\tT\2\2\u1a12\u1a11\3\2\2\2\u1a12\u1a13\3\2\2"+
		"\2\u1a13\u1a15\3\2\2\2\u1a14\u1a16\5\u0272\u013a\2\u1a15\u1a14\3\2\2\2"+
		"\u1a15\u1a16\3\2\2\2\u1a16\u1a17\3\2\2\2\u1a17\u1a19\7@\2\2\u1a18\u1a12"+
		"\3\2\2\2\u1a18\u1a19\3\2\2\2\u1a19\u1a1a\3\2\2\2\u1a1a\u1a1b\5\u0272\u013a"+
		"\2\u1a1b\u1a1c\7\u02af\2\2\u1a1c\u02cf\3\2\2\2\u1a1d\u1a1e\7\u028e\2\2"+
		"\u1a1e\u1a1f\7\u02ae\2\2\u1a1f\u1a22\5\u0272\u013a\2\u1a20\u1a21\7\f\2"+
		"\2\u1a21\u1a23\5\u0236\u011c\2\u1a22\u1a20\3\2\2\2\u1a22\u1a23\3\2\2\2"+
		"\u1a23\u1a24\3\2\2\2\u1a24\u1a25\7\u02af\2\2\u1a25\u02d1\3\2\2\2\u1a26"+
		"\u1a27\7\u00f2\2\2\u1a27\u1a28\7\u02ae\2\2\u1a28\u1a29\5\u024c\u0127\2"+
		"\u1a29\u1a2a\7@\2\2\u1a2a\u1a2b\5\u0272\u013a\2\u1a2b\u1a2c\7\u02af\2"+
		"\2\u1a2c\u02d3\3\2\2\2\u1a2d\u1a2e\7\u02d9\2\2\u1a2e\u1a2f\7\u02ae\2\2"+
		"\u1a2f\u1a30\5\u0272\u013a\2\u1a30\u1a32\7\f\2\2\u1a31\u1a33\7\u02da\2"+
		"\2\u1a32\u1a31\3\2\2\2\u1a32\u1a33\3\2\2\2\u1a33\u1a34\3\2\2\2\u1a34\u1a35"+
		"\5\u0236\u011c\2\u1a35\u1a36\7\u02af\2\2\u1a36\u02d5\3\2\2\2\u1a37\u1a38"+
		"\7\37\2\2\u1a38\u1a39\7\u02ae\2\2\u1a39\u1a3a\5\u0272\u013a\2\u1a3a\u1a3b"+
		"\7\u00b6\2\2\u1a3b\u1a3c\5\u0248\u0125\2\u1a3c\u1a3d\7\u02af\2\2\u1a3d"+
		"\u02d7\3\2\2\2\u1a3e\u1a3f\7\u02db\2\2\u1a3f\u1a41\7\u02dc\2\2\u1a40\u1a42"+
		"\7\u02dd\2\2\u1a41\u1a40\3\2\2\2\u1a41\u1a42\3\2\2\2\u1a42\u1a59\3\2\2"+
		"\2\u1a43\u1a44\7\u02db\2\2\u1a44\u1a45\7\u02ae\2\2\u1a45\u1a4a\5\u0272"+
		"\u013a\2\u1a46\u1a47\7\u02b2\2\2\u1a47\u1a49\5\u0272\u013a\2\u1a48\u1a46"+
		"\3\2\2\2\u1a49\u1a4c\3\2\2\2\u1a4a\u1a48\3\2\2\2\u1a4a\u1a4b\3\2\2\2\u1a4b"+
		"\u1a4d\3\2\2\2\u1a4c\u1a4a\3\2\2\2\u1a4d\u1a4e\7\u02af\2\2\u1a4e\u1a4f"+
		"\7\u00b7\2\2\u1a4f\u1a50\7\u02ae\2\2\u1a50\u1a55\5\u0272\u013a\2\u1a51"+
		"\u1a52\7\u02b2\2\2\u1a52\u1a54\5\u0272\u013a\2\u1a53\u1a51\3\2\2\2\u1a54"+
		"\u1a57\3\2\2\2\u1a55\u1a53\3\2\2\2\u1a55\u1a56\3\2\2\2\u1a56\u1a59\3\2"+
		"\2\2\u1a57\u1a55\3\2\2\2\u1a58\u1a3e\3\2\2\2\u1a58\u1a43\3\2\2\2\u1a59"+
		"\u02d9\3\2\2\2\u1a5a\u1a5b\5\u02dc\u016f\2\u1a5b\u1a5c\7\u02ae\2\2\u1a5c"+
		"\u1a61\5\u0272\u013a\2\u1a5d\u1a5e\7\u02b2\2\2\u1a5e\u1a60\5\u0272\u013a"+
		"\2\u1a5f\u1a5d\3\2\2\2\u1a60\u1a63\3\2\2\2\u1a61\u1a5f\3\2\2\2\u1a61\u1a62"+
		"\3\2\2\2\u1a62\u1a65\3\2\2\2\u1a63\u1a61\3\2\2\2\u1a64\u1a66\5\u00e4s"+
		"\2\u1a65\u1a64\3\2\2\2\u1a65\u1a66\3\2\2\2\u1a66\u1a68\3\2\2\2\u1a67\u1a69"+
		"\5\u02e4\u0173\2\u1a68\u1a67\3\2\2\2\u1a68\u1a69\3\2\2\2\u1a69\u1a6b\3"+
		"\2\2\2\u1a6a\u1a6c\5\u02e6\u0174\2\u1a6b\u1a6a\3\2\2\2\u1a6b\u1a6c\3\2"+
		"\2\2\u1a6c\u1a6e\3\2\2\2\u1a6d\u1a6f\7\u02de\2\2\u1a6e\u1a6d\3\2\2\2\u1a6e"+
		"\u1a6f\3\2\2\2\u1a6f\u1a71\3\2\2\2\u1a70\u1a72\5\u02e8\u0175\2\u1a71\u1a70"+
		"\3\2\2\2\u1a71\u1a72\3\2\2\2\u1a72\u1a74\3\2\2\2\u1a73\u1a75\5\u02ea\u0176"+
		"\2\u1a74\u1a73\3\2\2\2\u1a74\u1a75\3\2\2\2\u1a75\u1a77\3\2\2\2\u1a76\u1a78"+
		"\5\u02ec\u0177\2\u1a77\u1a76\3\2\2\2\u1a77\u1a78\3\2\2\2\u1a78\u1a7a\3"+
		"\2\2\2\u1a79\u1a7b\5\u02ee\u0178\2\u1a7a\u1a79\3\2\2\2\u1a7a\u1a7b\3\2"+
		"\2\2\u1a7b\u1a7d\3\2\2\2\u1a7c\u1a7e\5\u02f0\u0179\2\u1a7d\u1a7c\3\2\2"+
		"\2\u1a7d\u1a7e\3\2\2\2\u1a7e\u1a7f\3\2\2\2\u1a7f\u1a80\7\u02af\2\2\u1a80"+
		"\u02db\3\2\2\2\u1a81\u1a82\tW\2\2\u1a82\u02dd\3\2\2\2\u1a83\u1a87\5\u0272"+
		"\u013a\2\u1a84\u1a87\5\u02e0\u0171\2\u1a85\u1a87\5\u02e2\u0172\2\u1a86"+
		"\u1a83\3\2\2\2\u1a86\u1a84\3\2\2\2\u1a86\u1a85\3\2\2\2\u1a87\u02df\3\2"+
		"\2\2\u1a88\u1a89\5\u0272\u013a\2\u1a89\u1a8a\5\u02bc\u015f\2\u1a8a\u02e1"+
		"\3\2\2\2\u1a8b\u1a8d\7T\2\2\u1a8c\u1a8b\3\2\2\2\u1a8c\u1a8d\3\2\2\2\u1a8d"+
		"\u1a8e\3\2\2\2\u1a8e\u1a8f\5\u0272\u013a\2\u1a8f\u1a90\7\u021f\2\2\u1a90"+
		"\u1a91\5\u0272\u013a\2\u1a91\u02e3\3\2\2\2\u1a92\u1a93\tX\2\2\u1a93\u1a94"+
		"\7s\2\2\u1a94\u1a95\7\u02e4\2\2\u1a95\u02e5\3\2\2\2\u1a96\u1a97\7\u02e6"+
		"\2\2\u1a97\u1a99\5\u0236\u011c\2\u1a98\u1a96\3\2\2\2\u1a98\u1a99\3\2\2"+
		"\2\u1a99\u1a9b\3\2\2\2\u1a9a\u1a9c\7\u02e7\2\2\u1a9b\u1a9a\3\2\2\2\u1a9b"+
		"\u1a9c\3\2\2\2\u1a9c\u1a9e\3\2\2\2\u1a9d\u1a9f\7\u024c\2\2\u1a9e\u1a9d"+
		"\3\2\2\2\u1a9e\u1a9f\3\2\2\2\u1a9f\u02e7\3\2\2\2\u1aa0\u1aa1\7\u00bc\2"+
		"\2\u1aa1\u1aa2\7\u00b0\2\2\u1aa2\u1aa3\7U\2\2\u1aa3\u02e9\3\2\2\2\u1aa4"+
		"\u1aa6\7\u0224\2\2\u1aa5\u1aa7\7\u02e8\2\2\u1aa6\u1aa5\3\2\2\2\u1aa6\u1aa7"+
		"\3\2\2\2\u1aa7\u1aa8\3\2\2\2\u1aa8\u1ab2\7\u0226\2\2\u1aa9\u1aab\7\u00bc"+
		"\2\2\u1aaa\u1aac\tY\2\2\u1aab\u1aaa\3\2\2\2\u1aab\u1aac\3\2\2\2\u1aac"+
		"\u1aae\3\2\2\2\u1aad\u1aaf\7\u02e8\2\2\u1aae\u1aad\3\2\2\2\u1aae\u1aaf"+
		"\3\2\2\2\u1aaf\u1ab0\3\2\2\2\u1ab0\u1ab2\7\u0226\2\2\u1ab1\u1aa4\3\2\2"+
		"\2\u1ab1\u1aa9\3\2\2\2\u1ab2\u02eb\3\2\2\2\u1ab3\u1abd\7\u013f\2\2\u1ab4"+
		"\u1abd\7\u02e4\2\2\u1ab5\u1abd\7\u02eb\2\2\u1ab6\u1ab7\7\u02eb\2\2\u1ab7"+
		"\u1abd\7\u02e8\2\2\u1ab8\u1ab9\7\u02eb\2\2\u1ab9\u1abd\7\u02ec\2\2\u1aba"+
		"\u1abb\7(\2\2\u1abb\u1abd\5\u0272\u013a\2\u1abc\u1ab3\3\2\2\2\u1abc\u1ab4"+
		"\3\2\2\2\u1abc\u1ab5\3\2\2\2\u1abc\u1ab6\3\2\2\2\u1abc\u1ab8\3\2\2\2\u1abc"+
		"\u1aba\3\2\2\2\u1abd\u1abe\3\2\2\2\u1abe\u1abf\7s\2\2\u1abf\u1ac0\7\u013f"+
		"\2\2\u1ac0\u02ed\3\2\2\2\u1ac1\u1acb\7\u013f\2\2\u1ac2\u1acb\7\u02e4\2"+
		"\2\u1ac3\u1acb\7\u02eb\2\2\u1ac4\u1ac5\7\u02eb\2\2\u1ac5\u1acb\7\u02e8"+
		"\2\2\u1ac6\u1ac7\7\u02eb\2\2\u1ac7\u1acb\7\u02ec\2\2\u1ac8\u1ac9\7(\2"+
		"\2\u1ac9\u1acb\5\u0272\u013a\2\u1aca\u1ac1\3\2\2\2\u1aca\u1ac2\3\2\2\2"+
		"\u1aca\u1ac3\3\2\2\2\u1aca\u1ac4\3\2\2\2\u1aca\u1ac6\3\2\2\2\u1aca\u1ac8"+
		"\3\2\2\2\u1acb\u1acc\3\2\2\2\u1acc\u1acd\7s\2\2\u1acd\u1ace\7\u02eb\2"+
		"\2\u1ace\u02ef\3\2\2\2\u1acf\u1ad0\7\u011a\2\2\u1ad0\u1ad1\7\u02ae\2\2"+
		"\u1ad1\u1ad6\5\u02f2\u017a\2\u1ad2\u1ad3\7\u02b2\2\2\u1ad3\u1ad5\5\u02f2"+
		"\u017a\2\u1ad4\u1ad2\3\2\2\2\u1ad5\u1ad8\3\2\2\2\u1ad6\u1ad4\3\2\2\2\u1ad6"+
		"\u1ad7\3\2\2\2\u1ad7\u1ad9\3\2\2\2\u1ad8\u1ad6\3\2\2\2\u1ad9\u1ada\7\u02af"+
		"\2\2\u1ada\u02f1\3\2\2\2\u1adb\u1adc\5\u0248\u0125\2\u1adc\u1add\5\u0236"+
		"\u011c\2\u1add\u1ae0\78\2\2\u1ade\u1adf\7\u02ed\2\2\u1adf\u1ae1\5\u0272"+
		"\u013a\2\u1ae0\u1ade\3\2\2\2\u1ae0\u1ae1\3\2\2\2\u1ae1\u1ae3\3\2\2\2\u1ae2"+
		"\u1ae4\5\u02ec\u0177\2\u1ae3\u1ae2\3\2\2\2\u1ae3\u1ae4\3\2\2\2\u1ae4\u1b08"+
		"\3\2\2\2\u1ae5\u1ae6\5\u0248\u0125\2\u1ae6\u1ae7\5\u0236\u011c\2\u1ae7"+
		"\u1ae9\5\u02bc\u015f\2\u1ae8\u1aea\5\u02ea\u0176\2\u1ae9\u1ae8\3\2\2\2"+
		"\u1ae9\u1aea\3\2\2\2\u1aea\u1aed\3\2\2\2\u1aeb\u1aec\7\u02ed\2\2\u1aec"+
		"\u1aee\5\u0272\u013a\2\u1aed\u1aeb\3\2\2\2\u1aed\u1aee\3\2\2\2\u1aee\u1af0"+
		"\3\2\2\2\u1aef\u1af1\5\u02ec\u0177\2\u1af0\u1aef\3\2\2\2\u1af0\u1af1\3"+
		"\2\2\2\u1af1\u1b08\3\2\2\2\u1af2\u1af3\5\u0248\u0125\2\u1af3\u1af4\5\u0236"+
		"\u011c\2\u1af4\u1af7\78\2\2\u1af5\u1af6\7\u02ed\2\2\u1af6\u1af8\5\u0272"+
		"\u013a\2\u1af7\u1af5\3\2\2\2\u1af7\u1af8\3\2\2\2\u1af8\u1afa\3\2\2\2\u1af9"+
		"\u1afb\5\u02ec\u0177\2\u1afa\u1af9\3\2\2\2\u1afa\u1afb\3\2\2\2\u1afb\u1b08"+
		"\3\2\2\2\u1afc\u1afe\7\u02ee\2\2\u1afd\u1aff\7\u02ed\2\2\u1afe\u1afd\3"+
		"\2\2\2\u1afe\u1aff\3\2\2\2\u1aff\u1b00\3\2\2\2\u1b00\u1b01\5\u0272\u013a"+
		"\2\u1b01\u1b02\5\u02f0\u0179\2\u1b02\u1b08\3\2\2\2\u1b03\u1b04\5\u0248"+
		"\u0125\2\u1b04\u1b05\7=\2\2\u1b05\u1b06\7\u02ef\2\2\u1b06\u1b08\3\2\2"+
		"\2\u1b07\u1adb\3\2\2\2\u1b07\u1ae5\3\2\2\2\u1b07\u1af2\3\2\2\2\u1b07\u1afc"+
		"\3\2\2\2\u1b07\u1b03\3\2\2\2\u1b08\u02f3\3\2\2\2\u1b09\u1b0a\5\u02f6\u017c"+
		"\2\u1b0a\u1b18\7\u02ae\2\2\u1b0b\u1b0d\5\u00c0a\2\u1b0c\u1b0b\3\2\2\2"+
		"\u1b0c\u1b0d\3\2\2\2\u1b0d\u1b0e\3\2\2\2\u1b0e\u1b10\5\u0272\u013a\2\u1b0f"+
		"\u1b11\7-\2\2\u1b10\u1b0f\3\2\2\2\u1b10\u1b11\3\2\2\2\u1b11\u1b13\3\2"+
		"\2\2\u1b12\u1b14\5\u030c\u0187\2\u1b13\u1b12\3\2\2\2\u1b13\u1b14\3\2\2"+
		"\2\u1b14\u1b16\3\2\2\2\u1b15\u1b17\5\u00e4s\2\u1b16\u1b15\3\2\2\2\u1b16"+
		"\u1b17\3\2\2\2\u1b17\u1b19\3\2\2\2\u1b18\u1b0c\3\2\2\2\u1b18\u1b19\3\2"+
		"\2\2\u1b19\u1b1e\3\2\2\2\u1b1a\u1b1b\7\u02b2\2\2\u1b1b\u1b1d\5\u0272\u013a"+
		"\2\u1b1c\u1b1a\3\2\2\2\u1b1d\u1b20\3\2\2\2\u1b1e\u1b1c\3\2\2\2\u1b1e\u1b1f"+
		"\3\2\2\2\u1b1f\u1b22\3\2\2\2\u1b20\u1b1e\3\2\2\2\u1b21\u1b23\5\u02f8\u017d"+
		"\2\u1b22\u1b21\3\2\2\2\u1b22\u1b23\3\2\2\2\u1b23\u1b25\3\2\2\2\u1b24\u1b26"+
		"\5\u0308\u0185\2\u1b25\u1b24\3\2\2\2\u1b25\u1b26\3\2\2\2\u1b26\u1b27\3"+
		"\2\2\2\u1b27\u1b28\7\u02af\2\2\u1b28\u02f5\3\2\2\2\u1b29\u1b2a\tZ\2\2"+
		"\u1b2a\u02f7\3\2\2\2\u1b2b\u1b2c\7\u0324\2\2\u1b2c\u1b2d\7C\2\2\u1b2d"+
		"\u1b2e\7\u02ae\2\2\u1b2e\u1b2f\5\u00e4s\2\u1b2f\u1b30\7\u02af\2\2\u1b30"+
		"\u02f9\3\2\2\2\u1b31\u1b32\5\u02f4\u017b\2\u1b32\u1b33\7\u0325\2\2\u1b33"+
		"\u1b34\7\u02ae\2\2\u1b34\u1b35\7\u0301\2\2\u1b35\u1b36\7\u0152\2\2\u1b36"+
		"\u1b37\5\u00e4s\2\u1b37\u1b39\7\u02af\2\2\u1b38\u1b3a\5\u0308\u0185\2"+
		"\u1b39\u1b38\3\2\2\2\u1b39\u1b3a\3\2\2\2\u1b3a\u02fb\3\2\2\2\u1b3b\u1b3c"+
		"\5\u02f4\u017b\2\u1b3c\u1b3d\7\u0325\2\2\u1b3d\u1b3e\7\u02ae\2\2\u1b3e"+
		"\u1b3f\7\u0301\2\2\u1b3f\u1b40\7\u0174\2\2\u1b40\u1b41\5\u00e4s\2\u1b41"+
		"\u1b43\7\u02af\2\2\u1b42\u1b44\5\u0308\u0185\2\u1b43\u1b42\3\2\2\2\u1b43"+
		"\u1b44\3\2\2\2\u1b44\u02fd\3\2\2\2\u1b45\u1b46\7\u0326\2\2\u1b46\u1b48"+
		"\7\u02ae\2\2\u1b47\u1b49\5\u00c0a\2\u1b48\u1b47\3\2\2\2\u1b48\u1b49\3"+
		"\2\2\2\u1b49\u1b4a\3\2\2\2\u1b4a\u1b4d\5\u0272\u013a\2\u1b4b\u1b4c\7\u02b2"+
		"\2\2\u1b4c\u1b4e\5\u0272\u013a\2\u1b4d\u1b4b\3\2\2\2\u1b4d\u1b4e\3\2\2"+
		"\2\u1b4e\u1b50\3\2\2\2\u1b4f\u1b51\5\u0300\u0181\2\u1b50\u1b4f\3\2\2\2"+
		"\u1b50\u1b51\3\2\2\2\u1b51\u1b52\3\2\2\2\u1b52\u1b53\7\u02af\2\2\u1b53"+
		"\u1b55\5\u02f8\u017d\2\u1b54\u1b56\5\u0308\u0185\2\u1b55\u1b54\3\2\2\2"+
		"\u1b55\u1b56\3\2\2\2\u1b56\u02ff\3\2\2\2\u1b57\u1b58\7s\2\2\u1b58\u1b59"+
		"\7\u0327\2\2\u1b59\u1b65\7\u013f\2\2\u1b5a\u1b5b\7s\2\2\u1b5b\u1b5c\7"+
		"\u0327\2\2\u1b5c\u1b5e\7\u0213\2\2\u1b5d\u1b5f\5\u0272\u013a\2\u1b5e\u1b5d"+
		"\3\2\2\2\u1b5e\u1b5f\3\2\2\2\u1b5f\u1b62\3\2\2\2\u1b60\u1b61\t[\2\2\u1b61"+
		"\u1b63\7\u00e2\2\2\u1b62\u1b60\3\2\2\2\u1b62\u1b63\3\2\2\2\u1b63\u1b65"+
		"\3\2\2\2\u1b64\u1b57\3\2\2\2\u1b64\u1b5a\3\2\2\2\u1b65\u0301\3\2\2\2\u1b66"+
		"\u1b67\5\u0248\u0125\2\u1b67\u1b76\7\u02ae\2\2\u1b68\u1b6a\5\u00c0a\2"+
		"\u1b69\u1b68\3\2\2\2\u1b69\u1b6a\3\2\2\2\u1b6a\u1b6b\3\2\2\2\u1b6b\u1b6d"+
		"\5\u0272\u013a\2\u1b6c\u1b6e\5\u0304\u0183\2\u1b6d\u1b6c\3\2\2\2\u1b6d"+
		"\u1b6e\3\2\2\2\u1b6e\u1b73\3\2\2\2\u1b6f\u1b70\7\u02b2\2\2\u1b70\u1b72"+
		"\5\u0272\u013a\2\u1b71\u1b6f\3\2\2\2\u1b72\u1b75\3\2\2\2\u1b73\u1b71\3"+
		"\2\2\2\u1b73\u1b74\3\2\2\2\u1b74\u1b77\3\2\2\2\u1b75\u1b73\3\2\2\2\u1b76"+
		"\u1b69\3\2\2\2\u1b76\u1b77\3\2\2\2\u1b77\u1b78\3\2\2\2\u1b78\u1b7a\7\u02af"+
		"\2\2\u1b79\u1b7b\5\u0306\u0184\2\u1b7a\u1b79\3\2\2\2\u1b7a\u1b7b\3\2\2"+
		"\2\u1b7b\u1b7d\3\2\2\2\u1b7c\u1b7e\5\u0304\u0183\2\u1b7d\u1b7c\3\2\2\2"+
		"\u1b7d\u1b7e\3\2\2\2\u1b7e\u1b7f\3\2\2\2\u1b7f\u1b80\5\u0308\u0185\2\u1b80"+
		"\u0303\3\2\2\2\u1b81\u1b82\t\\\2\2\u1b82\u1b83\7\u0329\2\2\u1b83\u0305"+
		"\3\2\2\2\u1b84\u1b85\7@\2\2\u1b85\u1b86\t]\2\2\u1b86\u0307\3\2\2\2\u1b87"+
		"\u1b88\7\u032a\2\2\u1b88\u1b89\7\u02ae\2\2\u1b89\u1b8a\5\u030a\u0186\2"+
		"\u1b8a\u1b8b\7\u02af\2\2\u1b8b\u0309\3\2\2\2\u1b8c\u1b8e\5\u030c\u0187"+
		"\2\u1b8d\u1b8c\3\2\2\2\u1b8d\u1b8e\3\2\2\2\u1b8e\u1b93\3\2\2\2\u1b8f\u1b91"+
		"\5\u00e4s\2\u1b90\u1b92\5\u030e\u0188\2\u1b91\u1b90\3\2\2\2\u1b91\u1b92"+
		"\3\2\2\2\u1b92\u1b94\3\2\2\2\u1b93\u1b8f\3\2\2\2\u1b93\u1b94\3\2\2\2\u1b94"+
		"\u030b\3\2\2\2\u1b95\u1b96\7|\2\2\u1b96\u1b97\7\22\2\2\u1b97\u1b9c\5\u0272"+
		"\u013a\2\u1b98\u1b99\7\u02b2\2\2\u1b99\u1b9b\5\u0272\u013a\2\u1b9a\u1b98"+
		"\3\2\2\2\u1b9b\u1b9e\3\2\2\2\u1b9c\u1b9a\3\2\2\2\u1b9c\u1b9d\3\2\2\2\u1b9d"+
		"\u030d\3\2\2\2\u1b9e\u1b9c\3\2\2\2\u1b9f\u1ba0\5\u0310\u0189\2\u1ba0\u1ba1"+
		"\5\u0312\u018a\2\u1ba1\u030f\3\2\2\2\u1ba2\u1ba3\t^\2\2\u1ba3\u0311\3"+
		"\2\2\2\u1ba4\u1ba5\7\17\2\2\u1ba5\u1ba6\5\u0314\u018b\2\u1ba6\u1ba7\7"+
		"\13\2\2\u1ba7\u1ba8\5\u0314\u018b\2\u1ba8\u1bab\3\2\2\2\u1ba9\u1bab\5"+
		"\u0314\u018b\2\u1baa\u1ba4\3\2\2\2\u1baa\u1ba9\3\2\2\2\u1bab\u0313\3\2"+
		"\2\2\u1bac\u1bad\7\u032b\2\2\u1bad\u1bb4\7\u032c\2\2\u1bae\u1baf\7\u032d"+
		"\2\2\u1baf\u1bb4\7\u01e2\2\2\u1bb0\u1bb1\5\u0272\u013a\2\u1bb1\u1bb2\t"+
		"_\2\2\u1bb2\u1bb4\3\2\2\2\u1bb3\u1bac\3\2\2\2\u1bb3\u1bae\3\2\2\2\u1bb3"+
		"\u1bb0\3\2\2\2\u1bb4\u0315\3\2\2\2\u1bb5\u1bb6\7\u032f\2\2\u1bb6\u1bb7"+
		"\7\u02ae\2\2\u1bb7\u1bb8\7\u0330\2\2\u1bb8\u1bbc\5\u0248\u0125\2\u1bb9"+
		"\u1bbb\5\u0318\u018d\2\u1bba\u1bb9\3\2\2\2\u1bbb\u1bbe\3\2\2\2\u1bbc";
	private static final String _serializedATNSegment3 =
		"\u1bba\3\2\2\2\u1bbc\u1bbd\3\2\2\2\u1bbd\u1bbf\3\2\2\2\u1bbe\u1bbc\3\2"+
		"\2\2\u1bbf\u1bc0\7\u0330\2\2\u1bc0\u1bc1\7\u02af\2\2\u1bc1\u0317\3\2\2"+
		"\2\u1bc2\u1bc4\t`\2\2\u1bc3\u1bc5\5\u0248\u0125\2\u1bc4\u1bc3\3\2\2\2"+
		"\u1bc4\u1bc5\3\2\2\2\u1bc5\u1bc6\3\2\2\2\u1bc6\u1bc7\5\u0248\u0125\2\u1bc7"+
		"\u0319\3\2\2\2\u1bc8\u1bc9\7w\2\2\u1bc9\u1bca\7\u008b\2\2\u1bca\u031b"+
		"\3\2\2\2\u1bcb\u1bcc\7F\2\2\u1bcc\u1bcd\78\2\2\u1bcd\u031d\3\2\2\2\u1bce"+
		"\u1bcf\7F\2\2\u1bcf\u1bd0\7n\2\2\u1bd0\u1bd1\78\2\2\u1bd1\u031f\3\2\2"+
		"\2\u1bd2\u1bd3\7\u00bc\2\2\u1bd3\u1bd4\7\u01e0\2\2\u1bd4\u0321\3\2\2\2"+
		"\u1bd5\u1bd6\ta\2\2\u1bd6\u0323\3\2\2\2\u1bd7\u1bd8\tb\2\2\u1bd8\u0325"+
		"\3\2\2\2\u1bd9\u1bda\tc\2\2\u1bda\u0327\3\2\2\2\u1bdb\u1bdc\td\2\2\u1bdc"+
		"\u0329\3\2\2\2\u1bdd\u1bde\7\u00b6\2\2\u1bde\u1bdf\te\2\2\u1bdf\u032b"+
		"\3\2\2\2\u1be0\u1be1\t[\2\2\u1be1\u032d\3\2\2\2\u1be2\u1be3\tf\2\2\u1be3"+
		"\u032f\3\2\2\2\u1be4\u1be5\tg\2\2\u1be5\u0331\3\2\2\2\u03af\u0335\u0338"+
		"\u033c\u0340\u034c\u0376\u0383\u0394\u039f\u03a4\u03b0\u03cb\u03d1\u03d6"+
		"\u03dc\u03e2\u03e8\u03ed\u03f1\u03fa\u03fd\u0400\u0404\u040b\u040e\u0413"+
		"\u041d\u0424\u042c\u042f\u0434\u0438\u043e\u044b\u044e\u0452\u0455\u0459"+
		"\u045c\u0460\u0463\u0466\u046a\u046d\u0471\u0477\u047d\u0483\u048a\u0491"+
		"\u0497\u049d\u04a6\u04b9\u04cc\u04d0\u04d4\u04d8\u04df\u04e3\u04e5\u04e9"+
		"\u04ee\u04f1\u04f4\u04f7\u04fa\u04ff\u0503\u0508\u0513\u0518\u0528\u052e"+
		"\u0533\u0536\u053a\u053c\u0541\u0549\u0550\u0555\u0558\u0560\u0567\u056c"+
		"\u056f\u0577\u057e\u0583\u0585\u0589\u058c\u058f\u0597\u059e\u05a3\u05a6"+
		"\u05ae\u05b5\u05ba\u05bd\u05c5\u05cc\u05d1\u05d3\u05d8\u05e0\u05ec\u05f2"+
		"\u05f7\u05ff\u0606\u0609\u0613\u061b\u0638\u0641\u064a\u064c\u0656\u0660"+
		"\u066a\u0674\u067e\u0688\u068a\u068e\u0699\u069d\u06a0\u06ae\u06b1\u06b5"+
		"\u06b8\u06bc\u06bf\u06c3\u06c6\u06ca\u06cd\u06d0\u06d4\u06d7\u06db\u06e1"+
		"\u06ed\u06f6\u06f9\u0700\u0703\u0706\u070b\u0715\u071a\u071f\u0723\u072a"+
		"\u0731\u0737\u073f\u0742\u0749\u074c\u074e\u0754\u075b\u0764\u0768\u077e"+
		"\u0788\u0795\u079a\u079f\u07a4\u07ae\u07b3\u07b8\u07c2\u07c6\u07cd\u07d2"+
		"\u07d5\u07da\u07dd\u07e1\u07e5\u07ed\u0800\u0803\u0806\u080a\u0814\u0821"+
		"\u0828\u082b\u0834\u0838\u083d\u0843\u0847\u084f\u0858\u085d\u0869\u086e"+
		"\u0871\u087a\u0883\u088f\u08a2\u08a7\u08ad\u08b6\u08cd\u08db\u08e5\u08f1"+
		"\u08fd\u090c\u0915\u091f\u0929\u0933\u093d\u0944\u094b\u094f\u095a\u095d"+
		"\u0961\u0969\u096c\u0971\u097b\u0980\u0986\u098a\u098f\u0996\u099d\u09a4"+
		"\u09ac\u09b1\u09be\u09c5\u09cc\u09d2\u09d6\u09dd\u09e1\u09e8\u09eb\u09f0"+
		"\u09f7\u09fe\u0a02\u0a0b\u0a14\u0a1c\u0a20\u0a24\u0a27\u0a2a\u0a2d\u0a30"+
		"\u0a33\u0a36\u0a39\u0a40\u0a44\u0a47\u0a4a\u0a4d\u0a50\u0a53\u0a56\u0a5e"+
		"\u0a61\u0a64\u0a6c\u0a6f\u0a72\u0a75\u0a7b\u0a7f\u0a82\u0a86\u0a8d\u0a91"+
		"\u0a94\u0a9c\u0a9f\u0aa1\u0aa7\u0ab0\u0ab5\u0ac0\u0ac6\u0acf\u0ad8\u0ae0"+
		"\u0ae9\u0af1\u0afa\u0b02\u0b0b\u0b13\u0b1c\u0b24\u0b2d\u0b35\u0b3a\u0b41"+
		"\u0b48\u0b53\u0b58\u0b64\u0b68\u0b6a\u0b6d\u0b7b\u0b7f\u0b83\u0b89\u0b90"+
		"\u0b98\u0ba2\u0ba8\u0baa\u0bb0\u0bb2\u0bb4\u0bbe\u0bc1\u0bc4\u0bca\u0bcf"+
		"\u0bd3\u0bd6\u0bd9\u0bdc\u0bdf\u0be2\u0be5\u0be8\u0bef\u0bf8\u0bfc\u0bff"+
		"\u0c02\u0c05\u0c08\u0c0b\u0c0e\u0c14\u0c17\u0c1a\u0c23\u0c28\u0c2c\u0c31"+
		"\u0c39\u0c42\u0c50\u0c55\u0c58\u0c5c\u0c5f\u0c62\u0c65\u0c6d\u0c76\u0c79"+
		"\u0c7c\u0c81\u0c84\u0c87\u0c8a\u0c91\u0c94\u0c9d\u0ca2\u0ca9\u0cb1\u0cb4"+
		"\u0cb9\u0cc5\u0cca\u0ccf\u0cd5\u0cd7\u0cdd\u0cdf\u0ce5\u0ced\u0cf2\u0cf5"+
		"\u0cfa\u0cfd\u0d02\u0d0a\u0d13\u0d19\u0d21\u0d26\u0d29\u0d31\u0d37\u0d3d"+
		"\u0d40\u0d46\u0d4f\u0d54\u0d57\u0d5a\u0d5d\u0d67\u0d6f\u0d77\u0d80\u0d83"+
		"\u0d8c\u0d90\u0d94\u0d98\u0d9b\u0d9e\u0da1\u0da5\u0da9\u0dac\u0daf\u0db2"+
		"\u0db9\u0dbd\u0dcc\u0dd1\u0dd4\u0dda\u0ddd\u0de0\u0df1\u0dfa\u0e04\u0e08"+
		"\u0e12\u0e1c\u0e24\u0e27\u0e30\u0e33\u0e37\u0e3c\u0e40\u0e49\u0e4c\u0e6b"+
		"\u0e6e\u0e71\u0e85\u0e92\u0e9f\u0eac\u0ec5\u0eca\u0ee8\u0ef6\u0efd\u0f01"+
		"\u0f07\u0f0f\u0f11\u0f1c\u0f26\u0f31\u0f3d\u0f43\u0f48\u0f51\u0f56\u0f59"+
		"\u0f67\u0f6f\u0f74\u0f7b\u0f7d\u0f88\u0f93\u0f99\u0f9e\u0fa3\u0fa9\u0fb0"+
		"\u0fb8\u0fc0\u0fc5\u0fcb\u0fce\u0fd7\u0fdc\u0fe2\u0fea\u0ff7\u0ffa\u100b"+
		"\u1013\u101b\u1020\u1027\u102d\u1034\u103b\u1040\u1043\u1045\u104b\u104d"+
		"\u1051\u1053\u1056\u105b\u1062\u1069\u106e\u1071\u1073\u1079\u107b\u107f"+
		"\u1081\u1087\u108e\u1097\u109c\u10a5\u10ac\u10b1\u10b4\u10b6\u10bc\u10be"+
		"\u10c1\u10cd\u10d3\u10dc\u10e5\u10ea\u10f3\u10f9\u1104\u1107\u1113\u1123"+
		"\u112e\u1131\u113b\u1145\u114f\u115b\u1160\u1164\u1168\u1171\u118c\u119b"+
		"\u11a3\u11ab\u11b5\u11bb\u11c5\u11c9\u11cd\u11d5\u11da\u11e2\u11e6\u11e9"+
		"\u11ec\u11f5\u11f9\u1214\u121d\u1224\u122a\u1232\u1241\u1249\u124d\u1252"+
		"\u125c\u1260\u1266\u1269\u126e\u1272\u1279\u127c\u1282\u129a\u12a7\u12aa"+
		"\u12b4\u12bc\u12c0\u12c8\u12cc\u12d4\u12d8\u12df\u12e2\u12eb\u12f1\u12f7"+
		"\u1301\u1303\u130f\u1312\u1318\u131b\u1323\u132b\u1331\u1335\u1343\u134f"+
		"\u1359\u135d\u1360\u1367\u136e\u1373\u1378\u1383\u138e\u1396\u139b\u13a0"+
		"\u13ad\u13af\u13b4\u13bc\u13c0\u13c2\u13c9\u13d3\u13d7\u13da\u13dd\u13e5"+
		"\u13ea\u13ee\u13f4\u13fa\u1409\u140e\u1422\u1429\u142b\u1432\u1434\u1438"+
		"\u1441\u1445\u1448\u144d\u1451\u1453\u1463\u146c\u1474\u147d\u1485\u1489"+
		"\u148e\u1495\u149e\u14a5\u14a8\u14b3\u14bb\u14c2\u14ca\u14d1\u14d5\u14d9"+
		"\u14dd\u14f7\u1500\u1507\u150e\u1511\u1514\u151b\u151e\u1521\u1528\u152b"+
		"\u152e\u1535\u1538\u153b\u1542\u1545\u1548\u154f\u1552\u1555\u155c\u1560"+
		"\u1563\u1566\u156d\u1571\u1574\u1577\u157e\u1582\u1585\u1588\u158f\u1593"+
		"\u1596\u1599\u15a2\u15a7\u15aa\u15ad\u15b6\u15bb\u15be\u15c1\u15cb\u15d0"+
		"\u15d3\u15d6\u15df\u15e4\u15e7\u15ea\u15ec\u15f3\u15f6\u15f9\u1601\u1604"+
		"\u1607\u160e\u1611\u1614\u161c\u161f\u1622\u1629\u1630\u1635\u1638\u163f"+
		"\u1646\u1649\u164c\u1651\u1654\u1659\u165c\u1665\u166a\u166d\u1670\u1679"+
		"\u167e\u1681\u1684\u1686\u168e\u1695\u169c\u16a3\u16a5\u16af\u16b3\u16ba"+
		"\u16c0\u16c4\u16cc\u16d4\u16d6\u16de\u16e2\u16f4\u16f9\u16fe\u1710\u1719"+
		"\u1722\u172b\u1736\u173c\u1740\u1749\u1751\u1766\u176a\u176f\u1772\u1778"+
		"\u1786\u179b\u17bf\u17c2\u17c5\u1817\u1838\u183e\u1844\u185d\u1864\u1867"+
		"\u186d\u1872\u187b\u1882\u1888\u188d\u1893\u1895\u18a7\u18ae\u18b4\u18b9"+
		"\u18be\u18c3\u18c7\u18cd\u18d2\u18d6\u18dc\u18e2\u18e8\u18ef\u18f6\u18fc"+
		"\u1902\u1908\u190e\u1914\u191a\u1920\u1926\u192c\u1932\u1938\u193e\u1944"+
		"\u194c\u1950\u1964\u196e\u1972\u1987\u198c\u19a9\u19b4\u19bc\u19d2\u19d5"+
		"\u19e0\u19ee\u1a00\u1a0b\u1a12\u1a15\u1a18\u1a22\u1a32\u1a41\u1a4a\u1a55"+
		"\u1a58\u1a61\u1a65\u1a68\u1a6b\u1a6e\u1a71\u1a74\u1a77\u1a7a\u1a7d\u1a86"+
		"\u1a8c\u1a98\u1a9b\u1a9e\u1aa6\u1aab\u1aae\u1ab1\u1abc\u1aca\u1ad6\u1ae0"+
		"\u1ae3\u1ae9\u1aed\u1af0\u1af7\u1afa\u1afe\u1b07\u1b0c\u1b10\u1b13\u1b16"+
		"\u1b18\u1b1e\u1b22\u1b25\u1b39\u1b43\u1b48\u1b4d\u1b50\u1b55\u1b5e\u1b62"+
		"\u1b64\u1b69\u1b6d\u1b73\u1b76\u1b7a\u1b7d\u1b8d\u1b91\u1b93\u1b9c\u1baa"+
		"\u1bb3\u1bbc\u1bc4";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}