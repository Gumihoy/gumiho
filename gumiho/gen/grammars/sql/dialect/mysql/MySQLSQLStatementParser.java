// Generated from /Users/kongtong.ouyang/IdeaProjects/gumiho/gumiho/src/main/resources/grammars/sql/dialect/mysql/MySQLSQLStatementParser.g4 by ANTLR 4.7
package grammars.sql.dialect.mysql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySQLSQLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACES=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ANALYZE=8, AND=9, AS=10, ASC=11, BEFORE=12, BETWEEN=13, 
		BOTH=14, BY=15, CALL=16, CASCADE=17, CASE=18, CAST=19, CHANGE=20, CHARACTER=21, 
		CHECK=22, COLLATE=23, COLUMN=24, CONDITION=25, CONSTRAINT=26, CONTINUE=27, 
		CONVERT=28, CREATE=29, CROSS=30, CURRENT_USER=31, CURSOR=32, DATABASE=33, 
		DATABASES=34, DECLARE=35, DEFAULT=36, DELAYED=37, DELETE=38, DESC=39, 
		DESCRIBE=40, DETERMINISTIC=41, DISTINCT=42, DISTINCTROW=43, DIV=44, DROP=45, 
		EACH=46, ELSE=47, ELSEIF=48, ENCLOSED=49, ESCAPED=50, EXISTS=51, EXIT=52, 
		EXPLAIN=53, FALSE=54, FETCH=55, FOR=56, FORCE=57, FOREIGN=58, FROM=59, 
		FULLTEXT=60, GRANT=61, GROUP=62, HAVING=63, HIGH_PRIORITY=64, IF=65, IGNORE=66, 
		IN=67, INDEX=68, INFILE=69, INNER=70, INOUT=71, INVISIBLE=72, INSERT=73, 
		INTERVAL=74, INTO=75, IS=76, ITERATE=77, JOIN=78, KEY=79, KEYS=80, KILL=81, 
		LEADING=82, LEAVE=83, LEFT=84, LIKE=85, LIMIT=86, LINEAR=87, LINES=88, 
		LOAD=89, LOCK=90, LOCKED=91, LOOP=92, LOW_PRIORITY=93, MASTER_BIND=94, 
		MASTER_SSL_VERIFY_SERVER_CERT=95, MATCH=96, MAXVALUE=97, MODIFIES=98, 
		NATIONAL=99, NATURAL=100, NEW=101, NOWAIT=102, NOT=103, NO_WRITE_TO_BINLOG=104, 
		NULL_LITERAL=105, OF=106, OLD=107, ON=108, OPTIMIZE=109, OPTION=110, OPTIONALLY=111, 
		OR=112, ORDER=113, OUT=114, OUTER=115, OUTFILE=116, PARTITION=117, PERSIST=118, 
		PERSIST_ONLY=119, PRIMARY=120, PROCEDURE=121, PURGE=122, RANGE=123, READ=124, 
		READS=125, REFERENCES=126, REGEXP=127, RELEASE=128, RENAME=129, REPEAT=130, 
		REPLACE=131, REQUIRE=132, RESTRICT=133, RETURN=134, REVOKE=135, ROLE=136, 
		RIGHT=137, RLIKE=138, SCHEMA=139, SCHEMAS=140, SELECT=141, SET=142, SEPARATOR=143, 
		SHOW=144, SKIP_=145, SPATIAL=146, SQL=147, SQLEXCEPTION=148, SQLSTATE=149, 
		SQLWARNING=150, SQL_BIG_RESULT=151, SQL_CALC_FOUND_ROWS=152, SQL_SMALL_RESULT=153, 
		SSL=154, STARTING=155, STRAIGHT_JOIN=156, TABLE=157, TERMINATED=158, THEN=159, 
		TO=160, TRAILING=161, TRIGGER=162, TRUE=163, UNDO=164, UNION=165, UNIQUE=166, 
		UNLOCK=167, UNSIGNED=168, UPDATE=169, USAGE=170, USE=171, USING=172, VALUES=173, 
		VISIBLE=174, WHEN=175, WHERE=176, WHILE=177, WITH=178, WRITE=179, XOR=180, 
		ZEROFILL=181, TINYINT=182, SMALLINT=183, MEDIUMINT=184, INT=185, INTEGER=186, 
		BIGINT=187, REAL=188, DOUBLE=189, FLOAT=190, DECIMAL=191, DEC=192, NUMERIC=193, 
		DATE=194, TIME=195, TIMESTAMP=196, DATETIME=197, YEAR=198, CHAR=199, VARCHAR=200, 
		BINARY=201, VARBINARY=202, TINYBLOB=203, BLOB=204, MEDIUMBLOB=205, LONGBLOB=206, 
		TINYTEXT=207, TEXT=208, MEDIUMTEXT=209, LONGTEXT=210, ENUM=211, AVG=212, 
		BIT_AND=213, BIT_OR=214, BIT_XOR=215, COUNT=216, GROUP_CONCAT=217, MAX=218, 
		MIN=219, STD=220, STDDEV=221, STDDEV_POP=222, STDDEV_SAMP=223, SUM=224, 
		VAR_POP=225, VAR_SAMP=226, VARIANCE=227, CURRENT_DATE=228, CURRENT_TIME=229, 
		CURRENT_TIMESTAMP=230, LOCALTIME=231, EXTRACT=232, LOCALTIMESTAMP=233, 
		POSITION=234, SUBSTR=235, SUBSTRING=236, TRIM=237, UTC_DATE=238, UTC_TIME=239, 
		UTC_TIMESTAMP=240, ACCOUNT=241, ACTION=242, AFTER=243, AGAINST=244, AGGREGATE=245, 
		ALGORITHM=246, ANY=247, AT=248, AUTHORS=249, AUTOCOMMIT=250, AUTOEXTEND_SIZE=251, 
		AUTO_INCREMENT=252, AVG_ROW_LENGTH=253, BEGIN=254, BINLOG=255, BIT=256, 
		BLOCK=257, BOOL=258, BOOLEAN=259, BTREE=260, CACHE=261, CASCADED=262, 
		CHAIN=263, CHANGED=264, CHANNEL=265, CHECKSUM=266, CIPHER=267, CLIENT=268, 
		CLOSE=269, COALESCE=270, CODE=271, COLUMNS=272, COLUMN_FORMAT=273, COMMENT=274, 
		COMMIT=275, COMPACT=276, COMPLETION=277, COMPRESSED=278, COMPRESSION=279, 
		CONCURRENT=280, CONNECTION=281, CONSISTENT=282, CONTAINS=283, CONTEXT=284, 
		CONTRIBUTORS=285, COPY=286, CPU=287, DATA=288, DATAFILE=289, DEALLOCATE=290, 
		DEFAULT_AUTH=291, DEFINER=292, DELAY_KEY_WRITE=293, DES_KEY_FILE=294, 
		DIRECTORY=295, DISABLE=296, DISCARD=297, DISK=298, DO=299, DUMPFILE=300, 
		DUPLICATE=301, DYNAMIC=302, ENABLE=303, ENCRYPTION=304, END=305, ENDS=306, 
		ENGINE=307, ENGINES=308, ERROR=309, ERRORS=310, ESCAPE=311, EVEN=312, 
		EVENT=313, EVENTS=314, EVERY=315, EXCHANGE=316, EXCLUSIVE=317, EXPANSION=318, 
		EXPIRE=319, EXPORT=320, EXTENDED=321, EXTENT_SIZE=322, FAST=323, FAULTS=324, 
		FIELDS=325, FILE_BLOCK_SIZE=326, FILTER=327, FIRST=328, FIXED=329, FLUSH=330, 
		FOLLOWS=331, FOUND=332, FULL=333, FUNCTION=334, GENERAL=335, GLOBAL=336, 
		GRANTS=337, GROUP_REPLICATION=338, HANDLER=339, HASH=340, HELP=341, HOST=342, 
		HOSTS=343, IDENTIFIED=344, IGNORE_SERVER_IDS=345, IMPORT=346, INDEXES=347, 
		INITIAL_SIZE=348, INPLACE=349, INSERT_METHOD=350, INSTALL=351, INSTANCE=352, 
		INVOKER=353, IO=354, IO_THREAD=355, IPC=356, ISOLATION=357, ISSUER=358, 
		JSON=359, KEY_BLOCK_SIZE=360, LANGUAGE=361, LAST=362, LEAVES=363, LESS=364, 
		LEVEL=365, LIST=366, LOCAL=367, LOGFILE=368, LOGS=369, MASTER=370, MASTER_AUTO_POSITION=371, 
		MASTER_CONNECT_RETRY=372, MASTER_DELAY=373, MASTER_HEARTBEAT_PERIOD=374, 
		MASTER_HOST=375, MASTER_LOG_FILE=376, MASTER_LOG_POS=377, MASTER_PASSWORD=378, 
		MASTER_PORT=379, MASTER_RETRY_COUNT=380, MASTER_SSL=381, MASTER_SSL_CA=382, 
		MASTER_SSL_CAPATH=383, MASTER_SSL_CERT=384, MASTER_SSL_CIPHER=385, MASTER_SSL_CRL=386, 
		MASTER_SSL_CRLPATH=387, MASTER_SSL_KEY=388, MASTER_TLS_VERSION=389, MASTER_USER=390, 
		MAX_CONNECTIONS_PER_HOUR=391, MAX_QUERIES_PER_HOUR=392, MAX_ROWS=393, 
		MAX_SIZE=394, MAX_UPDATES_PER_HOUR=395, MAX_USER_CONNECTIONS=396, MEDIUM=397, 
		MERGE=398, MIGRATE=399, MIN_ROWS=400, MODE=401, MODIFY=402, MUTEX=403, 
		MYSQL=404, NAME=405, NAMES=406, NCHAR=407, NEVER=408, NEXT=409, NO=410, 
		NODEGROUP=411, NONE=412, OFFLINE=413, OFFSET=414, OJ=415, OLD_PASSWORD=416, 
		ONE=417, ONLINE=418, ONLY=419, OPEN=420, OPTIMIZER_COSTS=421, OPTIONS=422, 
		OWNER=423, PACK_KEYS=424, PAGE=425, PARSER=426, PARTIAL=427, PARTITIONING=428, 
		PARTITIONS=429, PASSWORD=430, PHASE=431, PLUGIN=432, PLUGIN_DIR=433, PLUGINS=434, 
		PORT=435, PRECEDES=436, PRECISION=437, PREPARE=438, PRESERVE=439, PREV=440, 
		PROCESSLIST=441, PROFILE=442, PROFILES=443, PROXY=444, QUERY=445, QUICK=446, 
		REBUILD=447, RECOVER=448, REDO_BUFFER_SIZE=449, REDUNDANT=450, RELAY=451, 
		RELAY_LOG_FILE=452, RELAY_LOG_POS=453, RELAYLOG=454, REMOVE=455, REORGANIZE=456, 
		REPAIR=457, REPLICATE_DO_DB=458, REPLICATE_DO_TABLE=459, REPLICATE_IGNORE_DB=460, 
		REPLICATE_IGNORE_TABLE=461, REPLICATE_REWRITE_DB=462, REPLICATE_WILD_DO_TABLE=463, 
		REPLICATE_WILD_IGNORE_TABLE=464, REPLICATION=465, RESET=466, RESUME=467, 
		RETURNS=468, ROLLBACK=469, ROLLUP=470, ROTATE=471, ROW=472, ROWS=473, 
		ROW_FORMAT=474, SAVEPOINT=475, SCHEDULE=476, SECURITY=477, SERVER=478, 
		SESSION=479, SHARE=480, SHARED=481, SIGNED=482, SIMPLE=483, SLAVE=484, 
		SLOW=485, SNAPSHOT=486, SOCKET=487, SOME=488, SONAME=489, SOUNDS=490, 
		SOURCE=491, SQL_AFTER_GTIDS=492, SQL_AFTER_MTS_GAPS=493, SQL_BEFORE_GTIDS=494, 
		SQL_BUFFER_RESULT=495, SQL_CACHE=496, SQL_NO_CACHE=497, SQL_THREAD=498, 
		START=499, STARTS=500, STATS_AUTO_RECALC=501, STATS_PERSISTENT=502, STATS_SAMPLE_PAGES=503, 
		STATUS=504, STOP=505, STORAGE=506, STRING=507, SUBJECT=508, SUBPARTITION=509, 
		SUBPARTITIONS=510, SUSPEND=511, SWAPS=512, SWITCHES=513, TABLESPACE=514, 
		TEMPORARY=515, TEMPTABLE=516, THAN=517, TRADITIONAL=518, TRANSACTION=519, 
		TRIGGERS=520, TRUNCATE=521, UNDEFINED=522, UNDOFILE=523, UNDO_BUFFER_SIZE=524, 
		UNINSTALL=525, UNKNOWN=526, UNTIL=527, UPGRADE=528, USER=529, USE_FRM=530, 
		USER_RESOURCES=531, VALIDATION=532, VALUE=533, VARIABLES=534, VIEW=535, 
		WAIT=536, WARNINGS=537, WITHOUT=538, WORK=539, WRAPPER=540, X509=541, 
		XA=542, XML=543, EUR=544, USA=545, JIS=546, ISO=547, INTERNAL=548, YEAR_MONTH=549, 
		DAY_HOUR=550, DAY_MINUTE=551, DAY_SECOND=552, HOUR_MINUTE=553, HOUR_SECOND=554, 
		MINUTE_SECOND=555, SECOND_MICROSECOND=556, MINUTE_MICROSECOND=557, HOUR_MICROSECOND=558, 
		DAY_MICROSECOND=559, QUARTER=560, MONTH=561, DAY=562, HOUR=563, MINUTE=564, 
		WEEK=565, SECOND=566, MICROSECOND=567, TABLES=568, ROUTINE=569, EXECUTE=570, 
		FILE=571, PROCESS=572, RELOAD=573, SHUTDOWN=574, SUPER=575, PRIVILEGES=576, 
		ARMSCII8=577, ASCII=578, BIG5=579, CP1250=580, CP1251=581, CP1256=582, 
		CP1257=583, CP850=584, CP852=585, CP866=586, CP932=587, DEC8=588, EUCJPMS=589, 
		EUCKR=590, GB2312=591, GBK=592, GEOSTD8=593, GREEK=594, HEBREW=595, HP8=596, 
		KEYBCS2=597, KOI8R=598, KOI8U=599, LATIN1=600, LATIN2=601, LATIN5=602, 
		LATIN7=603, MACCE=604, MACROMAN=605, SJIS=606, SWE7=607, TIS620=608, UCS2=609, 
		UJIS=610, UTF16=611, UTF16LE=612, UTF32=613, UTF8=614, UTF8MB3=615, UTF8MB4=616, 
		ARCHIVE=617, BLACKHOLE=618, CSV=619, FEDERATED=620, INNODB=621, MEMORY=622, 
		MRG_MYISAM=623, MYISAM=624, NDB=625, NDBCLUSTER=626, PERFOMANCE_SCHEMA=627, 
		REPEATABLE=628, COMMITTED=629, UNCOMMITTED=630, SERIALIZABLE=631, GEOMETRY=632, 
		GEOMETRYCOLLECTION=633, LINESTRING=634, MULTILINESTRING=635, MULTIPOINT=636, 
		MULTIPOLYGON=637, POINT=638, POLYGON=639, CHARSET=640, GET_FORMAT=641, 
		MOD=642, REVERSE=643, WEIGHT_STRING=644, ASSIGN_OP=645, PLUS_ASSIGN=646, 
		MINUS_ASSIGN=647, MULT_ASSIGN=648, DIV_ASSIGN=649, MOD_ASSIGN=650, AND_ASSIGN=651, 
		XOR_ASSIGN=652, OR_ASSIGN=653, PLUS_SIGN=654, MINUS_SIGN=655, ASTERISK=656, 
		DIVIDE=657, LESS_THAN_LESS_THAN_OP=658, GREATER_THAN_GREATER_THAN_OP=659, 
		LOGIC_AND_OP=660, LOGIC_OR_OP=661, MINUSMINUS=662, EQUALS_OP=663, LESS_THAN_OP=664, 
		GREATER_THAN_OP=665, LESS_THAN_OR_EQUALS_OP=666, GREATER_THAN_OR_EQUALS_OP=667, 
		NOT_EQUAL_OP=668, LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP=669, EXCLAMATION_OP=670, 
		BIT_NOT_OP=671, BIT_OR_OP=672, BIT_AND_OP=673, BIT_XOR_OP=674, PERIOD=675, 
		LEFT_PAREN=676, RIGHT_PAREN=677, LEFT_BRACE=678, RIGHT_BRACE=679, COMMA=680, 
		SEMI=681, AT_SIGN=682, SINGLE_QUOTE_SYMB=683, DOUBLE_QUOTE_SYMB=684, REVERSE_QUOTE_SYMB=685, 
		COLON=686, PERCENT=687, QUESTION_MARK=688, CHARSET_REVERSE_QOUTE_STRING=689, 
		NULL_SPEC_LITERAL=690, REGULAR_ID=691, DELIMITED_ID=692, REVERSE_QUOTE_ID=693, 
		CHAR_STRING=694, NCHAR_STRING=695, STRING_CHARSET_NAME=696, UNSIGNED_INTEGER=697, 
		APPROXIMATE_NUM_LIT=698, HEXADECIMAL_LITERAL=699, BIT_STRING=700, STRING_USER_NAME=701, 
		INNER_JOIN=702, CROSS_JOIN=703, NATURAL_JOIN=704, NATURAL_INNER_JOIN=705, 
		LEFT_JOIN=706, LEFT_OUTER_JOIN=707, NATURAL_LEFT_JOIN=708, NATURAL_LEFT_OUTER_JOIN=709, 
		RIGHT_JOIN=710, RIGHT_OUTER_JOIN=711, NATURAL_RIGHT_JOIN=712, NATURAL_RIGHT_OUTER_JOIN=713, 
		ERROR_RECONGNIGION=714, COLLATION=715, FORMAT=716, LOCAL_ID=717, MID=718, 
		TREAT=719, REF=720, COST=721, MODEL=722, AUTO=723, STRICT=724, JSON_TABLE=725, 
		JSON_ARRAY=726, JSON_ARRAYAGG=727, JSON_OBJECT=728, JSON_OBJECTAGG=729, 
		NULL=730, ABSENT=731, RETURNING=732, PRETTY=733, ARRAY=734, UNCONDITIONAL=735, 
		CONDITIONAL=736, EMPTY=737, OBJECT=738, PATH=739, NESTED=740, ORDINALITY=741, 
		APPROX_COUNT=742, APPROX_COUNT_DISTINCT=743, APPROX_COUNT_DISTINCT_AGG=744, 
		APPROX_COUNT_DISTINCT_DETAIL=745, APPROX_MEDIAN=746, APPROX_PERCENTILE=747, 
		APPROX_PERCENTILE_AGG=748, APPROX_PERCENTILE_DETAIL=749, APPROX_RANK=750, 
		APPROX_SUM=751, COLLECT=752, CORR=753, CORR_S=754, CORR_K=755, COVAR_POP=756, 
		COVAR_SAMP=757, CUME_DIST=758, DENSE_RANK=759, GROUP_ID=760, GROUPING=761, 
		GROUPING_ID=762, MEDIAN=763, PERCENT_RANK=764, PERCENTILE_CONT=765, PERCENTILE_DISC=766, 
		RANK=767, REGR_SLOPE=768, REGR_INTERCEPT=769, REGR_COUNT=770, REGR_R2=771, 
		REGR_AVGX=772, REGR_AVGY=773, REGR_SXX=774, REGR_SYY=775, REGR_SXY=776, 
		STATS_BINOMIAL_TEST=777, STATS_CROSSTAB=778, STATS_F_TEST=779, STATS_KS_TEST=780, 
		STATS_MODE=781, STATS_MW_TEST=782, STATS_ONE_WAY_ANOVA=783, STATS_T_TEST_ONE=784, 
		STATS_T_TEST_PAIRED=785, STATS_T_TEST_INDEP=786, STATS_T_TEST_INDEPU=787, 
		STATS_WSR_TEST=788, SYS_OP_ZONE_ID=789, SYS_XMLAGG=790, TO_APPROX_COUNT_DISTINCT=791, 
		TO_APPROX_PERCENTILE=792, XMLAGG=793, WITHIN=794, KEEP=795, LISTAGG=796, 
		OVERFLOW=797, RESPECT=798, NULLS=799, OVER=800, UNBOUNDED=801, PRECEDING=802, 
		CURRENT=803, FOLLOWING=804, CUBE_TABLE=805, SINGLE_QUOTE=806, HIERARCHY=807, 
		HRR=808;
	public static final int
		RULE_parse = 0, RULE_statement = 1, RULE_ddlStatement = 2, RULE_dmlStatement = 3, 
		RULE_transactionStatement = 4, RULE_replicationStatement = 5, RULE_preparedStatement = 6, 
		RULE_compoundStatement = 7, RULE_administrationStatement = 8, RULE_utilityStatement = 9, 
		RULE_createDatabaseStatement = 10, RULE_createSchemaStatement = 11, RULE_createEventStatement = 12, 
		RULE_createIndexStatement = 13, RULE_createIndexStatementColumn = 14, 
		RULE_createIndexStatementOption = 15, RULE_algorithmOptionExpr = 16, RULE_lockOptionExpr = 17, 
		RULE_createLogfileGroupStatement = 18, RULE_createProcedureStatement = 19, 
		RULE_createFunctionStatement = 20, RULE_createServerStatement = 21, RULE_serverOption = 22, 
		RULE_createTableStatement = 23, RULE_tableElement = 24, RULE_columnDefinition = 25, 
		RULE_likeClause = 26, RULE_columnConstraint = 27, RULE_tableConstraint = 28, 
		RULE_constraintColumn = 29, RULE_matchType = 30, RULE_referenceTriggerAction = 31, 
		RULE_referenceControlType = 32, RULE_tableOption = 33, RULE_iPartitionBy = 34, 
		RULE_iSubPartitionBy = 35, RULE_partitionDefinition = 36, RULE_iPartitionValues = 37, 
		RULE_subPartitionDefinition = 38, RULE_partitionOption = 39, RULE_createTablespaceStatement = 40, 
		RULE_createTablespaceInnodb = 41, RULE_createTablespaceNdb = 42, RULE_createTriggerStatement = 43, 
		RULE_definerOptionExpr = 44, RULE_triggerOrderingClause = 45, RULE_createViewStatement = 46, 
		RULE_withCheckOption = 47, RULE_createDatabaseOption = 48, RULE_scheduleexpr = 49, 
		RULE_timestampValue = 50, RULE_enableType = 51, RULE_indexOption = 52, 
		RULE_indexOptionKeyBlockSize = 53, RULE_indexOptionUsingBtree = 54, RULE_indexOptionUsingHash = 55, 
		RULE_indexOptionWithParser = 56, RULE_indexAttributeVisible = 57, RULE_indexAttributeInvisible = 58, 
		RULE_indexOptionCommentOption = 59, RULE_parameterDeclaration = 60, RULE_routineOption = 61, 
		RULE_alterDatabaseStatement = 62, RULE_alterSchemaStatement = 63, RULE_alterEventStatement = 64, 
		RULE_alterFunctionStatement = 65, RULE_alterInstanceStatement = 66, RULE_alterLogfileGroupStatement = 67, 
		RULE_alterProcedureStatement = 68, RULE_alterServerStatement = 69, RULE_alterTableStatement = 70, 
		RULE_alterTableItem = 71, RULE_alterTableColumnActionProperty = 72, RULE_alterColumnAction = 73, 
		RULE_alterTablePartitionItem = 74, RULE_alterTablespaceStatement = 75, 
		RULE_alterViewStatement = 76, RULE_dropDatabaseStatement = 77, RULE_dropSchemaStatement = 78, 
		RULE_dropEventStatement = 79, RULE_dropIndexStatement = 80, RULE_dropIndexStatementOption = 81, 
		RULE_dropLogfileGroupStatement = 82, RULE_dropProcedureStatement = 83, 
		RULE_dropFunctionStatement = 84, RULE_dropServerStatement = 85, RULE_dropTableStatement = 86, 
		RULE_dropTablespaceStatement = 87, RULE_dropTriggerStatement = 88, RULE_dropViewStatement = 89, 
		RULE_renameTableStatement = 90, RULE_renameTableClause = 91, RULE_truncateTableStatement = 92, 
		RULE_selectStatement = 93, RULE_iSelectQuery = 94, RULE_selectQueryBasic = 95, 
		RULE_selectQuery = 96, RULE_selectQueryCache = 97, RULE_selectParenQuery = 98, 
		RULE_selectUnionQuery = 99, RULE_setQuantifier = 100, RULE_unionOperator = 101, 
		RULE_selectItem = 102, RULE_selectItemAlias = 103, RULE_fromClause = 104, 
		RULE_iTableReference = 105, RULE_tableReferenceBasic = 106, RULE_joinTableReference = 107, 
		RULE_partitionClause = 108, RULE_iIndexHint = 109, RULE_indexHintType = 110, 
		RULE_joinType = 111, RULE_rightJoinClause = 112, RULE_iJoinCondition = 113, 
		RULE_whereClause = 114, RULE_groupByClause = 115, RULE_havingClause = 116, 
		RULE_groupByItem = 117, RULE_orderByClause = 118, RULE_orderByItem = 119, 
		RULE_limitOffsetClause = 120, RULE_iSelectQueryIntoClause = 121, RULE_iLockClause = 122, 
		RULE_forUpdateOption = 123, RULE_selectIntoStatement = 124, RULE_selectTargetItem = 125, 
		RULE_insertStatement = 126, RULE_iValueClause = 127, RULE_valuesClause = 128, 
		RULE_valuesClauseItem = 129, RULE_onDuplicateKeyUpdateClause = 130, RULE_updateStatement = 131, 
		RULE_updateSetClause = 132, RULE_updateSetItemClause = 133, RULE_deleteStatement = 134, 
		RULE_deleteStatementUsingClause = 135, RULE_replaceStatement = 136, RULE_replaceStatementValuseClause = 137, 
		RULE_callStatement = 138, RULE_loadDataInfileStatement = 139, RULE_loadXmlStatement = 140, 
		RULE_doStatement = 141, RULE_handlerStatement = 142, RULE_handlerOpenStatement = 143, 
		RULE_handlerReadStatement = 144, RULE_handlerCloseStatement = 145, RULE_selectFieldsInto = 146, 
		RULE_selectLinesInto = 147, RULE_startTransaction = 148, RULE_transactionMode = 149, 
		RULE_beginWork = 150, RULE_commitWork = 151, RULE_rollbackWork = 152, 
		RULE_savepointStatement = 153, RULE_rollbackStatement = 154, RULE_releaseStatement = 155, 
		RULE_lockTablesStatement = 156, RULE_lockTableItem = 157, RULE_lockAction = 158, 
		RULE_unlockTablesStatement = 159, RULE_setAutoCommitStatement = 160, RULE_transactionOption = 161, 
		RULE_transactionLevel = 162, RULE_changeMaster = 163, RULE_changeReplicationFilter = 164, 
		RULE_purgeBinaryLogs = 165, RULE_resetMaster = 166, RULE_resetSlave = 167, 
		RULE_startSlave = 168, RULE_stopSlave = 169, RULE_startGroupReplication = 170, 
		RULE_stopGroupReplication = 171, RULE_masterOption = 172, RULE_stringMasterOption = 173, 
		RULE_decimalMasterOption = 174, RULE_boolMasterOption = 175, RULE_channelOption = 176, 
		RULE_replicationFilter = 177, RULE_tablePair = 178, RULE_threadType = 179, 
		RULE_untilOption = 180, RULE_connectionOption = 181, RULE_gtnameIdentifierSet = 182, 
		RULE_xaStartTransaction = 183, RULE_xaEndTransaction = 184, RULE_xaPrepareStatement = 185, 
		RULE_xaCommitWork = 186, RULE_xaRollbackWork = 187, RULE_xaRecoverWork = 188, 
		RULE_prepareStatement = 189, RULE_executeStatement = 190, RULE_deallocatePrepare = 191, 
		RULE_statementItem = 192, RULE_body = 193, RULE_bodyItem = 194, RULE_bodyItemStatement = 195, 
		RULE_caseStatement = 196, RULE_caseStatementWhenItem = 197, RULE_caseStatementElseClause = 198, 
		RULE_ifStatement = 199, RULE_elseIf = 200, RULE_iterateStatement = 201, 
		RULE_leaveStatement = 202, RULE_loopStatement = 203, RULE_repeatStatement = 204, 
		RULE_returnStatement = 205, RULE_whileStatement = 206, RULE_cursorStatement = 207, 
		RULE_conditionHandling = 208, RULE_declareVariable = 209, RULE_declareCondition = 210, 
		RULE_declareCursor = 211, RULE_declareHandler = 212, RULE_handlerConditionValue = 213, 
		RULE_alterUserStatement = 214, RULE_createUserStatement = 215, RULE_dropUserStatement = 216, 
		RULE_grantStatement = 217, RULE_grantProxy = 218, RULE_renameUser = 219, 
		RULE_revokeStatement = 220, RULE_revokeProxy = 221, RULE_userSpecification = 222, 
		RULE_userAuthOption = 223, RULE_tlsOption = 224, RULE_userResourceOption = 225, 
		RULE_userPasswordOption = 226, RULE_userLockOption = 227, RULE_privelegeClause = 228, 
		RULE_privilege = 229, RULE_privilegeLevel = 230, RULE_renameUserClause = 231, 
		RULE_analyzeTable = 232, RULE_checkTable = 233, RULE_checksumTable = 234, 
		RULE_optimizeTable = 235, RULE_repairTable = 236, RULE_checkTableOption = 237, 
		RULE_createUdfunction = 238, RULE_installPlugin = 239, RULE_uninstallPlugin = 240, 
		RULE_setStatement = 241, RULE_setDefaultRole = 242, RULE_showStatement = 243, 
		RULE_showCommonEntity = 244, RULE_showFilter = 245, RULE_showGlobalInfoClause = 246, 
		RULE_showSchemaEntity = 247, RULE_showProfileType = 248, RULE_binlogStatement = 249, 
		RULE_cacheIndexStatement = 250, RULE_flushStatement = 251, RULE_killStatement = 252, 
		RULE_loadIndexIntoCache = 253, RULE_resetStatement = 254, RULE_shutdownStatement = 255, 
		RULE_tableIndexes = 256, RULE_flushOption = 257, RULE_flushTableOption = 258, 
		RULE_loadedTableIndexes = 259, RULE_simpleDescribeStatement = 260, RULE_fullDescribeStatement = 261, 
		RULE_helpStatement = 262, RULE_useStatement = 263, RULE_describeObjectClause = 264, 
		RULE_engineName = 265, RULE_unameIdentifierSet = 266, RULE_xid = 267, 
		RULE_xnameIdentifierStringId = 268, RULE_authPlugin = 269, RULE_null_ = 270, 
		RULE_notNull = 271, RULE_convertedDataType = 272, RULE_lengthOneDimension = 273, 
		RULE_lengthTwoDimension = 274, RULE_lengthTwoOptionalDimension = 275, 
		RULE_simpleStrings = 276, RULE_userVariables = 277, RULE_levelsInWeightString = 278, 
		RULE_levelInWeightListElement = 279, RULE_aggregateWindowedFunction = 280, 
		RULE_charsetNameBase = 281, RULE_transactionLevelBase = 282, RULE_privilegesBase = 283, 
		RULE_dataTypeBase = 284, RULE_keywordsCanBeId = 285, RULE_allTokens = 286, 
		RULE_dataType = 287, RULE_iNumericDatatype = 288, RULE_iStringDataType = 289, 
		RULE_iDateTimeDataType = 290, RULE_spatialDataType = 291, RULE_iBoolDataType = 292, 
		RULE_iJsonDataType = 293, RULE_otherDataType = 294, RULE_identifier = 295, 
		RULE_nameIdentifier = 296, RULE_literal = 297, RULE_intervalType = 298, 
		RULE_unaryOperatorExpr = 299, RULE_unaryOperator = 300, RULE_variableExpr = 301, 
		RULE_localVariableExpr = 302, RULE_globalVariableExpr = 303, RULE_globalGlobalVariableExpr = 304, 
		RULE_sessionGlobalVariableExpr = 305, RULE_persistGlobalVariableExpr = 306, 
		RULE_persistOnlyGlobalVariableExpr = 307, RULE_rowExpr = 308, RULE_selectQueryExpr = 309, 
		RULE_matchExpr = 310, RULE_searchModifier = 311, RULE_caseExpr = 312, 
		RULE_caseExprWhenItem = 313, RULE_caseExprElseClause = 314, RULE_listExpr = 315, 
		RULE_exprBasic = 316, RULE_expr = 317, RULE_comparisonOp = 318, RULE_defaultClause = 319, 
		RULE_autoIncrementOptionExpr = 320, RULE_avgRowLengthOptionExpr = 321, 
		RULE_characterSetOptionExpr = 322, RULE_charsetOptionExpr = 323, RULE_checksumOptionExpr = 324, 
		RULE_collateOptionExpr = 325, RULE_commentOptionExpr = 326, RULE_compressionOptionExpr = 327, 
		RULE_connectionOptionExpr = 328, RULE_dataDirectoryOptionExpr = 329, RULE_indexDirectoryOptionExpr = 330, 
		RULE_delayKeyWriteOptionExpr = 331, RULE_encryptionOptionExpr = 332, RULE_engineOptionExpr = 333, 
		RULE_insertMethodOptionExpr = 334, RULE_keyBlockSizeOptionExpr = 335, 
		RULE_maxRowsOptionExpr = 336, RULE_minRowsOptionExpr = 337, RULE_packKeysOptionExpr = 338, 
		RULE_passwordOptionExpr = 339, RULE_rowFormatOptionExpr = 340, RULE_statsAutoRecalcOptionExpr = 341, 
		RULE_statsPersistentOptionExpr = 342, RULE_statsSamplePageOptionExpr = 343, 
		RULE_tablespaceOptionExpr = 344, RULE_unionOptionExpr = 345, RULE_assignmentExpr = 346, 
		RULE_defaultLiteral = 347, RULE_allLiteral = 348, RULE_noneLiteral = 349, 
		RULE_maxValueLiteral = 350, RULE_condition = 351, RULE_notCondition = 352, 
		RULE_formatJson = 353, RULE_exprAsObjectExpr = 354, RULE_existsCondition = 355, 
		RULE_specificFunction = 356, RULE_function = 357, RULE_noArgumentFunctionName = 358, 
		RULE_positionFunction = 359, RULE_subStrFromFunction = 360, RULE_subStringFunction = 361, 
		RULE_trimFunction = 362, RULE_weightStringFunction = 363, RULE_extractFunction = 364, 
		RULE_treatFunction = 365, RULE_convertUsingFunction = 366, RULE_costMatrixClause = 367, 
		RULE_jsonFunction = 368, RULE_jsonFunctionName = 369, RULE_jsonFunctionArgument = 370, 
		RULE_jsonFormatJsonArgumentExpr = 371, RULE_jsonKeyValueArgumentExpr = 372, 
		RULE_jsonOnNullClause = 373, RULE_jsonReturningClause = 374, RULE_withUniqueKeys = 375, 
		RULE_jsonWrapperClause = 376, RULE_jsonOnErrorClause = 377, RULE_jsonOnEmptyClause = 378, 
		RULE_jsonColumnsClause = 379, RULE_jsonColumnDefinition = 380, RULE_aggregateFunction = 381, 
		RULE_aggregateFunctionName = 382, RULE_withinGroupSpecification = 383, 
		RULE_firstFunction = 384, RULE_lastFunction = 385, RULE_listAggFunction = 386, 
		RULE_listaggOverflowClause = 387, RULE_windowFunction = 388, RULE_windowFunctionNullsOption = 389, 
		RULE_windowFunctionFromOption = 390, RULE_overClause = 391, RULE_analyticClause = 392, 
		RULE_partitionByClause = 393, RULE_windowFrameClause = 394, RULE_windowFrameUnit = 395, 
		RULE_windowFrameExtent = 396, RULE_windowFrameExtentItem = 397, RULE_cubeTableFunction = 398, 
		RULE_cubeTableOptionExpr = 399, RULE_orReplace = 400, RULE_ifExists = 401, 
		RULE_ifNotExists = 402, RULE_withRollup = 403, RULE_orderingSpecification = 404, 
		RULE_intimeAction = 405, RULE_indexCategory = 406, RULE_keyViolate = 407, 
		RULE_indexFormat = 408, RULE_indexType = 409, RULE_withType = 410, RULE_visibleType = 411, 
		RULE_priority = 412;
	public static final String[] ruleNames = {
		"parse", "statement", "ddlStatement", "dmlStatement", "transactionStatement", 
		"replicationStatement", "preparedStatement", "compoundStatement", "administrationStatement", 
		"utilityStatement", "createDatabaseStatement", "createSchemaStatement", 
		"createEventStatement", "createIndexStatement", "createIndexStatementColumn", 
		"createIndexStatementOption", "algorithmOptionExpr", "lockOptionExpr", 
		"createLogfileGroupStatement", "createProcedureStatement", "createFunctionStatement", 
		"createServerStatement", "serverOption", "createTableStatement", "tableElement", 
		"columnDefinition", "likeClause", "columnConstraint", "tableConstraint", 
		"constraintColumn", "matchType", "referenceTriggerAction", "referenceControlType", 
		"tableOption", "iPartitionBy", "iSubPartitionBy", "partitionDefinition", 
		"iPartitionValues", "subPartitionDefinition", "partitionOption", "createTablespaceStatement", 
		"createTablespaceInnodb", "createTablespaceNdb", "createTriggerStatement", 
		"definerOptionExpr", "triggerOrderingClause", "createViewStatement", "withCheckOption", 
		"createDatabaseOption", "scheduleexpr", "timestampValue", "enableType", 
		"indexOption", "indexOptionKeyBlockSize", "indexOptionUsingBtree", "indexOptionUsingHash", 
		"indexOptionWithParser", "indexAttributeVisible", "indexAttributeInvisible", 
		"indexOptionCommentOption", "parameterDeclaration", "routineOption", "alterDatabaseStatement", 
		"alterSchemaStatement", "alterEventStatement", "alterFunctionStatement", 
		"alterInstanceStatement", "alterLogfileGroupStatement", "alterProcedureStatement", 
		"alterServerStatement", "alterTableStatement", "alterTableItem", "alterTableColumnActionProperty", 
		"alterColumnAction", "alterTablePartitionItem", "alterTablespaceStatement", 
		"alterViewStatement", "dropDatabaseStatement", "dropSchemaStatement", 
		"dropEventStatement", "dropIndexStatement", "dropIndexStatementOption", 
		"dropLogfileGroupStatement", "dropProcedureStatement", "dropFunctionStatement", 
		"dropServerStatement", "dropTableStatement", "dropTablespaceStatement", 
		"dropTriggerStatement", "dropViewStatement", "renameTableStatement", "renameTableClause", 
		"truncateTableStatement", "selectStatement", "iSelectQuery", "selectQueryBasic", 
		"selectQuery", "selectQueryCache", "selectParenQuery", "selectUnionQuery", 
		"setQuantifier", "unionOperator", "selectItem", "selectItemAlias", "fromClause", 
		"iTableReference", "tableReferenceBasic", "joinTableReference", "partitionClause", 
		"iIndexHint", "indexHintType", "joinType", "rightJoinClause", "iJoinCondition", 
		"whereClause", "groupByClause", "havingClause", "groupByItem", "orderByClause", 
		"orderByItem", "limitOffsetClause", "iSelectQueryIntoClause", "iLockClause", 
		"forUpdateOption", "selectIntoStatement", "selectTargetItem", "insertStatement", 
		"iValueClause", "valuesClause", "valuesClauseItem", "onDuplicateKeyUpdateClause", 
		"updateStatement", "updateSetClause", "updateSetItemClause", "deleteStatement", 
		"deleteStatementUsingClause", "replaceStatement", "replaceStatementValuseClause", 
		"callStatement", "loadDataInfileStatement", "loadXmlStatement", "doStatement", 
		"handlerStatement", "handlerOpenStatement", "handlerReadStatement", "handlerCloseStatement", 
		"selectFieldsInto", "selectLinesInto", "startTransaction", "transactionMode", 
		"beginWork", "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
		"releaseStatement", "lockTablesStatement", "lockTableItem", "lockAction", 
		"unlockTablesStatement", "setAutoCommitStatement", "transactionOption", 
		"transactionLevel", "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", 
		"resetMaster", "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
		"stopGroupReplication", "masterOption", "stringMasterOption", "decimalMasterOption", 
		"boolMasterOption", "channelOption", "replicationFilter", "tablePair", 
		"threadType", "untilOption", "connectionOption", "gtnameIdentifierSet", 
		"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
		"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
		"deallocatePrepare", "statementItem", "body", "bodyItem", "bodyItemStatement", 
		"caseStatement", "caseStatementWhenItem", "caseStatementElseClause", "ifStatement", 
		"elseIf", "iterateStatement", "leaveStatement", "loopStatement", "repeatStatement", 
		"returnStatement", "whileStatement", "cursorStatement", "conditionHandling", 
		"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
		"handlerConditionValue", "alterUserStatement", "createUserStatement", 
		"dropUserStatement", "grantStatement", "grantProxy", "renameUser", "revokeStatement", 
		"revokeProxy", "userSpecification", "userAuthOption", "tlsOption", "userResourceOption", 
		"userPasswordOption", "userLockOption", "privelegeClause", "privilege", 
		"privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
		"optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "setDefaultRole", 
		"showStatement", "showCommonEntity", "showFilter", "showGlobalInfoClause", 
		"showSchemaEntity", "showProfileType", "binlogStatement", "cacheIndexStatement", 
		"flushStatement", "killStatement", "loadIndexIntoCache", "resetStatement", 
		"shutdownStatement", "tableIndexes", "flushOption", "flushTableOption", 
		"loadedTableIndexes", "simpleDescribeStatement", "fullDescribeStatement", 
		"helpStatement", "useStatement", "describeObjectClause", "engineName", 
		"unameIdentifierSet", "xid", "xnameIdentifierStringId", "authPlugin", 
		"null_", "notNull", "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
		"lengthTwoOptionalDimension", "simpleStrings", "userVariables", "levelsInWeightString", 
		"levelInWeightListElement", "aggregateWindowedFunction", "charsetNameBase", 
		"transactionLevelBase", "privilegesBase", "dataTypeBase", "keywordsCanBeId", 
		"allTokens", "dataType", "iNumericDatatype", "iStringDataType", "iDateTimeDataType", 
		"spatialDataType", "iBoolDataType", "iJsonDataType", "otherDataType", 
		"identifier", "nameIdentifier", "literal", "intervalType", "unaryOperatorExpr", 
		"unaryOperator", "variableExpr", "localVariableExpr", "globalVariableExpr", 
		"globalGlobalVariableExpr", "sessionGlobalVariableExpr", "persistGlobalVariableExpr", 
		"persistOnlyGlobalVariableExpr", "rowExpr", "selectQueryExpr", "matchExpr", 
		"searchModifier", "caseExpr", "caseExprWhenItem", "caseExprElseClause", 
		"listExpr", "exprBasic", "expr", "comparisonOp", "defaultClause", "autoIncrementOptionExpr", 
		"avgRowLengthOptionExpr", "characterSetOptionExpr", "charsetOptionExpr", 
		"checksumOptionExpr", "collateOptionExpr", "commentOptionExpr", "compressionOptionExpr", 
		"connectionOptionExpr", "dataDirectoryOptionExpr", "indexDirectoryOptionExpr", 
		"delayKeyWriteOptionExpr", "encryptionOptionExpr", "engineOptionExpr", 
		"insertMethodOptionExpr", "keyBlockSizeOptionExpr", "maxRowsOptionExpr", 
		"minRowsOptionExpr", "packKeysOptionExpr", "passwordOptionExpr", "rowFormatOptionExpr", 
		"statsAutoRecalcOptionExpr", "statsPersistentOptionExpr", "statsSamplePageOptionExpr", 
		"tablespaceOptionExpr", "unionOptionExpr", "assignmentExpr", "defaultLiteral", 
		"allLiteral", "noneLiteral", "maxValueLiteral", "condition", "notCondition", 
		"formatJson", "exprAsObjectExpr", "existsCondition", "specificFunction", 
		"function", "noArgumentFunctionName", "positionFunction", "subStrFromFunction", 
		"subStringFunction", "trimFunction", "weightStringFunction", "extractFunction", 
		"treatFunction", "convertUsingFunction", "costMatrixClause", "jsonFunction", 
		"jsonFunctionName", "jsonFunctionArgument", "jsonFormatJsonArgumentExpr", 
		"jsonKeyValueArgumentExpr", "jsonOnNullClause", "jsonReturningClause", 
		"withUniqueKeys", "jsonWrapperClause", "jsonOnErrorClause", "jsonOnEmptyClause", 
		"jsonColumnsClause", "jsonColumnDefinition", "aggregateFunction", "aggregateFunctionName", 
		"withinGroupSpecification", "firstFunction", "lastFunction", "listAggFunction", 
		"listaggOverflowClause", "windowFunction", "windowFunctionNullsOption", 
		"windowFunctionFromOption", "overClause", "analyticClause", "partitionByClause", 
		"windowFrameClause", "windowFrameUnit", "windowFrameExtent", "windowFrameExtentItem", 
		"cubeTableFunction", "cubeTableOptionExpr", "orReplace", "ifExists", "ifNotExists", 
		"withRollup", "orderingSpecification", "intimeAction", "indexCategory", 
		"keyViolate", "indexFormat", "indexType", "withType", "visibleType", "priority"
	};

	private static final String[] _LITERAL_NAMES = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ANALYZE'", 
		"'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BY'", "'CALL'", 
		"'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", 
		"'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
		"'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", 
		"'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", 
		"'DESCRIBE'", "'DETERMINISTIC'", "'DISTINCT'", "'DISTINCTROW'", "'DIV'", 
		"'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'", "'ESCAPED'", "'EXISTS'", 
		"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
		"'FROM'", "'FULLTEXT'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", 
		"'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", 
		"'INVISIBLE'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", 
		"'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", 
		"'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", "'LOCKED'", 
		"'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
		"'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATIONAL'", "'NATURAL'", "'NEW'", 
		"'NOWAIT'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'OF'", "'OLD'", 
		"'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
		"'OUTER'", "'OUTFILE'", "'PARTITION'", "'PERSIST'", "'PERSIST_ONLY'", 
		"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
		"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
		"'REQUIRE'", "'RESTRICT'", "'RETURN'", "'REVOKE'", "'ROLE'", "'RIGHT'", 
		"'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
		"'SHOW'", "'SKIP'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", 
		"'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
		"'SSL'", "'STARTING'", "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
		"'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", 
		"'UNLOCK'", "'UNSIGNED'", "'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", 
		"'VISIBLE'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
		"'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", "'INT'", "'INTEGER'", 
		"'BIGINT'", "'REAL'", "'DOUBLE'", "'FLOAT'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
		"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
		"'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONGBLOB'", 
		"'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'AVG'", 
		"'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'GROUP_CONCAT'", "'MAX'", 
		"'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", 
		"'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
		"'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", 
		"'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGAINST'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
		"'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'CIPHER'", "'CLIENT'", 
		"'CLOSE'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", 
		"'CONCURRENT'", "'CONNECTION'", "'CONSISTENT'", "'CONTAINS'", "'CONTEXT'", 
		"'CONTRIBUTORS'", "'COPY'", "'CPU'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", 
		"'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
		"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
		"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", 
		"'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
		"'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPANSION'", 
		"'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAST'", "'FAULTS'", 
		"'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
		"'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", 
		"'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", 
		"'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", 
		"'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", 
		"'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'", 
		"'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", 
		"'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", 
		"'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
		"'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
		"'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", "'MASTER_SSL_CA'", 
		"'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", 
		"'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
		"'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", 
		"'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", "'MEDIUM'", 
		"'MERGE'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", 
		"'MYSQL'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", 
		"'NODEGROUP'", "'NONE'", "'OFFLINE'", "'OFFSET'", "'OJ'", "'OLD_PASSWORD'", 
		"'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", 
		"'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", 
		"'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", 
		"'PORT'", "'PRECEDES'", "'PRECISION'", "'PREPARE'", "'PRESERVE'", "'PREV'", 
		"'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", 
		"'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", 
		"'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
		"'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
		"'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
		"'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'", 
		"'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'", 
		"'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'", 
		"'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", 
		"'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", 
		"'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
		"'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", 
		"'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
		"'STATUS'", "'STOP'", "'STORAGE'", "'STRING'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLESPACE'", 
		"'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
		"'TRIGGERS'", "'TRUNCATE'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
		"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
		"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
		"'WAIT'", "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
		"'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'YEAR_MONTH'", 
		"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
		"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
		"'WEEK'", "'SECOND'", "'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", 
		"'FILE'", "'PROCESS'", "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", 
		"'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
		"'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
		"'EUCKR'", "'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", 
		"'KEYBCS2'", "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", 
		"'LATIN7'", "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", 
		"'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
		"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
		"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFOMANCE_SCHEMA'", 
		"'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRY'", 
		"'GEOMETRYCOLLECTION'", "'LINESTRING'", "'MULTILINESTRING'", "'MULTIPOINT'", 
		"'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'CHARSET'", "'GET_FORMAT'", 
		"'MOD'", "'REVERSE'", "'WEIGHT_STRING'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'+'", "'-'", "'*'", "'/'", "'<<'", 
		"'>>'", "'&&'", "'||'", "'--'", "'='", "'<'", "'>'", "'<='", "'>='", null, 
		"'<=>'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", null, null, "'{'", 
		"'}'", "','", "';'", "'@'", "'''", "'\"'", "'`'", "':'", "'%'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "SPACES", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "BEFORE", "BETWEEN", 
		"BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
		"CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
		"CREATE", "CROSS", "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
		"DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
		"DISTINCT", "DISTINCTROW", "DIV", "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", 
		"ESCAPED", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", 
		"FOREIGN", "FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INVISIBLE", 
		"INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", 
		"KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", 
		"LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
		"MATCH", "MAXVALUE", "MODIFIES", "NATIONAL", "NATURAL", "NEW", "NOWAIT", 
		"NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "OF", "OLD", "ON", "OPTIMIZE", 
		"OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "PARTITION", 
		"PERSIST", "PERSIST_ONLY", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
		"READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", 
		"REQUIRE", "RESTRICT", "RETURN", "REVOKE", "ROLE", "RIGHT", "RLIKE", "SCHEMA", 
		"SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SKIP_", "SPATIAL", "SQL", 
		"SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
		"SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
		"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
		"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "VISIBLE", 
		"WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", 
		"SMALLINT", "MEDIUMINT", "INT", "INTEGER", "BIGINT", "REAL", "DOUBLE", 
		"FLOAT", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
		"YEAR", "CHAR", "VARCHAR", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", 
		"MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", 
		"ENUM", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT", 
		"MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", 
		"VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
		"LOCALTIME", "EXTRACT", "LOCALTIMESTAMP", "POSITION", "SUBSTR", "SUBSTRING", 
		"TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
		"AFTER", "AGAINST", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", 
		"AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
		"BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", 
		"CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", "CIPHER", "CLIENT", "CLOSE", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", 
		"COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
		"CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", "DATA", 
		"DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
		"DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
		"DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPANSION", "EXPIRE", "EXPORT", "EXTENDED", 
		"EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", 
		"FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", 
		"GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", 
		"HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
		"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
		"MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
		"MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
		"MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
		"MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
		"MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
		"MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
		"MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MIGRATE", "MIN_ROWS", "MODE", 
		"MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", "NEVER", "NEXT", 
		"NO", "NODEGROUP", "NONE", "OFFLINE", "OFFSET", "OJ", "OLD_PASSWORD", 
		"ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", 
		"PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
		"PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", 
		"PRECISION", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", 
		"PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
		"REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE", 
		"REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
		"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
		"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNS", 
		"ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", 
		"SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", "SIGNED", 
		"SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
		"SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
		"SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
		"STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", 
		"STATUS", "STOP", "STORAGE", "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
		"SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", "TEMPTABLE", 
		"THAN", "TRADITIONAL", "TRANSACTION", "TRIGGERS", "TRUNCATE", "UNDEFINED", 
		"UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", 
		"USER", "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
		"VIEW", "WAIT", "WARNINGS", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
		"XML", "EUR", "USA", "JIS", "ISO", "INTERNAL", "YEAR_MONTH", "DAY_HOUR", 
		"DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
		"SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
		"QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
		"TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", 
		"SUPER", "PRIVILEGES", "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", 
		"CP1256", "CP1257", "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
		"EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", 
		"KOI8R", "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
		"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
		"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
		"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", 
		"REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRY", 
		"GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", 
		"POINT", "POLYGON", "CHARSET", "GET_FORMAT", "MOD", "REVERSE", "WEIGHT_STRING", 
		"ASSIGN_OP", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
		"MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "PLUS_SIGN", "MINUS_SIGN", 
		"ASTERISK", "DIVIDE", "LESS_THAN_LESS_THAN_OP", "GREATER_THAN_GREATER_THAN_OP", 
		"LOGIC_AND_OP", "LOGIC_OR_OP", "MINUSMINUS", "EQUALS_OP", "LESS_THAN_OP", 
		"GREATER_THAN_OP", "LESS_THAN_OR_EQUALS_OP", "GREATER_THAN_OR_EQUALS_OP", 
		"NOT_EQUAL_OP", "LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP", "EXCLAMATION_OP", 
		"BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "PERIOD", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "COMMA", "SEMI", "AT_SIGN", 
		"SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON", 
		"PERCENT", "QUESTION_MARK", "CHARSET_REVERSE_QOUTE_STRING", "NULL_SPEC_LITERAL", 
		"REGULAR_ID", "DELIMITED_ID", "REVERSE_QUOTE_ID", "CHAR_STRING", "NCHAR_STRING", 
		"STRING_CHARSET_NAME", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", "HEXADECIMAL_LITERAL", 
		"BIT_STRING", "STRING_USER_NAME", "INNER_JOIN", "CROSS_JOIN", "NATURAL_JOIN", 
		"NATURAL_INNER_JOIN", "LEFT_JOIN", "LEFT_OUTER_JOIN", "NATURAL_LEFT_JOIN", 
		"NATURAL_LEFT_OUTER_JOIN", "RIGHT_JOIN", "RIGHT_OUTER_JOIN", "NATURAL_RIGHT_JOIN", 
		"NATURAL_RIGHT_OUTER_JOIN", "ERROR_RECONGNIGION", "COLLATION", "FORMAT", 
		"LOCAL_ID", "MID", "TREAT", "REF", "COST", "MODEL", "AUTO", "STRICT", 
		"JSON_TABLE", "JSON_ARRAY", "JSON_ARRAYAGG", "JSON_OBJECT", "JSON_OBJECTAGG", 
		"NULL", "ABSENT", "RETURNING", "PRETTY", "ARRAY", "UNCONDITIONAL", "CONDITIONAL", 
		"EMPTY", "OBJECT", "PATH", "NESTED", "ORDINALITY", "APPROX_COUNT", "APPROX_COUNT_DISTINCT", 
		"APPROX_COUNT_DISTINCT_AGG", "APPROX_COUNT_DISTINCT_DETAIL", "APPROX_MEDIAN", 
		"APPROX_PERCENTILE", "APPROX_PERCENTILE_AGG", "APPROX_PERCENTILE_DETAIL", 
		"APPROX_RANK", "APPROX_SUM", "COLLECT", "CORR", "CORR_S", "CORR_K", "COVAR_POP", 
		"COVAR_SAMP", "CUME_DIST", "DENSE_RANK", "GROUP_ID", "GROUPING", "GROUPING_ID", 
		"MEDIAN", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"REGR_SLOPE", "REGR_INTERCEPT", "REGR_COUNT", "REGR_R2", "REGR_AVGX", 
		"REGR_AVGY", "REGR_SXX", "REGR_SYY", "REGR_SXY", "STATS_BINOMIAL_TEST", 
		"STATS_CROSSTAB", "STATS_F_TEST", "STATS_KS_TEST", "STATS_MODE", "STATS_MW_TEST", 
		"STATS_ONE_WAY_ANOVA", "STATS_T_TEST_ONE", "STATS_T_TEST_PAIRED", "STATS_T_TEST_INDEP", 
		"STATS_T_TEST_INDEPU", "STATS_WSR_TEST", "SYS_OP_ZONE_ID", "SYS_XMLAGG", 
		"TO_APPROX_COUNT_DISTINCT", "TO_APPROX_PERCENTILE", "XMLAGG", "WITHIN", 
		"KEEP", "LISTAGG", "OVERFLOW", "RESPECT", "NULLS", "OVER", "UNBOUNDED", 
		"PRECEDING", "CURRENT", "FOLLOWING", "CUBE_TABLE", "SINGLE_QUOTE", "HIERARCHY", 
		"HRR"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySQLSQLStatementParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySQLSQLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ParseContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySQLSQLStatementParser.EOF, 0); }
		public List<TerminalNode> MINUSMINUS() { return getTokens(MySQLSQLStatementParser.MINUSMINUS); }
		public TerminalNode MINUSMINUS(int i) {
			return getToken(MySQLSQLStatementParser.MINUSMINUS, i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySQLSQLStatementParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySQLSQLStatementParser.SEMI, i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parse; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitParse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParseContext parse() throws RecognitionException {
		ParseContext _localctx = new ParseContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(836);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(829);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
					case 1:
						{
						setState(826);
						statement();
						}
						break;
					case 2:
						{
						setState(827);
						expr(0);
						}
						break;
					case 3:
						{
						setState(828);
						match(MINUSMINUS);
						}
						break;
					}
					setState(832);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SEMI) {
						{
						setState(831);
						match(SEMI);
						}
					}

					}
					} 
				}
				setState(838);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
			}
			setState(840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUSMINUS) {
				{
				setState(839);
				match(MINUSMINUS);
				}
			}

			setState(842);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public AdministrationStatementContext administrationStatement() {
			return getRuleContext(AdministrationStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			setState(852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(844);
				ddlStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(845);
				dmlStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(846);
				transactionStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(847);
				replicationStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(848);
				preparedStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(849);
				compoundStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(850);
				administrationStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(851);
				utilityStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseStatementContext createDatabaseStatement() {
			return getRuleContext(CreateDatabaseStatementContext.class,0);
		}
		public AlterDatabaseStatementContext alterDatabaseStatement() {
			return getRuleContext(AlterDatabaseStatementContext.class,0);
		}
		public DropDatabaseStatementContext dropDatabaseStatement() {
			return getRuleContext(DropDatabaseStatementContext.class,0);
		}
		public CreateSchemaStatementContext createSchemaStatement() {
			return getRuleContext(CreateSchemaStatementContext.class,0);
		}
		public AlterSchemaStatementContext alterSchemaStatement() {
			return getRuleContext(AlterSchemaStatementContext.class,0);
		}
		public DropSchemaStatementContext dropSchemaStatement() {
			return getRuleContext(DropSchemaStatementContext.class,0);
		}
		public CreateEventStatementContext createEventStatement() {
			return getRuleContext(CreateEventStatementContext.class,0);
		}
		public AlterEventStatementContext alterEventStatement() {
			return getRuleContext(AlterEventStatementContext.class,0);
		}
		public DropEventStatementContext dropEventStatement() {
			return getRuleContext(DropEventStatementContext.class,0);
		}
		public CreateFunctionStatementContext createFunctionStatement() {
			return getRuleContext(CreateFunctionStatementContext.class,0);
		}
		public AlterFunctionStatementContext alterFunctionStatement() {
			return getRuleContext(AlterFunctionStatementContext.class,0);
		}
		public DropFunctionStatementContext dropFunctionStatement() {
			return getRuleContext(DropFunctionStatementContext.class,0);
		}
		public CreateIndexStatementContext createIndexStatement() {
			return getRuleContext(CreateIndexStatementContext.class,0);
		}
		public DropIndexStatementContext dropIndexStatement() {
			return getRuleContext(DropIndexStatementContext.class,0);
		}
		public CreateLogfileGroupStatementContext createLogfileGroupStatement() {
			return getRuleContext(CreateLogfileGroupStatementContext.class,0);
		}
		public AlterLogfileGroupStatementContext alterLogfileGroupStatement() {
			return getRuleContext(AlterLogfileGroupStatementContext.class,0);
		}
		public DropLogfileGroupStatementContext dropLogfileGroupStatement() {
			return getRuleContext(DropLogfileGroupStatementContext.class,0);
		}
		public CreateProcedureStatementContext createProcedureStatement() {
			return getRuleContext(CreateProcedureStatementContext.class,0);
		}
		public AlterProcedureStatementContext alterProcedureStatement() {
			return getRuleContext(AlterProcedureStatementContext.class,0);
		}
		public DropProcedureStatementContext dropProcedureStatement() {
			return getRuleContext(DropProcedureStatementContext.class,0);
		}
		public CreateServerStatementContext createServerStatement() {
			return getRuleContext(CreateServerStatementContext.class,0);
		}
		public AlterServerStatementContext alterServerStatement() {
			return getRuleContext(AlterServerStatementContext.class,0);
		}
		public DropServerStatementContext dropServerStatement() {
			return getRuleContext(DropServerStatementContext.class,0);
		}
		public CreateTableStatementContext createTableStatement() {
			return getRuleContext(CreateTableStatementContext.class,0);
		}
		public AlterTableStatementContext alterTableStatement() {
			return getRuleContext(AlterTableStatementContext.class,0);
		}
		public DropTableStatementContext dropTableStatement() {
			return getRuleContext(DropTableStatementContext.class,0);
		}
		public CreateTablespaceStatementContext createTablespaceStatement() {
			return getRuleContext(CreateTablespaceStatementContext.class,0);
		}
		public AlterTablespaceStatementContext alterTablespaceStatement() {
			return getRuleContext(AlterTablespaceStatementContext.class,0);
		}
		public DropTablespaceStatementContext dropTablespaceStatement() {
			return getRuleContext(DropTablespaceStatementContext.class,0);
		}
		public CreateTriggerStatementContext createTriggerStatement() {
			return getRuleContext(CreateTriggerStatementContext.class,0);
		}
		public DropTriggerStatementContext dropTriggerStatement() {
			return getRuleContext(DropTriggerStatementContext.class,0);
		}
		public CreateViewStatementContext createViewStatement() {
			return getRuleContext(CreateViewStatementContext.class,0);
		}
		public AlterViewStatementContext alterViewStatement() {
			return getRuleContext(AlterViewStatementContext.class,0);
		}
		public DropViewStatementContext dropViewStatement() {
			return getRuleContext(DropViewStatementContext.class,0);
		}
		public AlterInstanceStatementContext alterInstanceStatement() {
			return getRuleContext(AlterInstanceStatementContext.class,0);
		}
		public CreateUserStatementContext createUserStatement() {
			return getRuleContext(CreateUserStatementContext.class,0);
		}
		public AlterUserStatementContext alterUserStatement() {
			return getRuleContext(AlterUserStatementContext.class,0);
		}
		public DropUserStatementContext dropUserStatement() {
			return getRuleContext(DropUserStatementContext.class,0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return getRuleContext(RenameTableStatementContext.class,0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return getRuleContext(TruncateTableStatementContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_ddlStatement);
		try {
			setState(894);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(854);
				createDatabaseStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(855);
				alterDatabaseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(856);
				dropDatabaseStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(857);
				createSchemaStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(858);
				alterSchemaStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(859);
				dropSchemaStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(860);
				createEventStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(861);
				alterEventStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(862);
				dropEventStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(863);
				createFunctionStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(864);
				alterFunctionStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(865);
				dropFunctionStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(866);
				createIndexStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(867);
				dropIndexStatement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(868);
				createLogfileGroupStatement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(869);
				alterLogfileGroupStatement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(870);
				dropLogfileGroupStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(871);
				createProcedureStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(872);
				alterProcedureStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(873);
				dropProcedureStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(874);
				createServerStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(875);
				alterServerStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(876);
				dropServerStatement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(877);
				createTableStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(878);
				alterTableStatement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(879);
				dropTableStatement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(880);
				createTablespaceStatement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(881);
				alterTablespaceStatement();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(882);
				dropTablespaceStatement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(883);
				createTriggerStatement();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(884);
				dropTriggerStatement();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(885);
				createViewStatement();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(886);
				alterViewStatement();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(887);
				dropViewStatement();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(888);
				alterInstanceStatement();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(889);
				createUserStatement();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(890);
				alterUserStatement();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(891);
				dropUserStatement();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(892);
				renameTableStatement();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(893);
				truncateTableStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public SelectIntoStatementContext selectIntoStatement() {
			return getRuleContext(SelectIntoStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataInfileStatementContext loadDataInfileStatement() {
			return getRuleContext(LoadDataInfileStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_dmlStatement);
		try {
			setState(907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(896);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(897);
				selectIntoStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(898);
				insertStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(899);
				updateStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(900);
				deleteStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(901);
				replaceStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(902);
				callStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(903);
				loadDataInfileStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(904);
				loadXmlStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(905);
				doStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(906);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public StartTransactionContext startTransaction() {
			return getRuleContext(StartTransactionContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public CommitWorkContext commitWork() {
			return getRuleContext(CommitWorkContext.class,0);
		}
		public RollbackWorkContext rollbackWork() {
			return getRuleContext(RollbackWorkContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public RollbackStatementContext rollbackStatement() {
			return getRuleContext(RollbackStatementContext.class,0);
		}
		public ReleaseStatementContext releaseStatement() {
			return getRuleContext(ReleaseStatementContext.class,0);
		}
		public LockTablesStatementContext lockTablesStatement() {
			return getRuleContext(LockTablesStatementContext.class,0);
		}
		public UnlockTablesStatementContext unlockTablesStatement() {
			return getRuleContext(UnlockTablesStatementContext.class,0);
		}
		public XaStartTransactionContext xaStartTransaction() {
			return getRuleContext(XaStartTransactionContext.class,0);
		}
		public XaEndTransactionContext xaEndTransaction() {
			return getRuleContext(XaEndTransactionContext.class,0);
		}
		public XaPrepareStatementContext xaPrepareStatement() {
			return getRuleContext(XaPrepareStatementContext.class,0);
		}
		public XaCommitWorkContext xaCommitWork() {
			return getRuleContext(XaCommitWorkContext.class,0);
		}
		public XaRollbackWorkContext xaRollbackWork() {
			return getRuleContext(XaRollbackWorkContext.class,0);
		}
		public XaRecoverWorkContext xaRecoverWork() {
			return getRuleContext(XaRecoverWorkContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_transactionStatement);
		try {
			setState(924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(909);
				startTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(910);
				beginWork();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(911);
				commitWork();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(912);
				rollbackWork();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(913);
				savepointStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(914);
				rollbackStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(915);
				releaseStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(916);
				lockTablesStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(917);
				unlockTablesStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(918);
				xaStartTransaction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(919);
				xaEndTransaction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(920);
				xaPrepareStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(921);
				xaCommitWork();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(922);
				xaRollbackWork();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(923);
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public ChangeReplicationFilterContext changeReplicationFilter() {
			return getRuleContext(ChangeReplicationFilterContext.class,0);
		}
		public PurgeBinaryLogsContext purgeBinaryLogs() {
			return getRuleContext(PurgeBinaryLogsContext.class,0);
		}
		public ResetMasterContext resetMaster() {
			return getRuleContext(ResetMasterContext.class,0);
		}
		public ResetSlaveContext resetSlave() {
			return getRuleContext(ResetSlaveContext.class,0);
		}
		public StartSlaveContext startSlave() {
			return getRuleContext(StartSlaveContext.class,0);
		}
		public StopSlaveContext stopSlave() {
			return getRuleContext(StopSlaveContext.class,0);
		}
		public StartGroupReplicationContext startGroupReplication() {
			return getRuleContext(StartGroupReplicationContext.class,0);
		}
		public StopGroupReplicationContext stopGroupReplication() {
			return getRuleContext(StopGroupReplicationContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_replicationStatement);
		try {
			setState(935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(926);
				changeMaster();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(927);
				changeReplicationFilter();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(928);
				purgeBinaryLogs();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(929);
				resetMaster();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(930);
				resetSlave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(931);
				startSlave();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(932);
				stopSlave();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(933);
				startGroupReplication();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(934);
				stopGroupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public PrepareStatementContext prepareStatement() {
			return getRuleContext(PrepareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeallocatePrepareContext deallocatePrepare() {
			return getRuleContext(DeallocatePrepareContext.class,0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_preparedStatement);
		try {
			setState(940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE:
				enterOuterAlt(_localctx, 1);
				{
				setState(937);
				prepareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(938);
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(939);
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public RepeatStatementContext repeatStatement() {
			return getRuleContext(RepeatStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_compoundStatement);
		try {
			setState(952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(942);
				body();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(943);
				caseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(944);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(945);
				leaveStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(946);
				loopStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(947);
				repeatStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(948);
				whileStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(949);
				iterateStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(950);
				returnStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(951);
				cursorStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdministrationStatementContext extends ParserRuleContext {
		public AlterUserStatementContext alterUserStatement() {
			return getRuleContext(AlterUserStatementContext.class,0);
		}
		public CreateUserStatementContext createUserStatement() {
			return getRuleContext(CreateUserStatementContext.class,0);
		}
		public DropUserStatementContext dropUserStatement() {
			return getRuleContext(DropUserStatementContext.class,0);
		}
		public GrantStatementContext grantStatement() {
			return getRuleContext(GrantStatementContext.class,0);
		}
		public GrantProxyContext grantProxy() {
			return getRuleContext(GrantProxyContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeStatementContext revokeStatement() {
			return getRuleContext(RevokeStatementContext.class,0);
		}
		public RevokeProxyContext revokeProxy() {
			return getRuleContext(RevokeProxyContext.class,0);
		}
		public AnalyzeTableContext analyzeTable() {
			return getRuleContext(AnalyzeTableContext.class,0);
		}
		public CheckTableContext checkTable() {
			return getRuleContext(CheckTableContext.class,0);
		}
		public ChecksumTableContext checksumTable() {
			return getRuleContext(ChecksumTableContext.class,0);
		}
		public OptimizeTableContext optimizeTable() {
			return getRuleContext(OptimizeTableContext.class,0);
		}
		public RepairTableContext repairTable() {
			return getRuleContext(RepairTableContext.class,0);
		}
		public CreateUdfunctionContext createUdfunction() {
			return getRuleContext(CreateUdfunctionContext.class,0);
		}
		public InstallPluginContext installPlugin() {
			return getRuleContext(InstallPluginContext.class,0);
		}
		public UninstallPluginContext uninstallPlugin() {
			return getRuleContext(UninstallPluginContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public BinlogStatementContext binlogStatement() {
			return getRuleContext(BinlogStatementContext.class,0);
		}
		public CacheIndexStatementContext cacheIndexStatement() {
			return getRuleContext(CacheIndexStatementContext.class,0);
		}
		public FlushStatementContext flushStatement() {
			return getRuleContext(FlushStatementContext.class,0);
		}
		public KillStatementContext killStatement() {
			return getRuleContext(KillStatementContext.class,0);
		}
		public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return getRuleContext(LoadIndexIntoCacheContext.class,0);
		}
		public ResetStatementContext resetStatement() {
			return getRuleContext(ResetStatementContext.class,0);
		}
		public ShutdownStatementContext shutdownStatement() {
			return getRuleContext(ShutdownStatementContext.class,0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_administrationStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdministrationStatementContext administrationStatement() throws RecognitionException {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_administrationStatement);
		try {
			setState(979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(954);
				alterUserStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(955);
				createUserStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(956);
				dropUserStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(957);
				grantStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(958);
				grantProxy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(959);
				renameUser();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(960);
				revokeStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(961);
				revokeProxy();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(962);
				analyzeTable();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(963);
				checkTable();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(964);
				checksumTable();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(965);
				optimizeTable();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(966);
				repairTable();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(967);
				createUdfunction();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(968);
				installPlugin();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(969);
				uninstallPlugin();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(970);
				setStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(971);
				showStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(972);
				binlogStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(973);
				cacheIndexStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(974);
				flushStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(975);
				killStatement();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(976);
				loadIndexIntoCache();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(977);
				resetStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(978);
				shutdownStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public SimpleDescribeStatementContext simpleDescribeStatement() {
			return getRuleContext(SimpleDescribeStatementContext.class,0);
		}
		public FullDescribeStatementContext fullDescribeStatement() {
			return getRuleContext(FullDescribeStatementContext.class,0);
		}
		public HelpStatementContext helpStatement() {
			return getRuleContext(HelpStatementContext.class,0);
		}
		public UseStatementContext useStatement() {
			return getRuleContext(UseStatementContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_utilityStatement);
		try {
			setState(985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(981);
				simpleDescribeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(982);
				fullDescribeStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(983);
				helpStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(984);
				useStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(MySQLSQLStatementParser.DATABASE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseStatementContext createDatabaseStatement() throws RecognitionException {
		CreateDatabaseStatementContext _localctx = new CreateDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_createDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(987);
			match(CREATE);
			setState(988);
			match(DATABASE);
			setState(990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(989);
				ifNotExists();
				}
			}

			setState(992);
			nameIdentifier();
			setState(996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0)) {
				{
				{
				setState(993);
				createDatabaseOption();
				}
				}
				setState(998);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLSQLStatementParser.SCHEMA, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateSchemaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaStatementContext createSchemaStatement() throws RecognitionException {
		CreateSchemaStatementContext _localctx = new CreateSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_createSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(999);
			match(CREATE);
			setState(1000);
			match(SCHEMA);
			setState(1002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1001);
				ifNotExists();
				}
			}

			setState(1004);
			nameIdentifier();
			setState(1008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0)) {
				{
				{
				setState(1005);
				createDatabaseOption();
				}
				}
				setState(1010);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(MySQLSQLStatementParser.EVENT, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySQLSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySQLSQLStatementParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySQLSQLStatementParser.SCHEDULE, 0); }
		public ScheduleexprContext scheduleexpr() {
			return getRuleContext(ScheduleexprContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySQLSQLStatementParser.DO, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySQLSQLStatementParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySQLSQLStatementParser.PRESERVE, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public CreateEventStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEventStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateEventStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventStatementContext createEventStatement() throws RecognitionException {
		CreateEventStatementContext _localctx = new CreateEventStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_createEventStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1011);
			match(CREATE);
			setState(1013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1012);
				definerOptionExpr();
				}
			}

			setState(1015);
			match(EVENT);
			setState(1017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1016);
				ifNotExists();
				}
			}

			setState(1019);
			nameIdentifier();
			setState(1020);
			match(ON);
			setState(1021);
			match(SCHEDULE);
			setState(1022);
			scheduleexpr();
			setState(1029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1023);
				match(ON);
				setState(1024);
				match(COMPLETION);
				setState(1026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1025);
					match(NOT);
					}
				}

				setState(1028);
				match(PRESERVE);
				}
			}

			setState(1032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1031);
				enableType();
				}
			}

			setState(1036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1034);
				match(COMMENT);
				setState(1035);
				expr(0);
				}
			}

			setState(1038);
			match(DO);
			setState(1039);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<CreateIndexStatementColumnContext> createIndexStatementColumn() {
			return getRuleContexts(CreateIndexStatementColumnContext.class);
		}
		public CreateIndexStatementColumnContext createIndexStatementColumn(int i) {
			return getRuleContext(CreateIndexStatementColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public IntimeActionContext intimeAction() {
			return getRuleContext(IntimeActionContext.class,0);
		}
		public IndexCategoryContext indexCategory() {
			return getRuleContext(IndexCategoryContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<CreateIndexStatementOptionContext> createIndexStatementOption() {
			return getRuleContexts(CreateIndexStatementOptionContext.class);
		}
		public CreateIndexStatementOptionContext createIndexStatementOption(int i) {
			return getRuleContext(CreateIndexStatementOptionContext.class,i);
		}
		public CreateIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementContext createIndexStatement() throws RecognitionException {
		CreateIndexStatementContext _localctx = new CreateIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_createIndexStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1041);
			match(CREATE);
			setState(1043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(1042);
				intimeAction();
				}
			}

			setState(1046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				setState(1045);
				indexCategory();
				}
			}

			setState(1048);
			match(INDEX);
			setState(1049);
			nameIdentifier();
			setState(1051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1050);
				indexType();
				}
			}

			setState(1053);
			match(ON);
			setState(1054);
			iTableReference();
			setState(1055);
			match(LEFT_PAREN);
			setState(1056);
			createIndexStatementColumn();
			setState(1061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1057);
				match(COMMA);
				setState(1058);
				createIndexStatementColumn();
				}
				}
				setState(1063);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1064);
			match(RIGHT_PAREN);
			setState(1068);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1065);
					createIndexStatementOption();
					}
					} 
				}
				setState(1070);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementColumnContext extends ParserRuleContext {
		public ExprContext column;
		public ExprContext len;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public OrderingSpecificationContext orderingSpecification() {
			return getRuleContext(OrderingSpecificationContext.class,0);
		}
		public CreateIndexStatementColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatementColumn; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateIndexStatementColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementColumnContext createIndexStatementColumn() throws RecognitionException {
		CreateIndexStatementColumnContext _localctx = new CreateIndexStatementColumnContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_createIndexStatementColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1071);
			((CreateIndexStatementColumnContext)_localctx).column = expr(0);
			setState(1076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1072);
				match(LEFT_PAREN);
				setState(1073);
				((CreateIndexStatementColumnContext)_localctx).len = expr(0);
				setState(1074);
				match(RIGHT_PAREN);
				}
			}

			setState(1079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1078);
				orderingSpecification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementOptionContext extends ParserRuleContext {
		public IndexOptionContext indexOption() {
			return getRuleContext(IndexOptionContext.class,0);
		}
		public AlgorithmOptionExprContext algorithmOptionExpr() {
			return getRuleContext(AlgorithmOptionExprContext.class,0);
		}
		public LockOptionExprContext lockOptionExpr() {
			return getRuleContext(LockOptionExprContext.class,0);
		}
		public CreateIndexStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatementOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateIndexStatementOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementOptionContext createIndexStatementOption() throws RecognitionException {
		CreateIndexStatementOptionContext _localctx = new CreateIndexStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createIndexStatementOption);
		try {
			setState(1084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVISIBLE:
			case USING:
			case VISIBLE:
			case WITH:
			case COMMENT:
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1081);
				indexOption();
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(1082);
				algorithmOptionExpr();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 3);
				{
				setState(1083);
				lockOptionExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmOptionExprContext extends ParserRuleContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySQLSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(MySQLSQLStatementParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySQLSQLStatementParser.COPY, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySQLSQLStatementParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySQLSQLStatementParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySQLSQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public AlgorithmOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithmOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlgorithmOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlgorithmOptionExprContext algorithmOptionExpr() throws RecognitionException {
		AlgorithmOptionExprContext _localctx = new AlgorithmOptionExprContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_algorithmOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1086);
			match(ALGORITHM);
			setState(1088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(1087);
				match(EQUALS_OP);
				}
			}

			setState(1090);
			((AlgorithmOptionExprContext)_localctx).algType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
				((AlgorithmOptionExprContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockOptionExprContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(MySQLSQLStatementParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySQLSQLStatementParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySQLSQLStatementParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySQLSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public LockOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLockOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockOptionExprContext lockOptionExpr() throws RecognitionException {
		LockOptionExprContext _localctx = new LockOptionExprContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_lockOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1092);
			match(LOCK);
			setState(1094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(1093);
				match(EQUALS_OP);
				}
			}

			setState(1096);
			((LockOptionExprContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
				((LockOptionExprContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupStatementContext extends ParserRuleContext {
		public ExprContext undoFile;
		public ExprContext initSize;
		public ExprContext undoSize;
		public ExprContext redoSize;
		public ExprContext comment;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLSQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLSQLStatementParser.GROUP, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySQLSQLStatementParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySQLSQLStatementParser.UNDOFILE, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLSQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySQLSQLStatementParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySQLSQLStatementParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySQLSQLStatementParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySQLSQLStatementParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(MySQLSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(MySQLSQLStatementParser.EQUALS_OP, i);
		}
		public CreateLogfileGroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroupStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateLogfileGroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupStatementContext createLogfileGroupStatement() throws RecognitionException {
		CreateLogfileGroupStatementContext _localctx = new CreateLogfileGroupStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_createLogfileGroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1098);
			match(CREATE);
			setState(1099);
			match(LOGFILE);
			setState(1100);
			match(GROUP);
			setState(1101);
			nameIdentifier();
			setState(1102);
			match(ADD);
			setState(1103);
			match(UNDOFILE);
			setState(1104);
			((CreateLogfileGroupStatementContext)_localctx).undoFile = expr(0);
			setState(1110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1105);
				match(INITIAL_SIZE);
				setState(1107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1106);
					match(EQUALS_OP);
					}
				}

				setState(1109);
				((CreateLogfileGroupStatementContext)_localctx).initSize = expr(0);
				}
			}

			setState(1117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				setState(1112);
				match(UNDO_BUFFER_SIZE);
				setState(1114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1113);
					match(EQUALS_OP);
					}
				}

				setState(1116);
				((CreateLogfileGroupStatementContext)_localctx).undoSize = expr(0);
				}
			}

			setState(1124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				setState(1119);
				match(REDO_BUFFER_SIZE);
				setState(1121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1120);
					match(EQUALS_OP);
					}
				}

				setState(1123);
				((CreateLogfileGroupStatementContext)_localctx).redoSize = expr(0);
				}
			}

			setState(1131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(1126);
				match(NODEGROUP);
				setState(1128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1127);
					match(EQUALS_OP);
					}
				}

				setState(1130);
				nameIdentifier();
				}
			}

			setState(1134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(1133);
				match(WAIT);
				}
			}

			setState(1141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(1136);
				match(COMMENT);
				setState(1138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1137);
					match(EQUALS_OP);
					}
				}

				setState(1140);
				((CreateLogfileGroupStatementContext)_localctx).comment = expr(0);
				}
			}

			setState(1143);
			match(ENGINE);
			setState(1145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(1144);
				match(EQUALS_OP);
				}
			}

			setState(1147);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLSQLStatementParser.PROCEDURE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public List<ParameterDeclarationContext> parameterDeclaration() {
			return getRuleContexts(ParameterDeclarationContext.class);
		}
		public ParameterDeclarationContext parameterDeclaration(int i) {
			return getRuleContext(ParameterDeclarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedureStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureStatementContext createProcedureStatement() throws RecognitionException {
		CreateProcedureStatementContext _localctx = new CreateProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createProcedureStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1149);
			match(CREATE);
			setState(1151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1150);
				definerOptionExpr();
				}
			}

			setState(1153);
			match(PROCEDURE);
			setState(1154);
			nameIdentifier();
			setState(1155);
			match(LEFT_PAREN);
			setState(1157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (IN - 67)) | (1L << (INOUT - 67)) | (1L << (INSERT - 67)) | (1L << (LEFT - 67)) | (1L << (OUT - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (REPLACE - 131)) | (1L << (RIGHT - 131)) | (1L << (DATE - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (TIME - 195)) | (1L << (TIMESTAMP - 195)) | (1L << (DATETIME - 195)) | (1L << (YEAR - 195)) | (1L << (TEXT - 195)) | (1L << (ENUM - 195)) | (1L << (SUM - 195)) | (1L << (SUBSTR - 195)) | (1L << (SUBSTRING - 195)) | (1L << (ACCOUNT - 195)) | (1L << (ACTION - 195)) | (1L << (AFTER - 195)) | (1L << (AGGREGATE - 195)) | (1L << (ALGORITHM - 195)) | (1L << (ANY - 195)) | (1L << (AT - 195)) | (1L << (AUTHORS - 195)) | (1L << (AUTOCOMMIT - 195)) | (1L << (AUTOEXTEND_SIZE - 195)) | (1L << (AUTO_INCREMENT - 195)) | (1L << (AVG_ROW_LENGTH - 195)) | (1L << (BEGIN - 195)) | (1L << (BINLOG - 195)) | (1L << (BIT - 195)) | (1L << (BLOCK - 195)) | (1L << (BOOL - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLIENT - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)) | (1L << (DO - 259)) | (1L << (DUMPFILE - 259)) | (1L << (DUPLICATE - 259)) | (1L << (DYNAMIC - 259)) | (1L << (ENABLE - 259)) | (1L << (ENCRYPTION - 259)) | (1L << (ENDS - 259)) | (1L << (ENGINE - 259)) | (1L << (ENGINES - 259)) | (1L << (ERROR - 259)) | (1L << (ERRORS - 259)) | (1L << (ESCAPE - 259)) | (1L << (EVEN - 259)) | (1L << (EVENT - 259)) | (1L << (EVENTS - 259)) | (1L << (EVERY - 259)) | (1L << (EXCHANGE - 259)) | (1L << (EXCLUSIVE - 259)) | (1L << (EXPIRE - 259)) | (1L << (EXTENT_SIZE - 259)))) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (FAULTS - 324)) | (1L << (FIELDS - 324)) | (1L << (FILE_BLOCK_SIZE - 324)) | (1L << (FILTER - 324)) | (1L << (FIRST - 324)) | (1L << (FIXED - 324)) | (1L << (FOLLOWS - 324)) | (1L << (FULL - 324)) | (1L << (FUNCTION - 324)) | (1L << (GLOBAL - 324)) | (1L << (GRANTS - 324)) | (1L << (GROUP_REPLICATION - 324)) | (1L << (HASH - 324)) | (1L << (HOST - 324)) | (1L << (IDENTIFIED - 324)) | (1L << (IGNORE_SERVER_IDS - 324)) | (1L << (IMPORT - 324)) | (1L << (INDEXES - 324)) | (1L << (INITIAL_SIZE - 324)) | (1L << (INPLACE - 324)) | (1L << (INSERT_METHOD - 324)) | (1L << (INSTANCE - 324)) | (1L << (INVOKER - 324)) | (1L << (IO - 324)) | (1L << (IO_THREAD - 324)) | (1L << (IPC - 324)) | (1L << (ISOLATION - 324)) | (1L << (ISSUER - 324)) | (1L << (KEY_BLOCK_SIZE - 324)) | (1L << (LANGUAGE - 324)) | (1L << (LAST - 324)) | (1L << (LEAVES - 324)) | (1L << (LESS - 324)) | (1L << (LEVEL - 324)) | (1L << (LIST - 324)) | (1L << (LOCAL - 324)) | (1L << (LOGFILE - 324)) | (1L << (LOGS - 324)) | (1L << (MASTER - 324)) | (1L << (MASTER_AUTO_POSITION - 324)) | (1L << (MASTER_CONNECT_RETRY - 324)) | (1L << (MASTER_DELAY - 324)) | (1L << (MASTER_HEARTBEAT_PERIOD - 324)) | (1L << (MASTER_HOST - 324)) | (1L << (MASTER_LOG_FILE - 324)) | (1L << (MASTER_LOG_POS - 324)) | (1L << (MASTER_PASSWORD - 324)) | (1L << (MASTER_PORT - 324)) | (1L << (MASTER_RETRY_COUNT - 324)) | (1L << (MASTER_SSL - 324)) | (1L << (MASTER_SSL_CA - 324)) | (1L << (MASTER_SSL_CAPATH - 324)) | (1L << (MASTER_SSL_CERT - 324)) | (1L << (MASTER_SSL_CIPHER - 324)) | (1L << (MASTER_SSL_CRL - 324)) | (1L << (MASTER_SSL_CRLPATH - 324)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (MASTER_SSL_KEY - 388)) | (1L << (MASTER_TLS_VERSION - 388)) | (1L << (MASTER_USER - 388)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 388)) | (1L << (MAX_QUERIES_PER_HOUR - 388)) | (1L << (MAX_ROWS - 388)) | (1L << (MAX_SIZE - 388)) | (1L << (MAX_UPDATES_PER_HOUR - 388)) | (1L << (MAX_USER_CONNECTIONS - 388)) | (1L << (MERGE - 388)) | (1L << (MIGRATE - 388)) | (1L << (MIN_ROWS - 388)) | (1L << (MODIFY - 388)) | (1L << (MUTEX - 388)) | (1L << (MYSQL - 388)) | (1L << (NAME - 388)) | (1L << (NAMES - 388)) | (1L << (NCHAR - 388)) | (1L << (NEVER - 388)) | (1L << (NO - 388)) | (1L << (NODEGROUP - 388)) | (1L << (NONE - 388)) | (1L << (OFFLINE - 388)) | (1L << (OFFSET - 388)) | (1L << (OJ - 388)) | (1L << (OLD_PASSWORD - 388)) | (1L << (ONE - 388)) | (1L << (ONLINE - 388)) | (1L << (ONLY - 388)) | (1L << (OPTIMIZER_COSTS - 388)) | (1L << (OPTIONS - 388)) | (1L << (OWNER - 388)) | (1L << (PACK_KEYS - 388)) | (1L << (PAGE - 388)) | (1L << (PARSER - 388)) | (1L << (PARTIAL - 388)) | (1L << (PARTITIONING - 388)) | (1L << (PARTITIONS - 388)) | (1L << (PASSWORD - 388)) | (1L << (PHASE - 388)) | (1L << (PLUGIN_DIR - 388)) | (1L << (PLUGINS - 388)) | (1L << (PORT - 388)) | (1L << (PRECEDES - 388)) | (1L << (PREPARE - 388)) | (1L << (PRESERVE - 388)) | (1L << (PREV - 388)) | (1L << (PROCESSLIST - 388)) | (1L << (PROFILE - 388)) | (1L << (PROFILES - 388)) | (1L << (PROXY - 388)) | (1L << (QUERY - 388)) | (1L << (QUICK - 388)) | (1L << (REBUILD - 388)) | (1L << (RECOVER - 388)) | (1L << (REDO_BUFFER_SIZE - 388)) | (1L << (REDUNDANT - 388)))) != 0) || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (RELAY_LOG_FILE - 452)) | (1L << (RELAY_LOG_POS - 452)) | (1L << (RELAYLOG - 452)) | (1L << (REMOVE - 452)) | (1L << (REORGANIZE - 452)) | (1L << (REPAIR - 452)) | (1L << (REPLICATE_DO_DB - 452)) | (1L << (REPLICATE_DO_TABLE - 452)) | (1L << (REPLICATE_IGNORE_DB - 452)) | (1L << (REPLICATE_IGNORE_TABLE - 452)) | (1L << (REPLICATE_REWRITE_DB - 452)) | (1L << (REPLICATE_WILD_DO_TABLE - 452)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 452)) | (1L << (REPLICATION - 452)) | (1L << (RESUME - 452)) | (1L << (RETURNS - 452)) | (1L << (ROLLBACK - 452)) | (1L << (ROLLUP - 452)) | (1L << (ROTATE - 452)) | (1L << (ROW - 452)) | (1L << (ROWS - 452)) | (1L << (ROW_FORMAT - 452)) | (1L << (SAVEPOINT - 452)) | (1L << (SCHEDULE - 452)) | (1L << (SECURITY - 452)) | (1L << (SERVER - 452)) | (1L << (SESSION - 452)) | (1L << (SHARE - 452)) | (1L << (SHARED - 452)) | (1L << (SIGNED - 452)) | (1L << (SIMPLE - 452)) | (1L << (SLAVE - 452)) | (1L << (SNAPSHOT - 452)) | (1L << (SOCKET - 452)) | (1L << (SOME - 452)) | (1L << (SOUNDS - 452)) | (1L << (SOURCE - 452)) | (1L << (SQL_AFTER_GTIDS - 452)) | (1L << (SQL_AFTER_MTS_GAPS - 452)) | (1L << (SQL_BEFORE_GTIDS - 452)) | (1L << (SQL_BUFFER_RESULT - 452)) | (1L << (SQL_CACHE - 452)) | (1L << (SQL_NO_CACHE - 452)) | (1L << (SQL_THREAD - 452)) | (1L << (START - 452)) | (1L << (STARTS - 452)) | (1L << (STATS_AUTO_RECALC - 452)) | (1L << (STATS_PERSISTENT - 452)) | (1L << (STATS_SAMPLE_PAGES - 452)) | (1L << (STATUS - 452)) | (1L << (STOP - 452)) | (1L << (STORAGE - 452)) | (1L << (STRING - 452)) | (1L << (SUBJECT - 452)) | (1L << (SUBPARTITION - 452)) | (1L << (SUBPARTITIONS - 452)) | (1L << (SUSPEND - 452)) | (1L << (SWAPS - 452)) | (1L << (SWITCHES - 452)) | (1L << (TABLESPACE - 452)) | (1L << (TEMPORARY - 452)))) != 0) || ((((_la - 516)) & ~0x3f) == 0 && ((1L << (_la - 516)) & ((1L << (TEMPTABLE - 516)) | (1L << (THAN - 516)) | (1L << (TRANSACTION - 516)) | (1L << (TRUNCATE - 516)) | (1L << (UNDEFINED - 516)) | (1L << (UNDOFILE - 516)) | (1L << (UNDO_BUFFER_SIZE - 516)) | (1L << (UNKNOWN - 516)) | (1L << (UPGRADE - 516)) | (1L << (USER - 516)) | (1L << (VALIDATION - 516)) | (1L << (VALUE - 516)) | (1L << (VARIABLES - 516)) | (1L << (VIEW - 516)) | (1L << (WAIT - 516)) | (1L << (WARNINGS - 516)) | (1L << (WITHOUT - 516)) | (1L << (WORK - 516)) | (1L << (WRAPPER - 516)) | (1L << (X509 - 516)) | (1L << (XA - 516)) | (1L << (XML - 516)) | (1L << (TABLES - 516)) | (1L << (ROUTINE - 516)) | (1L << (EXECUTE - 516)) | (1L << (FILE - 516)) | (1L << (PROCESS - 516)) | (1L << (RELOAD - 516)) | (1L << (SHUTDOWN - 516)) | (1L << (SUPER - 516)) | (1L << (PRIVILEGES - 516)) | (1L << (ARMSCII8 - 516)) | (1L << (ASCII - 516)) | (1L << (BIG5 - 516)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)) | (1L << (MEMORY - 580)) | (1L << (MRG_MYISAM - 580)) | (1L << (MYISAM - 580)) | (1L << (NDB - 580)) | (1L << (NDBCLUSTER - 580)) | (1L << (PERFOMANCE_SCHEMA - 580)) | (1L << (REPEATABLE - 580)) | (1L << (COMMITTED - 580)) | (1L << (UNCOMMITTED - 580)) | (1L << (SERIALIZABLE - 580)) | (1L << (MOD - 580)) | (1L << (REVERSE - 580)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
				{
				setState(1156);
				parameterDeclaration();
				}
			}

			setState(1163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1159);
				match(COMMA);
				setState(1160);
				parameterDeclaration();
				}
				}
				setState(1165);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1166);
			match(RIGHT_PAREN);
			setState(1170);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1167);
					routineOption();
					}
					} 
				}
				setState(1172);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			setState(1173);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode RETURNS() { return getToken(MySQLSQLStatementParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public List<ParameterDeclarationContext> parameterDeclaration() {
			return getRuleContexts(ParameterDeclarationContext.class);
		}
		public ParameterDeclarationContext parameterDeclaration(int i) {
			return getRuleContext(ParameterDeclarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementContext createFunctionStatement() throws RecognitionException {
		CreateFunctionStatementContext _localctx = new CreateFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createFunctionStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1175);
			match(CREATE);
			setState(1177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(1176);
				definerOptionExpr();
				}
			}

			setState(1179);
			match(FUNCTION);
			setState(1180);
			nameIdentifier();
			setState(1181);
			match(LEFT_PAREN);
			setState(1183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (IN - 67)) | (1L << (INOUT - 67)) | (1L << (INSERT - 67)) | (1L << (LEFT - 67)) | (1L << (OUT - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (REPLACE - 131)) | (1L << (RIGHT - 131)) | (1L << (DATE - 131)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (TIME - 195)) | (1L << (TIMESTAMP - 195)) | (1L << (DATETIME - 195)) | (1L << (YEAR - 195)) | (1L << (TEXT - 195)) | (1L << (ENUM - 195)) | (1L << (SUM - 195)) | (1L << (SUBSTR - 195)) | (1L << (SUBSTRING - 195)) | (1L << (ACCOUNT - 195)) | (1L << (ACTION - 195)) | (1L << (AFTER - 195)) | (1L << (AGGREGATE - 195)) | (1L << (ALGORITHM - 195)) | (1L << (ANY - 195)) | (1L << (AT - 195)) | (1L << (AUTHORS - 195)) | (1L << (AUTOCOMMIT - 195)) | (1L << (AUTOEXTEND_SIZE - 195)) | (1L << (AUTO_INCREMENT - 195)) | (1L << (AVG_ROW_LENGTH - 195)) | (1L << (BEGIN - 195)) | (1L << (BINLOG - 195)) | (1L << (BIT - 195)) | (1L << (BLOCK - 195)) | (1L << (BOOL - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLIENT - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)) | (1L << (DO - 259)) | (1L << (DUMPFILE - 259)) | (1L << (DUPLICATE - 259)) | (1L << (DYNAMIC - 259)) | (1L << (ENABLE - 259)) | (1L << (ENCRYPTION - 259)) | (1L << (ENDS - 259)) | (1L << (ENGINE - 259)) | (1L << (ENGINES - 259)) | (1L << (ERROR - 259)) | (1L << (ERRORS - 259)) | (1L << (ESCAPE - 259)) | (1L << (EVEN - 259)) | (1L << (EVENT - 259)) | (1L << (EVENTS - 259)) | (1L << (EVERY - 259)) | (1L << (EXCHANGE - 259)) | (1L << (EXCLUSIVE - 259)) | (1L << (EXPIRE - 259)) | (1L << (EXTENT_SIZE - 259)))) != 0) || ((((_la - 324)) & ~0x3f) == 0 && ((1L << (_la - 324)) & ((1L << (FAULTS - 324)) | (1L << (FIELDS - 324)) | (1L << (FILE_BLOCK_SIZE - 324)) | (1L << (FILTER - 324)) | (1L << (FIRST - 324)) | (1L << (FIXED - 324)) | (1L << (FOLLOWS - 324)) | (1L << (FULL - 324)) | (1L << (FUNCTION - 324)) | (1L << (GLOBAL - 324)) | (1L << (GRANTS - 324)) | (1L << (GROUP_REPLICATION - 324)) | (1L << (HASH - 324)) | (1L << (HOST - 324)) | (1L << (IDENTIFIED - 324)) | (1L << (IGNORE_SERVER_IDS - 324)) | (1L << (IMPORT - 324)) | (1L << (INDEXES - 324)) | (1L << (INITIAL_SIZE - 324)) | (1L << (INPLACE - 324)) | (1L << (INSERT_METHOD - 324)) | (1L << (INSTANCE - 324)) | (1L << (INVOKER - 324)) | (1L << (IO - 324)) | (1L << (IO_THREAD - 324)) | (1L << (IPC - 324)) | (1L << (ISOLATION - 324)) | (1L << (ISSUER - 324)) | (1L << (KEY_BLOCK_SIZE - 324)) | (1L << (LANGUAGE - 324)) | (1L << (LAST - 324)) | (1L << (LEAVES - 324)) | (1L << (LESS - 324)) | (1L << (LEVEL - 324)) | (1L << (LIST - 324)) | (1L << (LOCAL - 324)) | (1L << (LOGFILE - 324)) | (1L << (LOGS - 324)) | (1L << (MASTER - 324)) | (1L << (MASTER_AUTO_POSITION - 324)) | (1L << (MASTER_CONNECT_RETRY - 324)) | (1L << (MASTER_DELAY - 324)) | (1L << (MASTER_HEARTBEAT_PERIOD - 324)) | (1L << (MASTER_HOST - 324)) | (1L << (MASTER_LOG_FILE - 324)) | (1L << (MASTER_LOG_POS - 324)) | (1L << (MASTER_PASSWORD - 324)) | (1L << (MASTER_PORT - 324)) | (1L << (MASTER_RETRY_COUNT - 324)) | (1L << (MASTER_SSL - 324)) | (1L << (MASTER_SSL_CA - 324)) | (1L << (MASTER_SSL_CAPATH - 324)) | (1L << (MASTER_SSL_CERT - 324)) | (1L << (MASTER_SSL_CIPHER - 324)) | (1L << (MASTER_SSL_CRL - 324)) | (1L << (MASTER_SSL_CRLPATH - 324)))) != 0) || ((((_la - 388)) & ~0x3f) == 0 && ((1L << (_la - 388)) & ((1L << (MASTER_SSL_KEY - 388)) | (1L << (MASTER_TLS_VERSION - 388)) | (1L << (MASTER_USER - 388)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 388)) | (1L << (MAX_QUERIES_PER_HOUR - 388)) | (1L << (MAX_ROWS - 388)) | (1L << (MAX_SIZE - 388)) | (1L << (MAX_UPDATES_PER_HOUR - 388)) | (1L << (MAX_USER_CONNECTIONS - 388)) | (1L << (MERGE - 388)) | (1L << (MIGRATE - 388)) | (1L << (MIN_ROWS - 388)) | (1L << (MODIFY - 388)) | (1L << (MUTEX - 388)) | (1L << (MYSQL - 388)) | (1L << (NAME - 388)) | (1L << (NAMES - 388)) | (1L << (NCHAR - 388)) | (1L << (NEVER - 388)) | (1L << (NO - 388)) | (1L << (NODEGROUP - 388)) | (1L << (NONE - 388)) | (1L << (OFFLINE - 388)) | (1L << (OFFSET - 388)) | (1L << (OJ - 388)) | (1L << (OLD_PASSWORD - 388)) | (1L << (ONE - 388)) | (1L << (ONLINE - 388)) | (1L << (ONLY - 388)) | (1L << (OPTIMIZER_COSTS - 388)) | (1L << (OPTIONS - 388)) | (1L << (OWNER - 388)) | (1L << (PACK_KEYS - 388)) | (1L << (PAGE - 388)) | (1L << (PARSER - 388)) | (1L << (PARTIAL - 388)) | (1L << (PARTITIONING - 388)) | (1L << (PARTITIONS - 388)) | (1L << (PASSWORD - 388)) | (1L << (PHASE - 388)) | (1L << (PLUGIN_DIR - 388)) | (1L << (PLUGINS - 388)) | (1L << (PORT - 388)) | (1L << (PRECEDES - 388)) | (1L << (PREPARE - 388)) | (1L << (PRESERVE - 388)) | (1L << (PREV - 388)) | (1L << (PROCESSLIST - 388)) | (1L << (PROFILE - 388)) | (1L << (PROFILES - 388)) | (1L << (PROXY - 388)) | (1L << (QUERY - 388)) | (1L << (QUICK - 388)) | (1L << (REBUILD - 388)) | (1L << (RECOVER - 388)) | (1L << (REDO_BUFFER_SIZE - 388)) | (1L << (REDUNDANT - 388)))) != 0) || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (RELAY_LOG_FILE - 452)) | (1L << (RELAY_LOG_POS - 452)) | (1L << (RELAYLOG - 452)) | (1L << (REMOVE - 452)) | (1L << (REORGANIZE - 452)) | (1L << (REPAIR - 452)) | (1L << (REPLICATE_DO_DB - 452)) | (1L << (REPLICATE_DO_TABLE - 452)) | (1L << (REPLICATE_IGNORE_DB - 452)) | (1L << (REPLICATE_IGNORE_TABLE - 452)) | (1L << (REPLICATE_REWRITE_DB - 452)) | (1L << (REPLICATE_WILD_DO_TABLE - 452)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 452)) | (1L << (REPLICATION - 452)) | (1L << (RESUME - 452)) | (1L << (RETURNS - 452)) | (1L << (ROLLBACK - 452)) | (1L << (ROLLUP - 452)) | (1L << (ROTATE - 452)) | (1L << (ROW - 452)) | (1L << (ROWS - 452)) | (1L << (ROW_FORMAT - 452)) | (1L << (SAVEPOINT - 452)) | (1L << (SCHEDULE - 452)) | (1L << (SECURITY - 452)) | (1L << (SERVER - 452)) | (1L << (SESSION - 452)) | (1L << (SHARE - 452)) | (1L << (SHARED - 452)) | (1L << (SIGNED - 452)) | (1L << (SIMPLE - 452)) | (1L << (SLAVE - 452)) | (1L << (SNAPSHOT - 452)) | (1L << (SOCKET - 452)) | (1L << (SOME - 452)) | (1L << (SOUNDS - 452)) | (1L << (SOURCE - 452)) | (1L << (SQL_AFTER_GTIDS - 452)) | (1L << (SQL_AFTER_MTS_GAPS - 452)) | (1L << (SQL_BEFORE_GTIDS - 452)) | (1L << (SQL_BUFFER_RESULT - 452)) | (1L << (SQL_CACHE - 452)) | (1L << (SQL_NO_CACHE - 452)) | (1L << (SQL_THREAD - 452)) | (1L << (START - 452)) | (1L << (STARTS - 452)) | (1L << (STATS_AUTO_RECALC - 452)) | (1L << (STATS_PERSISTENT - 452)) | (1L << (STATS_SAMPLE_PAGES - 452)) | (1L << (STATUS - 452)) | (1L << (STOP - 452)) | (1L << (STORAGE - 452)) | (1L << (STRING - 452)) | (1L << (SUBJECT - 452)) | (1L << (SUBPARTITION - 452)) | (1L << (SUBPARTITIONS - 452)) | (1L << (SUSPEND - 452)) | (1L << (SWAPS - 452)) | (1L << (SWITCHES - 452)) | (1L << (TABLESPACE - 452)) | (1L << (TEMPORARY - 452)))) != 0) || ((((_la - 516)) & ~0x3f) == 0 && ((1L << (_la - 516)) & ((1L << (TEMPTABLE - 516)) | (1L << (THAN - 516)) | (1L << (TRANSACTION - 516)) | (1L << (TRUNCATE - 516)) | (1L << (UNDEFINED - 516)) | (1L << (UNDOFILE - 516)) | (1L << (UNDO_BUFFER_SIZE - 516)) | (1L << (UNKNOWN - 516)) | (1L << (UPGRADE - 516)) | (1L << (USER - 516)) | (1L << (VALIDATION - 516)) | (1L << (VALUE - 516)) | (1L << (VARIABLES - 516)) | (1L << (VIEW - 516)) | (1L << (WAIT - 516)) | (1L << (WARNINGS - 516)) | (1L << (WITHOUT - 516)) | (1L << (WORK - 516)) | (1L << (WRAPPER - 516)) | (1L << (X509 - 516)) | (1L << (XA - 516)) | (1L << (XML - 516)) | (1L << (TABLES - 516)) | (1L << (ROUTINE - 516)) | (1L << (EXECUTE - 516)) | (1L << (FILE - 516)) | (1L << (PROCESS - 516)) | (1L << (RELOAD - 516)) | (1L << (SHUTDOWN - 516)) | (1L << (SUPER - 516)) | (1L << (PRIVILEGES - 516)) | (1L << (ARMSCII8 - 516)) | (1L << (ASCII - 516)) | (1L << (BIG5 - 516)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)) | (1L << (MEMORY - 580)) | (1L << (MRG_MYISAM - 580)) | (1L << (MYISAM - 580)) | (1L << (NDB - 580)) | (1L << (NDBCLUSTER - 580)) | (1L << (PERFOMANCE_SCHEMA - 580)) | (1L << (REPEATABLE - 580)) | (1L << (COMMITTED - 580)) | (1L << (UNCOMMITTED - 580)) | (1L << (SERIALIZABLE - 580)) | (1L << (MOD - 580)) | (1L << (REVERSE - 580)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
				{
				setState(1182);
				parameterDeclaration();
				}
			}

			setState(1189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1185);
				match(COMMA);
				setState(1186);
				parameterDeclaration();
				}
				}
				setState(1191);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1192);
			match(RIGHT_PAREN);
			setState(1193);
			match(RETURNS);
			setState(1194);
			dataType();
			setState(1198);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1195);
					routineOption();
					}
					} 
				}
				setState(1200);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,52,_ctx);
			}
			setState(1201);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerStatementContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext wrapper;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(MySQLSQLStatementParser.SERVER, 0); }
		public TerminalNode FOREIGN() { return getToken(MySQLSQLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(MySQLSQLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(MySQLSQLStatementParser.WRAPPER, 0); }
		public TerminalNode OPTIONS() { return getToken(MySQLSQLStatementParser.OPTIONS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public CreateServerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateServerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerStatementContext createServerStatement() throws RecognitionException {
		CreateServerStatementContext _localctx = new CreateServerStatementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createServerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1203);
			match(CREATE);
			setState(1204);
			match(SERVER);
			setState(1205);
			((CreateServerStatementContext)_localctx).name = nameIdentifier();
			setState(1206);
			match(FOREIGN);
			setState(1207);
			match(DATA);
			setState(1208);
			match(WRAPPER);
			setState(1209);
			((CreateServerStatementContext)_localctx).wrapper = nameIdentifier();
			setState(1210);
			match(OPTIONS);
			setState(1211);
			match(LEFT_PAREN);
			setState(1212);
			serverOption();
			setState(1217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1213);
				match(COMMA);
				setState(1214);
				serverOption();
				}
				}
				setState(1219);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1220);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
	 
		public ServerOptionContext() { }
		public void copyFrom(ServerOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ServerPasswordOptionContext extends ServerOptionContext {
		public TerminalNode PASSWORD() { return getToken(MySQLSQLStatementParser.PASSWORD, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerPasswordOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitServerPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerSocketOptionContext extends ServerOptionContext {
		public TerminalNode SOCKET() { return getToken(MySQLSQLStatementParser.SOCKET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerSocketOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitServerSocketOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerOwnerOptionContext extends ServerOptionContext {
		public TerminalNode OWNER() { return getToken(MySQLSQLStatementParser.OWNER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerOwnerOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitServerOwnerOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerUserOptionContext extends ServerOptionContext {
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerUserOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitServerUserOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerHostOptionContext extends ServerOptionContext {
		public TerminalNode HOST() { return getToken(MySQLSQLStatementParser.HOST, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerHostOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitServerHostOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerPortOptionContext extends ServerOptionContext {
		public TerminalNode PORT() { return getToken(MySQLSQLStatementParser.PORT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerPortOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitServerPortOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ServerDatabaseOptionContext extends ServerOptionContext {
		public TerminalNode DATABASE() { return getToken(MySQLSQLStatementParser.DATABASE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ServerDatabaseOptionContext(ServerOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitServerDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_serverOption);
		try {
			setState(1236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				_localctx = new ServerHostOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1222);
				match(HOST);
				setState(1223);
				expr(0);
				}
				break;
			case DATABASE:
				_localctx = new ServerDatabaseOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1224);
				match(DATABASE);
				setState(1225);
				expr(0);
				}
				break;
			case USER:
				_localctx = new ServerUserOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1226);
				match(USER);
				setState(1227);
				expr(0);
				}
				break;
			case PASSWORD:
				_localctx = new ServerPasswordOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1228);
				match(PASSWORD);
				setState(1229);
				expr(0);
				}
				break;
			case SOCKET:
				_localctx = new ServerSocketOptionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1230);
				match(SOCKET);
				setState(1231);
				expr(0);
				}
				break;
			case OWNER:
				_localctx = new ServerOwnerOptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1232);
				match(OWNER);
				setState(1233);
				expr(0);
				}
				break;
			case PORT:
				_localctx = new ServerPortOptionContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1234);
				match(PORT);
				setState(1235);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableStatementContext extends ParserRuleContext {
		public Token tableElementsParen;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySQLSQLStatementParser.TEMPORARY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TableOptionContext> tableOption() {
			return getRuleContexts(TableOptionContext.class);
		}
		public TableOptionContext tableOption(int i) {
			return getRuleContext(TableOptionContext.class,i);
		}
		public IPartitionByContext iPartitionBy() {
			return getRuleContext(IPartitionByContext.class,0);
		}
		public KeyViolateContext keyViolate() {
			return getRuleContext(KeyViolateContext.class,0);
		}
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public CreateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableStatementContext createTableStatement() throws RecognitionException {
		CreateTableStatementContext _localctx = new CreateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_createTableStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1238);
			match(CREATE);
			setState(1240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(1239);
				match(TEMPORARY);
				}
			}

			setState(1242);
			match(TABLE);
			setState(1244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1243);
				ifNotExists();
				}
			}

			setState(1246);
			nameIdentifier();
			setState(1261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1247);
					((CreateTableStatementContext)_localctx).tableElementsParen = match(LEFT_PAREN);
					}
				}

				setState(1250);
				tableElement();
				setState(1255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1251);
					match(COMMA);
					setState(1252);
					tableElement();
					}
					}
					setState(1257);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1259);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RIGHT_PAREN) {
					{
					setState(1258);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			}
			setState(1273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1263);
				tableOption();
				setState(1270);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1265);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1264);
							match(COMMA);
							}
						}

						setState(1267);
						tableOption();
						}
						} 
					}
					setState(1272);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,62,_ctx);
				}
				}
				break;
			}
			setState(1276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1275);
				iPartitionBy();
				}
			}

			setState(1279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1278);
				keyViolate();
				}
				break;
			}
			setState(1285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				{
				setState(1282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1281);
					match(AS);
					}
				}

				setState(1284);
				iSelectQuery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public LikeClauseContext likeClause() {
			return getRuleContext(LikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_tableElement);
		try {
			setState(1290);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
			case LEFT:
			case REPLACE:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SUM:
			case SUBSTR:
			case SUBSTRING:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case MOD:
			case REVERSE:
			case ASTERISK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case MID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1287);
				columnDefinition();
				}
				break;
			case LIKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1288);
				likeClause();
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case FOREIGN:
			case FULLTEXT:
			case INDEX:
			case KEY:
			case PRIMARY:
			case SPATIAL:
			case UNIQUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1289);
				tableConstraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_columnDefinition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1292);
			nameIdentifier();
			setState(1294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				setState(1293);
				dataType();
				}
				break;
			}
			setState(1299);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1296);
					columnConstraint();
					}
					} 
				}
				setState(1301);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,70,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySQLSQLStatementParser.LIKE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeClauseContext likeClause() throws RecognitionException {
		LikeClauseContext _localctx = new LikeClauseContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_likeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1302);
			match(LIKE);
			setState(1303);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySQLSQLStatementParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySQLSQLStatementParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLSQLStatementParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentClauseContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CommentClauseContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCommentClause(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySQLSQLStatementParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySQLSQLStatementParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySQLSQLStatementParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferencesColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode REFERENCES() { return getToken(MySQLSQLStatementParser.REFERENCES, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode MATCH() { return getToken(MySQLSQLStatementParser.MATCH, 0); }
		public MatchTypeContext matchType() {
			return getRuleContext(MatchTypeContext.class,0);
		}
		public List<ReferenceTriggerActionContext> referenceTriggerAction() {
			return getRuleContexts(ReferenceTriggerActionContext.class);
		}
		public ReferenceTriggerActionContext referenceTriggerAction(int i) {
			return getRuleContext(ReferenceTriggerActionContext.class,i);
		}
		public ReferencesColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitReferencesColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySQLSQLStatementParser.AUTO_INCREMENT, 0); }
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySQLSQLStatementParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySQLSQLStatementParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public UniqueColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUniqueColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public Null_Context null_() {
			return getRuleContext(Null_Context.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotNullColumnConstraintContext extends ColumnConstraintContext {
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public NotNullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNotNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_columnConstraint);
		int _la;
		try {
			setState(1345);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1305);
				null_();
				}
				break;
			case NOT:
				_localctx = new NotNullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1306);
				notNull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1307);
				defaultClause();
				}
				break;
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1308);
				match(AUTO_INCREMENT);
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(1309);
					match(PRIMARY);
					}
				}

				setState(1312);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1313);
				match(UNIQUE);
				setState(1315);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
				case 1:
					{
					setState(1314);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentClauseContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1317);
				match(COMMENT);
				setState(1318);
				expr(0);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1319);
				match(COLUMN_FORMAT);
				setState(1320);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1321);
				match(STORAGE);
				setState(1322);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferencesColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1323);
				match(REFERENCES);
				setState(1324);
				nameIdentifier();
				setState(1325);
				match(LEFT_PAREN);
				setState(1326);
				constraintColumn();
				setState(1331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1327);
					match(COMMA);
					setState(1328);
					constraintColumn();
					}
					}
					setState(1333);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1334);
				match(RIGHT_PAREN);
				setState(1337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(1335);
					match(MATCH);
					setState(1336);
					matchType();
					}
					break;
				}
				setState(1342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(1339);
					referenceTriggerAction();
					}
					}
					setState(1344);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialTableConstraintContext extends TableConstraintContext {
		public TerminalNode SPATIAL() { return getToken(MySQLSQLStatementParser.SPATIAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SpatialTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSpatialTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexTableConstraintContext extends TableConstraintContext {
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public IndexTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueTableConstraintContext extends TableConstraintContext {
		public NameIdentifierContext name;
		public NameIdentifierContext index;
		public TerminalNode UNIQUE() { return getToken(MySQLSQLStatementParser.UNIQUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySQLSQLStatementParser.CONSTRAINT, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public UniqueTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUniqueTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class KeyTableConstraintContext extends TableConstraintContext {
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public KeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public TerminalNode CHECK() { return getToken(MySQLSQLStatementParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public NameIdentifierContext name;
		public TerminalNode PRIMARY() { return getToken(MySQLSQLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySQLSQLStatementParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullTextTableConstraintContext extends TableConstraintContext {
		public TerminalNode FULLTEXT() { return getToken(MySQLSQLStatementParser.FULLTEXT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public FullTextTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFullTextTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public NameIdentifierContext name;
		public NameIdentifierContext index;
		public ConstraintColumnContext constraintColumn;
		public List<ConstraintColumnContext> referencingColumns = new ArrayList<ConstraintColumnContext>();
		public NameIdentifierContext referencedTable;
		public List<ConstraintColumnContext> referencedColumns = new ArrayList<ConstraintColumnContext>();
		public TerminalNode FOREIGN() { return getToken(MySQLSQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode REFERENCES() { return getToken(MySQLSQLStatementParser.REFERENCES, 0); }
		public List<ConstraintColumnContext> constraintColumn() {
			return getRuleContexts(ConstraintColumnContext.class);
		}
		public ConstraintColumnContext constraintColumn(int i) {
			return getRuleContext(ConstraintColumnContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySQLSQLStatementParser.CONSTRAINT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode MATCH() { return getToken(MySQLSQLStatementParser.MATCH, 0); }
		public MatchTypeContext matchType() {
			return getRuleContext(MatchTypeContext.class,0);
		}
		public List<ReferenceTriggerActionContext> referenceTriggerAction() {
			return getRuleContexts(ReferenceTriggerActionContext.class);
		}
		public ReferenceTriggerActionContext referenceTriggerAction(int i) {
			return getRuleContext(ReferenceTriggerActionContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_tableConstraint);
		int _la;
		try {
			int _alt;
			setState(1546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1347);
					match(CONSTRAINT);
					setState(1349);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
						{
						setState(1348);
						((PrimaryKeyTableConstraintContext)_localctx).name = nameIdentifier();
						}
					}

					}
				}

				setState(1353);
				match(PRIMARY);
				setState(1354);
				match(KEY);
				setState(1356);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1355);
					indexType();
					}
				}

				setState(1358);
				match(LEFT_PAREN);
				setState(1359);
				constraintColumn();
				setState(1364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1360);
					match(COMMA);
					setState(1361);
					constraintColumn();
					}
					}
					setState(1366);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1367);
				match(RIGHT_PAREN);
				setState(1371);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1368);
						indexOption();
						}
						} 
					}
					setState(1373);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,81,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new IndexTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1374);
				match(INDEX);
				setState(1376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(1375);
					nameIdentifier();
					}
				}

				setState(1379);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1378);
					indexType();
					}
				}

				setState(1381);
				match(LEFT_PAREN);
				setState(1382);
				constraintColumn();
				setState(1387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1383);
					match(COMMA);
					setState(1384);
					constraintColumn();
					}
					}
					setState(1389);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1390);
				match(RIGHT_PAREN);
				setState(1394);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1391);
						indexOption();
						}
						} 
					}
					setState(1396);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,85,_ctx);
				}
				}
				break;
			case 3:
				_localctx = new KeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1397);
				match(KEY);
				setState(1399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(1398);
					nameIdentifier();
					}
				}

				setState(1402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1401);
					indexType();
					}
				}

				setState(1404);
				match(LEFT_PAREN);
				setState(1405);
				constraintColumn();
				setState(1410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1406);
					match(COMMA);
					setState(1407);
					constraintColumn();
					}
					}
					setState(1412);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1413);
				match(RIGHT_PAREN);
				setState(1417);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1414);
						indexOption();
						}
						} 
					}
					setState(1419);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
				}
				}
				break;
			case 4:
				_localctx = new UniqueTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1420);
					match(CONSTRAINT);
					setState(1422);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
						{
						setState(1421);
						((UniqueTableConstraintContext)_localctx).name = nameIdentifier();
						}
					}

					}
				}

				setState(1426);
				match(UNIQUE);
				setState(1428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INDEX - 68)) | (1L << (KEY - 68)) | (1L << (KEYS - 68)))) != 0)) {
					{
					setState(1427);
					indexFormat();
					}
				}

				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(1430);
					((UniqueTableConstraintContext)_localctx).index = nameIdentifier();
					}
				}

				setState(1434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1433);
					indexType();
					}
				}

				setState(1436);
				match(LEFT_PAREN);
				setState(1437);
				constraintColumn();
				setState(1442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1438);
					match(COMMA);
					setState(1439);
					constraintColumn();
					}
					}
					setState(1444);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1445);
				match(RIGHT_PAREN);
				setState(1449);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1446);
						indexOption();
						}
						} 
					}
					setState(1451);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
				}
				}
				break;
			case 5:
				_localctx = new FullTextTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1452);
				match(FULLTEXT);
				setState(1454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INDEX - 68)) | (1L << (KEY - 68)) | (1L << (KEYS - 68)))) != 0)) {
					{
					setState(1453);
					indexFormat();
					}
				}

				setState(1457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(1456);
					nameIdentifier();
					}
				}

				setState(1459);
				match(LEFT_PAREN);
				setState(1460);
				constraintColumn();
				setState(1465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1461);
					match(COMMA);
					setState(1462);
					constraintColumn();
					}
					}
					setState(1467);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1468);
				match(RIGHT_PAREN);
				setState(1472);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1469);
						indexOption();
						}
						} 
					}
					setState(1474);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,100,_ctx);
				}
				}
				break;
			case 6:
				_localctx = new SpatialTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1475);
				match(SPATIAL);
				setState(1477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INDEX - 68)) | (1L << (KEY - 68)) | (1L << (KEYS - 68)))) != 0)) {
					{
					setState(1476);
					indexFormat();
					}
				}

				setState(1480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(1479);
					nameIdentifier();
					}
				}

				setState(1482);
				match(LEFT_PAREN);
				setState(1483);
				constraintColumn();
				setState(1488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1484);
					match(COMMA);
					setState(1485);
					constraintColumn();
					}
					}
					setState(1490);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1491);
				match(RIGHT_PAREN);
				setState(1495);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1492);
						indexOption();
						}
						} 
					}
					setState(1497);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,104,_ctx);
				}
				}
				break;
			case 7:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(1498);
					match(CONSTRAINT);
					setState(1500);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
						{
						setState(1499);
						((ForeignKeyTableConstraintContext)_localctx).name = nameIdentifier();
						}
					}

					}
				}

				setState(1504);
				match(FOREIGN);
				setState(1505);
				match(KEY);
				setState(1507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(1506);
					((ForeignKeyTableConstraintContext)_localctx).index = nameIdentifier();
					}
				}

				setState(1509);
				match(LEFT_PAREN);
				setState(1510);
				((ForeignKeyTableConstraintContext)_localctx).constraintColumn = constraintColumn();
				((ForeignKeyTableConstraintContext)_localctx).referencingColumns.add(((ForeignKeyTableConstraintContext)_localctx).constraintColumn);
				setState(1515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1511);
					match(COMMA);
					setState(1512);
					((ForeignKeyTableConstraintContext)_localctx).constraintColumn = constraintColumn();
					((ForeignKeyTableConstraintContext)_localctx).referencingColumns.add(((ForeignKeyTableConstraintContext)_localctx).constraintColumn);
					}
					}
					setState(1517);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1518);
				match(RIGHT_PAREN);
				setState(1519);
				match(REFERENCES);
				setState(1520);
				((ForeignKeyTableConstraintContext)_localctx).referencedTable = nameIdentifier();
				setState(1521);
				match(LEFT_PAREN);
				setState(1522);
				((ForeignKeyTableConstraintContext)_localctx).constraintColumn = constraintColumn();
				((ForeignKeyTableConstraintContext)_localctx).referencedColumns.add(((ForeignKeyTableConstraintContext)_localctx).constraintColumn);
				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1523);
					match(COMMA);
					setState(1524);
					((ForeignKeyTableConstraintContext)_localctx).constraintColumn = constraintColumn();
					((ForeignKeyTableConstraintContext)_localctx).referencedColumns.add(((ForeignKeyTableConstraintContext)_localctx).constraintColumn);
					}
					}
					setState(1529);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1530);
				match(RIGHT_PAREN);
				setState(1533);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					setState(1531);
					match(MATCH);
					setState(1532);
					matchType();
					}
					break;
				}
				setState(1538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(1535);
					referenceTriggerAction();
					}
					}
					setState(1540);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1541);
				match(CHECK);
				setState(1542);
				match(LEFT_PAREN);
				setState(1543);
				expr(0);
				setState(1544);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintColumnContext extends ParserRuleContext {
		public ExprContext name;
		public ExprContext length;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public OrderingSpecificationContext orderingSpecification() {
			return getRuleContext(OrderingSpecificationContext.class,0);
		}
		public ConstraintColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintColumn; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitConstraintColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintColumnContext constraintColumn() throws RecognitionException {
		ConstraintColumnContext _localctx = new ConstraintColumnContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_constraintColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1548);
			((ConstraintColumnContext)_localctx).name = expr(0);
			setState(1553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1549);
				match(LEFT_PAREN);
				setState(1550);
				((ConstraintColumnContext)_localctx).length = expr(0);
				setState(1551);
				match(RIGHT_PAREN);
				}
			}

			setState(1556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1555);
				orderingSpecification();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchTypeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(MySQLSQLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySQLSQLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySQLSQLStatementParser.SIMPLE, 0); }
		public MatchTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMatchType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchTypeContext matchType() throws RecognitionException {
		MatchTypeContext _localctx = new MatchTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_matchType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1558);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceTriggerActionContext extends ParserRuleContext {
		public ReferenceTriggerActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceTriggerAction; }
	 
		public ReferenceTriggerActionContext() { }
		public void copyFrom(ReferenceTriggerActionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OnDeleteActionContext extends ReferenceTriggerActionContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(MySQLSQLStatementParser.DELETE, 0); }
		public ReferenceControlTypeContext referenceControlType() {
			return getRuleContext(ReferenceControlTypeContext.class,0);
		}
		public OnDeleteActionContext(ReferenceTriggerActionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOnDeleteAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OnUpdateActionContext extends ReferenceTriggerActionContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLSQLStatementParser.UPDATE, 0); }
		public ReferenceControlTypeContext referenceControlType() {
			return getRuleContext(ReferenceControlTypeContext.class,0);
		}
		public OnUpdateActionContext(ReferenceTriggerActionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOnUpdateAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceTriggerActionContext referenceTriggerAction() throws RecognitionException {
		ReferenceTriggerActionContext _localctx = new ReferenceTriggerActionContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_referenceTriggerAction);
		try {
			setState(1566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				_localctx = new OnDeleteActionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1560);
				match(ON);
				setState(1561);
				match(DELETE);
				setState(1562);
				referenceControlType();
				}
				break;
			case 2:
				_localctx = new OnUpdateActionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1563);
				match(ON);
				setState(1564);
				match(UPDATE);
				setState(1565);
				referenceControlType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySQLSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySQLSQLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySQLSQLStatementParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySQLSQLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySQLSQLStatementParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_referenceControlType);
		try {
			setState(1574);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1568);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1569);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(1570);
				match(SET);
				setState(1571);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(1572);
				match(NO);
				setState(1573);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOptionContext extends ParserRuleContext {
		public AutoIncrementOptionExprContext autoIncrementOptionExpr() {
			return getRuleContext(AutoIncrementOptionExprContext.class,0);
		}
		public AvgRowLengthOptionExprContext avgRowLengthOptionExpr() {
			return getRuleContext(AvgRowLengthOptionExprContext.class,0);
		}
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CharsetOptionExprContext charsetOptionExpr() {
			return getRuleContext(CharsetOptionExprContext.class,0);
		}
		public ChecksumOptionExprContext checksumOptionExpr() {
			return getRuleContext(ChecksumOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public CommentOptionExprContext commentOptionExpr() {
			return getRuleContext(CommentOptionExprContext.class,0);
		}
		public CompressionOptionExprContext compressionOptionExpr() {
			return getRuleContext(CompressionOptionExprContext.class,0);
		}
		public ConnectionOptionExprContext connectionOptionExpr() {
			return getRuleContext(ConnectionOptionExprContext.class,0);
		}
		public DataDirectoryOptionExprContext dataDirectoryOptionExpr() {
			return getRuleContext(DataDirectoryOptionExprContext.class,0);
		}
		public IndexDirectoryOptionExprContext indexDirectoryOptionExpr() {
			return getRuleContext(IndexDirectoryOptionExprContext.class,0);
		}
		public DelayKeyWriteOptionExprContext delayKeyWriteOptionExpr() {
			return getRuleContext(DelayKeyWriteOptionExprContext.class,0);
		}
		public EncryptionOptionExprContext encryptionOptionExpr() {
			return getRuleContext(EncryptionOptionExprContext.class,0);
		}
		public EngineOptionExprContext engineOptionExpr() {
			return getRuleContext(EngineOptionExprContext.class,0);
		}
		public InsertMethodOptionExprContext insertMethodOptionExpr() {
			return getRuleContext(InsertMethodOptionExprContext.class,0);
		}
		public KeyBlockSizeOptionExprContext keyBlockSizeOptionExpr() {
			return getRuleContext(KeyBlockSizeOptionExprContext.class,0);
		}
		public MaxRowsOptionExprContext maxRowsOptionExpr() {
			return getRuleContext(MaxRowsOptionExprContext.class,0);
		}
		public MinRowsOptionExprContext minRowsOptionExpr() {
			return getRuleContext(MinRowsOptionExprContext.class,0);
		}
		public PackKeysOptionExprContext packKeysOptionExpr() {
			return getRuleContext(PackKeysOptionExprContext.class,0);
		}
		public PasswordOptionExprContext passwordOptionExpr() {
			return getRuleContext(PasswordOptionExprContext.class,0);
		}
		public RowFormatOptionExprContext rowFormatOptionExpr() {
			return getRuleContext(RowFormatOptionExprContext.class,0);
		}
		public StatsAutoRecalcOptionExprContext statsAutoRecalcOptionExpr() {
			return getRuleContext(StatsAutoRecalcOptionExprContext.class,0);
		}
		public StatsPersistentOptionExprContext statsPersistentOptionExpr() {
			return getRuleContext(StatsPersistentOptionExprContext.class,0);
		}
		public StatsSamplePageOptionExprContext statsSamplePageOptionExpr() {
			return getRuleContext(StatsSamplePageOptionExprContext.class,0);
		}
		public TablespaceOptionExprContext tablespaceOptionExpr() {
			return getRuleContext(TablespaceOptionExprContext.class,0);
		}
		public UnionOptionExprContext unionOptionExpr() {
			return getRuleContext(UnionOptionExprContext.class,0);
		}
		public TableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOptionContext tableOption() throws RecognitionException {
		TableOptionContext _localctx = new TableOptionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_tableOption);
		try {
			setState(1602);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1576);
				autoIncrementOptionExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1577);
				avgRowLengthOptionExpr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1578);
				characterSetOptionExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1579);
				charsetOptionExpr();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1580);
				checksumOptionExpr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1581);
				collateOptionExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1582);
				commentOptionExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1583);
				compressionOptionExpr();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1584);
				connectionOptionExpr();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1585);
				dataDirectoryOptionExpr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1586);
				indexDirectoryOptionExpr();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1587);
				delayKeyWriteOptionExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1588);
				encryptionOptionExpr();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1589);
				engineOptionExpr();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1590);
				insertMethodOptionExpr();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1591);
				keyBlockSizeOptionExpr();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1592);
				maxRowsOptionExpr();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1593);
				minRowsOptionExpr();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1594);
				packKeysOptionExpr();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1595);
				passwordOptionExpr();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1596);
				rowFormatOptionExpr();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1597);
				statsAutoRecalcOptionExpr();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1598);
				statsPersistentOptionExpr();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1599);
				statsSamplePageOptionExpr();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1600);
				tablespaceOptionExpr();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1601);
				unionOptionExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IPartitionByContext extends ParserRuleContext {
		public IPartitionByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iPartitionBy; }
	 
		public IPartitionByContext() { }
		public void copyFrom(IPartitionByContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionByListColumnsContext extends IPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext partitionsNum;
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode LIST() { return getToken(MySQLSQLStatementParser.LIST, 0); }
		public TerminalNode COLUMNS() { return getToken(MySQLSQLStatementParser.COLUMNS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LINEAR() { return getToken(MySQLSQLStatementParser.LINEAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode PARTITIONS() { return getToken(MySQLSQLStatementParser.PARTITIONS, 0); }
		public ISubPartitionByContext iSubPartitionBy() {
			return getRuleContext(ISubPartitionByContext.class,0);
		}
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public PartitionByListColumnsContext(IPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionByListColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionByKeyContext extends IPartitionByContext {
		public ExprContext algorithm;
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext partitionsNum;
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LINEAR() { return getToken(MySQLSQLStatementParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySQLSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode PARTITIONS() { return getToken(MySQLSQLStatementParser.PARTITIONS, 0); }
		public ISubPartitionByContext iSubPartitionBy() {
			return getRuleContext(ISubPartitionByContext.class,0);
		}
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public PartitionByKeyContext(IPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionByKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionByRangeContext extends IPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext partitionsNum;
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(MySQLSQLStatementParser.RANGE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LINEAR() { return getToken(MySQLSQLStatementParser.LINEAR, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySQLSQLStatementParser.PARTITIONS, 0); }
		public ISubPartitionByContext iSubPartitionBy() {
			return getRuleContext(ISubPartitionByContext.class,0);
		}
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PartitionByRangeContext(IPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionByRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionByRangeColumnsContext extends IPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext partitionsNum;
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(MySQLSQLStatementParser.RANGE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySQLSQLStatementParser.COLUMNS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LINEAR() { return getToken(MySQLSQLStatementParser.LINEAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode PARTITIONS() { return getToken(MySQLSQLStatementParser.PARTITIONS, 0); }
		public ISubPartitionByContext iSubPartitionBy() {
			return getRuleContext(ISubPartitionByContext.class,0);
		}
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public PartitionByRangeColumnsContext(IPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionByRangeColumns(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionByListContext extends IPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext partitionsNum;
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode LIST() { return getToken(MySQLSQLStatementParser.LIST, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LINEAR() { return getToken(MySQLSQLStatementParser.LINEAR, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySQLSQLStatementParser.PARTITIONS, 0); }
		public ISubPartitionByContext iSubPartitionBy() {
			return getRuleContext(ISubPartitionByContext.class,0);
		}
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PartitionByListContext(IPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionByList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionByHashContext extends IPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext partitionsNum;
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode HASH() { return getToken(MySQLSQLStatementParser.HASH, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LINEAR() { return getToken(MySQLSQLStatementParser.LINEAR, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySQLSQLStatementParser.PARTITIONS, 0); }
		public ISubPartitionByContext iSubPartitionBy() {
			return getRuleContext(ISubPartitionByContext.class,0);
		}
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PartitionByHashContext(IPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionByHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IPartitionByContext iPartitionBy() throws RecognitionException {
		IPartitionByContext _localctx = new IPartitionByContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_iPartitionBy);
		int _la;
		try {
			setState(1806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				_localctx = new PartitionByHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1604);
				match(PARTITION);
				setState(1605);
				match(BY);
				setState(1607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1606);
					match(LINEAR);
					}
				}

				setState(1609);
				match(HASH);
				setState(1610);
				match(LEFT_PAREN);
				setState(1611);
				((PartitionByHashContext)_localctx).expr = expr(0);
				((PartitionByHashContext)_localctx).columns.add(((PartitionByHashContext)_localctx).expr);
				setState(1612);
				match(RIGHT_PAREN);
				setState(1615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(1613);
					match(PARTITIONS);
					setState(1614);
					((PartitionByHashContext)_localctx).partitionsNum = expr(0);
					}
					break;
				}
				setState(1618);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(1617);
					iSubPartitionBy();
					}
					break;
				}
				setState(1631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
				case 1:
					{
					setState(1620);
					match(LEFT_PAREN);
					setState(1621);
					partitionDefinition();
					setState(1626);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1622);
						match(COMMA);
						setState(1623);
						partitionDefinition();
						}
						}
						setState(1628);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1629);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new PartitionByKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1633);
				match(PARTITION);
				setState(1634);
				match(BY);
				setState(1636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1635);
					match(LINEAR);
					}
				}

				setState(1638);
				match(KEY);
				setState(1642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1639);
					match(ALGORITHM);
					setState(1640);
					match(EQUALS_OP);
					setState(1641);
					((PartitionByKeyContext)_localctx).algorithm = expr(0);
					}
				}

				setState(1644);
				match(LEFT_PAREN);
				setState(1645);
				((PartitionByKeyContext)_localctx).expr = expr(0);
				((PartitionByKeyContext)_localctx).columns.add(((PartitionByKeyContext)_localctx).expr);
				setState(1650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1646);
					match(COMMA);
					setState(1647);
					((PartitionByKeyContext)_localctx).expr = expr(0);
					((PartitionByKeyContext)_localctx).columns.add(((PartitionByKeyContext)_localctx).expr);
					}
					}
					setState(1652);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1653);
				match(RIGHT_PAREN);
				setState(1656);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
				case 1:
					{
					setState(1654);
					match(PARTITIONS);
					setState(1655);
					((PartitionByKeyContext)_localctx).partitionsNum = expr(0);
					}
					break;
				}
				setState(1659);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(1658);
					iSubPartitionBy();
					}
					break;
				}
				setState(1672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(1661);
					match(LEFT_PAREN);
					setState(1662);
					partitionDefinition();
					setState(1667);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1663);
						match(COMMA);
						setState(1664);
						partitionDefinition();
						}
						}
						setState(1669);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1670);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new PartitionByRangeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1674);
				match(PARTITION);
				setState(1675);
				match(BY);
				setState(1677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1676);
					match(LINEAR);
					}
				}

				setState(1679);
				match(RANGE);
				setState(1680);
				match(LEFT_PAREN);
				setState(1681);
				((PartitionByRangeContext)_localctx).expr = expr(0);
				((PartitionByRangeContext)_localctx).columns.add(((PartitionByRangeContext)_localctx).expr);
				setState(1682);
				match(RIGHT_PAREN);
				setState(1685);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
				case 1:
					{
					setState(1683);
					match(PARTITIONS);
					setState(1684);
					((PartitionByRangeContext)_localctx).partitionsNum = expr(0);
					}
					break;
				}
				setState(1688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					setState(1687);
					iSubPartitionBy();
					}
					break;
				}
				setState(1701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					setState(1690);
					match(LEFT_PAREN);
					setState(1691);
					partitionDefinition();
					setState(1696);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1692);
						match(COMMA);
						setState(1693);
						partitionDefinition();
						}
						}
						setState(1698);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1699);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new PartitionByRangeColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1703);
				match(PARTITION);
				setState(1704);
				match(BY);
				setState(1706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1705);
					match(LINEAR);
					}
				}

				setState(1708);
				match(RANGE);
				setState(1709);
				match(COLUMNS);
				setState(1710);
				match(LEFT_PAREN);
				setState(1711);
				((PartitionByRangeColumnsContext)_localctx).expr = expr(0);
				((PartitionByRangeColumnsContext)_localctx).columns.add(((PartitionByRangeColumnsContext)_localctx).expr);
				setState(1716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1712);
					match(COMMA);
					setState(1713);
					((PartitionByRangeColumnsContext)_localctx).expr = expr(0);
					((PartitionByRangeColumnsContext)_localctx).columns.add(((PartitionByRangeColumnsContext)_localctx).expr);
					}
					}
					setState(1718);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1719);
				match(RIGHT_PAREN);
				setState(1722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
				case 1:
					{
					setState(1720);
					match(PARTITIONS);
					setState(1721);
					((PartitionByRangeColumnsContext)_localctx).partitionsNum = expr(0);
					}
					break;
				}
				setState(1725);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(1724);
					iSubPartitionBy();
					}
					break;
				}
				setState(1738);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(1727);
					match(LEFT_PAREN);
					setState(1728);
					partitionDefinition();
					setState(1733);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1729);
						match(COMMA);
						setState(1730);
						partitionDefinition();
						}
						}
						setState(1735);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1736);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new PartitionByListContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1740);
				match(PARTITION);
				setState(1741);
				match(BY);
				setState(1743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1742);
					match(LINEAR);
					}
				}

				setState(1745);
				match(LIST);
				setState(1746);
				match(LEFT_PAREN);
				setState(1747);
				((PartitionByListContext)_localctx).expr = expr(0);
				((PartitionByListContext)_localctx).columns.add(((PartitionByListContext)_localctx).expr);
				setState(1748);
				match(RIGHT_PAREN);
				setState(1751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(1749);
					match(PARTITIONS);
					setState(1750);
					((PartitionByListContext)_localctx).partitionsNum = expr(0);
					}
					break;
				}
				setState(1754);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
				case 1:
					{
					setState(1753);
					iSubPartitionBy();
					}
					break;
				}
				setState(1767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(1756);
					match(LEFT_PAREN);
					setState(1757);
					partitionDefinition();
					setState(1762);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1758);
						match(COMMA);
						setState(1759);
						partitionDefinition();
						}
						}
						setState(1764);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1765);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new PartitionByListColumnsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1769);
				match(PARTITION);
				setState(1770);
				match(BY);
				setState(1772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1771);
					match(LINEAR);
					}
				}

				setState(1774);
				match(LIST);
				setState(1775);
				match(COLUMNS);
				setState(1776);
				match(LEFT_PAREN);
				setState(1777);
				((PartitionByListColumnsContext)_localctx).expr = expr(0);
				((PartitionByListColumnsContext)_localctx).columns.add(((PartitionByListColumnsContext)_localctx).expr);
				setState(1782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1778);
					match(COMMA);
					setState(1779);
					((PartitionByListColumnsContext)_localctx).expr = expr(0);
					((PartitionByListColumnsContext)_localctx).columns.add(((PartitionByListColumnsContext)_localctx).expr);
					}
					}
					setState(1784);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1785);
				match(RIGHT_PAREN);
				setState(1788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(1786);
					match(PARTITIONS);
					setState(1787);
					((PartitionByListColumnsContext)_localctx).partitionsNum = expr(0);
					}
					break;
				}
				setState(1791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(1790);
					iSubPartitionBy();
					}
					break;
				}
				setState(1804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					setState(1793);
					match(LEFT_PAREN);
					setState(1794);
					partitionDefinition();
					setState(1799);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1795);
						match(COMMA);
						setState(1796);
						partitionDefinition();
						}
						}
						setState(1801);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1802);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ISubPartitionByContext extends ParserRuleContext {
		public ISubPartitionByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iSubPartitionBy; }
	 
		public ISubPartitionByContext() { }
		public void copyFrom(ISubPartitionByContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubPartitionByKeyContext extends ISubPartitionByContext {
		public ExprContext algorithm;
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext subpartitionsNum;
		public TerminalNode SUBPARTITION() { return getToken(MySQLSQLStatementParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LINEAR() { return getToken(MySQLSQLStatementParser.LINEAR, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySQLSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(MySQLSQLStatementParser.SUBPARTITIONS, 0); }
		public SubPartitionByKeyContext(ISubPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSubPartitionByKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubPartitionByHashContext extends ISubPartitionByContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public ExprContext subpartitionsNum;
		public TerminalNode SUBPARTITION() { return getToken(MySQLSQLStatementParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode HASH() { return getToken(MySQLSQLStatementParser.HASH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LINEAR() { return getToken(MySQLSQLStatementParser.LINEAR, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySQLSQLStatementParser.SUBPARTITIONS, 0); }
		public SubPartitionByHashContext(ISubPartitionByContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSubPartitionByHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ISubPartitionByContext iSubPartitionBy() throws RecognitionException {
		ISubPartitionByContext _localctx = new ISubPartitionByContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_iSubPartitionBy);
		int _la;
		try {
			setState(1846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				_localctx = new SubPartitionByHashContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1808);
				match(SUBPARTITION);
				setState(1809);
				match(BY);
				setState(1811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1810);
					match(LINEAR);
					}
				}

				setState(1813);
				match(HASH);
				setState(1814);
				match(LEFT_PAREN);
				setState(1815);
				((SubPartitionByHashContext)_localctx).expr = expr(0);
				((SubPartitionByHashContext)_localctx).columns.add(((SubPartitionByHashContext)_localctx).expr);
				setState(1816);
				match(RIGHT_PAREN);
				setState(1819);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
				case 1:
					{
					setState(1817);
					match(SUBPARTITIONS);
					setState(1818);
					((SubPartitionByHashContext)_localctx).subpartitionsNum = expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubPartitionByKeyContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1821);
				match(SUBPARTITION);
				setState(1822);
				match(BY);
				setState(1824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR) {
					{
					setState(1823);
					match(LINEAR);
					}
				}

				setState(1826);
				match(KEY);
				setState(1830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM) {
					{
					setState(1827);
					match(ALGORITHM);
					setState(1828);
					match(EQUALS_OP);
					setState(1829);
					((SubPartitionByKeyContext)_localctx).algorithm = expr(0);
					}
				}

				setState(1832);
				match(LEFT_PAREN);
				setState(1833);
				((SubPartitionByKeyContext)_localctx).expr = expr(0);
				((SubPartitionByKeyContext)_localctx).columns.add(((SubPartitionByKeyContext)_localctx).expr);
				setState(1838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1834);
					match(COMMA);
					setState(1835);
					((SubPartitionByKeyContext)_localctx).expr = expr(0);
					((SubPartitionByKeyContext)_localctx).columns.add(((SubPartitionByKeyContext)_localctx).expr);
					}
					}
					setState(1840);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1841);
				match(RIGHT_PAREN);
				setState(1844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
				case 1:
					{
					setState(1842);
					match(SUBPARTITIONS);
					setState(1843);
					((SubPartitionByKeyContext)_localctx).subpartitionsNum = expr(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IPartitionValuesContext iPartitionValues() {
			return getRuleContext(IPartitionValuesContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<SubPartitionDefinitionContext> subPartitionDefinition() {
			return getRuleContexts(SubPartitionDefinitionContext.class);
		}
		public SubPartitionDefinitionContext subPartitionDefinition(int i) {
			return getRuleContext(SubPartitionDefinitionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_partitionDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1848);
			match(PARTITION);
			setState(1849);
			nameIdentifier();
			setState(1851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				setState(1850);
				iPartitionValues();
				}
				break;
			}
			setState(1856);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,161,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1853);
					partitionOption();
					}
					} 
				}
				setState(1858);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,161,_ctx);
			}
			setState(1870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(1859);
				match(LEFT_PAREN);
				setState(1860);
				subPartitionDefinition();
				setState(1865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1861);
					match(COMMA);
					setState(1862);
					subPartitionDefinition();
					}
					}
					setState(1867);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1868);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IPartitionValuesContext extends ParserRuleContext {
		public IPartitionValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iPartitionValues; }
	 
		public IPartitionValuesContext() { }
		public void copyFrom(IPartitionValuesContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionValuesInContext extends IPartitionValuesContext {
		public TerminalNode VALUES() { return getToken(MySQLSQLStatementParser.VALUES, 0); }
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PartitionValuesInContext(IPartitionValuesContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionValuesIn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionValuesLessThanContext extends IPartitionValuesContext {
		public TerminalNode VALUES() { return getToken(MySQLSQLStatementParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySQLSQLStatementParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySQLSQLStatementParser.THAN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PartitionValuesLessThanContext(IPartitionValuesContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionValuesLessThan(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionValuesLessThanMaxValueContext extends IPartitionValuesContext {
		public TerminalNode VALUES() { return getToken(MySQLSQLStatementParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(MySQLSQLStatementParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(MySQLSQLStatementParser.THAN, 0); }
		public TerminalNode MAXVALUE() { return getToken(MySQLSQLStatementParser.MAXVALUE, 0); }
		public PartitionValuesLessThanMaxValueContext(IPartitionValuesContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionValuesLessThanMaxValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IPartitionValuesContext iPartitionValues() throws RecognitionException {
		IPartitionValuesContext _localctx = new IPartitionValuesContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_iPartitionValues);
		int _la;
		try {
			setState(1903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				_localctx = new PartitionValuesLessThanContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1872);
				match(VALUES);
				setState(1873);
				match(LESS);
				setState(1874);
				match(THAN);
				setState(1875);
				match(LEFT_PAREN);
				setState(1876);
				expr(0);
				setState(1881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1877);
					match(COMMA);
					setState(1878);
					expr(0);
					}
					}
					setState(1883);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1884);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new PartitionValuesLessThanMaxValueContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1886);
				match(VALUES);
				setState(1887);
				match(LESS);
				setState(1888);
				match(THAN);
				setState(1889);
				match(MAXVALUE);
				}
				break;
			case 3:
				_localctx = new PartitionValuesInContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1890);
				match(VALUES);
				setState(1891);
				match(IN);
				setState(1892);
				match(LEFT_PAREN);
				setState(1893);
				expr(0);
				setState(1898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1894);
					match(COMMA);
					setState(1895);
					expr(0);
					}
					}
					setState(1900);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1901);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubPartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(MySQLSQLStatementParser.SUBPARTITION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubPartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subPartitionDefinition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSubPartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubPartitionDefinitionContext subPartitionDefinition() throws RecognitionException {
		SubPartitionDefinitionContext _localctx = new SubPartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_subPartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1905);
			match(SUBPARTITION);
			setState(1906);
			nameIdentifier();
			setState(1910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || ((((_la - 274)) & ~0x3f) == 0 && ((1L << (_la - 274)) & ((1L << (COMMENT - 274)) | (1L << (DATA - 274)) | (1L << (ENGINE - 274)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (NODEGROUP - 393)))) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				setState(1907);
				partitionOption();
				}
				}
				setState(1912);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
	 
		public PartitionOptionContext() { }
		public void copyFrom(PartitionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionOptionCommentContext extends PartitionOptionContext {
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionNodeGroupContext extends PartitionOptionContext {
		public TerminalNode NODEGROUP() { return getToken(MySQLSQLStatementParser.NODEGROUP, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionOptionNodeGroup(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLSQLStatementParser.DIRECTORY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionOptionIndexDirectory(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMaxRowsContext extends PartitionOptionContext {
		public TerminalNode MAX_ROWS() { return getToken(MySQLSQLStatementParser.MAX_ROWS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionOptionMaxRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionTablespaceContext extends PartitionOptionContext {
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionOptionTablespace(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionEngineContext extends PartitionOptionContext {
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(MySQLSQLStatementParser.STORAGE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionMinRowsContext extends PartitionOptionContext {
		public TerminalNode MIN_ROWS() { return getToken(MySQLSQLStatementParser.MIN_ROWS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionOptionMinRows(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionOptionDataDirectoryContext extends PartitionOptionContext {
		public TerminalNode DATA() { return getToken(MySQLSQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLSQLStatementParser.DIRECTORY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionOptionDataDirectory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_partitionOption);
		int _la;
		try {
			setState(1958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(1913);
					match(STORAGE);
					}
				}

				setState(1916);
				match(ENGINE);
				setState(1918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1917);
					match(EQUALS_OP);
					}
				}

				setState(1920);
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1921);
				match(COMMENT);
				setState(1923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1922);
					match(EQUALS_OP);
					}
				}

				setState(1925);
				expr(0);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1926);
				match(DATA);
				setState(1927);
				match(DIRECTORY);
				setState(1929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1928);
					match(EQUALS_OP);
					}
				}

				setState(1931);
				expr(0);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1932);
				match(INDEX);
				setState(1933);
				match(DIRECTORY);
				setState(1935);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1934);
					match(EQUALS_OP);
					}
				}

				setState(1937);
				expr(0);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1938);
				match(MAX_ROWS);
				setState(1940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1939);
					match(EQUALS_OP);
					}
				}

				setState(1942);
				expr(0);
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1943);
				match(MIN_ROWS);
				setState(1945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1944);
					match(EQUALS_OP);
					}
				}

				setState(1947);
				expr(0);
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1948);
				match(TABLESPACE);
				setState(1950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1949);
					match(EQUALS_OP);
					}
				}

				setState(1952);
				nameIdentifier();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1953);
				match(NODEGROUP);
				setState(1955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1954);
					match(EQUALS_OP);
					}
				}

				setState(1957);
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceStatementContext extends ParserRuleContext {
		public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return getRuleContext(CreateTablespaceInnodbContext.class,0);
		}
		public CreateTablespaceNdbContext createTablespaceNdb() {
			return getRuleContext(CreateTablespaceNdbContext.class,0);
		}
		public CreateTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceStatementContext createTablespaceStatement() throws RecognitionException {
		CreateTablespaceStatementContext _localctx = new CreateTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_createTablespaceStatement);
		try {
			setState(1962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1960);
				createTablespaceInnodb();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1961);
				createTablespaceNdb();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceInnodbContext extends ParserRuleContext {
		public ExprContext datafile;
		public ExprContext fileBlockSize;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySQLSQLStatementParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySQLSQLStatementParser.DATAFILE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySQLSQLStatementParser.FILE_BLOCK_SIZE, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(MySQLSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(MySQLSQLStatementParser.EQUALS_OP, i);
		}
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceInnodb; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateTablespaceInnodb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceInnodbContext createTablespaceInnodb() throws RecognitionException {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createTablespaceInnodb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1964);
			match(CREATE);
			setState(1965);
			match(TABLESPACE);
			setState(1966);
			nameIdentifier();
			setState(1967);
			match(ADD);
			setState(1968);
			match(DATAFILE);
			setState(1969);
			((CreateTablespaceInnodbContext)_localctx).datafile = expr(0);
			setState(1973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(1970);
				match(FILE_BLOCK_SIZE);
				setState(1971);
				match(EQUALS_OP);
				setState(1972);
				((CreateTablespaceInnodbContext)_localctx).fileBlockSize = expr(0);
				}
				break;
			}
			setState(1980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(1975);
				match(ENGINE);
				setState(1977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1976);
					match(EQUALS_OP);
					}
				}

				setState(1979);
				engineName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceNdbContext extends ParserRuleContext {
		public ExprContext datafile;
		public ExprContext extentSize;
		public ExprContext initialSize;
		public ExprContext autoextendSize;
		public ExprContext maxSize;
		public ExprContext comment;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode ADD() { return getToken(MySQLSQLStatementParser.ADD, 0); }
		public TerminalNode DATAFILE() { return getToken(MySQLSQLStatementParser.DATAFILE, 0); }
		public TerminalNode USE() { return getToken(MySQLSQLStatementParser.USE, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLSQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLSQLStatementParser.GROUP, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode EXTENT_SIZE() { return getToken(MySQLSQLStatementParser.EXTENT_SIZE, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLSQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySQLSQLStatementParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySQLSQLStatementParser.MAX_SIZE, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySQLSQLStatementParser.NODEGROUP, 0); }
		public TerminalNode WAIT() { return getToken(MySQLSQLStatementParser.WAIT, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(MySQLSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(MySQLSQLStatementParser.EQUALS_OP, i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespaceNdb; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateTablespaceNdb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceNdbContext createTablespaceNdb() throws RecognitionException {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_createTablespaceNdb);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1982);
			match(CREATE);
			setState(1983);
			match(TABLESPACE);
			setState(1984);
			nameIdentifier();
			setState(1985);
			match(ADD);
			setState(1986);
			match(DATAFILE);
			setState(1987);
			((CreateTablespaceNdbContext)_localctx).datafile = expr(0);
			setState(1988);
			match(USE);
			setState(1989);
			match(LOGFILE);
			setState(1990);
			match(GROUP);
			setState(1991);
			nameIdentifier();
			setState(1997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				setState(1992);
				match(EXTENT_SIZE);
				setState(1994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(1993);
					match(EQUALS_OP);
					}
				}

				setState(1996);
				((CreateTablespaceNdbContext)_localctx).extentSize = expr(0);
				}
			}

			setState(2004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(1999);
				match(INITIAL_SIZE);
				setState(2001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2000);
					match(EQUALS_OP);
					}
				}

				setState(2003);
				((CreateTablespaceNdbContext)_localctx).initialSize = expr(0);
				}
			}

			setState(2011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				setState(2006);
				match(AUTOEXTEND_SIZE);
				setState(2008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2007);
					match(EQUALS_OP);
					}
				}

				setState(2010);
				((CreateTablespaceNdbContext)_localctx).autoextendSize = expr(0);
				}
			}

			setState(2018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_SIZE) {
				{
				setState(2013);
				match(MAX_SIZE);
				setState(2015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2014);
					match(EQUALS_OP);
					}
				}

				setState(2017);
				((CreateTablespaceNdbContext)_localctx).maxSize = expr(0);
				}
			}

			setState(2025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NODEGROUP) {
				{
				setState(2020);
				match(NODEGROUP);
				setState(2022);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2021);
					match(EQUALS_OP);
					}
				}

				setState(2024);
				nameIdentifier();
				}
			}

			setState(2028);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2027);
				match(WAIT);
				}
			}

			setState(2035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(2030);
				match(COMMENT);
				setState(2032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2031);
					match(EQUALS_OP);
					}
				}

				setState(2034);
				((CreateTablespaceNdbContext)_localctx).comment = expr(0);
				}
			}

			setState(2037);
			match(ENGINE);
			setState(2039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(2038);
				match(EQUALS_OP);
				}
			}

			setState(2041);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerStatementContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public Token triggerTime;
		public Token triggerEvent;
		public NameIdentifierContext onExpr;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySQLSQLStatementParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(MySQLSQLStatementParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(MySQLSQLStatementParser.ROW, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode BEFORE() { return getToken(MySQLSQLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(MySQLSQLStatementParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(MySQLSQLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLSQLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(MySQLSQLStatementParser.DELETE, 0); }
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public TriggerOrderingClauseContext triggerOrderingClause() {
			return getRuleContext(TriggerOrderingClauseContext.class,0);
		}
		public CreateTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTriggerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerStatementContext createTriggerStatement() throws RecognitionException {
		CreateTriggerStatementContext _localctx = new CreateTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_createTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2043);
			match(CREATE);
			setState(2045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2044);
				definerOptionExpr();
				}
			}

			setState(2047);
			match(TRIGGER);
			setState(2048);
			((CreateTriggerStatementContext)_localctx).name = nameIdentifier();
			setState(2049);
			((CreateTriggerStatementContext)_localctx).triggerTime = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				((CreateTriggerStatementContext)_localctx).triggerTime = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2050);
			((CreateTriggerStatementContext)_localctx).triggerEvent = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				((CreateTriggerStatementContext)_localctx).triggerEvent = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2051);
			match(ON);
			setState(2052);
			((CreateTriggerStatementContext)_localctx).onExpr = nameIdentifier();
			setState(2053);
			match(FOR);
			setState(2054);
			match(EACH);
			setState(2055);
			match(ROW);
			setState(2057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2056);
				triggerOrderingClause();
				}
				break;
			}
			setState(2059);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinerOptionExprContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(MySQLSQLStatementParser.DEFINER, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySQLSQLStatementParser.CURRENT_USER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public DefinerOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definerOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDefinerOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinerOptionExprContext definerOptionExpr() throws RecognitionException {
		DefinerOptionExprContext _localctx = new DefinerOptionExprContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_definerOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2061);
			match(DEFINER);
			setState(2062);
			match(EQUALS_OP);
			setState(2069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_USER:
				{
				setState(2063);
				match(CURRENT_USER);
				setState(2066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2064);
					match(LEFT_PAREN);
					setState(2065);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case INSERT:
			case LEFT:
			case REPLACE:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SUM:
			case SUBSTR:
			case SUBSTRING:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case MOD:
			case REVERSE:
			case ASTERISK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case MID:
				{
				setState(2068);
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerOrderingClauseContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(MySQLSQLStatementParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(MySQLSQLStatementParser.PRECEDES, 0); }
		public TriggerOrderingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOrderingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTriggerOrderingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOrderingClauseContext triggerOrderingClause() throws RecognitionException {
		TriggerOrderingClauseContext _localctx = new TriggerOrderingClauseContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_triggerOrderingClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2071);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2072);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewStatementContext extends ParserRuleContext {
		public Token secContext;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(MySQLSQLStatementParser.VIEW, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public OrReplaceContext orReplace() {
			return getRuleContext(OrReplaceContext.class,0);
		}
		public AlgorithmOptionExprContext algorithmOptionExpr() {
			return getRuleContext(AlgorithmOptionExprContext.class,0);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySQLSQLStatementParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySQLSQLStatementParser.SECURITY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public WithCheckOptionContext withCheckOption() {
			return getRuleContext(WithCheckOptionContext.class,0);
		}
		public TerminalNode DEFINER() { return getToken(MySQLSQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySQLSQLStatementParser.INVOKER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public CreateViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createViewStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewStatementContext createViewStatement() throws RecognitionException {
		CreateViewStatementContext _localctx = new CreateViewStatementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_createViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2074);
			match(CREATE);
			setState(2076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2075);
				orReplace();
				}
			}

			setState(2079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2078);
				algorithmOptionExpr();
				}
			}

			setState(2082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2081);
				definerOptionExpr();
				}
			}

			setState(2087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2084);
				match(SQL);
				setState(2085);
				match(SECURITY);
				setState(2086);
				((CreateViewStatementContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((CreateViewStatementContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2089);
			match(VIEW);
			setState(2090);
			nameIdentifier();
			setState(2102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2091);
				match(LEFT_PAREN);
				setState(2092);
				columnDefinition();
				setState(2097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2093);
					match(COMMA);
					setState(2094);
					columnDefinition();
					}
					}
					setState(2099);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2100);
				match(RIGHT_PAREN);
				}
			}

			setState(2104);
			match(AS);
			setState(2105);
			iSelectQuery();
			setState(2107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2106);
				withCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithCheckOptionContext extends ParserRuleContext {
		public Token levels;
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySQLSQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySQLSQLStatementParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(MySQLSQLStatementParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public WithCheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withCheckOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWithCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithCheckOptionContext withCheckOption() throws RecognitionException {
		WithCheckOptionContext _localctx = new WithCheckOptionContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_withCheckOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2109);
			match(WITH);
			setState(2111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED || _la==LOCAL) {
				{
				setState(2110);
				((WithCheckOptionContext)_localctx).levels = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADED || _la==LOCAL) ) {
					((WithCheckOptionContext)_localctx).levels = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2113);
			match(CHECK);
			setState(2114);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_createDatabaseOption);
		try {
			setState(2118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2116);
				characterSetOptionExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2117);
				collateOptionExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleexprContext extends ParserRuleContext {
		public ScheduleexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scheduleexpr; }
	 
		public ScheduleexprContext() { }
		public void copyFrom(ScheduleexprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PreciseScheduleContext extends ScheduleexprContext {
		public TerminalNode AT() { return getToken(MySQLSQLStatementParser.AT, 0); }
		public TimestampValueContext timestampValue() {
			return getRuleContext(TimestampValueContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public PreciseScheduleContext(ScheduleexprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPreciseSchedule(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalScheduleContext extends ScheduleexprContext {
		public TimestampValueContext start;
		public ExprContext expr;
		public List<ExprContext> startIntervals = new ArrayList<ExprContext>();
		public TimestampValueContext end;
		public List<ExprContext> endIntervals = new ArrayList<ExprContext>();
		public TerminalNode EVERY() { return getToken(MySQLSQLStatementParser.EVERY, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode STARTS() { return getToken(MySQLSQLStatementParser.STARTS, 0); }
		public TerminalNode ENDS() { return getToken(MySQLSQLStatementParser.ENDS, 0); }
		public List<TimestampValueContext> timestampValue() {
			return getRuleContexts(TimestampValueContext.class);
		}
		public TimestampValueContext timestampValue(int i) {
			return getRuleContext(TimestampValueContext.class,i);
		}
		public IntervalScheduleContext(ScheduleexprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIntervalSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleexprContext scheduleexpr() throws RecognitionException {
		ScheduleexprContext _localctx = new ScheduleexprContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_scheduleexpr);
		try {
			int _alt;
			setState(2154);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2120);
				match(AT);
				setState(2121);
				timestampValue();
				setState(2125);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2122);
						expr(0);
						}
						} 
					}
					setState(2127);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,209,_ctx);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2128);
				match(EVERY);
				setState(2131);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					setState(2129);
					expr(0);
					}
					break;
				case 2:
					{
					setState(2130);
					expr(0);
					}
					break;
				}
				setState(2133);
				intervalType();
				setState(2142);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
				case 1:
					{
					setState(2134);
					match(STARTS);
					setState(2135);
					((IntervalScheduleContext)_localctx).start = timestampValue();
					setState(2139);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,211,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2136);
							((IntervalScheduleContext)_localctx).expr = expr(0);
							((IntervalScheduleContext)_localctx).startIntervals.add(((IntervalScheduleContext)_localctx).expr);
							}
							} 
						}
						setState(2141);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,211,_ctx);
					}
					}
					break;
				}
				setState(2152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
				case 1:
					{
					setState(2144);
					match(ENDS);
					setState(2145);
					((IntervalScheduleContext)_localctx).end = timestampValue();
					setState(2149);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,213,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2146);
							((IntervalScheduleContext)_localctx).expr = expr(0);
							((IntervalScheduleContext)_localctx).endIntervals.add(((IntervalScheduleContext)_localctx).expr);
							}
							} 
						}
						setState(2151);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,213,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySQLSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_timestampValue);
		try {
			setState(2160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2156);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2157);
				expr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2158);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2159);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(MySQLSQLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySQLSQLStatementParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLSQLStatementParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_enableType);
		try {
			setState(2167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2162);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2163);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2164);
				match(DISABLE);
				setState(2165);
				match(ON);
				setState(2166);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public IndexOptionKeyBlockSizeContext indexOptionKeyBlockSize() {
			return getRuleContext(IndexOptionKeyBlockSizeContext.class,0);
		}
		public IndexOptionUsingBtreeContext indexOptionUsingBtree() {
			return getRuleContext(IndexOptionUsingBtreeContext.class,0);
		}
		public IndexOptionUsingHashContext indexOptionUsingHash() {
			return getRuleContext(IndexOptionUsingHashContext.class,0);
		}
		public IndexOptionWithParserContext indexOptionWithParser() {
			return getRuleContext(IndexOptionWithParserContext.class,0);
		}
		public IndexAttributeVisibleContext indexAttributeVisible() {
			return getRuleContext(IndexAttributeVisibleContext.class,0);
		}
		public IndexAttributeInvisibleContext indexAttributeInvisible() {
			return getRuleContext(IndexAttributeInvisibleContext.class,0);
		}
		public IndexOptionCommentOptionContext indexOptionCommentOption() {
			return getRuleContext(IndexOptionCommentOptionContext.class,0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_indexOption);
		try {
			setState(2176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2169);
				indexOptionKeyBlockSize();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2170);
				indexOptionUsingBtree();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2171);
				indexOptionUsingHash();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2172);
				indexOptionWithParser();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2173);
				indexAttributeVisible();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2174);
				indexAttributeInvisible();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2175);
				indexOptionCommentOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionKeyBlockSizeContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySQLSQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public IndexOptionKeyBlockSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionKeyBlockSize; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionKeyBlockSize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionKeyBlockSizeContext indexOptionKeyBlockSize() throws RecognitionException {
		IndexOptionKeyBlockSizeContext _localctx = new IndexOptionKeyBlockSizeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_indexOptionKeyBlockSize);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2178);
			match(KEY_BLOCK_SIZE);
			setState(2180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(2179);
				match(EQUALS_OP);
				}
			}

			setState(2182);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionUsingBtreeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySQLSQLStatementParser.BTREE, 0); }
		public IndexOptionUsingBtreeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionUsingBtree; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionUsingBtree(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionUsingBtreeContext indexOptionUsingBtree() throws RecognitionException {
		IndexOptionUsingBtreeContext _localctx = new IndexOptionUsingBtreeContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_indexOptionUsingBtree);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2184);
			match(USING);
			setState(2185);
			match(BTREE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionUsingHashContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public TerminalNode HASH() { return getToken(MySQLSQLStatementParser.HASH, 0); }
		public IndexOptionUsingHashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionUsingHash; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionUsingHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionUsingHashContext indexOptionUsingHash() throws RecognitionException {
		IndexOptionUsingHashContext _localctx = new IndexOptionUsingHashContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_indexOptionUsingHash);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			match(USING);
			setState(2188);
			match(HASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionWithParserContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySQLSQLStatementParser.PARSER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IndexOptionWithParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionWithParser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionWithParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionWithParserContext indexOptionWithParser() throws RecognitionException {
		IndexOptionWithParserContext _localctx = new IndexOptionWithParserContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_indexOptionWithParser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2190);
			match(WITH);
			setState(2191);
			match(PARSER);
			setState(2192);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexAttributeVisibleContext extends ParserRuleContext {
		public TerminalNode VISIBLE() { return getToken(MySQLSQLStatementParser.VISIBLE, 0); }
		public IndexAttributeVisibleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexAttributeVisible; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexAttributeVisible(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexAttributeVisibleContext indexAttributeVisible() throws RecognitionException {
		IndexAttributeVisibleContext _localctx = new IndexAttributeVisibleContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_indexAttributeVisible);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2194);
			match(VISIBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexAttributeInvisibleContext extends ParserRuleContext {
		public TerminalNode INVISIBLE() { return getToken(MySQLSQLStatementParser.INVISIBLE, 0); }
		public IndexAttributeInvisibleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexAttributeInvisible; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexAttributeInvisible(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexAttributeInvisibleContext indexAttributeInvisible() throws RecognitionException {
		IndexAttributeInvisibleContext _localctx = new IndexAttributeInvisibleContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_indexAttributeInvisible);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2196);
			match(INVISIBLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionCommentOptionContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IndexOptionCommentOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOptionCommentOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexOptionCommentOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionCommentOptionContext indexOptionCommentOption() throws RecognitionException {
		IndexOptionCommentOptionContext _localctx = new IndexOptionCommentOptionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_indexOptionCommentOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198);
			match(COMMENT);
			setState(2199);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterDeclarationContext extends ParserRuleContext {
		public Token parameterModel;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySQLSQLStatementParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySQLSQLStatementParser.INOUT, 0); }
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterDeclaration; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitParameterDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterDeclarationContext parameterDeclaration() throws RecognitionException {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_parameterDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (IN - 67)) | (1L << (INOUT - 67)) | (1L << (OUT - 67)))) != 0)) {
				{
				setState(2201);
				((ParameterDeclarationContext)_localctx).parameterModel = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (IN - 67)) | (1L << (INOUT - 67)) | (1L << (OUT - 67)))) != 0)) ) {
					((ParameterDeclarationContext)_localctx).parameterModel = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2204);
			nameIdentifier();
			setState(2205);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySQLSQLStatementParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(MySQLSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySQLSQLStatementParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(MySQLSQLStatementParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySQLSQLStatementParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySQLSQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySQLSQLStatementParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(MySQLSQLStatementParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(MySQLSQLStatementParser.SQL, 0); }
		public TerminalNode NO() { return getToken(MySQLSQLStatementParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySQLSQLStatementParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySQLSQLStatementParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySQLSQLStatementParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_routineOption);
		int _la;
		try {
			setState(2230);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2207);
				match(COMMENT);
				setState(2208);
				expr(0);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2209);
				match(LANGUAGE);
				setState(2210);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2211);
					match(NOT);
					}
				}

				setState(2214);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2225);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(2215);
					match(CONTAINS);
					setState(2216);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(2217);
					match(NO);
					setState(2218);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(2219);
					match(READS);
					setState(2220);
					match(SQL);
					setState(2221);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(2222);
					match(MODIFIES);
					setState(2223);
					match(SQL);
					setState(2224);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2227);
				match(SQL);
				setState(2228);
				match(SECURITY);
				setState(2229);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseStatementContext extends ParserRuleContext {
		public AlterDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseStatement; }
	 
		public AlterDatabaseStatementContext() { }
		public void copyFrom(AlterDatabaseStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUpgradeNameContext extends AlterDatabaseStatementContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MySQLSQLStatementParser.DATABASE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySQLSQLStatementParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(MySQLSQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLSQLStatementParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(MySQLSQLStatementParser.NAME, 0); }
		public AlterUpgradeNameContext(AlterDatabaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleDatabaseContext extends AlterDatabaseStatementContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(MySQLSQLStatementParser.DATABASE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterSimpleDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseStatementContext alterDatabaseStatement() throws RecognitionException {
		AlterDatabaseStatementContext _localctx = new AlterDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterDatabaseStatement);
		int _la;
		try {
			setState(2250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2232);
				match(ALTER);
				setState(2233);
				match(DATABASE);
				setState(2235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(2234);
					nameIdentifier();
					}
				}

				setState(2238); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2237);
					createDatabaseOption();
					}
					}
					setState(2240); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2242);
				match(ALTER);
				setState(2243);
				match(DATABASE);
				setState(2244);
				nameIdentifier();
				setState(2245);
				match(UPGRADE);
				setState(2246);
				match(DATA);
				setState(2247);
				match(DIRECTORY);
				setState(2248);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSchemaStatementContext extends ParserRuleContext {
		public AlterSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSchemaStatement; }
	 
		public AlterSchemaStatementContext() { }
		public void copyFrom(AlterSchemaStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterSchemaUpgradeNameContext extends AlterSchemaStatementContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLSQLStatementParser.SCHEMA, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode UPGRADE() { return getToken(MySQLSQLStatementParser.UPGRADE, 0); }
		public TerminalNode DATA() { return getToken(MySQLSQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLSQLStatementParser.DIRECTORY, 0); }
		public TerminalNode NAME() { return getToken(MySQLSQLStatementParser.NAME, 0); }
		public AlterSchemaUpgradeNameContext(AlterSchemaStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterSchemaUpgradeName(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterSimpleSchemaContext extends AlterSchemaStatementContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLSQLStatementParser.SCHEMA, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterSimpleSchemaContext(AlterSchemaStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterSimpleSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSchemaStatementContext alterSchemaStatement() throws RecognitionException {
		AlterSchemaStatementContext _localctx = new AlterSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterSchemaStatement);
		int _la;
		try {
			setState(2270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				_localctx = new AlterSimpleSchemaContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2252);
				match(ALTER);
				setState(2253);
				match(SCHEMA);
				setState(2255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(2254);
					nameIdentifier();
					}
				}

				setState(2258); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2257);
					createDatabaseOption();
					}
					}
					setState(2260); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) );
				}
				break;
			case 2:
				_localctx = new AlterSchemaUpgradeNameContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2262);
				match(ALTER);
				setState(2263);
				match(SCHEMA);
				setState(2264);
				nameIdentifier();
				setState(2265);
				match(UPGRADE);
				setState(2266);
				match(DATA);
				setState(2267);
				match(DIRECTORY);
				setState(2268);
				match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(MySQLSQLStatementParser.EVENT, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySQLSQLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySQLSQLStatementParser.ON, i);
		}
		public TerminalNode SCHEDULE() { return getToken(MySQLSQLStatementParser.SCHEDULE, 0); }
		public ScheduleexprContext scheduleexpr() {
			return getRuleContext(ScheduleexprContext.class,0);
		}
		public TerminalNode COMPLETION() { return getToken(MySQLSQLStatementParser.COMPLETION, 0); }
		public TerminalNode PRESERVE() { return getToken(MySQLSQLStatementParser.PRESERVE, 0); }
		public TerminalNode RENAME() { return getToken(MySQLSQLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public EnableTypeContext enableType() {
			return getRuleContext(EnableTypeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySQLSQLStatementParser.DO, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public AlterEventStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterEventStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventStatementContext alterEventStatement() throws RecognitionException {
		AlterEventStatementContext _localctx = new AlterEventStatementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterEventStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2272);
			match(ALTER);
			setState(2274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2273);
				definerOptionExpr();
				}
			}

			setState(2276);
			match(EVENT);
			setState(2277);
			nameIdentifier();
			setState(2281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2278);
				match(ON);
				setState(2279);
				match(SCHEDULE);
				setState(2280);
				scheduleexpr();
				}
				break;
			}
			setState(2289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2283);
				match(ON);
				setState(2284);
				match(COMPLETION);
				setState(2286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2285);
					match(NOT);
					}
				}

				setState(2288);
				match(PRESERVE);
				}
			}

			setState(2294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				setState(2291);
				match(RENAME);
				setState(2292);
				match(TO);
				setState(2293);
				nameIdentifier();
				}
				break;
			}
			setState(2297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2296);
				enableType();
				}
				break;
			}
			setState(2301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(2299);
				match(COMMENT);
				setState(2300);
				expr(0);
				}
				break;
			}
			setState(2305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				{
				setState(2303);
				match(DO);
				setState(2304);
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStatementContext alterFunctionStatement() throws RecognitionException {
		AlterFunctionStatementContext _localctx = new AlterFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterFunctionStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2307);
			match(ALTER);
			setState(2308);
			match(FUNCTION);
			setState(2309);
			nameIdentifier();
			setState(2313);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,238,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2310);
					routineOption();
					}
					} 
				}
				setState(2315);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,238,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterInstanceStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode INSTANCE() { return getToken(MySQLSQLStatementParser.INSTANCE, 0); }
		public TerminalNode ROTATE() { return getToken(MySQLSQLStatementParser.ROTATE, 0); }
		public TerminalNode INNODB() { return getToken(MySQLSQLStatementParser.INNODB, 0); }
		public TerminalNode MASTER() { return getToken(MySQLSQLStatementParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public AlterInstanceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterInstanceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterInstanceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterInstanceStatementContext alterInstanceStatement() throws RecognitionException {
		AlterInstanceStatementContext _localctx = new AlterInstanceStatementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterInstanceStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2316);
			match(ALTER);
			setState(2317);
			match(INSTANCE);
			setState(2318);
			match(ROTATE);
			setState(2319);
			match(INNODB);
			setState(2320);
			match(MASTER);
			setState(2321);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLSQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLSQLStatementParser.GROUP, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySQLSQLStatementParser.ADD, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySQLSQLStatementParser.UNDOFILE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLSQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode WAIT() { return getToken(MySQLSQLStatementParser.WAIT, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(MySQLSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(MySQLSQLStatementParser.EQUALS_OP, i);
		}
		public AlterLogfileGroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterLogfileGroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupStatementContext alterLogfileGroupStatement() throws RecognitionException {
		AlterLogfileGroupStatementContext _localctx = new AlterLogfileGroupStatementContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterLogfileGroupStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2323);
			match(ALTER);
			setState(2324);
			match(LOGFILE);
			setState(2325);
			match(GROUP);
			setState(2326);
			nameIdentifier();
			setState(2327);
			match(ADD);
			setState(2328);
			match(UNDOFILE);
			setState(2329);
			expr(0);
			setState(2335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2330);
				match(INITIAL_SIZE);
				setState(2332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2331);
					match(EQUALS_OP);
					}
				}

				setState(2334);
				expr(0);
				}
			}

			setState(2338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2337);
				match(WAIT);
				}
			}

			setState(2340);
			match(ENGINE);
			setState(2342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(2341);
				match(EQUALS_OP);
				}
			}

			setState(2344);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLSQLStatementParser.PROCEDURE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<RoutineOptionContext> routineOption() {
			return getRuleContexts(RoutineOptionContext.class);
		}
		public RoutineOptionContext routineOption(int i) {
			return getRuleContext(RoutineOptionContext.class,i);
		}
		public AlterProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureStatementContext alterProcedureStatement() throws RecognitionException {
		AlterProcedureStatementContext _localctx = new AlterProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alterProcedureStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2346);
			match(ALTER);
			setState(2347);
			match(PROCEDURE);
			setState(2348);
			nameIdentifier();
			setState(2352);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,243,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2349);
					routineOption();
					}
					} 
				}
				setState(2354);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,243,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(MySQLSQLStatementParser.SERVER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode OPTIONS() { return getToken(MySQLSQLStatementParser.OPTIONS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterServerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterServerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerStatementContext alterServerStatement() throws RecognitionException {
		AlterServerStatementContext _localctx = new AlterServerStatementContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alterServerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2355);
			match(ALTER);
			setState(2356);
			match(SERVER);
			setState(2357);
			nameIdentifier();
			setState(2358);
			match(OPTIONS);
			setState(2359);
			match(LEFT_PAREN);
			setState(2360);
			serverOption();
			setState(2365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2361);
				match(COMMA);
				setState(2362);
				serverOption();
				}
				}
				setState(2367);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2368);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStatementContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<AlterTableItemContext> alterTableItem() {
			return getRuleContexts(AlterTableItemContext.class);
		}
		public AlterTableItemContext alterTableItem(int i) {
			return getRuleContext(AlterTableItemContext.class,i);
		}
		public IntimeActionContext intimeAction() {
			return getRuleContext(IntimeActionContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public IPartitionByContext iPartitionBy() {
			return getRuleContext(IPartitionByContext.class,0);
		}
		public AlterTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStatementContext alterTableStatement() throws RecognitionException {
		AlterTableStatementContext _localctx = new AlterTableStatementContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alterTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2370);
			match(ALTER);
			setState(2372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				setState(2371);
				intimeAction();
				}
			}

			setState(2375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2374);
				match(IGNORE);
				}
			}

			setState(2377);
			match(TABLE);
			setState(2378);
			nameIdentifier();
			setState(2379);
			alterTableItem();
			setState(2384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2380);
				match(COMMA);
				setState(2381);
				alterTableItem();
				}
				}
				setState(2386);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2387);
				iPartitionBy();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableItemContext extends ParserRuleContext {
		public AlterTableItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableItem; }
	 
		public AlterTableItemContext() { }
		public void copyFrom(AlterTableItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterTableDiscardPartitionActionContext extends AlterTableItemContext {
		public TerminalNode DISCARD() { return getToken(MySQLSQLStatementParser.DISCARD, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableDiscardPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDiscardPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableCheckPartitionActionContext extends AlterTableItemContext {
		public TerminalNode CHECK() { return getToken(MySQLSQLStatementParser.CHECK, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableCheckPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableCheckPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableModifyColumnActionContext extends AlterTableItemContext {
		public TerminalNode MODIFY() { return getToken(MySQLSQLStatementParser.MODIFY, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySQLSQLStatementParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySQLSQLStatementParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySQLSQLStatementParser.AFTER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableModifyColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableModifyColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRepairPartitionActionContext extends AlterTableItemContext {
		public TerminalNode REPAIR() { return getToken(MySQLSQLStatementParser.REPAIR, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableRepairPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRepairPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableOptimizePartitionActionContext extends AlterTableItemContext {
		public TerminalNode OPTIMIZE() { return getToken(MySQLSQLStatementParser.OPTIMIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableOptimizePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableOptimizePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropPrimaryKeyConstraintActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode PRIMARY() { return getToken(MySQLSQLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public AlterTableDropPrimaryKeyConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropPrimaryKeyConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDisableKeysActionContext extends AlterTableItemContext {
		public TerminalNode DISABLE() { return getToken(MySQLSQLStatementParser.DISABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySQLSQLStatementParser.KEYS, 0); }
		public AlterTableDisableKeysActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDisableKeysAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDiscardTablespaceActionContext extends AlterTableItemContext {
		public TerminalNode DISCARD() { return getToken(MySQLSQLStatementParser.DISCARD, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public AlterTableDiscardTablespaceActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDiscardTablespaceAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableCoalescePartitionActionContext extends AlterTableItemContext {
		public TerminalNode COALESCE() { return getToken(MySQLSQLStatementParser.COALESCE, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AlterTableCoalescePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableCoalescePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableUpgradePartitioningActionContext extends AlterTableItemContext {
		public TerminalNode UPGRADE() { return getToken(MySQLSQLStatementParser.UPGRADE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySQLSQLStatementParser.PARTITIONING, 0); }
		public AlterTableUpgradePartitioningActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableUpgradePartitioningAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAlgorithmActionContext extends AlterTableItemContext {
		public Token algType;
		public TerminalNode ALGORITHM() { return getToken(MySQLSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode INPLACE() { return getToken(MySQLSQLStatementParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(MySQLSQLStatementParser.COPY, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public AlterTableAlgorithmActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAlgorithmAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRenameKeyConstraintActionContext extends AlterTableItemContext {
		public TerminalNode RENAME() { return getToken(MySQLSQLStatementParser.RENAME, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public AlterTableRenameKeyConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRenameKeyConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropIndexConstraintActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableDropIndexConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropIndexConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAlterColumnActionContext extends AlterTableItemContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterColumnActionContext alterColumnAction() {
			return getRuleContext(AlterColumnActionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySQLSQLStatementParser.COLUMN, 0); }
		public AlterTableAlterColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAlterColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRenameColumnActionContext extends AlterTableItemContext {
		public TerminalNode RENAME() { return getToken(MySQLSQLStatementParser.RENAME, 0); }
		public TerminalNode COLUMN() { return getToken(MySQLSQLStatementParser.COLUMN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public AlterTableRenameColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRenameColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRenameTableActionContext extends AlterTableItemContext {
		public Token renameFormat;
		public TerminalNode RENAME() { return getToken(MySQLSQLStatementParser.RENAME, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public AlterTableRenameTableActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRenameTableAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableWithValidateActionContext extends AlterTableItemContext {
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode VALIDATION() { return getToken(MySQLSQLStatementParser.VALIDATION, 0); }
		public AlterTableWithValidateActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableWithValidateAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRenameIndexConstraintActionContext extends AlterTableItemContext {
		public TerminalNode RENAME() { return getToken(MySQLSQLStatementParser.RENAME, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public AlterTableRenameIndexConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRenameIndexConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDefaultCharsetActionContext extends AlterTableItemContext {
		public TerminalNode CHARACTER() { return getToken(MySQLSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(MySQLSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(MySQLSQLStatementParser.EQUALS_OP, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(MySQLSQLStatementParser.COLLATE, 0); }
		public AlterTableDefaultCharsetActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDefaultCharsetAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableChangeColumnActionContext extends AlterTableItemContext {
		public NameIdentifierContext name;
		public TerminalNode CHANGE() { return getToken(MySQLSQLStatementParser.CHANGE, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySQLSQLStatementParser.COLUMN, 0); }
		public AlterTableChangeColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableChangeColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableWithoutValidateActionContext extends AlterTableItemContext {
		public TerminalNode WITHOUT() { return getToken(MySQLSQLStatementParser.WITHOUT, 0); }
		public TerminalNode VALIDATION() { return getToken(MySQLSQLStatementParser.VALIDATION, 0); }
		public AlterTableWithoutValidateActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableWithoutValidateAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableImportPartitionActionContext extends AlterTableItemContext {
		public TerminalNode IMPORT() { return getToken(MySQLSQLStatementParser.IMPORT, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableImportPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableImportPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropColumnActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(MySQLSQLStatementParser.COLUMN, 0); }
		public AlterTableDropColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterByTableOptionContext extends AlterTableItemContext {
		public TableOptionContext tableOption() {
			return getRuleContext(TableOptionContext.class,0);
		}
		public AlterByTableOptionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterByTableOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableEnableKeysActionContext extends AlterTableItemContext {
		public TerminalNode ENABLE() { return getToken(MySQLSQLStatementParser.ENABLE, 0); }
		public TerminalNode KEYS() { return getToken(MySQLSQLStatementParser.KEYS, 0); }
		public AlterTableEnableKeysActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableEnableKeysAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableImportTablespaceActionContext extends AlterTableItemContext {
		public TerminalNode IMPORT() { return getToken(MySQLSQLStatementParser.IMPORT, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public AlterTableImportTablespaceActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableImportTablespaceAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropPartitionActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableDropPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAnalyzePartitiionActionContext extends AlterTableItemContext {
		public TerminalNode ANALYZE() { return getToken(MySQLSQLStatementParser.ANALYZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableAnalyzePartitiionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAnalyzePartitiionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAddPartitionActionContext extends AlterTableItemContext {
		public TerminalNode ADD() { return getToken(MySQLSQLStatementParser.ADD, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public PartitionDefinitionContext partitionDefinition() {
			return getRuleContext(PartitionDefinitionContext.class,0);
		}
		public AlterTableAddPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAddPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRebuildPartitionActionContext extends AlterTableItemContext {
		public TerminalNode REBUILD() { return getToken(MySQLSQLStatementParser.REBUILD, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableRebuildPartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRebuildPartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableRemovePartitioningActionContext extends AlterTableItemContext {
		public TerminalNode REMOVE() { return getToken(MySQLSQLStatementParser.REMOVE, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySQLSQLStatementParser.PARTITIONING, 0); }
		public AlterTableRemovePartitioningActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableRemovePartitioningAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAddColumnActionContext extends AlterTableItemContext {
		public TerminalNode ADD() { return getToken(MySQLSQLStatementParser.ADD, 0); }
		public List<ColumnDefinitionContext> columnDefinition() {
			return getRuleContexts(ColumnDefinitionContext.class);
		}
		public ColumnDefinitionContext columnDefinition(int i) {
			return getRuleContext(ColumnDefinitionContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(MySQLSQLStatementParser.COLUMN, 0); }
		public TerminalNode FIRST() { return getToken(MySQLSQLStatementParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySQLSQLStatementParser.AFTER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableAddColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAddColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAlterIndexConstraintActionContext extends AlterTableItemContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public VisibleTypeContext visibleType() {
			return getRuleContext(VisibleTypeContext.class,0);
		}
		public AlterTableAlterIndexConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAlterIndexConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropForeignKeyConstraintActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(MySQLSQLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableDropForeignKeyConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropForeignKeyConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableConvertCharsetActionContext extends AlterTableItemContext {
		public TerminalNode CONVERT() { return getToken(MySQLSQLStatementParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public TerminalNode CHARACTER() { return getToken(MySQLSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COLLATE() { return getToken(MySQLSQLStatementParser.COLLATE, 0); }
		public AlterTableConvertCharsetActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableConvertCharsetAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableDropKeyConstraintActionContext extends AlterTableItemContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableDropKeyConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableDropKeyConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableTruncatePartitionActionContext extends AlterTableItemContext {
		public TerminalNode TRUNCATE() { return getToken(MySQLSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<AlterTablePartitionItemContext> alterTablePartitionItem() {
			return getRuleContexts(AlterTablePartitionItemContext.class);
		}
		public AlterTablePartitionItemContext alterTablePartitionItem(int i) {
			return getRuleContext(AlterTablePartitionItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableTruncatePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableTruncatePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableForceActionContext extends AlterTableItemContext {
		public TerminalNode FORCE() { return getToken(MySQLSQLStatementParser.FORCE, 0); }
		public AlterTableForceActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableForceAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableLockActionContext extends AlterTableItemContext {
		public Token lockType;
		public TerminalNode LOCK() { return getToken(MySQLSQLStatementParser.LOCK, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode NONE() { return getToken(MySQLSQLStatementParser.NONE, 0); }
		public TerminalNode SHARED() { return getToken(MySQLSQLStatementParser.SHARED, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySQLSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public AlterTableLockActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableLockAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableAddTableConstraintActionContext extends AlterTableItemContext {
		public TerminalNode ADD() { return getToken(MySQLSQLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public AlterTableAddTableConstraintActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableAddTableConstraintAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableOrderByColumnActionContext extends AlterTableItemContext {
		public TerminalNode ORDER() { return getToken(MySQLSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableOrderByColumnActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableOrderByColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableReorganizePartitionActionContext extends AlterTableItemContext {
		public TerminalNode REORGANIZE() { return getToken(MySQLSQLStatementParser.REORGANIZE, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterTableReorganizePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableReorganizePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterTableExchangePartitionActionContext extends AlterTableItemContext {
		public NameIdentifierContext name;
		public NameIdentifierContext table;
		public TerminalNode EXCHANGE() { return getToken(MySQLSQLStatementParser.EXCHANGE, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public WithTypeContext withType() {
			return getRuleContext(WithTypeContext.class,0);
		}
		public TerminalNode VALIDATION() { return getToken(MySQLSQLStatementParser.VALIDATION, 0); }
		public AlterTableExchangePartitionActionContext(AlterTableItemContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableExchangePartitionAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableItemContext alterTableItem() throws RecognitionException {
		AlterTableItemContext _localctx = new AlterTableItemContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alterTableItem);
		int _la;
		try {
			int _alt;
			setState(2681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2390);
				tableOption();
				}
				break;
			case 2:
				_localctx = new AlterTableAddColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2391);
				match(ADD);
				setState(2393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2392);
					match(COLUMN);
					}
				}

				setState(2395);
				columnDefinition();
				setState(2399);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(2396);
					match(FIRST);
					}
					break;
				case 2:
					{
					setState(2397);
					match(AFTER);
					setState(2398);
					nameIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterTableAddColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2401);
				match(ADD);
				setState(2403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2402);
					match(COLUMN);
					}
				}

				setState(2405);
				match(LEFT_PAREN);
				setState(2406);
				columnDefinition();
				setState(2411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2407);
					match(COMMA);
					setState(2408);
					columnDefinition();
					}
					}
					setState(2413);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2414);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				_localctx = new AlterTableAddTableConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2416);
				match(ADD);
				setState(2417);
				tableConstraint();
				}
				break;
			case 5:
				_localctx = new AlterTableAlgorithmActionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2418);
				match(ALGORITHM);
				setState(2420);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2419);
					match(EQUALS_OP);
					}
				}

				setState(2422);
				((AlterTableAlgorithmActionContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
					((AlterTableAlgorithmActionContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				_localctx = new AlterTableAlterColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2423);
				match(ALTER);
				setState(2425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2424);
					match(COLUMN);
					}
				}

				setState(2427);
				nameIdentifier();
				setState(2428);
				alterColumnAction();
				}
				break;
			case 7:
				_localctx = new AlterTableAlterIndexConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2430);
				match(ALTER);
				setState(2431);
				match(INDEX);
				setState(2432);
				nameIdentifier();
				setState(2433);
				visibleType();
				}
				break;
			case 8:
				_localctx = new AlterTableChangeColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2435);
				match(CHANGE);
				setState(2437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2436);
					match(COLUMN);
					}
				}

				setState(2439);
				((AlterTableChangeColumnActionContext)_localctx).name = nameIdentifier();
				setState(2440);
				columnDefinition();
				setState(2442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new AlterTableDefaultCharsetActionContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(2444);
					match(DEFAULT);
					}
				}

				setState(2447);
				match(CHARACTER);
				setState(2448);
				match(SET);
				setState(2449);
				match(EQUALS_OP);
				setState(2450);
				expr(0);
				setState(2454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2451);
					match(COLLATE);
					setState(2452);
					match(EQUALS_OP);
					setState(2453);
					expr(0);
					}
				}

				}
				break;
			case 10:
				_localctx = new AlterTableConvertCharsetActionContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2456);
				match(CONVERT);
				setState(2457);
				match(TO);
				setState(2458);
				match(CHARACTER);
				setState(2459);
				match(SET);
				setState(2460);
				expr(0);
				setState(2463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2461);
					match(COLLATE);
					setState(2462);
					expr(0);
					}
				}

				}
				break;
			case 11:
				_localctx = new AlterTableDisableKeysActionContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2465);
				match(DISABLE);
				setState(2466);
				match(KEYS);
				}
				break;
			case 12:
				_localctx = new AlterTableEnableKeysActionContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2467);
				match(ENABLE);
				setState(2468);
				match(KEYS);
				}
				break;
			case 13:
				_localctx = new AlterTableDiscardTablespaceActionContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2469);
				match(DISCARD);
				setState(2470);
				match(TABLESPACE);
				}
				break;
			case 14:
				_localctx = new AlterTableImportTablespaceActionContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2471);
				match(IMPORT);
				setState(2472);
				match(TABLESPACE);
				}
				break;
			case 15:
				_localctx = new AlterTableDropColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2473);
				match(DROP);
				setState(2475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2474);
					match(COLUMN);
					}
				}

				setState(2477);
				nameIdentifier();
				}
				break;
			case 16:
				_localctx = new AlterTableDropIndexConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2478);
				match(DROP);
				setState(2479);
				match(INDEX);
				setState(2480);
				nameIdentifier();
				}
				break;
			case 17:
				_localctx = new AlterTableDropKeyConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(2481);
				match(DROP);
				setState(2482);
				match(KEY);
				setState(2483);
				nameIdentifier();
				}
				break;
			case 18:
				_localctx = new AlterTableDropPrimaryKeyConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(2484);
				match(DROP);
				setState(2485);
				match(PRIMARY);
				setState(2486);
				match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterTableDropForeignKeyConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(2487);
				match(DROP);
				setState(2488);
				match(FOREIGN);
				setState(2489);
				match(KEY);
				setState(2490);
				nameIdentifier();
				}
				break;
			case 20:
				_localctx = new AlterTableForceActionContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(2491);
				match(FORCE);
				}
				break;
			case 21:
				_localctx = new AlterTableLockActionContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(2492);
				match(LOCK);
				setState(2494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2493);
					match(EQUALS_OP);
					}
				}

				setState(2496);
				((AlterTableLockActionContext)_localctx).lockType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterTableLockActionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 22:
				_localctx = new AlterTableModifyColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(2497);
				match(MODIFY);
				setState(2499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2498);
					match(COLUMN);
					}
				}

				setState(2501);
				columnDefinition();
				setState(2505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					setState(2502);
					match(FIRST);
					}
					break;
				case 2:
					{
					setState(2503);
					match(AFTER);
					setState(2504);
					nameIdentifier();
					}
					break;
				}
				}
				break;
			case 23:
				_localctx = new AlterTableOrderByColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(2507);
				match(ORDER);
				setState(2508);
				match(BY);
				setState(2509);
				expr(0);
				setState(2514);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2510);
						match(COMMA);
						setState(2511);
						expr(0);
						}
						} 
					}
					setState(2516);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,264,_ctx);
				}
				}
				break;
			case 24:
				_localctx = new AlterTableRenameColumnActionContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(2517);
				match(RENAME);
				setState(2518);
				match(COLUMN);
				setState(2519);
				nameIdentifier();
				setState(2520);
				match(TO);
				setState(2521);
				nameIdentifier();
				}
				break;
			case 25:
				_localctx = new AlterTableRenameIndexConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(2523);
				match(RENAME);
				setState(2524);
				match(INDEX);
				setState(2525);
				nameIdentifier();
				setState(2526);
				match(TO);
				setState(2527);
				nameIdentifier();
				}
				break;
			case 26:
				_localctx = new AlterTableRenameKeyConstraintActionContext(_localctx);
				enterOuterAlt(_localctx, 26);
				{
				setState(2529);
				match(RENAME);
				setState(2530);
				match(KEY);
				setState(2531);
				nameIdentifier();
				setState(2532);
				match(TO);
				setState(2533);
				nameIdentifier();
				}
				break;
			case 27:
				_localctx = new AlterTableRenameTableActionContext(_localctx);
				enterOuterAlt(_localctx, 27);
				{
				setState(2535);
				match(RENAME);
				setState(2537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS || _la==TO) {
					{
					setState(2536);
					((AlterTableRenameTableActionContext)_localctx).renameFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterTableRenameTableActionContext)_localctx).renameFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2539);
				nameIdentifier();
				}
				break;
			case 28:
				_localctx = new AlterTableWithoutValidateActionContext(_localctx);
				enterOuterAlt(_localctx, 28);
				{
				setState(2540);
				match(WITHOUT);
				setState(2541);
				match(VALIDATION);
				}
				break;
			case 29:
				_localctx = new AlterTableWithValidateActionContext(_localctx);
				enterOuterAlt(_localctx, 29);
				{
				setState(2542);
				match(WITH);
				setState(2543);
				match(VALIDATION);
				}
				break;
			case 30:
				_localctx = new AlterTableAddPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 30);
				{
				setState(2544);
				match(ADD);
				setState(2545);
				match(PARTITION);
				setState(2546);
				partitionDefinition();
				}
				break;
			case 31:
				_localctx = new AlterTableDropPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 31);
				{
				setState(2547);
				match(DROP);
				setState(2548);
				match(PARTITION);
				setState(2549);
				expr(0);
				setState(2554);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2550);
						match(COMMA);
						setState(2551);
						expr(0);
						}
						} 
					}
					setState(2556);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,266,_ctx);
				}
				}
				break;
			case 32:
				_localctx = new AlterTableDiscardPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 32);
				{
				setState(2557);
				match(DISCARD);
				setState(2558);
				match(PARTITION);
				setState(2559);
				alterTablePartitionItem();
				setState(2564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2560);
					match(COMMA);
					setState(2561);
					alterTablePartitionItem();
					}
					}
					setState(2566);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2567);
				match(TABLESPACE);
				}
				break;
			case 33:
				_localctx = new AlterTableImportPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 33);
				{
				setState(2569);
				match(IMPORT);
				setState(2570);
				match(PARTITION);
				setState(2571);
				alterTablePartitionItem();
				setState(2576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2572);
					match(COMMA);
					setState(2573);
					alterTablePartitionItem();
					}
					}
					setState(2578);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2579);
				match(TABLESPACE);
				}
				break;
			case 34:
				_localctx = new AlterTableTruncatePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 34);
				{
				setState(2581);
				match(TRUNCATE);
				setState(2582);
				match(PARTITION);
				setState(2583);
				alterTablePartitionItem();
				setState(2588);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2584);
						match(COMMA);
						setState(2585);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2590);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
				}
				}
				break;
			case 35:
				_localctx = new AlterTableCoalescePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 35);
				{
				setState(2591);
				match(COALESCE);
				setState(2592);
				match(PARTITION);
				setState(2593);
				expr(0);
				}
				break;
			case 36:
				_localctx = new AlterTableReorganizePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 36);
				{
				setState(2594);
				match(REORGANIZE);
				setState(2595);
				match(PARTITION);
				setState(2596);
				expr(0);
				setState(2601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2597);
					match(COMMA);
					setState(2598);
					expr(0);
					}
					}
					setState(2603);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2604);
				match(INTO);
				setState(2605);
				match(LEFT_PAREN);
				setState(2606);
				partitionDefinition();
				setState(2611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2607);
					match(COMMA);
					setState(2608);
					partitionDefinition();
					}
					}
					setState(2613);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2614);
				match(RIGHT_PAREN);
				}
				break;
			case 37:
				_localctx = new AlterTableExchangePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 37);
				{
				setState(2616);
				match(EXCHANGE);
				setState(2617);
				match(PARTITION);
				setState(2618);
				((AlterTableExchangePartitionActionContext)_localctx).name = nameIdentifier();
				setState(2619);
				match(WITH);
				setState(2620);
				match(TABLE);
				setState(2621);
				((AlterTableExchangePartitionActionContext)_localctx).table = nameIdentifier();
				setState(2625);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(2622);
					withType();
					setState(2623);
					match(VALIDATION);
					}
					break;
				}
				}
				break;
			case 38:
				_localctx = new AlterTableAnalyzePartitiionActionContext(_localctx);
				enterOuterAlt(_localctx, 38);
				{
				setState(2627);
				match(ANALYZE);
				setState(2628);
				match(PARTITION);
				setState(2629);
				alterTablePartitionItem();
				setState(2634);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2630);
						match(COMMA);
						setState(2631);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2636);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
				}
				}
				break;
			case 39:
				_localctx = new AlterTableCheckPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 39);
				{
				setState(2637);
				match(CHECK);
				setState(2638);
				match(PARTITION);
				setState(2639);
				alterTablePartitionItem();
				setState(2644);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2640);
						match(COMMA);
						setState(2641);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2646);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,274,_ctx);
				}
				}
				break;
			case 40:
				_localctx = new AlterTableOptimizePartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 40);
				{
				setState(2647);
				match(OPTIMIZE);
				setState(2648);
				match(PARTITION);
				setState(2649);
				alterTablePartitionItem();
				setState(2654);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2650);
						match(COMMA);
						setState(2651);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2656);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
				}
				}
				break;
			case 41:
				_localctx = new AlterTableRebuildPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 41);
				{
				setState(2657);
				match(REBUILD);
				setState(2658);
				match(PARTITION);
				setState(2659);
				alterTablePartitionItem();
				setState(2664);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,276,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2660);
						match(COMMA);
						setState(2661);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2666);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,276,_ctx);
				}
				}
				break;
			case 42:
				_localctx = new AlterTableRepairPartitionActionContext(_localctx);
				enterOuterAlt(_localctx, 42);
				{
				setState(2667);
				match(REPAIR);
				setState(2668);
				match(PARTITION);
				setState(2669);
				alterTablePartitionItem();
				setState(2674);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,277,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2670);
						match(COMMA);
						setState(2671);
						alterTablePartitionItem();
						}
						} 
					}
					setState(2676);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,277,_ctx);
				}
				}
				break;
			case 43:
				_localctx = new AlterTableRemovePartitioningActionContext(_localctx);
				enterOuterAlt(_localctx, 43);
				{
				setState(2677);
				match(REMOVE);
				setState(2678);
				match(PARTITIONING);
				}
				break;
			case 44:
				_localctx = new AlterTableUpgradePartitioningActionContext(_localctx);
				enterOuterAlt(_localctx, 44);
				{
				setState(2679);
				match(UPGRADE);
				setState(2680);
				match(PARTITIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableColumnActionPropertyContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(MySQLSQLStatementParser.FIRST, 0); }
		public TerminalNode AFTER() { return getToken(MySQLSQLStatementParser.AFTER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public AlterTableColumnActionPropertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableColumnActionProperty; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTableColumnActionProperty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableColumnActionPropertyContext alterTableColumnActionProperty() throws RecognitionException {
		AlterTableColumnActionPropertyContext _localctx = new AlterTableColumnActionPropertyContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alterTableColumnActionProperty);
		try {
			setState(2686);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST:
				enterOuterAlt(_localctx, 1);
				{
				setState(2683);
				match(FIRST);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2684);
				match(AFTER);
				setState(2685);
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnActionContext extends ParserRuleContext {
		public AlterColumnActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnAction; }
	 
		public AlterColumnActionContext() { }
		public void copyFrom(AlterColumnActionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterColumnSetDefaultActionContext extends AlterColumnActionContext {
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AlterColumnSetDefaultActionContext(AlterColumnActionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterColumnSetDefaultAction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterColumnDropDefaultActionContext extends AlterColumnActionContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public AlterColumnDropDefaultActionContext(AlterColumnActionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterColumnDropDefaultAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnActionContext alterColumnAction() throws RecognitionException {
		AlterColumnActionContext _localctx = new AlterColumnActionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_alterColumnAction);
		try {
			setState(2693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				_localctx = new AlterColumnSetDefaultActionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2688);
				match(SET);
				setState(2689);
				match(DEFAULT);
				setState(2690);
				expr(0);
				}
				break;
			case DROP:
				_localctx = new AlterColumnDropDefaultActionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2691);
				match(DROP);
				setState(2692);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablePartitionItemContext extends ParserRuleContext {
		public AllLiteralContext allLiteral() {
			return getRuleContext(AllLiteralContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AlterTablePartitionItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablePartitionItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTablePartitionItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablePartitionItemContext alterTablePartitionItem() throws RecognitionException {
		AlterTablePartitionItemContext _localctx = new AlterTablePartitionItemContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_alterTablePartitionItem);
		try {
			setState(2697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2695);
				allLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2696);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceStatementContext extends ParserRuleContext {
		public Token objectAction;
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DATAFILE() { return getToken(MySQLSQLStatementParser.DATAFILE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(MySQLSQLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLSQLStatementParser.INITIAL_SIZE, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(MySQLSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(MySQLSQLStatementParser.EQUALS_OP, i);
		}
		public TerminalNode WAIT() { return getToken(MySQLSQLStatementParser.WAIT, 0); }
		public AlterTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceStatementContext alterTablespaceStatement() throws RecognitionException {
		AlterTablespaceStatementContext _localctx = new AlterTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_alterTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2699);
			match(ALTER);
			setState(2700);
			match(TABLESPACE);
			setState(2701);
			nameIdentifier();
			setState(2702);
			((AlterTablespaceStatementContext)_localctx).objectAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				((AlterTablespaceStatementContext)_localctx).objectAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2703);
			match(DATAFILE);
			setState(2704);
			expr(0);
			setState(2708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				setState(2705);
				match(INITIAL_SIZE);
				setState(2706);
				match(EQUALS_OP);
				setState(2707);
				expr(0);
				}
			}

			setState(2711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAIT) {
				{
				setState(2710);
				match(WAIT);
				}
			}

			setState(2713);
			match(ENGINE);
			setState(2715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(2714);
				match(EQUALS_OP);
				}
			}

			setState(2717);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewStatementContext extends ParserRuleContext {
		public Token algType;
		public Token secContext;
		public Token checkOpt;
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(MySQLSQLStatementParser.VIEW, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode ALGORITHM() { return getToken(MySQLSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public DefinerOptionExprContext definerOptionExpr() {
			return getRuleContext(DefinerOptionExprContext.class,0);
		}
		public TerminalNode SQL() { return getToken(MySQLSQLStatementParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySQLSQLStatementParser.SECURITY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(MySQLSQLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(MySQLSQLStatementParser.OPTION, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySQLSQLStatementParser.UNDEFINED, 0); }
		public TerminalNode MERGE() { return getToken(MySQLSQLStatementParser.MERGE, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySQLSQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode DEFINER() { return getToken(MySQLSQLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySQLSQLStatementParser.INVOKER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode CASCADED() { return getToken(MySQLSQLStatementParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public AlterViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewStatementContext alterViewStatement() throws RecognitionException {
		AlterViewStatementContext _localctx = new AlterViewStatementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_alterViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2719);
			match(ALTER);
			setState(2723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM) {
				{
				setState(2720);
				match(ALGORITHM);
				setState(2721);
				match(EQUALS_OP);
				setState(2722);
				((AlterViewStatementContext)_localctx).algType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					((AlterViewStatementContext)_localctx).algType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER) {
				{
				setState(2725);
				definerOptionExpr();
				}
			}

			setState(2731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(2728);
				match(SQL);
				setState(2729);
				match(SECURITY);
				setState(2730);
				((AlterViewStatementContext)_localctx).secContext = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((AlterViewStatementContext)_localctx).secContext = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2733);
			match(VIEW);
			setState(2734);
			nameIdentifier();
			setState(2746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2735);
				match(LEFT_PAREN);
				setState(2736);
				expr(0);
				setState(2741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2737);
					match(COMMA);
					setState(2738);
					expr(0);
					}
					}
					setState(2743);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2744);
				match(RIGHT_PAREN);
				}
			}

			setState(2748);
			match(AS);
			setState(2749);
			selectStatement();
			setState(2756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2750);
				match(WITH);
				setState(2752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					setState(2751);
					((AlterViewStatementContext)_localctx).checkOpt = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						((AlterViewStatementContext)_localctx).checkOpt = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2754);
				match(CHECK);
				setState(2755);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(MySQLSQLStatementParser.DATABASE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabaseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropDatabaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseStatementContext dropDatabaseStatement() throws RecognitionException {
		DropDatabaseStatementContext _localctx = new DropDatabaseStatementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_dropDatabaseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2758);
			match(DROP);
			setState(2759);
			match(DATABASE);
			setState(2761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2760);
				ifExists();
				}
			}

			setState(2763);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSchemaStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLSQLStatementParser.SCHEMA, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSchemaStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropSchemaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSchemaStatementContext dropSchemaStatement() throws RecognitionException {
		DropSchemaStatementContext _localctx = new DropSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_dropSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2765);
			match(DROP);
			setState(2766);
			match(SCHEMA);
			setState(2768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2767);
				ifExists();
				}
			}

			setState(2770);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySQLSQLStatementParser.EVENT, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEventStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropEventStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventStatementContext dropEventStatement() throws RecognitionException {
		DropEventStatementContext _localctx = new DropEventStatementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropEventStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2772);
			match(DROP);
			setState(2773);
			match(EVENT);
			setState(2775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2774);
				ifExists();
				}
			}

			setState(2777);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexStatementContext extends ParserRuleContext {
		public NameIdentifierContext index;
		public NameIdentifierContext table;
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public IntimeActionContext intimeAction() {
			return getRuleContext(IntimeActionContext.class,0);
		}
		public List<DropIndexStatementOptionContext> dropIndexStatementOption() {
			return getRuleContexts(DropIndexStatementOptionContext.class);
		}
		public DropIndexStatementOptionContext dropIndexStatementOption(int i) {
			return getRuleContext(DropIndexStatementOptionContext.class,i);
		}
		public DropIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexStatementContext dropIndexStatement() throws RecognitionException {
		DropIndexStatementContext _localctx = new DropIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dropIndexStatement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2779);
			match(DROP);
			setState(2780);
			match(INDEX);
			setState(2782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				{
				setState(2781);
				intimeAction();
				}
				break;
			}
			setState(2784);
			((DropIndexStatementContext)_localctx).index = nameIdentifier();
			setState(2785);
			match(ON);
			setState(2786);
			((DropIndexStatementContext)_localctx).table = nameIdentifier();
			setState(2790);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2787);
					dropIndexStatementOption();
					}
					} 
				}
				setState(2792);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexStatementOptionContext extends ParserRuleContext {
		public AlgorithmOptionExprContext algorithmOptionExpr() {
			return getRuleContext(AlgorithmOptionExprContext.class,0);
		}
		public LockOptionExprContext lockOptionExpr() {
			return getRuleContext(LockOptionExprContext.class,0);
		}
		public DropIndexStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexStatementOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropIndexStatementOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexStatementOptionContext dropIndexStatementOption() throws RecognitionException {
		DropIndexStatementOptionContext _localctx = new DropIndexStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dropIndexStatementOption);
		try {
			setState(2795);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2793);
				algorithmOptionExpr();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2794);
				lockOptionExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLSQLStatementParser.LOGFILE, 0); }
		public TerminalNode GROUP() { return getToken(MySQLSQLStatementParser.GROUP, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public DropLogfileGroupStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroupStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropLogfileGroupStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupStatementContext dropLogfileGroupStatement() throws RecognitionException {
		DropLogfileGroupStatementContext _localctx = new DropLogfileGroupStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_dropLogfileGroupStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2797);
			match(DROP);
			setState(2798);
			match(LOGFILE);
			setState(2799);
			match(GROUP);
			setState(2800);
			nameIdentifier();
			setState(2801);
			match(ENGINE);
			setState(2802);
			match(EQUALS_OP);
			setState(2803);
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLSQLStatementParser.PROCEDURE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedureStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropProcedureStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureStatementContext dropProcedureStatement() throws RecognitionException {
		DropProcedureStatementContext _localctx = new DropProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_dropProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2805);
			match(DROP);
			setState(2806);
			match(PROCEDURE);
			setState(2808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2807);
				ifExists();
				}
			}

			setState(2810);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunctionStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionStatementContext dropFunctionStatement() throws RecognitionException {
		DropFunctionStatementContext _localctx = new DropFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_dropFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2812);
			match(DROP);
			setState(2813);
			match(FUNCTION);
			setState(2815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2814);
				ifExists();
				}
			}

			setState(2817);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(MySQLSQLStatementParser.SERVER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropServerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerStatementContext dropServerStatement() throws RecognitionException {
		DropServerStatementContext _localctx = new DropServerStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_dropServerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819);
			match(DROP);
			setState(2820);
			match(SERVER);
			setState(2822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2821);
				ifExists();
				}
			}

			setState(2824);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableStatementContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(MySQLSQLStatementParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(MySQLSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySQLSQLStatementParser.CASCADE, 0); }
		public DropTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableStatementContext dropTableStatement() throws RecognitionException {
		DropTableStatementContext _localctx = new DropTableStatementContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_dropTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2826);
			match(DROP);
			setState(2828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(2827);
				match(TEMPORARY);
				}
			}

			setState(2830);
			match(TABLE);
			setState(2832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2831);
				ifExists();
				}
			}

			setState(2834);
			nameIdentifier();
			setState(2839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2835);
				match(COMMA);
				setState(2836);
				nameIdentifier();
				}
				}
				setState(2841);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2842);
				((DropTableStatementContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableStatementContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public DropTablespaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropTablespaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceStatementContext dropTablespaceStatement() throws RecognitionException {
		DropTablespaceStatementContext _localctx = new DropTablespaceStatementContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_dropTablespaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2845);
			match(DROP);
			setState(2846);
			match(TABLESPACE);
			setState(2847);
			nameIdentifier();
			setState(2853);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(2848);
				match(ENGINE);
				setState(2850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(2849);
					match(EQUALS_OP);
					}
				}

				setState(2852);
				engineName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(MySQLSQLStatementParser.TRIGGER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTriggerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerStatementContext dropTriggerStatement() throws RecognitionException {
		DropTriggerStatementContext _localctx = new DropTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_dropTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2855);
			match(DROP);
			setState(2856);
			match(TRIGGER);
			setState(2858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2857);
				ifExists();
				}
			}

			setState(2860);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewStatementContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(MySQLSQLStatementParser.VIEW, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode RESTRICT() { return getToken(MySQLSQLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySQLSQLStatementParser.CASCADE, 0); }
		public DropViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropViewStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewStatementContext dropViewStatement() throws RecognitionException {
		DropViewStatementContext _localctx = new DropViewStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_dropViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2862);
			match(DROP);
			setState(2863);
			match(VIEW);
			setState(2865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2864);
				ifExists();
				}
			}

			setState(2867);
			nameIdentifier();
			setState(2872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2868);
				match(COMMA);
				setState(2869);
				nameIdentifier();
				}
				}
				setState(2874);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2875);
				((DropViewStatementContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropViewStatementContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableStatementContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySQLSQLStatementParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRenameTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableStatementContext renameTableStatement() throws RecognitionException {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_renameTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2878);
			match(RENAME);
			setState(2879);
			match(TABLE);
			setState(2880);
			renameTableClause();
			setState(2885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2881);
				match(COMMA);
				setState(2882);
				renameTableClause();
				}
				}
				setState(2887);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_renameTableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2888);
			nameIdentifier();
			setState(2889);
			match(TO);
			setState(2890);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableStatementContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySQLSQLStatementParser.TRUNCATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTableStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTruncateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableStatementContext truncateTableStatement() throws RecognitionException {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_truncateTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2892);
			match(TRUNCATE);
			setState(2894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2893);
				match(TABLE);
				}
			}

			setState(2896);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_selectStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2898);
			iSelectQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ISelectQueryContext extends ParserRuleContext {
		public SelectQueryBasicContext selectQueryBasic() {
			return getRuleContext(SelectQueryBasicContext.class,0);
		}
		public SelectUnionQueryContext selectUnionQuery() {
			return getRuleContext(SelectUnionQueryContext.class,0);
		}
		public ISelectQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iSelectQuery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitISelectQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ISelectQueryContext iSelectQuery() throws RecognitionException {
		ISelectQueryContext _localctx = new ISelectQueryContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_iSelectQuery);
		try {
			setState(2902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2900);
				selectQueryBasic();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2901);
				selectUnionQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryBasicContext extends ParserRuleContext {
		public SelectQueryContext selectQuery() {
			return getRuleContext(SelectQueryContext.class,0);
		}
		public SelectParenQueryContext selectParenQuery() {
			return getRuleContext(SelectParenQueryContext.class,0);
		}
		public SelectQueryBasicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryBasic; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryBasic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectQueryBasicContext selectQueryBasic() throws RecognitionException {
		SelectQueryBasicContext _localctx = new SelectQueryBasicContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_selectQueryBasic);
		try {
			setState(2906);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2904);
				selectQuery();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2905);
				selectParenQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySQLSQLStatementParser.SELECT, 0); }
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode HIGH_PRIORITY() { return getToken(MySQLSQLStatementParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySQLSQLStatementParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySQLSQLStatementParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySQLSQLStatementParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySQLSQLStatementParser.SQL_BUFFER_RESULT, 0); }
		public SelectQueryCacheContext selectQueryCache() {
			return getRuleContext(SelectQueryCacheContext.class,0);
		}
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySQLSQLStatementParser.SQL_CALC_FOUND_ROWS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public ISelectQueryIntoClauseContext iSelectQueryIntoClause() {
			return getRuleContext(ISelectQueryIntoClauseContext.class,0);
		}
		public ILockClauseContext iLockClause() {
			return getRuleContext(ILockClauseContext.class,0);
		}
		public SelectQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQuery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectQueryContext selectQuery() throws RecognitionException {
		SelectQueryContext _localctx = new SelectQueryContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_selectQuery);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2908);
			match(SELECT);
			setState(2910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(2909);
				setQuantifier();
				}
				break;
			}
			setState(2913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HIGH_PRIORITY) {
				{
				setState(2912);
				match(HIGH_PRIORITY);
				}
			}

			setState(2916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRAIGHT_JOIN) {
				{
				setState(2915);
				match(STRAIGHT_JOIN);
				}
			}

			setState(2919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SMALL_RESULT) {
				{
				setState(2918);
				match(SQL_SMALL_RESULT);
				}
			}

			setState(2922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_BIG_RESULT) {
				{
				setState(2921);
				match(SQL_BIG_RESULT);
				}
			}

			setState(2925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				setState(2924);
				match(SQL_BUFFER_RESULT);
				}
				break;
			}
			setState(2928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				setState(2927);
				selectQueryCache();
				}
				break;
			}
			setState(2931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_CALC_FOUND_ROWS) {
				{
				setState(2930);
				match(SQL_CALC_FOUND_ROWS);
				}
			}

			setState(2933);
			selectItem();
			setState(2938);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2934);
					match(COMMA);
					setState(2935);
					selectItem();
					}
					} 
				}
				setState(2940);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
			}
			setState(2942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				setState(2941);
				fromClause();
				}
				break;
			}
			setState(2945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				setState(2944);
				whereClause();
				}
				break;
			}
			setState(2948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(2947);
				groupByClause();
				}
				break;
			}
			setState(2951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				setState(2950);
				orderByClause();
				}
				break;
			}
			setState(2954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(2953);
				limitOffsetClause();
				}
				break;
			}
			setState(2957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(2956);
				iSelectQueryIntoClause();
				}
				break;
			}
			setState(2960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(2959);
				iLockClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryCacheContext extends ParserRuleContext {
		public TerminalNode SQL_CACHE() { return getToken(MySQLSQLStatementParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySQLSQLStatementParser.SQL_NO_CACHE, 0); }
		public SelectQueryCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryCache; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectQueryCacheContext selectQueryCache() throws RecognitionException {
		SelectQueryCacheContext _localctx = new SelectQueryCacheContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_selectQueryCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2962);
			_la = _input.LA(1);
			if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectParenQueryContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public ILockClauseContext iLockClause() {
			return getRuleContext(ILockClauseContext.class,0);
		}
		public SelectParenQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectParenQuery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectParenQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectParenQueryContext selectParenQuery() throws RecognitionException {
		SelectParenQueryContext _localctx = new SelectParenQueryContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_selectParenQuery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2964);
			match(LEFT_PAREN);
			setState(2965);
			iSelectQuery();
			setState(2966);
			match(RIGHT_PAREN);
			setState(2968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(2967);
				orderByClause();
				}
				break;
			}
			setState(2971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				setState(2970);
				limitOffsetClause();
				}
				break;
			}
			setState(2974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(2973);
				iLockClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectUnionQueryContext extends ParserRuleContext {
		public List<SelectQueryBasicContext> selectQueryBasic() {
			return getRuleContexts(SelectQueryBasicContext.class);
		}
		public SelectQueryBasicContext selectQueryBasic(int i) {
			return getRuleContext(SelectQueryBasicContext.class,i);
		}
		public List<UnionOperatorContext> unionOperator() {
			return getRuleContexts(UnionOperatorContext.class);
		}
		public UnionOperatorContext unionOperator(int i) {
			return getRuleContext(UnionOperatorContext.class,i);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public ILockClauseContext iLockClause() {
			return getRuleContext(ILockClauseContext.class,0);
		}
		public SelectUnionQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectUnionQuery; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectUnionQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectUnionQueryContext selectUnionQuery() throws RecognitionException {
		SelectUnionQueryContext _localctx = new SelectUnionQueryContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_selectUnionQuery);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2976);
			selectQueryBasic();
			setState(2980); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2977);
					unionOperator();
					setState(2978);
					selectQueryBasic();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2982); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				setState(2984);
				orderByClause();
				}
				break;
			}
			setState(2988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(2987);
				limitOffsetClause();
				}
				break;
			}
			setState(2991);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				setState(2990);
				iLockClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySQLSQLStatementParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySQLSQLStatementParser.DISTINCTROW, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetQuantifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2993);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionOperatorContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(MySQLSQLStatementParser.UNION, 0); }
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySQLSQLStatementParser.DISTINCT, 0); }
		public UnionOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUnionOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionOperatorContext unionOperator() throws RecognitionException {
		UnionOperatorContext _localctx = new UnionOperatorContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_unionOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2995);
			match(UNION);
			setState(2997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(2996);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemContext extends ParserRuleContext {
		public ExprContext column;
		public SelectItemAliasContext alias;
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectItemAliasContext selectItemAlias() {
			return getRuleContext(SelectItemAliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_selectItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2999);
			((SelectItemContext)_localctx).column = expr(0);
			setState(3004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				setState(3001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3000);
					match(AS);
					}
				}

				setState(3003);
				((SelectItemContext)_localctx).alias = selectItemAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemAliasContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public SelectItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemAlias; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectItemAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemAliasContext selectItemAlias() throws RecognitionException {
		SelectItemAliasContext _localctx = new SelectItemAliasContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_selectItemAlias);
		try {
			setState(3008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3006);
				nameIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3007);
				literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3010);
			match(FROM);
			setState(3011);
			iTableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ITableReferenceContext extends ParserRuleContext {
		public TableReferenceBasicContext tableReferenceBasic() {
			return getRuleContext(TableReferenceBasicContext.class,0);
		}
		public JoinTableReferenceContext joinTableReference() {
			return getRuleContext(JoinTableReferenceContext.class,0);
		}
		public ITableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iTableReference; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitITableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ITableReferenceContext iTableReference() throws RecognitionException {
		ITableReferenceContext _localctx = new ITableReferenceContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_iTableReference);
		try {
			setState(3015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3013);
				tableReferenceBasic();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3014);
				joinTableReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceBasicContext extends ParserRuleContext {
		public TableReferenceBasicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceBasic; }
	 
		public TableReferenceBasicContext() { }
		public void copyFrom(TableReferenceBasicContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ObjectNameTableReferenceContext extends TableReferenceBasicContext {
		public NameIdentifierContext tableName;
		public NameIdentifierContext alias;
		public IIndexHintContext iIndexHint;
		public List<IIndexHintContext> indexes = new ArrayList<IIndexHintContext>();
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public List<IIndexHintContext> iIndexHint() {
			return getRuleContexts(IIndexHintContext.class);
		}
		public IIndexHintContext iIndexHint(int i) {
			return getRuleContext(IIndexHintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ObjectNameTableReferenceContext(TableReferenceBasicContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitObjectNameTableReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OjTableReferenceContext extends TableReferenceBasicContext {
		public TerminalNode LEFT_BRACE() { return getToken(MySQLSQLStatementParser.LEFT_BRACE, 0); }
		public TerminalNode OJ() { return getToken(MySQLSQLStatementParser.OJ, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(MySQLSQLStatementParser.RIGHT_BRACE, 0); }
		public OjTableReferenceContext(TableReferenceBasicContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOjTableReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubQueryTableReferenceContext extends TableReferenceBasicContext {
		public NameIdentifierContext alias;
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public SubQueryTableReferenceContext(TableReferenceBasicContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSubQueryTableReference(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenTableReferenceContext extends TableReferenceBasicContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public ParenTableReferenceContext(TableReferenceBasicContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitParenTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceBasicContext tableReferenceBasic() throws RecognitionException {
		TableReferenceBasicContext _localctx = new TableReferenceBasicContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_tableReferenceBasic);
		int _la;
		try {
			int _alt;
			setState(3066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				_localctx = new ObjectNameTableReferenceContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3017);
				((ObjectNameTableReferenceContext)_localctx).tableName = nameIdentifier();
				setState(3019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3018);
					partitionClause();
					}
					break;
				}
				setState(3035);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(3022);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3021);
						match(AS);
						}
					}

					setState(3024);
					((ObjectNameTableReferenceContext)_localctx).alias = nameIdentifier();
					setState(3033);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
					case 1:
						{
						setState(3025);
						((ObjectNameTableReferenceContext)_localctx).iIndexHint = iIndexHint();
						((ObjectNameTableReferenceContext)_localctx).indexes.add(((ObjectNameTableReferenceContext)_localctx).iIndexHint);
						setState(3030);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(3026);
								match(COMMA);
								setState(3027);
								((ObjectNameTableReferenceContext)_localctx).iIndexHint = iIndexHint();
								((ObjectNameTableReferenceContext)_localctx).indexes.add(((ObjectNameTableReferenceContext)_localctx).iIndexHint);
								}
								} 
							}
							setState(3032);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubQueryTableReferenceContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3037);
				match(LEFT_PAREN);
				setState(3038);
				iSelectQuery();
				setState(3039);
				match(RIGHT_PAREN);
				setState(3041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3040);
					match(AS);
					}
				}

				setState(3043);
				((SubQueryTableReferenceContext)_localctx).alias = nameIdentifier();
				setState(3055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3044);
					match(LEFT_PAREN);
					setState(3045);
					((SubQueryTableReferenceContext)_localctx).expr = expr(0);
					((SubQueryTableReferenceContext)_localctx).columns.add(((SubQueryTableReferenceContext)_localctx).expr);
					setState(3050);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3046);
						match(COMMA);
						setState(3047);
						((SubQueryTableReferenceContext)_localctx).expr = expr(0);
						((SubQueryTableReferenceContext)_localctx).columns.add(((SubQueryTableReferenceContext)_localctx).expr);
						}
						}
						setState(3052);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3053);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new OjTableReferenceContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3057);
				match(LEFT_BRACE);
				setState(3058);
				match(OJ);
				setState(3059);
				iTableReference();
				setState(3060);
				match(RIGHT_BRACE);
				}
				break;
			case 4:
				_localctx = new ParenTableReferenceContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3062);
				match(LEFT_PAREN);
				setState(3063);
				iTableReference();
				setState(3064);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTableReferenceContext extends ParserRuleContext {
		public TableReferenceBasicContext tableReferenceBasic() {
			return getRuleContext(TableReferenceBasicContext.class,0);
		}
		public List<RightJoinClauseContext> rightJoinClause() {
			return getRuleContexts(RightJoinClauseContext.class);
		}
		public RightJoinClauseContext rightJoinClause(int i) {
			return getRuleContext(RightJoinClauseContext.class,i);
		}
		public JoinTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinTableReference; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJoinTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTableReferenceContext joinTableReference() throws RecognitionException {
		JoinTableReferenceContext _localctx = new JoinTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_joinTableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3068);
			tableReferenceBasic();
			setState(3070); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3069);
					rightJoinClause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3072); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,352,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074);
			match(PARTITION);
			setState(3075);
			match(LEFT_PAREN);
			setState(3076);
			expr(0);
			setState(3081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3077);
				match(COMMA);
				setState(3078);
				expr(0);
				}
				}
				setState(3083);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3084);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IIndexHintContext extends ParserRuleContext {
		public IIndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iIndexHint; }
	 
		public IIndexHintContext() { }
		public void copyFrom(IIndexHintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ForceKeyHintContext extends IIndexHintContext {
		public TerminalNode FORCE() { return getToken(MySQLSQLStatementParser.FORCE, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ForceKeyHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitForceKeyHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForceIndexHintContext extends IIndexHintContext {
		public TerminalNode FORCE() { return getToken(MySQLSQLStatementParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ForceIndexHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitForceIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseKeyHintContext extends IIndexHintContext {
		public TerminalNode USE() { return getToken(MySQLSQLStatementParser.USE, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public UseKeyHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUseKeyHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UseIndexHintContext extends IIndexHintContext {
		public TerminalNode USE() { return getToken(MySQLSQLStatementParser.USE, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public UseIndexHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUseIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreKeyHintContext extends IIndexHintContext {
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public IgnoreKeyHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIgnoreKeyHint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreIndexHintContext extends IIndexHintContext {
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public IgnoreIndexHintContext(IIndexHintContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIgnoreIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IIndexHintContext iIndexHint() throws RecognitionException {
		IIndexHintContext _localctx = new IIndexHintContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_iIndexHint);
		int _la;
		try {
			setState(3188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
			case 1:
				_localctx = new UseIndexHintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3086);
				match(USE);
				setState(3087);
				match(INDEX);
				setState(3090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3088);
					match(FOR);
					setState(3089);
					indexHintType();
					}
				}

				setState(3092);
				match(LEFT_PAREN);
				setState(3093);
				expr(0);
				setState(3098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3094);
					match(COMMA);
					setState(3095);
					expr(0);
					}
					}
					setState(3100);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3101);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new UseKeyHintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3103);
				match(USE);
				setState(3104);
				match(KEY);
				setState(3107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3105);
					match(FOR);
					setState(3106);
					indexHintType();
					}
				}

				setState(3109);
				match(LEFT_PAREN);
				setState(3110);
				expr(0);
				setState(3115);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3111);
					match(COMMA);
					setState(3112);
					expr(0);
					}
					}
					setState(3117);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3118);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new IgnoreIndexHintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3120);
				match(IGNORE);
				setState(3121);
				match(INDEX);
				setState(3124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3122);
					match(FOR);
					setState(3123);
					indexHintType();
					}
				}

				setState(3126);
				match(LEFT_PAREN);
				setState(3127);
				expr(0);
				setState(3132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3128);
					match(COMMA);
					setState(3129);
					expr(0);
					}
					}
					setState(3134);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3135);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				_localctx = new IgnoreKeyHintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3137);
				match(IGNORE);
				setState(3138);
				match(KEY);
				setState(3141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3139);
					match(FOR);
					setState(3140);
					indexHintType();
					}
				}

				setState(3143);
				match(LEFT_PAREN);
				setState(3144);
				expr(0);
				setState(3149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3145);
					match(COMMA);
					setState(3146);
					expr(0);
					}
					}
					setState(3151);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3152);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				_localctx = new ForceIndexHintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3154);
				match(FORCE);
				setState(3155);
				match(INDEX);
				setState(3158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3156);
					match(FOR);
					setState(3157);
					indexHintType();
					}
				}

				setState(3160);
				match(LEFT_PAREN);
				setState(3161);
				expr(0);
				setState(3166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3162);
					match(COMMA);
					setState(3163);
					expr(0);
					}
					}
					setState(3168);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3169);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				_localctx = new ForceKeyHintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(3171);
				match(FORCE);
				setState(3172);
				match(KEY);
				setState(3175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3173);
					match(FOR);
					setState(3174);
					indexHintType();
					}
				}

				setState(3177);
				match(LEFT_PAREN);
				setState(3178);
				expr(0);
				setState(3183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3179);
					match(COMMA);
					setState(3180);
					expr(0);
					}
					}
					setState(3185);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3186);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySQLSQLStatementParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySQLSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySQLSQLStatementParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_indexHintType);
		try {
			setState(3195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3190);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3191);
				match(ORDER);
				setState(3192);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3193);
				match(GROUP);
				setState(3194);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public TerminalNode INNER_JOIN() { return getToken(MySQLSQLStatementParser.INNER_JOIN, 0); }
		public TerminalNode CROSS_JOIN() { return getToken(MySQLSQLStatementParser.CROSS_JOIN, 0); }
		public TerminalNode NATURAL_JOIN() { return getToken(MySQLSQLStatementParser.NATURAL_JOIN, 0); }
		public TerminalNode NATURAL_INNER_JOIN() { return getToken(MySQLSQLStatementParser.NATURAL_INNER_JOIN, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySQLSQLStatementParser.STRAIGHT_JOIN, 0); }
		public TerminalNode LEFT_JOIN() { return getToken(MySQLSQLStatementParser.LEFT_JOIN, 0); }
		public TerminalNode LEFT_OUTER_JOIN() { return getToken(MySQLSQLStatementParser.LEFT_OUTER_JOIN, 0); }
		public TerminalNode NATURAL_LEFT_JOIN() { return getToken(MySQLSQLStatementParser.NATURAL_LEFT_JOIN, 0); }
		public TerminalNode NATURAL_LEFT_OUTER_JOIN() { return getToken(MySQLSQLStatementParser.NATURAL_LEFT_OUTER_JOIN, 0); }
		public TerminalNode RIGHT_JOIN() { return getToken(MySQLSQLStatementParser.RIGHT_JOIN, 0); }
		public TerminalNode RIGHT_OUTER_JOIN() { return getToken(MySQLSQLStatementParser.RIGHT_OUTER_JOIN, 0); }
		public TerminalNode NATURAL_RIGHT_JOIN() { return getToken(MySQLSQLStatementParser.NATURAL_RIGHT_JOIN, 0); }
		public TerminalNode NATURAL_RIGHT_OUTER_JOIN() { return getToken(MySQLSQLStatementParser.NATURAL_RIGHT_OUTER_JOIN, 0); }
		public TerminalNode JOIN() { return getToken(MySQLSQLStatementParser.JOIN, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_joinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3197);
			_la = _input.LA(1);
			if ( !(_la==JOIN || _la==STRAIGHT_JOIN || ((((_la - 680)) & ~0x3f) == 0 && ((1L << (_la - 680)) & ((1L << (COMMA - 680)) | (1L << (INNER_JOIN - 680)) | (1L << (CROSS_JOIN - 680)) | (1L << (NATURAL_JOIN - 680)) | (1L << (NATURAL_INNER_JOIN - 680)) | (1L << (LEFT_JOIN - 680)) | (1L << (LEFT_OUTER_JOIN - 680)) | (1L << (NATURAL_LEFT_JOIN - 680)) | (1L << (NATURAL_LEFT_OUTER_JOIN - 680)) | (1L << (RIGHT_JOIN - 680)) | (1L << (RIGHT_OUTER_JOIN - 680)) | (1L << (NATURAL_RIGHT_JOIN - 680)) | (1L << (NATURAL_RIGHT_OUTER_JOIN - 680)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RightJoinClauseContext extends ParserRuleContext {
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public TableReferenceBasicContext tableReferenceBasic() {
			return getRuleContext(TableReferenceBasicContext.class,0);
		}
		public IJoinConditionContext iJoinCondition() {
			return getRuleContext(IJoinConditionContext.class,0);
		}
		public RightJoinClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rightJoinClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRightJoinClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RightJoinClauseContext rightJoinClause() throws RecognitionException {
		RightJoinClauseContext _localctx = new RightJoinClauseContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_rightJoinClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3199);
			joinType();
			setState(3200);
			tableReferenceBasic();
			setState(3202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				setState(3201);
				iJoinCondition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IJoinConditionContext extends ParserRuleContext {
		public IJoinConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iJoinCondition; }
	 
		public IJoinConditionContext() { }
		public void copyFrom(IJoinConditionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class JoinUsingConditionContext extends IJoinConditionContext {
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public JoinUsingConditionContext(IJoinConditionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJoinUsingCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JoinOnConditionContext extends IJoinConditionContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JoinOnConditionContext(IJoinConditionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJoinOnCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IJoinConditionContext iJoinCondition() throws RecognitionException {
		IJoinConditionContext _localctx = new IJoinConditionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_iJoinCondition);
		int _la;
		try {
			setState(3218);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				_localctx = new JoinOnConditionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3204);
				match(ON);
				setState(3205);
				expr(0);
				}
				break;
			case USING:
				_localctx = new JoinUsingConditionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3206);
				match(USING);
				setState(3207);
				match(LEFT_PAREN);
				setState(3208);
				expr(0);
				setState(3213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3209);
					match(COMMA);
					setState(3210);
					expr(0);
					}
					}
					setState(3215);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3216);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(MySQLSQLStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3220);
			match(WHERE);
			setState(3221);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySQLSQLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public WithRollupContext withRollup() {
			return getRuleContext(WithRollupContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_groupByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
			case 1:
				{
				setState(3223);
				match(GROUP);
				setState(3224);
				match(BY);
				setState(3225);
				groupByItem();
				setState(3230);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,371,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3226);
						match(COMMA);
						setState(3227);
						groupByItem();
						}
						} 
					}
					setState(3232);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,371,_ctx);
				}
				setState(3234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3233);
					withRollup();
					}
					break;
				}
				}
				break;
			}
			setState(3239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				setState(3238);
				havingClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(MySQLSQLStatementParser.HAVING, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3241);
			match(HAVING);
			setState(3242);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_groupByItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3244);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySQLSQLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public List<OrderByItemContext> orderByItem() {
			return getRuleContexts(OrderByItemContext.class);
		}
		public OrderByItemContext orderByItem(int i) {
			return getRuleContext(OrderByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public WithRollupContext withRollup() {
			return getRuleContext(WithRollupContext.class,0);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_orderByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			match(ORDER);
			setState(3247);
			match(BY);
			setState(3248);
			orderByItem();
			setState(3253);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,375,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3249);
					match(COMMA);
					setState(3250);
					orderByItem();
					}
					} 
				}
				setState(3255);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,375,_ctx);
			}
			setState(3257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				setState(3256);
				withRollup();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByItemContext extends ParserRuleContext {
		public ExprContext sortKey;
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public OrderingSpecificationContext orderingSpecification() {
			return getRuleContext(OrderingSpecificationContext.class,0);
		}
		public OrderByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOrderByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByItemContext orderByItem() throws RecognitionException {
		OrderByItemContext _localctx = new OrderByItemContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_orderByItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3259);
			((OrderByItemContext)_localctx).sortKey = expr(0);
			setState(3261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(3260);
				orderingSpecification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOffsetClauseContext extends ParserRuleContext {
		public ExprContext offset;
		public ExprContext limit;
		public TerminalNode LIMIT() { return getToken(MySQLSQLStatementParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySQLSQLStatementParser.OFFSET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public LimitOffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOffsetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLimitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitOffsetClauseContext limitOffsetClause() throws RecognitionException {
		LimitOffsetClauseContext _localctx = new LimitOffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_limitOffsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3263);
			match(LIMIT);
			setState(3274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				{
				setState(3267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3264);
					((LimitOffsetClauseContext)_localctx).offset = expr(0);
					setState(3265);
					match(COMMA);
					}
					break;
				}
				setState(3269);
				((LimitOffsetClauseContext)_localctx).limit = expr(0);
				}
				break;
			case 2:
				{
				setState(3270);
				((LimitOffsetClauseContext)_localctx).limit = expr(0);
				setState(3271);
				match(OFFSET);
				setState(3272);
				((LimitOffsetClauseContext)_localctx).offset = expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ISelectQueryIntoClauseContext extends ParserRuleContext {
		public ISelectQueryIntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iSelectQueryIntoClause; }
	 
		public ISelectQueryIntoClauseContext() { }
		public void copyFrom(ISelectQueryIntoClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoTextFileContext extends ISelectQueryIntoClauseContext {
		public ExprContext filename;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySQLSQLStatementParser.OUTFILE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public TerminalNode LINES() { return getToken(MySQLSQLStatementParser.LINES, 0); }
		public TerminalNode FIELDS() { return getToken(MySQLSQLStatementParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySQLSQLStatementParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(ISelectQueryIntoClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectQueryIntoClauseContext extends ISelectQueryIntoClauseContext {
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public SelectQueryIntoClauseContext(ISelectQueryIntoClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectQueryIntoDumpFileClauseContext extends ISelectQueryIntoClauseContext {
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySQLSQLStatementParser.DUMPFILE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectQueryIntoDumpFileClauseContext(ISelectQueryIntoClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryIntoDumpFileClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ISelectQueryIntoClauseContext iSelectQueryIntoClause() throws RecognitionException {
		ISelectQueryIntoClauseContext _localctx = new ISelectQueryIntoClauseContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_iSelectQueryIntoClause);
		int _la;
		try {
			int _alt;
			setState(3310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				_localctx = new SelectQueryIntoClauseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3276);
				match(INTO);
				setState(3277);
				expr(0);
				setState(3282);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,380,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3278);
						match(COMMA);
						setState(3279);
						expr(0);
						}
						} 
					}
					setState(3284);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,380,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new SelectQueryIntoDumpFileClauseContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3285);
				match(INTO);
				setState(3286);
				match(DUMPFILE);
				setState(3287);
				expr(0);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3288);
				match(INTO);
				setState(3289);
				match(OUTFILE);
				setState(3290);
				((SelectIntoTextFileContext)_localctx).filename = expr(0);
				setState(3292);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					setState(3291);
					characterSetOptionExpr();
					}
					break;
				}
				setState(3300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(3294);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3296); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3295);
							selectFieldsInto();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3298); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,382,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				setState(3308);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(3302);
					match(LINES);
					setState(3304); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(3303);
							selectLinesInto();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3306); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,384,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ILockClauseContext extends ParserRuleContext {
		public ILockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iLockClause; }
	 
		public ILockClauseContext() { }
		public void copyFrom(ILockClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ForUpdateClauseContext extends ILockClauseContext {
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLSQLStatementParser.UPDATE, 0); }
		public TerminalNode SHARE() { return getToken(MySQLSQLStatementParser.SHARE, 0); }
		public TerminalNode OF() { return getToken(MySQLSQLStatementParser.OF, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public ForUpdateOptionContext forUpdateOption() {
			return getRuleContext(ForUpdateOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ForUpdateClauseContext(ILockClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitForUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LockInShareModeClauseContext extends ILockClauseContext {
		public TerminalNode LOCK() { return getToken(MySQLSQLStatementParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(MySQLSQLStatementParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(MySQLSQLStatementParser.MODE, 0); }
		public LockInShareModeClauseContext(ILockClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLockInShareModeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ILockClauseContext iLockClause() throws RecognitionException {
		ILockClauseContext _localctx = new ILockClauseContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_iLockClause);
		int _la;
		try {
			int _alt;
			setState(3332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				_localctx = new ForUpdateClauseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3312);
				match(FOR);
				setState(3313);
				_la = _input.LA(1);
				if ( !(_la==UPDATE || _la==SHARE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					setState(3314);
					match(OF);
					setState(3315);
					expr(0);
					setState(3320);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3316);
							match(COMMA);
							setState(3317);
							expr(0);
							}
							} 
						}
						setState(3322);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,387,_ctx);
					}
					}
					break;
				}
				setState(3326);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					setState(3325);
					forUpdateOption();
					}
					break;
				}
				}
				break;
			case LOCK:
				_localctx = new LockInShareModeClauseContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3328);
				match(LOCK);
				setState(3329);
				match(IN);
				setState(3330);
				match(SHARE);
				setState(3331);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForUpdateOptionContext extends ParserRuleContext {
		public ForUpdateOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forUpdateOption; }
	 
		public ForUpdateOptionContext() { }
		public void copyFrom(ForUpdateOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ForUpdateSkipLockedOptionContext extends ForUpdateOptionContext {
		public TerminalNode SKIP_() { return getToken(MySQLSQLStatementParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(MySQLSQLStatementParser.LOCKED, 0); }
		public ForUpdateSkipLockedOptionContext(ForUpdateOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitForUpdateSkipLockedOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForUpdateNoWaitOptionContext extends ForUpdateOptionContext {
		public TerminalNode NOWAIT() { return getToken(MySQLSQLStatementParser.NOWAIT, 0); }
		public ForUpdateNoWaitOptionContext(ForUpdateOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitForUpdateNoWaitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForUpdateOptionContext forUpdateOption() throws RecognitionException {
		ForUpdateOptionContext _localctx = new ForUpdateOptionContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_forUpdateOption);
		try {
			setState(3337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				_localctx = new ForUpdateSkipLockedOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3334);
				match(SKIP_);
				setState(3335);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				_localctx = new ForUpdateNoWaitOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3336);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoStatementContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySQLSQLStatementParser.SELECT, 0); }
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public List<SelectTargetItemContext> selectTargetItem() {
			return getRuleContexts(SelectTargetItemContext.class);
		}
		public SelectTargetItemContext selectTargetItem(int i) {
			return getRuleContext(SelectTargetItemContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode HIGH_PRIORITY() { return getToken(MySQLSQLStatementParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySQLSQLStatementParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySQLSQLStatementParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySQLSQLStatementParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySQLSQLStatementParser.SQL_BUFFER_RESULT, 0); }
		public SelectQueryCacheContext selectQueryCache() {
			return getRuleContext(SelectQueryCacheContext.class,0);
		}
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySQLSQLStatementParser.SQL_CALC_FOUND_ROWS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public ISelectQueryIntoClauseContext iSelectQueryIntoClause() {
			return getRuleContext(ISelectQueryIntoClauseContext.class,0);
		}
		public ILockClauseContext iLockClause() {
			return getRuleContext(ILockClauseContext.class,0);
		}
		public SelectIntoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectIntoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoStatementContext selectIntoStatement() throws RecognitionException {
		SelectIntoStatementContext _localctx = new SelectIntoStatementContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_selectIntoStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3339);
			match(SELECT);
			setState(3341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3340);
				setQuantifier();
				}
				break;
			}
			setState(3344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HIGH_PRIORITY) {
				{
				setState(3343);
				match(HIGH_PRIORITY);
				}
			}

			setState(3347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRAIGHT_JOIN) {
				{
				setState(3346);
				match(STRAIGHT_JOIN);
				}
			}

			setState(3350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SMALL_RESULT) {
				{
				setState(3349);
				match(SQL_SMALL_RESULT);
				}
			}

			setState(3353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_BIG_RESULT) {
				{
				setState(3352);
				match(SQL_BIG_RESULT);
				}
			}

			setState(3356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3355);
				match(SQL_BUFFER_RESULT);
				}
				break;
			}
			setState(3359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				setState(3358);
				selectQueryCache();
				}
				break;
			}
			setState(3362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_CALC_FOUND_ROWS) {
				{
				setState(3361);
				match(SQL_CALC_FOUND_ROWS);
				}
			}

			setState(3364);
			selectItem();
			setState(3369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3365);
				match(COMMA);
				setState(3366);
				selectItem();
				}
				}
				setState(3371);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3372);
			match(INTO);
			setState(3373);
			selectTargetItem();
			setState(3378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3374);
				match(COMMA);
				setState(3375);
				selectTargetItem();
				}
				}
				setState(3380);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3381);
				fromClause();
				}
			}

			setState(3385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3384);
				whereClause();
				}
			}

			setState(3388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(3387);
				groupByClause();
				}
				break;
			}
			setState(3391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3390);
				orderByClause();
				}
			}

			setState(3394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3393);
				limitOffsetClause();
				}
			}

			setState(3397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3396);
				iSelectQueryIntoClause();
				}
			}

			setState(3400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3399);
				iLockClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectTargetItemContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectTargetItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectTargetItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectTargetItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectTargetItemContext selectTargetItem() throws RecognitionException {
		SelectTargetItemContext _localctx = new SelectTargetItemContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_selectTargetItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3402);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public TerminalNode INSERT() { return getToken(MySQLSQLStatementParser.INSERT, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public IValueClauseContext iValueClause() {
			return getRuleContext(IValueClauseContext.class,0);
		}
		public PriorityContext priority() {
			return getRuleContext(PriorityContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public OnDuplicateKeyUpdateClauseContext onDuplicateKeyUpdateClause() {
			return getRuleContext(OnDuplicateKeyUpdateClauseContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3404);
			match(INSERT);
			setState(3406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				setState(3405);
				priority();
				}
				break;
			}
			setState(3409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3408);
				match(IGNORE);
				}
			}

			setState(3412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3411);
				match(INTO);
				}
			}

			setState(3414);
			iTableReference();
			setState(3426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3415);
				match(LEFT_PAREN);
				setState(3416);
				((InsertStatementContext)_localctx).expr = expr(0);
				((InsertStatementContext)_localctx).columns.add(((InsertStatementContext)_localctx).expr);
				setState(3421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3417);
					match(COMMA);
					setState(3418);
					((InsertStatementContext)_localctx).expr = expr(0);
					((InsertStatementContext)_localctx).columns.add(((InsertStatementContext)_localctx).expr);
					}
					}
					setState(3423);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3424);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3428);
			iValueClause();
			setState(3430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3429);
				onDuplicateKeyUpdateClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IValueClauseContext extends ParserRuleContext {
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public IValueClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iValueClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIValueClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IValueClauseContext iValueClause() throws RecognitionException {
		IValueClauseContext _localctx = new IValueClauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_iValueClause);
		try {
			setState(3435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3432);
				valuesClause();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3433);
				updateSetClause();
				}
				break;
			case SELECT:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3434);
				iSelectQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public List<ValuesClauseItemContext> valuesClauseItem() {
			return getRuleContexts(ValuesClauseItemContext.class);
		}
		public ValuesClauseItemContext valuesClauseItem(int i) {
			return getRuleContext(ValuesClauseItemContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(MySQLSQLStatementParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySQLSQLStatementParser.VALUE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_valuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3437);
			_la = _input.LA(1);
			if ( !(_la==VALUES || _la==VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3438);
			valuesClauseItem();
			setState(3443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3439);
				match(COMMA);
				setState(3440);
				valuesClauseItem();
				}
				}
				setState(3445);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseItemContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ValuesClauseItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClauseItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitValuesClauseItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseItemContext valuesClauseItem() throws RecognitionException {
		ValuesClauseItemContext _localctx = new ValuesClauseItemContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_valuesClauseItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3446);
			match(LEFT_PAREN);
			setState(3447);
			expr(0);
			setState(3452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3448);
				match(COMMA);
				setState(3449);
				expr(0);
				}
				}
				setState(3454);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3455);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnDuplicateKeyUpdateClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySQLSQLStatementParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLSQLStatementParser.UPDATE, 0); }
		public List<AssignmentExprContext> assignmentExpr() {
			return getRuleContexts(AssignmentExprContext.class);
		}
		public AssignmentExprContext assignmentExpr(int i) {
			return getRuleContext(AssignmentExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public OnDuplicateKeyUpdateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onDuplicateKeyUpdateClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOnDuplicateKeyUpdateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnDuplicateKeyUpdateClauseContext onDuplicateKeyUpdateClause() throws RecognitionException {
		OnDuplicateKeyUpdateClauseContext _localctx = new OnDuplicateKeyUpdateClauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_onDuplicateKeyUpdateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3457);
			match(ON);
			setState(3458);
			match(DUPLICATE);
			setState(3459);
			match(KEY);
			setState(3460);
			match(UPDATE);
			setState(3461);
			assignmentExpr();
			setState(3466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3462);
				match(COMMA);
				setState(3463);
				assignmentExpr();
				}
				}
				setState(3468);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(MySQLSQLStatementParser.UPDATE, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLSQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_updateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3469);
			match(UPDATE);
			setState(3471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3470);
				match(LOW_PRIORITY);
				}
			}

			setState(3474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3473);
				match(IGNORE);
				}
			}

			setState(3476);
			iTableReference();
			setState(3478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3477);
				updateSetClause();
				}
				break;
			}
			setState(3481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3480);
				whereClause();
				}
			}

			setState(3484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3483);
				orderByClause();
				}
			}

			setState(3487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3486);
				limitOffsetClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateSetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public List<UpdateSetItemClauseContext> updateSetItemClause() {
			return getRuleContexts(UpdateSetItemClauseContext.class);
		}
		public UpdateSetItemClauseContext updateSetItemClause(int i) {
			return getRuleContext(UpdateSetItemClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public UpdateSetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateSetClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUpdateSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateSetClauseContext updateSetClause() throws RecognitionException {
		UpdateSetClauseContext _localctx = new UpdateSetClauseContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_updateSetClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3489);
			match(SET);
			setState(3490);
			updateSetItemClause();
			setState(3495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3491);
				match(COMMA);
				setState(3492);
				updateSetItemClause();
				}
				}
				setState(3497);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateSetItemClauseContext extends ParserRuleContext {
		public ExprContext column;
		public ExprContext value;
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public UpdateSetItemClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateSetItemClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUpdateSetItemClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateSetItemClauseContext updateSetItemClause() throws RecognitionException {
		UpdateSetItemClauseContext _localctx = new UpdateSetItemClauseContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_updateSetItemClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3498);
			((UpdateSetItemClauseContext)_localctx).column = expr(0);
			setState(3499);
			match(EQUALS_OP);
			setState(3500);
			((UpdateSetItemClauseContext)_localctx).value = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(MySQLSQLStatementParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLSQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode QUICK() { return getToken(MySQLSQLStatementParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public DeleteStatementUsingClauseContext deleteStatementUsingClause() {
			return getRuleContext(DeleteStatementUsingClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_deleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3502);
			match(DELETE);
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(3503);
				match(LOW_PRIORITY);
				}
			}

			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(3506);
				match(QUICK);
				}
			}

			setState(3510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3509);
				match(IGNORE);
				}
			}

			setState(3512);
			match(FROM);
			setState(3513);
			iTableReference();
			setState(3515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3514);
				deleteStatementUsingClause();
				}
			}

			setState(3518);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3517);
				whereClause();
				}
			}

			setState(3521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3520);
				orderByClause();
				}
			}

			setState(3524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3523);
				limitOffsetClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementUsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public DeleteStatementUsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatementUsingClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDeleteStatementUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementUsingClauseContext deleteStatementUsingClause() throws RecognitionException {
		DeleteStatementUsingClauseContext _localctx = new DeleteStatementUsingClauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_deleteStatementUsingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3526);
			match(USING);
			setState(3527);
			iTableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public TerminalNode REPLACE() { return getToken(MySQLSQLStatementParser.REPLACE, 0); }
		public ITableReferenceContext iTableReference() {
			return getRuleContext(ITableReferenceContext.class,0);
		}
		public ReplaceStatementValuseClauseContext replaceStatementValuseClause() {
			return getRuleContext(ReplaceStatementValuseClauseContext.class,0);
		}
		public PriorityContext priority() {
			return getRuleContext(PriorityContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3529);
			match(REPLACE);
			setState(3531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3530);
				priority();
				}
				break;
			}
			setState(3534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(3533);
				match(INTO);
				}
			}

			setState(3536);
			iTableReference();
			setState(3548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				setState(3537);
				match(LEFT_PAREN);
				setState(3538);
				((ReplaceStatementContext)_localctx).expr = expr(0);
				((ReplaceStatementContext)_localctx).columns.add(((ReplaceStatementContext)_localctx).expr);
				setState(3543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3539);
					match(COMMA);
					setState(3540);
					((ReplaceStatementContext)_localctx).expr = expr(0);
					((ReplaceStatementContext)_localctx).columns.add(((ReplaceStatementContext)_localctx).expr);
					}
					}
					setState(3545);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3546);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3550);
			replaceStatementValuseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementValuseClauseContext extends ParserRuleContext {
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public ReplaceStatementValuseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatementValuseClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitReplaceStatementValuseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementValuseClauseContext replaceStatementValuseClause() throws RecognitionException {
		ReplaceStatementValuseClauseContext _localctx = new ReplaceStatementValuseClauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_replaceStatementValuseClause);
		try {
			setState(3555);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3552);
				valuesClause();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3553);
				updateSetClause();
				}
				break;
			case SELECT:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3554);
				iSelectQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySQLSQLStatementParser.CALL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			match(CALL);
			setState(3558);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataInfileStatementContext extends ParserRuleContext {
		public ExprContext fileName;
		public Token violation;
		public ExprContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySQLSQLStatementParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySQLSQLStatementParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySQLSQLStatementParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public PriorityContext priority() {
			return getRuleContext(PriorityContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySQLSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public List<TerminalNode> LINES() { return getTokens(MySQLSQLStatementParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySQLSQLStatementParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySQLSQLStatementParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySQLSQLStatementParser.IGNORE, i);
		}
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(MySQLSQLStatementParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(MySQLSQLStatementParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySQLSQLStatementParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySQLSQLStatementParser.ROWS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public LoadDataInfileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataInfileStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLoadDataInfileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataInfileStatementContext loadDataInfileStatement() throws RecognitionException {
		LoadDataInfileStatementContext _localctx = new LoadDataInfileStatementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_loadDataInfileStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3560);
			match(LOAD);
			setState(3561);
			match(DATA);
			setState(3563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0) || _la==CONCURRENT) {
				{
				setState(3562);
				priority();
				}
			}

			setState(3566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3565);
				match(LOCAL);
				}
			}

			setState(3568);
			match(INFILE);
			setState(3569);
			((LoadDataInfileStatementContext)_localctx).fileName = expr(0);
			setState(3571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3570);
				((LoadDataInfileStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataInfileStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3573);
			match(INTO);
			setState(3574);
			match(TABLE);
			setState(3575);
			nameIdentifier();
			setState(3588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3576);
				match(PARTITION);
				setState(3577);
				match(LEFT_PAREN);
				setState(3578);
				expr(0);
				setState(3583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3579);
					match(COMMA);
					setState(3580);
					expr(0);
					}
					}
					setState(3585);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3586);
				match(RIGHT_PAREN);
				}
			}

			setState(3593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3590);
				match(CHARACTER);
				setState(3591);
				match(SET);
				setState(3592);
				((LoadDataInfileStatementContext)_localctx).charset = expr(0);
				}
			}

			setState(3601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3595);
				((LoadDataInfileStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataInfileStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3597); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3596);
					selectFieldsInto();
					}
					}
					setState(3599); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
				break;
			}
			setState(3609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(3603);
				match(LINES);
				setState(3605); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3604);
					selectLinesInto();
					}
					}
					setState(3607); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(3615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3611);
				match(IGNORE);
				setState(3612);
				expr(0);
				setState(3613);
				((LoadDataInfileStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataInfileStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				setState(3617);
				match(LEFT_PAREN);
				setState(3618);
				expr(0);
				setState(3623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3619);
					match(COMMA);
					setState(3620);
					expr(0);
					}
					}
					setState(3625);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3626);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				setState(3630);
				updateSetClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public ExprContext filename;
		public Token violation;
		public ExprContext charset;
		public ExprContext tag;
		public Token linesFormat;
		public ExprContext expr;
		public List<ExprContext> columns = new ArrayList<ExprContext>();
		public TerminalNode LOAD() { return getToken(MySQLSQLStatementParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySQLSQLStatementParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySQLSQLStatementParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public PriorityContext priority() {
			return getRuleContext(PriorityContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySQLSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public List<TerminalNode> ROWS() { return getTokens(MySQLSQLStatementParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySQLSQLStatementParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySQLSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySQLSQLStatementParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySQLSQLStatementParser.IGNORE, i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public UpdateSetClauseContext updateSetClause() {
			return getRuleContext(UpdateSetClauseContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(MySQLSQLStatementParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySQLSQLStatementParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3633);
			match(LOAD);
			setState(3634);
			match(XML);
			setState(3636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0) || _la==CONCURRENT) {
				{
				setState(3635);
				priority();
				}
			}

			setState(3639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(3638);
				match(LOCAL);
				}
			}

			setState(3641);
			match(INFILE);
			setState(3642);
			((LoadXmlStatementContext)_localctx).filename = expr(0);
			setState(3644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(3643);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3646);
			match(INTO);
			setState(3647);
			match(TABLE);
			setState(3648);
			nameIdentifier();
			setState(3652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(3649);
				match(CHARACTER);
				setState(3650);
				match(SET);
				setState(3651);
				((LoadXmlStatementContext)_localctx).charset = expr(0);
				}
			}

			setState(3661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3654);
				match(ROWS);
				setState(3655);
				match(IDENTIFIED);
				setState(3656);
				match(BY);
				setState(3657);
				match(LESS_THAN_OP);
				setState(3658);
				((LoadXmlStatementContext)_localctx).tag = expr(0);
				setState(3659);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(3667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(3663);
				match(IGNORE);
				setState(3664);
				expr(0);
				setState(3665);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3669);
				match(LEFT_PAREN);
				setState(3670);
				((LoadXmlStatementContext)_localctx).expr = expr(0);
				((LoadXmlStatementContext)_localctx).columns.add(((LoadXmlStatementContext)_localctx).expr);
				setState(3675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3671);
					match(COMMA);
					setState(3672);
					((LoadXmlStatementContext)_localctx).expr = expr(0);
					((LoadXmlStatementContext)_localctx).columns.add(((LoadXmlStatementContext)_localctx).expr);
					}
					}
					setState(3677);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3678);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3683);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				setState(3682);
				updateSetClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySQLSQLStatementParser.DO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_doStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3685);
			match(DO);
			setState(3686);
			expr(0);
			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3687);
				match(COMMA);
				setState(3688);
				expr(0);
				}
				}
				setState(3693);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_handlerStatement);
		try {
			setState(3697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3694);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3695);
				handlerReadStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3696);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext alias;
		public TerminalNode HANDLER() { return getToken(MySQLSQLStatementParser.HANDLER, 0); }
		public TerminalNode OPEN() { return getToken(MySQLSQLStatementParser.OPEN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3699);
			match(HANDLER);
			setState(3700);
			((HandlerOpenStatementContext)_localctx).name = nameIdentifier();
			setState(3701);
			match(OPEN);
			setState(3706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				{
				setState(3703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3702);
					match(AS);
					}
				}

				setState(3705);
				((HandlerOpenStatementContext)_localctx).alias = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext index;
		public ExprContext expr;
		public List<ExprContext> values = new ArrayList<ExprContext>();
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySQLSQLStatementParser.HANDLER, 0); }
		public TerminalNode READ() { return getToken(MySQLSQLStatementParser.READ, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public ComparisonOpContext comparisonOp() {
			return getRuleContext(ComparisonOpContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitOffsetClauseContext limitOffsetClause() {
			return getRuleContext(LimitOffsetClauseContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FIRST() { return getToken(MySQLSQLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySQLSQLStatementParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySQLSQLStatementParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySQLSQLStatementParser.LAST, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3708);
			match(HANDLER);
			setState(3709);
			((HandlerReadStatementContext)_localctx).name = nameIdentifier();
			setState(3710);
			match(READ);
			setState(3712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(3711);
				((HandlerReadStatementContext)_localctx).index = nameIdentifier();
				}
				break;
			}
			setState(3726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(3714);
				comparisonOp();
				setState(3715);
				match(LEFT_PAREN);
				setState(3716);
				((HandlerReadStatementContext)_localctx).expr = expr(0);
				((HandlerReadStatementContext)_localctx).values.add(((HandlerReadStatementContext)_localctx).expr);
				setState(3721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3717);
					match(COMMA);
					setState(3718);
					((HandlerReadStatementContext)_localctx).expr = expr(0);
					((HandlerReadStatementContext)_localctx).values.add(((HandlerReadStatementContext)_localctx).expr);
					}
					}
					setState(3723);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3724);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(3728);
				((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3731);
				whereClause();
				}
			}

			setState(3735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3734);
				limitOffsetClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySQLSQLStatementParser.HANDLER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySQLSQLStatementParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3737);
			match(HANDLER);
			setState(3738);
			nameIdentifier();
			setState(3739);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public ExprContext terminationField;
		public ExprContext enclosion;
		public ExprContext escaping;
		public TerminalNode TERMINATED() { return getToken(MySQLSQLStatementParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ENCLOSED() { return getToken(MySQLSQLStatementParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySQLSQLStatementParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySQLSQLStatementParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_selectFieldsInto);
		int _la;
		try {
			setState(3753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3741);
				match(TERMINATED);
				setState(3742);
				match(BY);
				setState(3743);
				((SelectFieldsIntoContext)_localctx).terminationField = expr(0);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3744);
					match(OPTIONALLY);
					}
				}

				setState(3747);
				match(ENCLOSED);
				setState(3748);
				match(BY);
				setState(3749);
				((SelectFieldsIntoContext)_localctx).enclosion = expr(0);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3750);
				match(ESCAPED);
				setState(3751);
				match(BY);
				setState(3752);
				((SelectFieldsIntoContext)_localctx).escaping = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public ExprContext starting;
		public ExprContext terminationLine;
		public TerminalNode STARTING() { return getToken(MySQLSQLStatementParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode TERMINATED() { return getToken(MySQLSQLStatementParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_selectLinesInto);
		try {
			setState(3761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3755);
				match(STARTING);
				setState(3756);
				match(BY);
				setState(3757);
				((SelectLinesIntoContext)_localctx).starting = expr(0);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3758);
				match(TERMINATED);
				setState(3759);
				match(BY);
				setState(3760);
				((SelectLinesIntoContext)_localctx).terminationLine = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySQLSQLStatementParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySQLSQLStatementParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartTransactionContext startTransaction() throws RecognitionException {
		StartTransactionContext _localctx = new StartTransactionContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_startTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763);
			match(START);
			setState(3764);
			match(TRANSACTION);
			setState(3773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ || _la==WITH) {
				{
				setState(3765);
				transactionMode();
				setState(3770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3766);
					match(COMMA);
					setState(3767);
					transactionMode();
					}
					}
					setState(3772);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySQLSQLStatementParser.CONSISTENT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySQLSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode READ() { return getToken(MySQLSQLStatementParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySQLSQLStatementParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySQLSQLStatementParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_transactionMode);
		try {
			setState(3782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3775);
				match(WITH);
				setState(3776);
				match(CONSISTENT);
				setState(3777);
				match(SNAPSHOT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3778);
				match(READ);
				setState(3779);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3780);
				match(READ);
				setState(3781);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(MySQLSQLStatementParser.BEGIN, 0); }
		public TerminalNode WORK() { return getToken(MySQLSQLStatementParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_beginWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3784);
			match(BEGIN);
			setState(3786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(3785);
				match(WORK);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommitWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode COMMIT() { return getToken(MySQLSQLStatementParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(MySQLSQLStatementParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySQLSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySQLSQLStatementParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySQLSQLStatementParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySQLSQLStatementParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySQLSQLStatementParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitWorkContext commitWork() throws RecognitionException {
		CommitWorkContext _localctx = new CommitWorkContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_commitWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3788);
			match(COMMIT);
			setState(3790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(3789);
				match(WORK);
				}
				break;
			}
			setState(3797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3792);
				match(AND);
				setState(3794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3793);
					((CommitWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3796);
				match(CHAIN);
				}
			}

			setState(3803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(3800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3799);
					((CommitWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3802);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackWorkContext extends ParserRuleContext {
		public Token nochain;
		public Token norelease;
		public TerminalNode ROLLBACK() { return getToken(MySQLSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(MySQLSQLStatementParser.WORK, 0); }
		public TerminalNode AND() { return getToken(MySQLSQLStatementParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(MySQLSQLStatementParser.CHAIN, 0); }
		public TerminalNode RELEASE() { return getToken(MySQLSQLStatementParser.RELEASE, 0); }
		public List<TerminalNode> NO() { return getTokens(MySQLSQLStatementParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(MySQLSQLStatementParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackWorkContext rollbackWork() throws RecognitionException {
		RollbackWorkContext _localctx = new RollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_rollbackWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3805);
			match(ROLLBACK);
			setState(3807);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				setState(3806);
				match(WORK);
				}
				break;
			}
			setState(3814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AND) {
				{
				setState(3809);
				match(AND);
				setState(3811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3810);
					((RollbackWorkContext)_localctx).nochain = match(NO);
					}
				}

				setState(3813);
				match(CHAIN);
				}
			}

			setState(3820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(3817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3816);
					((RollbackWorkContext)_localctx).norelease = match(NO);
					}
				}

				setState(3819);
				match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(MySQLSQLStatementParser.SAVEPOINT, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_savepointStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3822);
			match(SAVEPOINT);
			setState(3823);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollbackStatementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(MySQLSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode WORK() { return getToken(MySQLSQLStatementParser.WORK, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySQLSQLStatementParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRollbackStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackStatementContext rollbackStatement() throws RecognitionException {
		RollbackStatementContext _localctx = new RollbackStatementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_rollbackStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3825);
			match(ROLLBACK);
			setState(3827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(3826);
				match(WORK);
				}
			}

			setState(3829);
			match(TO);
			setState(3831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(3830);
				match(SAVEPOINT);
				}
				break;
			}
			setState(3833);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReleaseStatementContext extends ParserRuleContext {
		public TerminalNode RELEASE() { return getToken(MySQLSQLStatementParser.RELEASE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySQLSQLStatementParser.SAVEPOINT, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_releaseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitReleaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReleaseStatementContext releaseStatement() throws RecognitionException {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_releaseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3835);
			match(RELEASE);
			setState(3836);
			match(SAVEPOINT);
			setState(3837);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTablesStatementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(MySQLSQLStatementParser.LOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySQLSQLStatementParser.TABLES, 0); }
		public List<LockTableItemContext> lockTableItem() {
			return getRuleContexts(LockTableItemContext.class);
		}
		public LockTableItemContext lockTableItem(int i) {
			return getRuleContext(LockTableItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public LockTablesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTablesStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLockTablesStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTablesStatementContext lockTablesStatement() throws RecognitionException {
		LockTablesStatementContext _localctx = new LockTablesStatementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_lockTablesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3839);
			match(LOCK);
			setState(3840);
			match(TABLES);
			setState(3841);
			lockTableItem();
			setState(3846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3842);
				match(COMMA);
				setState(3843);
				lockTableItem();
				}
				}
				setState(3848);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableItemContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext alias;
		public LockActionContext lockAction() {
			return getRuleContext(LockActionContext.class,0);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public LockTableItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTableItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLockTableItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableItemContext lockTableItem() throws RecognitionException {
		LockTableItemContext _localctx = new LockTableItemContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_lockTableItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3849);
			((LockTableItemContext)_localctx).name = nameIdentifier();
			setState(3854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
				{
				setState(3851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3850);
					match(AS);
					}
				}

				setState(3853);
				((LockTableItemContext)_localctx).alias = nameIdentifier();
				}
			}

			setState(3856);
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockActionContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(MySQLSQLStatementParser.READ, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public TerminalNode WRITE() { return getToken(MySQLSQLStatementParser.WRITE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLSQLStatementParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLockAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockActionContext lockAction() throws RecognitionException {
		LockActionContext _localctx = new LockActionContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_lockAction);
		int _la;
		try {
			setState(3866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(3858);
				match(READ);
				setState(3860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(3859);
					match(LOCAL);
					}
					break;
				}
				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					setState(3862);
					match(LOW_PRIORITY);
					}
				}

				setState(3865);
				match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlockTablesStatementContext extends ParserRuleContext {
		public TerminalNode UNLOCK() { return getToken(MySQLSQLStatementParser.UNLOCK, 0); }
		public TerminalNode TABLES() { return getToken(MySQLSQLStatementParser.TABLES, 0); }
		public UnlockTablesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlockTablesStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUnlockTablesStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlockTablesStatementContext unlockTablesStatement() throws RecognitionException {
		UnlockTablesStatementContext _localctx = new UnlockTablesStatementContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_unlockTablesStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			match(UNLOCK);
			setState(3869);
			match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAutoCommitStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySQLSQLStatementParser.AUTOCOMMIT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetAutoCommitStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAutoCommitStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetAutoCommitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAutoCommitStatementContext setAutoCommitStatement() throws RecognitionException {
		SetAutoCommitStatementContext _localctx = new SetAutoCommitStatementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_setAutoCommitStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3871);
			match(SET);
			setState(3872);
			match(AUTOCOMMIT);
			setState(3873);
			match(EQUALS_OP);
			setState(3874);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOptionContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(MySQLSQLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(MySQLSQLStatementParser.LEVEL, 0); }
		public TransactionLevelContext transactionLevel() {
			return getRuleContext(TransactionLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySQLSQLStatementParser.READ, 0); }
		public TerminalNode WRITE() { return getToken(MySQLSQLStatementParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(MySQLSQLStatementParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTransactionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOptionContext transactionOption() throws RecognitionException {
		TransactionOptionContext _localctx = new TransactionOptionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_transactionOption);
		try {
			setState(3883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3876);
				match(ISOLATION);
				setState(3877);
				match(LEVEL);
				setState(3878);
				transactionLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3879);
				match(READ);
				setState(3880);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3881);
				match(READ);
				setState(3882);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySQLSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(MySQLSQLStatementParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(MySQLSQLStatementParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySQLSQLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySQLSQLStatementParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevel; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTransactionLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelContext transactionLevel() throws RecognitionException {
		TransactionLevelContext _localctx = new TransactionLevelContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_transactionLevel);
		try {
			setState(3892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3885);
				match(REPEATABLE);
				setState(3886);
				match(READ);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3887);
				match(READ);
				setState(3888);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3889);
				match(READ);
				setState(3890);
				match(UNCOMMITTED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3891);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySQLSQLStatementParser.CHANGE, 0); }
		public TerminalNode MASTER() { return getToken(MySQLSQLStatementParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_changeMaster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3894);
			match(CHANGE);
			setState(3895);
			match(MASTER);
			setState(3896);
			match(TO);
			setState(3897);
			masterOption();
			setState(3902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3898);
				match(COMMA);
				setState(3899);
				masterOption();
				}
				}
				setState(3904);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3905);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationFilterContext extends ParserRuleContext {
		public TerminalNode CHANGE() { return getToken(MySQLSQLStatementParser.CHANGE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySQLSQLStatementParser.REPLICATION, 0); }
		public TerminalNode FILTER() { return getToken(MySQLSQLStatementParser.FILTER, 0); }
		public List<ReplicationFilterContext> replicationFilter() {
			return getRuleContexts(ReplicationFilterContext.class);
		}
		public ReplicationFilterContext replicationFilter(int i) {
			return getRuleContext(ReplicationFilterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplicationFilter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitChangeReplicationFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationFilterContext changeReplicationFilter() throws RecognitionException {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_changeReplicationFilter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3908);
			match(CHANGE);
			setState(3909);
			match(REPLICATION);
			setState(3910);
			match(FILTER);
			setState(3911);
			replicationFilter();
			setState(3916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3912);
				match(COMMA);
				setState(3913);
				replicationFilter();
				}
				}
				setState(3918);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PurgeBinaryLogsContext extends ParserRuleContext {
		public Token purgeFormat;
		public ExprContext fileName;
		public ExprContext timeValue;
		public TerminalNode PURGE() { return getToken(MySQLSQLStatementParser.PURGE, 0); }
		public TerminalNode LOGS() { return getToken(MySQLSQLStatementParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySQLSQLStatementParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySQLSQLStatementParser.MASTER, 0); }
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public TerminalNode BEFORE() { return getToken(MySQLSQLStatementParser.BEFORE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_purgeBinaryLogs; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPurgeBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PurgeBinaryLogsContext purgeBinaryLogs() throws RecognitionException {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_purgeBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3919);
			match(PURGE);
			setState(3920);
			((PurgeBinaryLogsContext)_localctx).purgeFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				((PurgeBinaryLogsContext)_localctx).purgeFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3921);
			match(LOGS);
			setState(3926);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(3922);
				match(TO);
				setState(3923);
				((PurgeBinaryLogsContext)_localctx).fileName = expr(0);
				}
				break;
			case BEFORE:
				{
				setState(3924);
				match(BEFORE);
				setState(3925);
				((PurgeBinaryLogsContext)_localctx).timeValue = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetMasterContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySQLSQLStatementParser.RESET, 0); }
		public TerminalNode MASTER() { return getToken(MySQLSQLStatementParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetMaster; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitResetMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetMasterContext resetMaster() throws RecognitionException {
		ResetMasterContext _localctx = new ResetMasterContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_resetMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3928);
			match(RESET);
			setState(3929);
			match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetSlaveContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySQLSQLStatementParser.RESET, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLSQLStatementParser.SLAVE, 0); }
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitResetSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetSlaveContext resetSlave() throws RecognitionException {
		ResetSlaveContext _localctx = new ResetSlaveContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_resetSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3931);
			match(RESET);
			setState(3932);
			match(SLAVE);
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(3933);
				match(ALL);
				}
				break;
			}
			setState(3937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3936);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartSlaveContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySQLSQLStatementParser.START, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLSQLStatementParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public TerminalNode UNTIL() { return getToken(MySQLSQLStatementParser.UNTIL, 0); }
		public UntilOptionContext untilOption() {
			return getRuleContext(UntilOptionContext.class,0);
		}
		public List<ConnectionOptionContext> connectionOption() {
			return getRuleContexts(ConnectionOptionContext.class);
		}
		public ConnectionOptionContext connectionOption(int i) {
			return getRuleContext(ConnectionOptionContext.class,i);
		}
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStartSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartSlaveContext startSlave() throws RecognitionException {
		StartSlaveContext _localctx = new StartSlaveContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_startSlave);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3939);
			match(START);
			setState(3940);
			match(SLAVE);
			setState(3949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(3941);
				threadType();
				setState(3946);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3942);
					match(COMMA);
					setState(3943);
					threadType();
					}
					}
					setState(3948);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3951);
				match(UNTIL);
				setState(3952);
				untilOption();
				}
			}

			setState(3958);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,507,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3955);
					connectionOption();
					}
					} 
				}
				setState(3960);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,507,_ctx);
			}
			setState(3962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3961);
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopSlaveContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySQLSQLStatementParser.STOP, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLSQLStatementParser.SLAVE, 0); }
		public List<ThreadTypeContext> threadType() {
			return getRuleContexts(ThreadTypeContext.class);
		}
		public ThreadTypeContext threadType(int i) {
			return getRuleContext(ThreadTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopSlave; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStopSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopSlaveContext stopSlave() throws RecognitionException {
		StopSlaveContext _localctx = new StopSlaveContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_stopSlave);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3964);
			match(STOP);
			setState(3965);
			match(SLAVE);
			setState(3974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				setState(3966);
				threadType();
				setState(3971);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3967);
					match(COMMA);
					setState(3968);
					threadType();
					}
					}
					setState(3973);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartGroupReplicationContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(MySQLSQLStatementParser.START, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySQLSQLStatementParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startGroupReplication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStartGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartGroupReplicationContext startGroupReplication() throws RecognitionException {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_startGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			match(START);
			setState(3977);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StopGroupReplicationContext extends ParserRuleContext {
		public TerminalNode STOP() { return getToken(MySQLSQLStatementParser.STOP, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySQLSQLStatementParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stopGroupReplication; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStopGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StopGroupReplicationContext stopGroupReplication() throws RecognitionException {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_stopGroupReplication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3979);
			match(STOP);
			setState(3980);
			match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
	 
		public MasterOptionContext() { }
		public void copyFrom(MasterOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class MasterStringOptionContext extends MasterOptionContext {
		public StringMasterOptionContext stringMasterOption() {
			return getRuleContext(StringMasterOptionContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MasterStringOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMasterStringOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterRealOptionContext extends MasterOptionContext {
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySQLSQLStatementParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MasterRealOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMasterRealOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterBoolOptionContext extends MasterOptionContext {
		public BoolMasterOptionContext boolMasterOption() {
			return getRuleContext(BoolMasterOptionContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MasterBoolOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMasterBoolOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterDecimalOptionContext extends MasterOptionContext {
		public DecimalMasterOptionContext decimalMasterOption() {
			return getRuleContext(DecimalMasterOptionContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public MasterDecimalOptionContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMasterDecimalOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterContext extends MasterOptionContext {
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySQLSQLStatementParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public MasterContext(MasterOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_masterOption);
		int _la;
		try {
			setState(4011);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3982);
				stringMasterOption();
				setState(3983);
				match(EQUALS_OP);
				setState(3984);
				expr(0);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3986);
				decimalMasterOption();
				setState(3987);
				match(EQUALS_OP);
				setState(3988);
				expr(0);
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3990);
				boolMasterOption();
				setState(3991);
				match(EQUALS_OP);
				setState(3992);
				expr(0);
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(3994);
				match(MASTER_HEARTBEAT_PERIOD);
				setState(3995);
				match(EQUALS_OP);
				setState(3996);
				expr(0);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(3997);
				match(IGNORE_SERVER_IDS);
				setState(3998);
				match(EQUALS_OP);
				setState(3999);
				match(LEFT_PAREN);
				setState(4008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
					{
					setState(4000);
					nameIdentifier();
					setState(4005);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4001);
						match(COMMA);
						setState(4002);
						nameIdentifier();
						}
						}
						setState(4007);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4010);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_BIND() { return getToken(MySQLSQLStatementParser.MASTER_BIND, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySQLSQLStatementParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySQLSQLStatementParser.MASTER_USER, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySQLSQLStatementParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySQLSQLStatementParser.MASTER_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySQLSQLStatementParser.RELAY_LOG_FILE, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySQLSQLStatementParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySQLSQLStatementParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStringMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringMasterOptionContext stringMasterOption() throws RecognitionException {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_stringMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4013);
			_la = _input.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (MASTER_HOST - 375)) | (1L << (MASTER_LOG_FILE - 375)) | (1L << (MASTER_PASSWORD - 375)) | (1L << (MASTER_SSL_CA - 375)) | (1L << (MASTER_SSL_CAPATH - 375)) | (1L << (MASTER_SSL_CERT - 375)) | (1L << (MASTER_SSL_CIPHER - 375)) | (1L << (MASTER_SSL_CRL - 375)) | (1L << (MASTER_SSL_CRLPATH - 375)) | (1L << (MASTER_SSL_KEY - 375)) | (1L << (MASTER_TLS_VERSION - 375)) | (1L << (MASTER_USER - 375)))) != 0) || _la==RELAY_LOG_FILE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_PORT() { return getToken(MySQLSQLStatementParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySQLSQLStatementParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySQLSQLStatementParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySQLSQLStatementParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySQLSQLStatementParser.MASTER_LOG_POS, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySQLSQLStatementParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDecimalMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalMasterOptionContext decimalMasterOption() throws RecognitionException {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_decimalMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4015);
			_la = _input.LA(1);
			if ( !(((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & ((1L << (MASTER_CONNECT_RETRY - 372)) | (1L << (MASTER_DELAY - 372)) | (1L << (MASTER_LOG_POS - 372)) | (1L << (MASTER_PORT - 372)) | (1L << (MASTER_RETRY_COUNT - 372)))) != 0) || _la==RELAY_LOG_POS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolMasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySQLSQLStatementParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySQLSQLStatementParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return getToken(MySQLSQLStatementParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolMasterOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBoolMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolMasterOptionContext boolMasterOption() throws RecognitionException {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_boolMasterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			_la = _input.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLSQLStatementParser.CHANNEL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ChannelOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitChannelOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelOptionContext channelOption() throws RecognitionException {
		ChannelOptionContext _localctx = new ChannelOptionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_channelOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4019);
			match(FOR);
			setState(4020);
			match(CHANNEL);
			setState(4021);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationFilterContext extends ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationFilter; }
	 
		public ReplicationFilterContext() { }
		public void copyFrom(ReplicationFilterContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class WildIgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySQLSQLStatementParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWildIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySQLSQLStatementParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public DoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySQLSQLStatementParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public IgnoreTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIgnoreTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RewriteDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySQLSQLStatementParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<TablePairContext> tablePair() {
			return getRuleContexts(TablePairContext.class);
		}
		public TablePairContext tablePair(int i) {
			return getRuleContext(TablePairContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRewriteDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySQLSQLStatementParser.REPLICATE_DO_DB, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public DoDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDoDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IgnoreDbReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySQLSQLStatementParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public IgnoreDbReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIgnoreDbReplication(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WildDoTableReplicationContext extends ReplicationFilterContext {
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySQLSQLStatementParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public SimpleStringsContext simpleStrings() {
			return getRuleContext(SimpleStringsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWildDoTableReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationFilterContext replicationFilter() throws RecognitionException {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_replicationFilter);
		int _la;
		try {
			setState(4100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4023);
				match(REPLICATE_DO_DB);
				setState(4024);
				match(EQUALS_OP);
				setState(4025);
				match(LEFT_PAREN);
				setState(4026);
				expr(0);
				setState(4031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4027);
					match(COMMA);
					setState(4028);
					expr(0);
					}
					}
					setState(4033);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4034);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4036);
				match(REPLICATE_IGNORE_DB);
				setState(4037);
				match(EQUALS_OP);
				setState(4038);
				match(LEFT_PAREN);
				setState(4039);
				expr(0);
				setState(4044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4040);
					match(COMMA);
					setState(4041);
					expr(0);
					}
					}
					setState(4046);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4047);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4049);
				match(REPLICATE_DO_TABLE);
				setState(4050);
				match(EQUALS_OP);
				setState(4051);
				match(LEFT_PAREN);
				setState(4052);
				expr(0);
				setState(4057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4053);
					match(COMMA);
					setState(4054);
					expr(0);
					}
					}
					setState(4059);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4060);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4062);
				match(REPLICATE_IGNORE_TABLE);
				setState(4063);
				match(EQUALS_OP);
				setState(4064);
				match(LEFT_PAREN);
				setState(4065);
				expr(0);
				setState(4070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4066);
					match(COMMA);
					setState(4067);
					expr(0);
					}
					}
					setState(4072);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4073);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4075);
				match(REPLICATE_WILD_DO_TABLE);
				setState(4076);
				match(EQUALS_OP);
				setState(4077);
				match(LEFT_PAREN);
				setState(4078);
				simpleStrings();
				setState(4079);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4081);
				match(REPLICATE_WILD_IGNORE_TABLE);
				setState(4082);
				match(EQUALS_OP);
				setState(4083);
				match(LEFT_PAREN);
				setState(4084);
				simpleStrings();
				setState(4085);
				match(RIGHT_PAREN);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4087);
				match(REPLICATE_REWRITE_DB);
				setState(4088);
				match(EQUALS_OP);
				setState(4089);
				match(LEFT_PAREN);
				setState(4090);
				tablePair();
				setState(4095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4091);
					match(COMMA);
					setState(4092);
					tablePair();
					}
					}
					setState(4097);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4098);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePairContext extends ParserRuleContext {
		public NameIdentifierContext firstTable;
		public NameIdentifierContext secondTable;
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePair; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTablePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePairContext tablePair() throws RecognitionException {
		TablePairContext _localctx = new TablePairContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_tablePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4102);
			match(LEFT_PAREN);
			setState(4103);
			((TablePairContext)_localctx).firstTable = nameIdentifier();
			setState(4104);
			match(COMMA);
			setState(4105);
			((TablePairContext)_localctx).secondTable = nameIdentifier();
			setState(4106);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadTypeContext extends ParserRuleContext {
		public TerminalNode IO_THREAD() { return getToken(MySQLSQLStatementParser.IO_THREAD, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySQLSQLStatementParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitThreadType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadTypeContext threadType() throws RecognitionException {
		ThreadTypeContext _localctx = new ThreadTypeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_threadType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4108);
			_la = _input.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UntilOptionContext extends ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_untilOption; }
	 
		public UntilOptionContext() { }
		public void copyFrom(UntilOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GtidsUntilOptionContext extends UntilOptionContext {
		public Token gtids;
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public GtnameIdentifierSetContext gtnameIdentifierSet() {
			return getRuleContext(GtnameIdentifierSetContext.class,0);
		}
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySQLSQLStatementParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySQLSQLStatementParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGtidsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SqlGapsUntilOptionContext extends UntilOptionContext {
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySQLSQLStatementParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSqlGapsUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MasterLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySQLSQLStatementParser.MASTER_LOG_FILE, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(MySQLSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(MySQLSQLStatementParser.EQUALS_OP, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySQLSQLStatementParser.MASTER_LOG_POS, 0); }
		public MasterLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMasterLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RelayLogUntilOptionContext extends UntilOptionContext {
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySQLSQLStatementParser.RELAY_LOG_FILE, 0); }
		public List<TerminalNode> EQUALS_OP() { return getTokens(MySQLSQLStatementParser.EQUALS_OP); }
		public TerminalNode EQUALS_OP(int i) {
			return getToken(MySQLSQLStatementParser.EQUALS_OP, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySQLSQLStatementParser.RELAY_LOG_POS, 0); }
		public RelayLogUntilOptionContext(UntilOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRelayLogUntilOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UntilOptionContext untilOption() throws RecognitionException {
		UntilOptionContext _localctx = new UntilOptionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_untilOption);
		int _la;
		try {
			setState(4130);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4110);
				((GtidsUntilOptionContext)_localctx).gtids = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4111);
				match(EQUALS_OP);
				setState(4112);
				gtnameIdentifierSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4113);
				match(MASTER_LOG_FILE);
				setState(4114);
				match(EQUALS_OP);
				setState(4115);
				expr(0);
				setState(4116);
				match(COMMA);
				setState(4117);
				match(MASTER_LOG_POS);
				setState(4118);
				match(EQUALS_OP);
				setState(4119);
				expr(0);
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4121);
				match(RELAY_LOG_FILE);
				setState(4122);
				match(EQUALS_OP);
				setState(4123);
				expr(0);
				setState(4124);
				match(COMMA);
				setState(4125);
				match(RELAY_LOG_POS);
				setState(4126);
				match(EQUALS_OP);
				setState(4127);
				expr(0);
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4129);
				match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionContext extends ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOption; }
	 
		public ConnectionOptionContext() { }
		public void copyFrom(ConnectionOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PluginDirConnectionOptionContext extends ConnectionOptionContext {
		public ExprContext conOptPluginDir;
		public TerminalNode PLUGIN_DIR() { return getToken(MySQLSQLStatementParser.PLUGIN_DIR, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PluginDirConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPluginDirConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UserConnectionOptionContext extends ConnectionOptionContext {
		public ExprContext conOptUser;
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public UserConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUserConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {
		public ExprContext conOptDefAuth;
		public TerminalNode DEFAULT_AUTH() { return getToken(MySQLSQLStatementParser.DEFAULT_AUTH, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDefaultAuthConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordConnectionOptionContext extends ConnectionOptionContext {
		public ExprContext conOptPassword;
		public TerminalNode PASSWORD() { return getToken(MySQLSQLStatementParser.PASSWORD, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PasswordConnectionOptionContext(ConnectionOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPasswordConnectionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionContext connectionOption() throws RecognitionException {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_connectionOption);
		try {
			setState(4144);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4132);
				match(USER);
				setState(4133);
				match(EQUALS_OP);
				setState(4134);
				((UserConnectionOptionContext)_localctx).conOptUser = expr(0);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4135);
				match(PASSWORD);
				setState(4136);
				match(EQUALS_OP);
				setState(4137);
				((PasswordConnectionOptionContext)_localctx).conOptPassword = expr(0);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4138);
				match(DEFAULT_AUTH);
				setState(4139);
				match(EQUALS_OP);
				setState(4140);
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = expr(0);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4141);
				match(PLUGIN_DIR);
				setState(4142);
				match(EQUALS_OP);
				setState(4143);
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GtnameIdentifierSetContext extends ParserRuleContext {
		public List<UnameIdentifierSetContext> unameIdentifierSet() {
			return getRuleContexts(UnameIdentifierSetContext.class);
		}
		public UnameIdentifierSetContext unameIdentifierSet(int i) {
			return getRuleContext(UnameIdentifierSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public GtnameIdentifierSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gtnameIdentifierSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGtnameIdentifierSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GtnameIdentifierSetContext gtnameIdentifierSet() throws RecognitionException {
		GtnameIdentifierSetContext _localctx = new GtnameIdentifierSetContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_gtnameIdentifierSet);
		int _la;
		try {
			setState(4155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4146);
				unameIdentifierSet();
				setState(4151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4147);
					match(COMMA);
					setState(4148);
					unameIdentifierSet();
					}
					}
					setState(4153);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4154);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStartTransactionContext extends ParserRuleContext {
		public Token xaStart;
		public Token xaAction;
		public TerminalNode XA() { return getToken(MySQLSQLStatementParser.XA, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode START() { return getToken(MySQLSQLStatementParser.START, 0); }
		public TerminalNode BEGIN() { return getToken(MySQLSQLStatementParser.BEGIN, 0); }
		public TerminalNode JOIN() { return getToken(MySQLSQLStatementParser.JOIN, 0); }
		public TerminalNode RESUME() { return getToken(MySQLSQLStatementParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStartTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitXaStartTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStartTransactionContext xaStartTransaction() throws RecognitionException {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_xaStartTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4157);
			match(XA);
			setState(4158);
			((XaStartTransactionContext)_localctx).xaStart = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				((XaStartTransactionContext)_localctx).xaStart = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4159);
			xid();
			setState(4161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				setState(4160);
				((XaStartTransactionContext)_localctx).xaAction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					((XaStartTransactionContext)_localctx).xaAction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaEndTransactionContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySQLSQLStatementParser.XA, 0); }
		public TerminalNode END() { return getToken(MySQLSQLStatementParser.END, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode SUSPEND() { return getToken(MySQLSQLStatementParser.SUSPEND, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode MIGRATE() { return getToken(MySQLSQLStatementParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaEndTransaction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitXaEndTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaEndTransactionContext xaEndTransaction() throws RecognitionException {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_xaEndTransaction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163);
			match(XA);
			setState(4164);
			match(END);
			setState(4165);
			xid();
			setState(4171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				{
				setState(4166);
				match(SUSPEND);
				setState(4169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4167);
					match(FOR);
					setState(4168);
					match(MIGRATE);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaPrepareStatementContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySQLSQLStatementParser.XA, 0); }
		public TerminalNode PREPARE() { return getToken(MySQLSQLStatementParser.PREPARE, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaPrepareStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitXaPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaPrepareStatementContext xaPrepareStatement() throws RecognitionException {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_xaPrepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4173);
			match(XA);
			setState(4174);
			match(PREPARE);
			setState(4175);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaCommitWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySQLSQLStatementParser.XA, 0); }
		public TerminalNode COMMIT() { return getToken(MySQLSQLStatementParser.COMMIT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode ONE() { return getToken(MySQLSQLStatementParser.ONE, 0); }
		public TerminalNode PHASE() { return getToken(MySQLSQLStatementParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaCommitWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitXaCommitWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaCommitWorkContext xaCommitWork() throws RecognitionException {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_xaCommitWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4177);
			match(XA);
			setState(4178);
			match(COMMIT);
			setState(4179);
			xid();
			setState(4182);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4180);
				match(ONE);
				setState(4181);
				match(PHASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRollbackWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySQLSQLStatementParser.XA, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySQLSQLStatementParser.ROLLBACK, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRollbackWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitXaRollbackWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRollbackWorkContext xaRollbackWork() throws RecognitionException {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_xaRollbackWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4184);
			match(XA);
			setState(4185);
			match(ROLLBACK);
			setState(4186);
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaRecoverWorkContext extends ParserRuleContext {
		public TerminalNode XA() { return getToken(MySQLSQLStatementParser.XA, 0); }
		public TerminalNode RECOVER() { return getToken(MySQLSQLStatementParser.RECOVER, 0); }
		public TerminalNode CONVERT() { return getToken(MySQLSQLStatementParser.CONVERT, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaRecoverWork; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitXaRecoverWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaRecoverWorkContext xaRecoverWork() throws RecognitionException {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_xaRecoverWork);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4188);
			match(XA);
			setState(4189);
			match(RECOVER);
			setState(4192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(4190);
				match(CONVERT);
				setState(4191);
				xid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareStatementContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(MySQLSQLStatementParser.PREPARE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PrepareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepareStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPrepareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareStatementContext prepareStatement() throws RecognitionException {
		PrepareStatementContext _localctx = new PrepareStatementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_prepareStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4194);
			match(PREPARE);
			setState(4195);
			nameIdentifier();
			setState(4196);
			match(FROM);
			setState(4197);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(MySQLSQLStatementParser.EXECUTE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public UserVariablesContext userVariables() {
			return getRuleContext(UserVariablesContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4199);
			match(EXECUTE);
			setState(4200);
			nameIdentifier();
			setState(4203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4201);
				match(USING);
				setState(4202);
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocatePrepareContext extends ParserRuleContext {
		public Token dropFormat;
		public TerminalNode PREPARE() { return getToken(MySQLSQLStatementParser.PREPARE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DEALLOCATE() { return getToken(MySQLSQLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocatePrepare; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDeallocatePrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocatePrepareContext deallocatePrepare() throws RecognitionException {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_deallocatePrepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4205);
			((DeallocatePrepareContext)_localctx).dropFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				((DeallocatePrepareContext)_localctx).dropFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4206);
			match(PREPARE);
			setState(4207);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementItemContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(MySQLSQLStatementParser.SEMI, 0); }
		public TerminalNode EOF() { return getToken(MySQLSQLStatementParser.EOF, 0); }
		public StatementItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStatementItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementItemContext statementItem() throws RecognitionException {
		StatementItemContext _localctx = new StatementItemContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_statementItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4209);
			statement();
			setState(4210);
			_la = _input.LA(1);
			if ( !(_la==EOF || _la==SEMI) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public NameIdentifierContext beginName;
		public NameIdentifierContext endName;
		public TerminalNode BEGIN() { return getToken(MySQLSQLStatementParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(MySQLSQLStatementParser.END, 0); }
		public TerminalNode COLON() { return getToken(MySQLSQLStatementParser.COLON, 0); }
		public List<BodyItemContext> bodyItem() {
			return getRuleContexts(BodyItemContext.class);
		}
		public BodyItemContext bodyItem(int i) {
			return getRuleContext(BodyItemContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(4212);
				((BodyContext)_localctx).beginName = nameIdentifier();
				setState(4213);
				match(COLON);
				}
				break;
			}
			setState(4217);
			match(BEGIN);
			setState(4221);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (ITERATE - 73)) | (1L << (KILL - 73)) | (1L << (LEAVE - 73)) | (1L << (LEFT - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (LOOP - 73)) | (1L << (OPTIMIZE - 73)) | (1L << (PURGE - 73)) | (1L << (RELEASE - 73)) | (1L << (RENAME - 73)) | (1L << (REPEAT - 73)) | (1L << (REPLACE - 73)) | (1L << (RETURN - 73)) | (1L << (REVOKE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (SHOW - 137)) | (1L << (UNLOCK - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WHILE - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CACHE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (CLOSE - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FLUSH - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HANDLER - 336)) | (1L << (HASH - 336)) | (1L << (HELP - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTALL - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPEN - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESET - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNINSTALL - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (LEFT_PAREN - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
				{
				{
				setState(4218);
				bodyItem();
				}
				}
				setState(4223);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4224);
			match(END);
			setState(4226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				setState(4225);
				((BodyContext)_localctx).endName = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyItemContext extends ParserRuleContext {
		public BodyItemStatementContext bodyItemStatement() {
			return getRuleContext(BodyItemStatementContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(MySQLSQLStatementParser.SEMI, 0); }
		public TerminalNode EOF() { return getToken(MySQLSQLStatementParser.EOF, 0); }
		public BodyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bodyItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBodyItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyItemContext bodyItem() throws RecognitionException {
		BodyItemContext _localctx = new BodyItemContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_bodyItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			bodyItemStatement();
			setState(4229);
			_la = _input.LA(1);
			if ( !(_la==EOF || _la==SEMI) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyItemStatementContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public BodyItemStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bodyItemStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBodyItemStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyItemStatementContext bodyItemStatement() throws RecognitionException {
		BodyItemStatementContext _localctx = new BodyItemStatementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_bodyItemStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4231);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(MySQLSQLStatementParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(MySQLSQLStatementParser.CASE, i);
		}
		public TerminalNode END() { return getToken(MySQLSQLStatementParser.END, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<CaseStatementWhenItemContext> caseStatementWhenItem() {
			return getRuleContexts(CaseStatementWhenItemContext.class);
		}
		public CaseStatementWhenItemContext caseStatementWhenItem(int i) {
			return getRuleContext(CaseStatementWhenItemContext.class,i);
		}
		public CaseStatementElseClauseContext caseStatementElseClause() {
			return getRuleContext(CaseStatementElseClauseContext.class,0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4233);
			match(CASE);
			setState(4235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
				{
				setState(4234);
				expr(0);
				}
			}

			setState(4238); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4237);
				caseStatementWhenItem();
				}
				}
				setState(4240); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4242);
				caseStatementElseClause();
				}
			}

			setState(4245);
			match(END);
			setState(4246);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementWhenItemContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(MySQLSQLStatementParser.WHEN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySQLSQLStatementParser.THEN, 0); }
		public StatementItemContext statementItem() {
			return getRuleContext(StatementItemContext.class,0);
		}
		public CaseStatementWhenItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatementWhenItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCaseStatementWhenItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementWhenItemContext caseStatementWhenItem() throws RecognitionException {
		CaseStatementWhenItemContext _localctx = new CaseStatementWhenItemContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_caseStatementWhenItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4248);
			match(WHEN);
			setState(4249);
			expr(0);
			setState(4250);
			match(THEN);
			setState(4251);
			statementItem();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementElseClauseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(MySQLSQLStatementParser.ELSE, 0); }
		public List<StatementItemContext> statementItem() {
			return getRuleContexts(StatementItemContext.class);
		}
		public StatementItemContext statementItem(int i) {
			return getRuleContext(StatementItemContext.class,i);
		}
		public CaseStatementElseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatementElseClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCaseStatementElseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementElseClauseContext caseStatementElseClause() throws RecognitionException {
		CaseStatementElseClauseContext _localctx = new CaseStatementElseClauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_caseStatementElseClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4253);
			match(ELSE);
			setState(4255); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4254);
				statementItem();
				}
				}
				setState(4257); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (ITERATE - 73)) | (1L << (KILL - 73)) | (1L << (LEAVE - 73)) | (1L << (LEFT - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (LOOP - 73)) | (1L << (OPTIMIZE - 73)) | (1L << (PURGE - 73)) | (1L << (RELEASE - 73)) | (1L << (RENAME - 73)) | (1L << (REPEAT - 73)) | (1L << (REPLACE - 73)) | (1L << (RETURN - 73)) | (1L << (REVOKE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (SHOW - 137)) | (1L << (UNLOCK - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WHILE - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CACHE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (CLOSE - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FLUSH - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HANDLER - 336)) | (1L << (HASH - 336)) | (1L << (HELP - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTALL - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPEN - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESET - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNINSTALL - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (LEFT_PAREN - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public StatementItemContext statementItem;
		public List<StatementItemContext> then = new ArrayList<StatementItemContext>();
		public List<StatementItemContext> else_ = new ArrayList<StatementItemContext>();
		public List<TerminalNode> IF() { return getTokens(MySQLSQLStatementParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(MySQLSQLStatementParser.IF, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySQLSQLStatementParser.THEN, 0); }
		public TerminalNode END() { return getToken(MySQLSQLStatementParser.END, 0); }
		public List<ElseIfContext> elseIf() {
			return getRuleContexts(ElseIfContext.class);
		}
		public ElseIfContext elseIf(int i) {
			return getRuleContext(ElseIfContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySQLSQLStatementParser.ELSE, 0); }
		public List<StatementItemContext> statementItem() {
			return getRuleContexts(StatementItemContext.class);
		}
		public StatementItemContext statementItem(int i) {
			return getRuleContext(StatementItemContext.class,i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_ifStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4259);
			match(IF);
			setState(4260);
			expr(0);
			setState(4261);
			match(THEN);
			setState(4263); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4262);
				((IfStatementContext)_localctx).statementItem = statementItem();
				((IfStatementContext)_localctx).then.add(((IfStatementContext)_localctx).statementItem);
				}
				}
				setState(4265); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (ITERATE - 73)) | (1L << (KILL - 73)) | (1L << (LEAVE - 73)) | (1L << (LEFT - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (LOOP - 73)) | (1L << (OPTIMIZE - 73)) | (1L << (PURGE - 73)) | (1L << (RELEASE - 73)) | (1L << (RENAME - 73)) | (1L << (REPEAT - 73)) | (1L << (REPLACE - 73)) | (1L << (RETURN - 73)) | (1L << (REVOKE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (SHOW - 137)) | (1L << (UNLOCK - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WHILE - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CACHE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (CLOSE - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FLUSH - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HANDLER - 336)) | (1L << (HASH - 336)) | (1L << (HELP - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTALL - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPEN - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESET - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNINSTALL - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (LEFT_PAREN - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0) );
			setState(4270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF) {
				{
				{
				setState(4267);
				elseIf();
				}
				}
				setState(4272);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4273);
				match(ELSE);
				setState(4275); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4274);
					((IfStatementContext)_localctx).statementItem = statementItem();
					((IfStatementContext)_localctx).else_.add(((IfStatementContext)_localctx).statementItem);
					}
					}
					setState(4277); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (ITERATE - 73)) | (1L << (KILL - 73)) | (1L << (LEAVE - 73)) | (1L << (LEFT - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (LOOP - 73)) | (1L << (OPTIMIZE - 73)) | (1L << (PURGE - 73)) | (1L << (RELEASE - 73)) | (1L << (RENAME - 73)) | (1L << (REPEAT - 73)) | (1L << (REPLACE - 73)) | (1L << (RETURN - 73)) | (1L << (REVOKE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (SHOW - 137)) | (1L << (UNLOCK - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WHILE - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CACHE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (CLOSE - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FLUSH - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HANDLER - 336)) | (1L << (HASH - 336)) | (1L << (HELP - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTALL - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPEN - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESET - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNINSTALL - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (LEFT_PAREN - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0) );
				}
			}

			setState(4281);
			match(END);
			setState(4282);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseIfContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(MySQLSQLStatementParser.ELSEIF, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode THEN() { return getToken(MySQLSQLStatementParser.THEN, 0); }
		public List<StatementItemContext> statementItem() {
			return getRuleContexts(StatementItemContext.class);
		}
		public StatementItemContext statementItem(int i) {
			return getRuleContext(StatementItemContext.class,i);
		}
		public ElseIfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseIf; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitElseIf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElseIfContext elseIf() throws RecognitionException {
		ElseIfContext _localctx = new ElseIfContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_elseIf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4284);
			match(ELSEIF);
			setState(4285);
			expr(0);
			setState(4286);
			match(THEN);
			setState(4288); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4287);
				statementItem();
				}
				}
				setState(4290); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (ITERATE - 73)) | (1L << (KILL - 73)) | (1L << (LEAVE - 73)) | (1L << (LEFT - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (LOOP - 73)) | (1L << (OPTIMIZE - 73)) | (1L << (PURGE - 73)) | (1L << (RELEASE - 73)) | (1L << (RENAME - 73)) | (1L << (REPEAT - 73)) | (1L << (REPLACE - 73)) | (1L << (RETURN - 73)) | (1L << (REVOKE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (SHOW - 137)) | (1L << (UNLOCK - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WHILE - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CACHE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (CLOSE - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FLUSH - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HANDLER - 336)) | (1L << (HASH - 336)) | (1L << (HELP - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTALL - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPEN - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESET - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNINSTALL - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (LEFT_PAREN - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(MySQLSQLStatementParser.ITERATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4292);
			match(ITERATE);
			setState(4293);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE() { return getToken(MySQLSQLStatementParser.LEAVE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4295);
			match(LEAVE);
			setState(4296);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public NameIdentifierContext beginLabel;
		public NameIdentifierContext endLabel;
		public List<TerminalNode> LOOP() { return getTokens(MySQLSQLStatementParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(MySQLSQLStatementParser.LOOP, i);
		}
		public TerminalNode END() { return getToken(MySQLSQLStatementParser.END, 0); }
		public TerminalNode COLON() { return getToken(MySQLSQLStatementParser.COLON, 0); }
		public List<BodyItemContext> bodyItem() {
			return getRuleContexts(BodyItemContext.class);
		}
		public BodyItemContext bodyItem(int i) {
			return getRuleContext(BodyItemContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_loopStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
				{
				setState(4298);
				((LoopStatementContext)_localctx).beginLabel = nameIdentifier();
				setState(4299);
				match(COLON);
				}
			}

			setState(4303);
			match(LOOP);
			setState(4305); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4304);
				bodyItem();
				}
				}
				setState(4307); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (ITERATE - 73)) | (1L << (KILL - 73)) | (1L << (LEAVE - 73)) | (1L << (LEFT - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (LOOP - 73)) | (1L << (OPTIMIZE - 73)) | (1L << (PURGE - 73)) | (1L << (RELEASE - 73)) | (1L << (RENAME - 73)) | (1L << (REPEAT - 73)) | (1L << (REPLACE - 73)) | (1L << (RETURN - 73)) | (1L << (REVOKE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (SHOW - 137)) | (1L << (UNLOCK - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WHILE - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CACHE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (CLOSE - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FLUSH - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HANDLER - 336)) | (1L << (HASH - 336)) | (1L << (HELP - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTALL - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPEN - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESET - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNINSTALL - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (LEFT_PAREN - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0) );
			setState(4309);
			match(END);
			setState(4310);
			match(LOOP);
			setState(4312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(4311);
				((LoopStatementContext)_localctx).endLabel = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatStatementContext extends ParserRuleContext {
		public NameIdentifierContext beginLabel;
		public NameIdentifierContext endLabel;
		public List<TerminalNode> REPEAT() { return getTokens(MySQLSQLStatementParser.REPEAT); }
		public TerminalNode REPEAT(int i) {
			return getToken(MySQLSQLStatementParser.REPEAT, i);
		}
		public TerminalNode UNTIL() { return getToken(MySQLSQLStatementParser.UNTIL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode END() { return getToken(MySQLSQLStatementParser.END, 0); }
		public TerminalNode COLON() { return getToken(MySQLSQLStatementParser.COLON, 0); }
		public List<BodyItemContext> bodyItem() {
			return getRuleContexts(BodyItemContext.class);
		}
		public BodyItemContext bodyItem(int i) {
			return getRuleContext(BodyItemContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRepeatStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatStatementContext repeatStatement() throws RecognitionException {
		RepeatStatementContext _localctx = new RepeatStatementContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_repeatStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
				{
				setState(4314);
				((RepeatStatementContext)_localctx).beginLabel = nameIdentifier();
				setState(4315);
				match(COLON);
				}
			}

			setState(4319);
			match(REPEAT);
			setState(4321); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4320);
				bodyItem();
				}
				}
				setState(4323); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (ITERATE - 73)) | (1L << (KILL - 73)) | (1L << (LEAVE - 73)) | (1L << (LEFT - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (LOOP - 73)) | (1L << (OPTIMIZE - 73)) | (1L << (PURGE - 73)) | (1L << (RELEASE - 73)) | (1L << (RENAME - 73)) | (1L << (REPEAT - 73)) | (1L << (REPLACE - 73)) | (1L << (RETURN - 73)) | (1L << (REVOKE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (SHOW - 137)) | (1L << (UNLOCK - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WHILE - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CACHE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (CLOSE - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FLUSH - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HANDLER - 336)) | (1L << (HASH - 336)) | (1L << (HELP - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTALL - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPEN - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESET - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNINSTALL - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (LEFT_PAREN - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0) );
			setState(4325);
			match(UNTIL);
			setState(4326);
			expr(0);
			setState(4327);
			match(END);
			setState(4328);
			match(REPEAT);
			setState(4330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				setState(4329);
				((RepeatStatementContext)_localctx).endLabel = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(MySQLSQLStatementParser.RETURN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4332);
			match(RETURN);
			setState(4333);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public NameIdentifierContext beginLabel;
		public NameIdentifierContext endLabel;
		public List<TerminalNode> WHILE() { return getTokens(MySQLSQLStatementParser.WHILE); }
		public TerminalNode WHILE(int i) {
			return getToken(MySQLSQLStatementParser.WHILE, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(MySQLSQLStatementParser.DO, 0); }
		public TerminalNode END() { return getToken(MySQLSQLStatementParser.END, 0); }
		public TerminalNode COLON() { return getToken(MySQLSQLStatementParser.COLON, 0); }
		public List<BodyItemContext> bodyItem() {
			return getRuleContexts(BodyItemContext.class);
		}
		public BodyItemContext bodyItem(int i) {
			return getRuleContext(BodyItemContext.class,i);
		}
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWhileStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_whileStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (LEFT - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HASH - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0)) {
				{
				setState(4335);
				((WhileStatementContext)_localctx).beginLabel = nameIdentifier();
				setState(4336);
				match(COLON);
				}
			}

			setState(4340);
			match(WHILE);
			setState(4341);
			expr(0);
			setState(4342);
			match(DO);
			setState(4344); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4343);
				bodyItem();
				}
				}
				setState(4346); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 7)) & ~0x3f) == 0 && ((1L << (_la - 7)) & ((1L << (ALTER - 7)) | (1L << (ANALYZE - 7)) | (1L << (CALL - 7)) | (1L << (CASE - 7)) | (1L << (CHANGE - 7)) | (1L << (CHECK - 7)) | (1L << (CREATE - 7)) | (1L << (DELETE - 7)) | (1L << (DESC - 7)) | (1L << (DESCRIBE - 7)) | (1L << (DROP - 7)) | (1L << (EXPLAIN - 7)) | (1L << (FETCH - 7)) | (1L << (GRANT - 7)) | (1L << (IF - 7)))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (ITERATE - 73)) | (1L << (KILL - 73)) | (1L << (LEAVE - 73)) | (1L << (LEFT - 73)) | (1L << (LOAD - 73)) | (1L << (LOCK - 73)) | (1L << (LOOP - 73)) | (1L << (OPTIMIZE - 73)) | (1L << (PURGE - 73)) | (1L << (RELEASE - 73)) | (1L << (RENAME - 73)) | (1L << (REPEAT - 73)) | (1L << (REPLACE - 73)) | (1L << (RETURN - 73)) | (1L << (REVOKE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (SET - 137)) | (1L << (SHOW - 137)) | (1L << (UNLOCK - 137)) | (1L << (UPDATE - 137)) | (1L << (USE - 137)) | (1L << (WHILE - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (TEXT - 208)) | (1L << (ENUM - 208)) | (1L << (SUM - 208)) | (1L << (SUBSTR - 208)) | (1L << (SUBSTRING - 208)) | (1L << (ACCOUNT - 208)) | (1L << (ACTION - 208)) | (1L << (AFTER - 208)) | (1L << (AGGREGATE - 208)) | (1L << (ALGORITHM - 208)) | (1L << (ANY - 208)) | (1L << (AT - 208)) | (1L << (AUTHORS - 208)) | (1L << (AUTOCOMMIT - 208)) | (1L << (AUTOEXTEND_SIZE - 208)) | (1L << (AUTO_INCREMENT - 208)) | (1L << (AVG_ROW_LENGTH - 208)) | (1L << (BEGIN - 208)) | (1L << (BINLOG - 208)) | (1L << (BIT - 208)) | (1L << (BLOCK - 208)) | (1L << (BOOL - 208)) | (1L << (BOOLEAN - 208)) | (1L << (BTREE - 208)) | (1L << (CACHE - 208)) | (1L << (CASCADED - 208)) | (1L << (CHAIN - 208)) | (1L << (CHANNEL - 208)) | (1L << (CHECKSUM - 208)) | (1L << (CIPHER - 208)) | (1L << (CLIENT - 208)) | (1L << (CLOSE - 208)) | (1L << (COALESCE - 208)) | (1L << (CODE - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (COLUMNS - 272)) | (1L << (COLUMN_FORMAT - 272)) | (1L << (COMMENT - 272)) | (1L << (COMMIT - 272)) | (1L << (COMPACT - 272)) | (1L << (COMPLETION - 272)) | (1L << (COMPRESSED - 272)) | (1L << (COMPRESSION - 272)) | (1L << (CONCURRENT - 272)) | (1L << (CONNECTION - 272)) | (1L << (CONSISTENT - 272)) | (1L << (CONTAINS - 272)) | (1L << (CONTEXT - 272)) | (1L << (CONTRIBUTORS - 272)) | (1L << (COPY - 272)) | (1L << (CPU - 272)) | (1L << (DATA - 272)) | (1L << (DATAFILE - 272)) | (1L << (DEALLOCATE - 272)) | (1L << (DEFAULT_AUTH - 272)) | (1L << (DEFINER - 272)) | (1L << (DELAY_KEY_WRITE - 272)) | (1L << (DIRECTORY - 272)) | (1L << (DISABLE - 272)) | (1L << (DISCARD - 272)) | (1L << (DISK - 272)) | (1L << (DO - 272)) | (1L << (DUMPFILE - 272)) | (1L << (DUPLICATE - 272)) | (1L << (DYNAMIC - 272)) | (1L << (ENABLE - 272)) | (1L << (ENCRYPTION - 272)) | (1L << (ENDS - 272)) | (1L << (ENGINE - 272)) | (1L << (ENGINES - 272)) | (1L << (ERROR - 272)) | (1L << (ERRORS - 272)) | (1L << (ESCAPE - 272)) | (1L << (EVEN - 272)) | (1L << (EVENT - 272)) | (1L << (EVENTS - 272)) | (1L << (EVERY - 272)) | (1L << (EXCHANGE - 272)) | (1L << (EXCLUSIVE - 272)) | (1L << (EXPIRE - 272)) | (1L << (EXTENT_SIZE - 272)) | (1L << (FAULTS - 272)) | (1L << (FIELDS - 272)) | (1L << (FILE_BLOCK_SIZE - 272)) | (1L << (FILTER - 272)) | (1L << (FIRST - 272)) | (1L << (FIXED - 272)) | (1L << (FLUSH - 272)) | (1L << (FOLLOWS - 272)) | (1L << (FULL - 272)) | (1L << (FUNCTION - 272)))) != 0) || ((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (GLOBAL - 336)) | (1L << (GRANTS - 336)) | (1L << (GROUP_REPLICATION - 336)) | (1L << (HANDLER - 336)) | (1L << (HASH - 336)) | (1L << (HELP - 336)) | (1L << (HOST - 336)) | (1L << (IDENTIFIED - 336)) | (1L << (IGNORE_SERVER_IDS - 336)) | (1L << (IMPORT - 336)) | (1L << (INDEXES - 336)) | (1L << (INITIAL_SIZE - 336)) | (1L << (INPLACE - 336)) | (1L << (INSERT_METHOD - 336)) | (1L << (INSTALL - 336)) | (1L << (INSTANCE - 336)) | (1L << (INVOKER - 336)) | (1L << (IO - 336)) | (1L << (IO_THREAD - 336)) | (1L << (IPC - 336)) | (1L << (ISOLATION - 336)) | (1L << (ISSUER - 336)) | (1L << (KEY_BLOCK_SIZE - 336)) | (1L << (LANGUAGE - 336)) | (1L << (LAST - 336)) | (1L << (LEAVES - 336)) | (1L << (LESS - 336)) | (1L << (LEVEL - 336)) | (1L << (LIST - 336)) | (1L << (LOCAL - 336)) | (1L << (LOGFILE - 336)) | (1L << (LOGS - 336)) | (1L << (MASTER - 336)) | (1L << (MASTER_AUTO_POSITION - 336)) | (1L << (MASTER_CONNECT_RETRY - 336)) | (1L << (MASTER_DELAY - 336)) | (1L << (MASTER_HEARTBEAT_PERIOD - 336)) | (1L << (MASTER_HOST - 336)) | (1L << (MASTER_LOG_FILE - 336)) | (1L << (MASTER_LOG_POS - 336)) | (1L << (MASTER_PASSWORD - 336)) | (1L << (MASTER_PORT - 336)) | (1L << (MASTER_RETRY_COUNT - 336)) | (1L << (MASTER_SSL - 336)) | (1L << (MASTER_SSL_CA - 336)) | (1L << (MASTER_SSL_CAPATH - 336)) | (1L << (MASTER_SSL_CERT - 336)) | (1L << (MASTER_SSL_CIPHER - 336)) | (1L << (MASTER_SSL_CRL - 336)) | (1L << (MASTER_SSL_CRLPATH - 336)) | (1L << (MASTER_SSL_KEY - 336)) | (1L << (MASTER_TLS_VERSION - 336)) | (1L << (MASTER_USER - 336)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 336)) | (1L << (MAX_QUERIES_PER_HOUR - 336)) | (1L << (MAX_ROWS - 336)) | (1L << (MAX_SIZE - 336)) | (1L << (MAX_UPDATES_PER_HOUR - 336)) | (1L << (MAX_USER_CONNECTIONS - 336)) | (1L << (MERGE - 336)) | (1L << (MIGRATE - 336)))) != 0) || ((((_la - 400)) & ~0x3f) == 0 && ((1L << (_la - 400)) & ((1L << (MIN_ROWS - 400)) | (1L << (MODIFY - 400)) | (1L << (MUTEX - 400)) | (1L << (MYSQL - 400)) | (1L << (NAME - 400)) | (1L << (NAMES - 400)) | (1L << (NCHAR - 400)) | (1L << (NEVER - 400)) | (1L << (NO - 400)) | (1L << (NODEGROUP - 400)) | (1L << (NONE - 400)) | (1L << (OFFLINE - 400)) | (1L << (OFFSET - 400)) | (1L << (OJ - 400)) | (1L << (OLD_PASSWORD - 400)) | (1L << (ONE - 400)) | (1L << (ONLINE - 400)) | (1L << (ONLY - 400)) | (1L << (OPEN - 400)) | (1L << (OPTIMIZER_COSTS - 400)) | (1L << (OPTIONS - 400)) | (1L << (OWNER - 400)) | (1L << (PACK_KEYS - 400)) | (1L << (PAGE - 400)) | (1L << (PARSER - 400)) | (1L << (PARTIAL - 400)) | (1L << (PARTITIONING - 400)) | (1L << (PARTITIONS - 400)) | (1L << (PASSWORD - 400)) | (1L << (PHASE - 400)) | (1L << (PLUGIN_DIR - 400)) | (1L << (PLUGINS - 400)) | (1L << (PORT - 400)) | (1L << (PRECEDES - 400)) | (1L << (PREPARE - 400)) | (1L << (PRESERVE - 400)) | (1L << (PREV - 400)) | (1L << (PROCESSLIST - 400)) | (1L << (PROFILE - 400)) | (1L << (PROFILES - 400)) | (1L << (PROXY - 400)) | (1L << (QUERY - 400)) | (1L << (QUICK - 400)) | (1L << (REBUILD - 400)) | (1L << (RECOVER - 400)) | (1L << (REDO_BUFFER_SIZE - 400)) | (1L << (REDUNDANT - 400)) | (1L << (RELAY_LOG_FILE - 400)) | (1L << (RELAY_LOG_POS - 400)) | (1L << (RELAYLOG - 400)) | (1L << (REMOVE - 400)) | (1L << (REORGANIZE - 400)) | (1L << (REPAIR - 400)) | (1L << (REPLICATE_DO_DB - 400)) | (1L << (REPLICATE_DO_TABLE - 400)) | (1L << (REPLICATE_IGNORE_DB - 400)) | (1L << (REPLICATE_IGNORE_TABLE - 400)) | (1L << (REPLICATE_REWRITE_DB - 400)) | (1L << (REPLICATE_WILD_DO_TABLE - 400)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (REPLICATE_WILD_IGNORE_TABLE - 464)) | (1L << (REPLICATION - 464)) | (1L << (RESET - 464)) | (1L << (RESUME - 464)) | (1L << (RETURNS - 464)) | (1L << (ROLLBACK - 464)) | (1L << (ROLLUP - 464)) | (1L << (ROTATE - 464)) | (1L << (ROW - 464)) | (1L << (ROWS - 464)) | (1L << (ROW_FORMAT - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (SCHEDULE - 464)) | (1L << (SECURITY - 464)) | (1L << (SERVER - 464)) | (1L << (SESSION - 464)) | (1L << (SHARE - 464)) | (1L << (SHARED - 464)) | (1L << (SIGNED - 464)) | (1L << (SIMPLE - 464)) | (1L << (SLAVE - 464)) | (1L << (SNAPSHOT - 464)) | (1L << (SOCKET - 464)) | (1L << (SOME - 464)) | (1L << (SOUNDS - 464)) | (1L << (SOURCE - 464)) | (1L << (SQL_AFTER_GTIDS - 464)) | (1L << (SQL_AFTER_MTS_GAPS - 464)) | (1L << (SQL_BEFORE_GTIDS - 464)) | (1L << (SQL_BUFFER_RESULT - 464)) | (1L << (SQL_CACHE - 464)) | (1L << (SQL_NO_CACHE - 464)) | (1L << (SQL_THREAD - 464)) | (1L << (START - 464)) | (1L << (STARTS - 464)) | (1L << (STATS_AUTO_RECALC - 464)) | (1L << (STATS_PERSISTENT - 464)) | (1L << (STATS_SAMPLE_PAGES - 464)) | (1L << (STATUS - 464)) | (1L << (STOP - 464)) | (1L << (STORAGE - 464)) | (1L << (STRING - 464)) | (1L << (SUBJECT - 464)) | (1L << (SUBPARTITION - 464)) | (1L << (SUBPARTITIONS - 464)) | (1L << (SUSPEND - 464)) | (1L << (SWAPS - 464)) | (1L << (SWITCHES - 464)) | (1L << (TABLESPACE - 464)) | (1L << (TEMPORARY - 464)) | (1L << (TEMPTABLE - 464)) | (1L << (THAN - 464)) | (1L << (TRANSACTION - 464)) | (1L << (TRUNCATE - 464)) | (1L << (UNDEFINED - 464)) | (1L << (UNDOFILE - 464)) | (1L << (UNDO_BUFFER_SIZE - 464)) | (1L << (UNINSTALL - 464)) | (1L << (UNKNOWN - 464)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (UPGRADE - 528)) | (1L << (USER - 528)) | (1L << (VALIDATION - 528)) | (1L << (VALUE - 528)) | (1L << (VARIABLES - 528)) | (1L << (VIEW - 528)) | (1L << (WAIT - 528)) | (1L << (WARNINGS - 528)) | (1L << (WITHOUT - 528)) | (1L << (WORK - 528)) | (1L << (WRAPPER - 528)) | (1L << (X509 - 528)) | (1L << (XA - 528)) | (1L << (XML - 528)) | (1L << (TABLES - 528)) | (1L << (ROUTINE - 528)) | (1L << (EXECUTE - 528)) | (1L << (FILE - 528)) | (1L << (PROCESS - 528)) | (1L << (RELOAD - 528)) | (1L << (SHUTDOWN - 528)) | (1L << (SUPER - 528)) | (1L << (PRIVILEGES - 528)) | (1L << (ARMSCII8 - 528)) | (1L << (ASCII - 528)) | (1L << (BIG5 - 528)) | (1L << (CP1250 - 528)) | (1L << (CP1251 - 528)) | (1L << (CP1256 - 528)) | (1L << (CP1257 - 528)) | (1L << (CP850 - 528)) | (1L << (CP852 - 528)) | (1L << (CP866 - 528)) | (1L << (CP932 - 528)) | (1L << (DEC8 - 528)) | (1L << (EUCJPMS - 528)) | (1L << (EUCKR - 528)) | (1L << (GB2312 - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (GBK - 592)) | (1L << (GEOSTD8 - 592)) | (1L << (GREEK - 592)) | (1L << (HEBREW - 592)) | (1L << (HP8 - 592)) | (1L << (KEYBCS2 - 592)) | (1L << (KOI8R - 592)) | (1L << (KOI8U - 592)) | (1L << (LATIN1 - 592)) | (1L << (LATIN2 - 592)) | (1L << (LATIN5 - 592)) | (1L << (LATIN7 - 592)) | (1L << (MACCE - 592)) | (1L << (MACROMAN - 592)) | (1L << (SJIS - 592)) | (1L << (SWE7 - 592)) | (1L << (TIS620 - 592)) | (1L << (UCS2 - 592)) | (1L << (UJIS - 592)) | (1L << (UTF16 - 592)) | (1L << (UTF16LE - 592)) | (1L << (UTF32 - 592)) | (1L << (UTF8 - 592)) | (1L << (UTF8MB3 - 592)) | (1L << (UTF8MB4 - 592)) | (1L << (ARCHIVE - 592)) | (1L << (BLACKHOLE - 592)) | (1L << (CSV - 592)) | (1L << (FEDERATED - 592)) | (1L << (INNODB - 592)) | (1L << (MEMORY - 592)) | (1L << (MRG_MYISAM - 592)) | (1L << (MYISAM - 592)) | (1L << (NDB - 592)) | (1L << (NDBCLUSTER - 592)) | (1L << (PERFOMANCE_SCHEMA - 592)) | (1L << (REPEATABLE - 592)) | (1L << (COMMITTED - 592)) | (1L << (UNCOMMITTED - 592)) | (1L << (SERIALIZABLE - 592)) | (1L << (MOD - 592)) | (1L << (REVERSE - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (ASTERISK - 656)) | (1L << (LEFT_PAREN - 656)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 656)) | (1L << (REGULAR_ID - 656)) | (1L << (DELIMITED_ID - 656)) | (1L << (REVERSE_QUOTE_ID - 656)) | (1L << (MID - 656)))) != 0) );
			setState(4348);
			match(END);
			setState(4349);
			match(WHILE);
			setState(4351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				{
				setState(4350);
				((WhileStatementContext)_localctx).endLabel = nameIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
	 
		public CursorStatementContext() { }
		public void copyFrom(CursorStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CloseCursorContext extends CursorStatementContext {
		public TerminalNode CLOSE() { return getToken(MySQLSQLStatementParser.CLOSE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public CloseCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCloseCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OpenCursorContext extends CursorStatementContext {
		public TerminalNode OPEN() { return getToken(MySQLSQLStatementParser.OPEN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public OpenCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOpenCursor(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FetchCursorContext extends CursorStatementContext {
		public TerminalNode FETCH() { return getToken(MySQLSQLStatementParser.FETCH, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode NEXT() { return getToken(MySQLSQLStatementParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFetchCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_cursorStatement);
		int _la;
		try {
			setState(4374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4353);
				match(CLOSE);
				setState(4354);
				nameIdentifier();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4355);
				match(FETCH);
				setState(4360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==NEXT) {
					{
					setState(4357);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEXT) {
						{
						setState(4356);
						match(NEXT);
						}
					}

					setState(4359);
					match(FROM);
					}
				}

				setState(4362);
				nameIdentifier();
				setState(4363);
				match(INTO);
				setState(4364);
				expr(0);
				setState(4369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4365);
					match(COMMA);
					setState(4366);
					expr(0);
					}
					}
					setState(4371);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4372);
				match(OPEN);
				setState(4373);
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionHandlingContext extends ParserRuleContext {
		public DeclareVariableContext declareVariable() {
			return getRuleContext(DeclareVariableContext.class,0);
		}
		public DeclareConditionContext declareCondition() {
			return getRuleContext(DeclareConditionContext.class,0);
		}
		public DeclareCursorContext declareCursor() {
			return getRuleContext(DeclareCursorContext.class,0);
		}
		public DeclareHandlerContext declareHandler() {
			return getRuleContext(DeclareHandlerContext.class,0);
		}
		public ConditionHandlingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionHandling; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitConditionHandling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionHandlingContext conditionHandling() throws RecognitionException {
		ConditionHandlingContext _localctx = new ConditionHandlingContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_conditionHandling);
		try {
			setState(4380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4376);
				declareVariable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4377);
				declareCondition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4378);
				declareCursor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4379);
				declareHandler();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareVariableContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySQLSQLStatementParser.DECLARE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public DefaultClauseContext defaultClause() {
			return getRuleContext(DefaultClauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareVariable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDeclareVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareVariableContext declareVariable() throws RecognitionException {
		DeclareVariableContext _localctx = new DeclareVariableContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_declareVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4382);
			match(DECLARE);
			setState(4383);
			expr(0);
			setState(4388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4384);
				match(COMMA);
				setState(4385);
				expr(0);
				}
				}
				setState(4390);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4391);
			dataType();
			setState(4392);
			defaultClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareConditionContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySQLSQLStatementParser.DECLARE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(MySQLSQLStatementParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(MySQLSQLStatementParser.SQLSTATE, 0); }
		public TerminalNode VALUE() { return getToken(MySQLSQLStatementParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCondition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDeclareCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareConditionContext declareCondition() throws RecognitionException {
		DeclareConditionContext _localctx = new DeclareConditionContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_declareCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4394);
			match(DECLARE);
			setState(4395);
			nameIdentifier();
			setState(4396);
			match(CONDITION);
			setState(4397);
			match(FOR);
			setState(4404);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case CURSOR:
			case EXISTS:
			case FALSE:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case MATCH:
			case NEW:
			case NOT:
			case NULL_LITERAL:
			case OLD:
			case PERSIST:
			case PERSIST_ONLY:
			case REPLACE:
			case RIGHT:
			case SELECT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case COUNT:
			case MAX:
			case MIN:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GET_FORMAT:
			case MOD:
			case REVERSE:
			case WEIGHT_STRING:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case ASTERISK:
			case EXCLAMATION_OP:
			case BIT_NOT_OP:
			case LEFT_PAREN:
			case AT_SIGN:
			case QUESTION_MARK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case CHAR_STRING:
			case NCHAR_STRING:
			case STRING_CHARSET_NAME:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case HEXADECIMAL_LITERAL:
			case BIT_STRING:
			case MID:
			case TREAT:
			case JSON_TABLE:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case APPROX_COUNT:
			case APPROX_COUNT_DISTINCT:
			case APPROX_COUNT_DISTINCT_AGG:
			case APPROX_COUNT_DISTINCT_DETAIL:
			case APPROX_MEDIAN:
			case APPROX_PERCENTILE:
			case APPROX_PERCENTILE_AGG:
			case APPROX_PERCENTILE_DETAIL:
			case APPROX_RANK:
			case APPROX_SUM:
			case COLLECT:
			case CORR:
			case CORR_S:
			case CORR_K:
			case COVAR_POP:
			case COVAR_SAMP:
			case CUME_DIST:
			case DENSE_RANK:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case MEDIAN:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case REGR_SLOPE:
			case REGR_INTERCEPT:
			case REGR_COUNT:
			case REGR_R2:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_SXX:
			case REGR_SYY:
			case REGR_SXY:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_WSR_TEST:
			case SYS_OP_ZONE_ID:
			case SYS_XMLAGG:
			case TO_APPROX_COUNT_DISTINCT:
			case TO_APPROX_PERCENTILE:
			case XMLAGG:
			case LISTAGG:
			case CUBE_TABLE:
				{
				setState(4398);
				expr(0);
				}
				break;
			case SQLSTATE:
				{
				setState(4399);
				match(SQLSTATE);
				setState(4401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(4400);
					match(VALUE);
					}
					break;
				}
				setState(4403);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareCursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(MySQLSQLStatementParser.DECLARE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(MySQLSQLStatementParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareCursor; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDeclareCursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareCursorContext declareCursor() throws RecognitionException {
		DeclareCursorContext _localctx = new DeclareCursorContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_declareCursor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4406);
			match(DECLARE);
			setState(4407);
			nameIdentifier();
			setState(4408);
			match(CURSOR);
			setState(4409);
			match(FOR);
			setState(4410);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareHandlerContext extends ParserRuleContext {
		public Token handlerAction;
		public TerminalNode DECLARE() { return getToken(MySQLSQLStatementParser.DECLARE, 0); }
		public TerminalNode HANDLER() { return getToken(MySQLSQLStatementParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public List<HandlerConditionValueContext> handlerConditionValue() {
			return getRuleContexts(HandlerConditionValueContext.class);
		}
		public HandlerConditionValueContext handlerConditionValue(int i) {
			return getRuleContext(HandlerConditionValueContext.class,i);
		}
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public TerminalNode CONTINUE() { return getToken(MySQLSQLStatementParser.CONTINUE, 0); }
		public TerminalNode EXIT() { return getToken(MySQLSQLStatementParser.EXIT, 0); }
		public TerminalNode UNDO() { return getToken(MySQLSQLStatementParser.UNDO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareHandler; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDeclareHandler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareHandlerContext declareHandler() throws RecognitionException {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_declareHandler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4412);
			match(DECLARE);
			setState(4413);
			((DeclareHandlerContext)_localctx).handlerAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				((DeclareHandlerContext)_localctx).handlerAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4414);
			match(HANDLER);
			setState(4415);
			match(FOR);
			setState(4416);
			handlerConditionValue();
			setState(4421);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4417);
				match(COMMA);
				setState(4418);
				handlerConditionValue();
				}
				}
				setState(4423);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4424);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionValueContext extends ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerConditionValue; }
	 
		public HandlerConditionValueContext() { }
		public void copyFrom(HandlerConditionValueContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class HandlerConditionWarningContext extends HandlerConditionValueContext {
		public TerminalNode SQLWARNING() { return getToken(MySQLSQLStatementParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionWarning(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionCodeContext extends HandlerConditionValueContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionCode(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNotfoundContext extends HandlerConditionValueContext {
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public TerminalNode FOUND() { return getToken(MySQLSQLStatementParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionNotfound(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionStateContext extends HandlerConditionValueContext {
		public TerminalNode SQLSTATE() { return getToken(MySQLSQLStatementParser.SQLSTATE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(MySQLSQLStatementParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionState(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionExceptionContext extends HandlerConditionValueContext {
		public TerminalNode SQLEXCEPTION() { return getToken(MySQLSQLStatementParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionException(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HandlerConditionNameContext extends HandlerConditionValueContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHandlerConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionValueContext handlerConditionValue() throws RecognitionException {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_handlerConditionValue);
		try {
			setState(4437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				_localctx = new HandlerConditionCodeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4426);
				expr(0);
				}
				break;
			case 2:
				_localctx = new HandlerConditionStateContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4427);
				match(SQLSTATE);
				setState(4429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(4428);
					match(VALUE);
					}
					break;
				}
				setState(4431);
				expr(0);
				}
				break;
			case 3:
				_localctx = new HandlerConditionNameContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4432);
				nameIdentifier();
				}
				break;
			case 4:
				_localctx = new HandlerConditionWarningContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4433);
				match(SQLWARNING);
				}
				break;
			case 5:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4434);
				match(NOT);
				setState(4435);
				match(FOUND);
				}
				break;
			case 6:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4436);
				match(SQLEXCEPTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserStatementContext extends ParserRuleContext {
		public AlterUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserStatement; }
	 
		public AlterUserStatementContext() { }
		public void copyFrom(AlterUserStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class AlterUserMysqlV56Context extends AlterUserStatementContext {
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public List<UserSpecificationContext> userSpecification() {
			return getRuleContexts(UserSpecificationContext.class);
		}
		public UserSpecificationContext userSpecification(int i) {
			return getRuleContext(UserSpecificationContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterUserMysqlV56(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AlterUserMysqlV57Context extends AlterUserStatementContext {
		public Token tlsNone;
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySQLSQLStatementParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySQLSQLStatementParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySQLSQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySQLSQLStatementParser.AND, i);
		}
		public AlterUserMysqlV57Context(AlterUserStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAlterUserMysqlV57(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserStatementContext alterUserStatement() throws RecognitionException {
		AlterUserStatementContext _localctx = new AlterUserStatementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_alterUserStatement);
		int _la;
		try {
			int _alt;
			setState(4496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4439);
				match(ALTER);
				setState(4440);
				match(USER);
				setState(4442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4441);
					ifExists();
					}
				}

				setState(4444);
				userSpecification();
				setState(4449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4445);
					match(COMMA);
					setState(4446);
					userSpecification();
					}
					}
					setState(4451);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV57Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4452);
				match(ALTER);
				setState(4453);
				match(USER);
				setState(4455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4454);
					ifExists();
					}
				}

				setState(4457);
				userAuthOption();
				setState(4462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4458);
					match(COMMA);
					setState(4459);
					userAuthOption();
					}
					}
					setState(4464);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(4465);
					match(REQUIRE);
					setState(4477);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NONE:
						{
						setState(4466);
						((AlterUserMysqlV57Context)_localctx).tlsNone = match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						setState(4467);
						tlsOption();
						setState(4474);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(4469);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==AND) {
									{
									setState(4468);
									match(AND);
									}
								}

								setState(4471);
								tlsOption();
								}
								} 
							}
							setState(4476);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,567,_ctx);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4481);
					match(WITH);
					setState(4483); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(4482);
							userResourceOption();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4485); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,570,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
				}

				setState(4493);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,573,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4491);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PASSWORD:
							{
							setState(4489);
							userPasswordOption();
							}
							break;
						case ACCOUNT:
							{
							setState(4490);
							userLockOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(4495);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,573,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserStatementContext extends ParserRuleContext {
		public Token tlsNone;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySQLSQLStatementParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public List<UserPasswordOptionContext> userPasswordOption() {
			return getRuleContexts(UserPasswordOptionContext.class);
		}
		public UserPasswordOptionContext userPasswordOption(int i) {
			return getRuleContext(UserPasswordOptionContext.class,i);
		}
		public List<UserLockOptionContext> userLockOption() {
			return getRuleContexts(UserLockOptionContext.class);
		}
		public UserLockOptionContext userLockOption(int i) {
			return getRuleContext(UserLockOptionContext.class,i);
		}
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySQLSQLStatementParser.NONE, 0); }
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySQLSQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySQLSQLStatementParser.AND, i);
		}
		public CreateUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateUserStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserStatementContext createUserStatement() throws RecognitionException {
		CreateUserStatementContext _localctx = new CreateUserStatementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_createUserStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4498);
			match(CREATE);
			setState(4499);
			match(USER);
			setState(4501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4500);
				ifNotExists();
				}
			}

			setState(4503);
			userAuthOption();
			setState(4508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4504);
				match(COMMA);
				setState(4505);
				userAuthOption();
				}
				}
				setState(4510);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4511);
				match(REQUIRE);
				setState(4523);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4512);
					((CreateUserStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4513);
					tlsOption();
					setState(4520);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,578,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4515);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4514);
								match(AND);
								}
							}

							setState(4517);
							tlsOption();
							}
							} 
						}
						setState(4522);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,578,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4527);
				match(WITH);
				setState(4529); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4528);
						userResourceOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4531); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,581,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(4539);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,584,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4537);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PASSWORD:
						{
						setState(4535);
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						setState(4536);
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(4541);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,584,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public DropUserStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDropUserStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserStatementContext dropUserStatement() throws RecognitionException {
		DropUserStatementContext _localctx = new DropUserStatementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_dropUserStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4542);
			match(DROP);
			setState(4543);
			match(USER);
			setState(4545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4544);
				ifExists();
				}
			}

			setState(4547);
			nameIdentifier();
			setState(4552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4548);
				match(COMMA);
				setState(4549);
				nameIdentifier();
				}
				}
				setState(4554);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantStatementContext extends ParserRuleContext {
		public Token privilegeObject;
		public Token tlsNone;
		public List<TerminalNode> GRANT() { return getTokens(MySQLSQLStatementParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySQLSQLStatementParser.GRANT, i);
		}
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public List<UserAuthOptionContext> userAuthOption() {
			return getRuleContexts(UserAuthOptionContext.class);
		}
		public UserAuthOptionContext userAuthOption(int i) {
			return getRuleContext(UserAuthOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode REQUIRE() { return getToken(MySQLSQLStatementParser.REQUIRE, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLSQLStatementParser.PROCEDURE, 0); }
		public List<TlsOptionContext> tlsOption() {
			return getRuleContexts(TlsOptionContext.class);
		}
		public TlsOptionContext tlsOption(int i) {
			return getRuleContext(TlsOptionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(MySQLSQLStatementParser.NONE, 0); }
		public List<TerminalNode> OPTION() { return getTokens(MySQLSQLStatementParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(MySQLSQLStatementParser.OPTION, i);
		}
		public List<UserResourceOptionContext> userResourceOption() {
			return getRuleContexts(UserResourceOptionContext.class);
		}
		public UserResourceOptionContext userResourceOption(int i) {
			return getRuleContext(UserResourceOptionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(MySQLSQLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(MySQLSQLStatementParser.AND, i);
		}
		public GrantStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGrantStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantStatementContext grantStatement() throws RecognitionException {
		GrantStatementContext _localctx = new GrantStatementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			match(GRANT);
			setState(4556);
			privelegeClause();
			setState(4561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4557);
				match(COMMA);
				setState(4558);
				privelegeClause();
				}
				}
				setState(4563);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4564);
			match(ON);
			setState(4566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				setState(4565);
				((GrantStatementContext)_localctx).privilegeObject = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
					((GrantStatementContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4568);
			privilegeLevel();
			setState(4569);
			match(TO);
			setState(4570);
			userAuthOption();
			setState(4575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4571);
				match(COMMA);
				setState(4572);
				userAuthOption();
				}
				}
				setState(4577);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUIRE) {
				{
				setState(4578);
				match(REQUIRE);
				setState(4590);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NONE:
					{
					setState(4579);
					((GrantStatementContext)_localctx).tlsNone = match(NONE);
					}
					break;
				case SSL:
				case CIPHER:
				case ISSUER:
				case SUBJECT:
				case X509:
					{
					setState(4580);
					tlsOption();
					setState(4587);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,591,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4582);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==AND) {
								{
								setState(4581);
								match(AND);
								}
							}

							setState(4584);
							tlsOption();
							}
							} 
						}
						setState(4589);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,591,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4594);
				match(WITH);
				setState(4600);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4598);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case GRANT:
							{
							setState(4595);
							match(GRANT);
							setState(4596);
							match(OPTION);
							}
							break;
						case MAX_CONNECTIONS_PER_HOUR:
						case MAX_QUERIES_PER_HOUR:
						case MAX_UPDATES_PER_HOUR:
						case MAX_USER_CONNECTIONS:
							{
							setState(4597);
							userResourceOption();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					setState(4602);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,595,_ctx);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantProxyContext extends ParserRuleContext {
		public NameIdentifierContext fromFirst;
		public NameIdentifierContext toFirst;
		public NameIdentifierContext nameIdentifier;
		public List<NameIdentifierContext> toOther = new ArrayList<NameIdentifierContext>();
		public List<TerminalNode> GRANT() { return getTokens(MySQLSQLStatementParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(MySQLSQLStatementParser.GRANT, i);
		}
		public TerminalNode PROXY() { return getToken(MySQLSQLStatementParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(MySQLSQLStatementParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantProxy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGrantProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantProxyContext grantProxy() throws RecognitionException {
		GrantProxyContext _localctx = new GrantProxyContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_grantProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4605);
			match(GRANT);
			setState(4606);
			match(PROXY);
			setState(4607);
			match(ON);
			setState(4608);
			((GrantProxyContext)_localctx).fromFirst = nameIdentifier();
			setState(4609);
			match(TO);
			setState(4610);
			((GrantProxyContext)_localctx).toFirst = nameIdentifier();
			setState(4615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4611);
				match(COMMA);
				setState(4612);
				((GrantProxyContext)_localctx).nameIdentifier = nameIdentifier();
				((GrantProxyContext)_localctx).toOther.add(((GrantProxyContext)_localctx).nameIdentifier);
				}
				}
				setState(4617);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4618);
				match(WITH);
				setState(4619);
				match(GRANT);
				setState(4620);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySQLSQLStatementParser.RENAME, 0); }
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public List<RenameUserClauseContext> renameUserClause() {
			return getRuleContexts(RenameUserClauseContext.class);
		}
		public RenameUserClauseContext renameUserClause(int i) {
			return getRuleContext(RenameUserClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4623);
			match(RENAME);
			setState(4624);
			match(USER);
			setState(4625);
			renameUserClause();
			setState(4630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4626);
				match(COMMA);
				setState(4627);
				renameUserClause();
				}
				}
				setState(4632);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeStatementContext extends ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeStatement; }
	 
		public RevokeStatementContext() { }
		public void copyFrom(RevokeStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DetailRevokeContext extends RevokeStatementContext {
		public Token privilegeObject;
		public TerminalNode REVOKE() { return getToken(MySQLSQLStatementParser.REVOKE, 0); }
		public List<PrivelegeClauseContext> privelegeClause() {
			return getRuleContexts(PrivelegeClauseContext.class);
		}
		public PrivelegeClauseContext privelegeClause(int i) {
			return getRuleContext(PrivelegeClauseContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public PrivilegeLevelContext privilegeLevel() {
			return getRuleContext(PrivilegeLevelContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLSQLStatementParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDetailRevoke(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShortRevokeContext extends RevokeStatementContext {
		public TerminalNode REVOKE() { return getToken(MySQLSQLStatementParser.REVOKE, 0); }
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode GRANT() { return getToken(MySQLSQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySQLSQLStatementParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode PRIVILEGES() { return getToken(MySQLSQLStatementParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShortRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeStatementContext revokeStatement() throws RecognitionException {
		RevokeStatementContext _localctx = new RevokeStatementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_revokeStatement);
		int _la;
		try {
			setState(4673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4633);
				match(REVOKE);
				setState(4634);
				privelegeClause();
				setState(4639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4635);
					match(COMMA);
					setState(4636);
					privelegeClause();
					}
					}
					setState(4641);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4642);
				match(ON);
				setState(4644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
				case 1:
					{
					setState(4643);
					((DetailRevokeContext)_localctx).privilegeObject = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4646);
				privilegeLevel();
				setState(4647);
				match(FROM);
				setState(4648);
				nameIdentifier();
				setState(4653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4649);
					match(COMMA);
					setState(4650);
					nameIdentifier();
					}
					}
					setState(4655);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4656);
				match(REVOKE);
				setState(4657);
				match(ALL);
				setState(4659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4658);
					match(PRIVILEGES);
					}
				}

				setState(4661);
				match(COMMA);
				setState(4662);
				match(GRANT);
				setState(4663);
				match(OPTION);
				setState(4664);
				match(FROM);
				setState(4665);
				nameIdentifier();
				setState(4670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4666);
					match(COMMA);
					setState(4667);
					nameIdentifier();
					}
					}
					setState(4672);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeProxyContext extends ParserRuleContext {
		public NameIdentifierContext onUser;
		public NameIdentifierContext fromFirst;
		public NameIdentifierContext nameIdentifier;
		public List<NameIdentifierContext> fromOther = new ArrayList<NameIdentifierContext>();
		public TerminalNode REVOKE() { return getToken(MySQLSQLStatementParser.REVOKE, 0); }
		public TerminalNode PROXY() { return getToken(MySQLSQLStatementParser.PROXY, 0); }
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeProxy; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRevokeProxy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeProxyContext revokeProxy() throws RecognitionException {
		RevokeProxyContext _localctx = new RevokeProxyContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_revokeProxy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4675);
			match(REVOKE);
			setState(4676);
			match(PROXY);
			setState(4677);
			match(ON);
			setState(4678);
			((RevokeProxyContext)_localctx).onUser = nameIdentifier();
			setState(4679);
			match(FROM);
			setState(4680);
			((RevokeProxyContext)_localctx).fromFirst = nameIdentifier();
			setState(4685);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4681);
				match(COMMA);
				setState(4682);
				((RevokeProxyContext)_localctx).nameIdentifier = nameIdentifier();
				((RevokeProxyContext)_localctx).fromOther.add(((RevokeProxyContext)_localctx).nameIdentifier);
				}
				}
				setState(4687);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserSpecificationContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public UserPasswordOptionContext userPasswordOption() {
			return getRuleContext(UserPasswordOptionContext.class,0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUserSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserSpecificationContext userSpecification() throws RecognitionException {
		UserSpecificationContext _localctx = new UserSpecificationContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_userSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4688);
			nameIdentifier();
			setState(4689);
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserAuthOptionContext extends ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userAuthOption; }
	 
		public UserAuthOptionContext() { }
		public void copyFrom(UserAuthOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleAuthOptionContext extends UserAuthOptionContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSimpleAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PasswordAuthOptionContext extends UserAuthOptionContext {
		public ExprContext hashed;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySQLSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(MySQLSQLStatementParser.PASSWORD, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PasswordAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPasswordAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringAuthOptionContext extends UserAuthOptionContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySQLSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public StringAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStringAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HashAuthOptionContext extends UserAuthOptionContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySQLSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public AuthPluginContext authPlugin() {
			return getRuleContext(AuthPluginContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HashAuthOptionContext(UserAuthOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHashAuthOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserAuthOptionContext userAuthOption() throws RecognitionException {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_userAuthOption);
		int _la;
		try {
			setState(4715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				_localctx = new PasswordAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4691);
				nameIdentifier();
				setState(4692);
				match(IDENTIFIED);
				setState(4693);
				match(BY);
				setState(4694);
				match(PASSWORD);
				setState(4695);
				((PasswordAuthOptionContext)_localctx).hashed = expr(0);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4697);
				nameIdentifier();
				setState(4698);
				match(IDENTIFIED);
				setState(4701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4699);
					match(WITH);
					setState(4700);
					authPlugin();
					}
				}

				setState(4703);
				match(BY);
				setState(4704);
				expr(0);
				}
				break;
			case 3:
				_localctx = new HashAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4706);
				nameIdentifier();
				setState(4707);
				match(IDENTIFIED);
				setState(4708);
				match(WITH);
				setState(4709);
				authPlugin();
				setState(4712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4710);
					match(AS);
					setState(4711);
					expr(0);
					}
				}

				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4714);
				nameIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TlsOptionContext extends ParserRuleContext {
		public TerminalNode SSL() { return getToken(MySQLSQLStatementParser.SSL, 0); }
		public TerminalNode X509() { return getToken(MySQLSQLStatementParser.X509, 0); }
		public TerminalNode CIPHER() { return getToken(MySQLSQLStatementParser.CIPHER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ISSUER() { return getToken(MySQLSQLStatementParser.ISSUER, 0); }
		public TerminalNode SUBJECT() { return getToken(MySQLSQLStatementParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tlsOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTlsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TlsOptionContext tlsOption() throws RecognitionException {
		TlsOptionContext _localctx = new TlsOptionContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_tlsOption);
		try {
			setState(4725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4717);
				match(SSL);
				}
				break;
			case X509:
				enterOuterAlt(_localctx, 2);
				{
				setState(4718);
				match(X509);
				}
				break;
			case CIPHER:
				enterOuterAlt(_localctx, 3);
				{
				setState(4719);
				match(CIPHER);
				setState(4720);
				expr(0);
				}
				break;
			case ISSUER:
				enterOuterAlt(_localctx, 4);
				{
				setState(4721);
				match(ISSUER);
				setState(4722);
				expr(0);
				}
				break;
			case SUBJECT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4723);
				match(SUBJECT);
				setState(4724);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserResourceOptionContext extends ParserRuleContext {
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySQLSQLStatementParser.MAX_QUERIES_PER_HOUR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySQLSQLStatementParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySQLSQLStatementParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySQLSQLStatementParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userResourceOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUserResourceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserResourceOptionContext userResourceOption() throws RecognitionException {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_userResourceOption);
		try {
			setState(4735);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4727);
				match(MAX_QUERIES_PER_HOUR);
				setState(4728);
				expr(0);
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4729);
				match(MAX_UPDATES_PER_HOUR);
				setState(4730);
				expr(0);
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4731);
				match(MAX_CONNECTIONS_PER_HOUR);
				setState(4732);
				expr(0);
				}
				break;
			case MAX_USER_CONNECTIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4733);
				match(MAX_USER_CONNECTIONS);
				setState(4734);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserPasswordOptionContext extends ParserRuleContext {
		public Token expireType;
		public TerminalNode PASSWORD() { return getToken(MySQLSQLStatementParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(MySQLSQLStatementParser.EXPIRE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DAY() { return getToken(MySQLSQLStatementParser.DAY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode NEVER() { return getToken(MySQLSQLStatementParser.NEVER, 0); }
		public TerminalNode INTERVAL() { return getToken(MySQLSQLStatementParser.INTERVAL, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userPasswordOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUserPasswordOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserPasswordOptionContext userPasswordOption() throws RecognitionException {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_userPasswordOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4737);
			match(PASSWORD);
			setState(4738);
			match(EXPIRE);
			setState(4745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				{
				setState(4739);
				((UserPasswordOptionContext)_localctx).expireType = match(DEFAULT);
				}
				break;
			case 2:
				{
				setState(4740);
				((UserPasswordOptionContext)_localctx).expireType = match(NEVER);
				}
				break;
			case 3:
				{
				setState(4741);
				((UserPasswordOptionContext)_localctx).expireType = match(INTERVAL);
				setState(4742);
				expr(0);
				setState(4743);
				match(DAY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserLockOptionContext extends ParserRuleContext {
		public Token lockType;
		public TerminalNode ACCOUNT() { return getToken(MySQLSQLStatementParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(MySQLSQLStatementParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(MySQLSQLStatementParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userLockOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUserLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserLockOptionContext userLockOption() throws RecognitionException {
		UserLockOptionContext _localctx = new UserLockOptionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_userLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4747);
			match(ACCOUNT);
			setState(4748);
			((UserLockOptionContext)_localctx).lockType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				((UserLockOptionContext)_localctx).lockType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivelegeClauseContext extends ParserRuleContext {
		public PrivilegeContext privilege() {
			return getRuleContext(PrivilegeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privelegeClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPrivelegeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivelegeClauseContext privelegeClause() throws RecognitionException {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_privelegeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4750);
			privilege();
			setState(4762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4751);
				match(LEFT_PAREN);
				setState(4752);
				expr(0);
				setState(4757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4753);
					match(COMMA);
					setState(4754);
					expr(0);
					}
					}
					setState(4759);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4760);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySQLSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(MySQLSQLStatementParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(MySQLSQLStatementParser.ROUTINE, 0); }
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySQLSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TABLES() { return getToken(MySQLSQLStatementParser.TABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySQLSQLStatementParser.VIEW, 0); }
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode DELETE() { return getToken(MySQLSQLStatementParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(MySQLSQLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(MySQLSQLStatementParser.EVENT, 0); }
		public TerminalNode EXECUTE() { return getToken(MySQLSQLStatementParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySQLSQLStatementParser.FILE, 0); }
		public TerminalNode GRANT() { return getToken(MySQLSQLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(MySQLSQLStatementParser.OPTION, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode INSERT() { return getToken(MySQLSQLStatementParser.INSERT, 0); }
		public TerminalNode LOCK() { return getToken(MySQLSQLStatementParser.LOCK, 0); }
		public TerminalNode PROCESS() { return getToken(MySQLSQLStatementParser.PROCESS, 0); }
		public TerminalNode PROXY() { return getToken(MySQLSQLStatementParser.PROXY, 0); }
		public TerminalNode REFERENCES() { return getToken(MySQLSQLStatementParser.REFERENCES, 0); }
		public TerminalNode RELOAD() { return getToken(MySQLSQLStatementParser.RELOAD, 0); }
		public TerminalNode REPLICATION() { return getToken(MySQLSQLStatementParser.REPLICATION, 0); }
		public TerminalNode CLIENT() { return getToken(MySQLSQLStatementParser.CLIENT, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLSQLStatementParser.SLAVE, 0); }
		public TerminalNode SELECT() { return getToken(MySQLSQLStatementParser.SELECT, 0); }
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(MySQLSQLStatementParser.DATABASES, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySQLSQLStatementParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySQLSQLStatementParser.SUPER, 0); }
		public TerminalNode TRIGGER() { return getToken(MySQLSQLStatementParser.TRIGGER, 0); }
		public TerminalNode UPDATE() { return getToken(MySQLSQLStatementParser.UPDATE, 0); }
		public TerminalNode USAGE() { return getToken(MySQLSQLStatementParser.USAGE, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_privilege);
		int _la;
		try {
			setState(4806);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4764);
				match(ALL);
				setState(4766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(4765);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4768);
				match(ALTER);
				setState(4770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROUTINE) {
					{
					setState(4769);
					match(ROUTINE);
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4772);
				match(CREATE);
				setState(4779);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TEMPORARY:
					{
					setState(4773);
					match(TEMPORARY);
					setState(4774);
					match(TABLES);
					}
					break;
				case ROUTINE:
					{
					setState(4775);
					match(ROUTINE);
					}
					break;
				case VIEW:
					{
					setState(4776);
					match(VIEW);
					}
					break;
				case USER:
					{
					setState(4777);
					match(USER);
					}
					break;
				case TABLESPACE:
					{
					setState(4778);
					match(TABLESPACE);
					}
					break;
				case ON:
				case LEFT_PAREN:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4781);
				match(DELETE);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4782);
				match(DROP);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4783);
				match(EVENT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4784);
				match(EXECUTE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 8);
				{
				setState(4785);
				match(FILE);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(4786);
				match(GRANT);
				setState(4787);
				match(OPTION);
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 10);
				{
				setState(4788);
				match(INDEX);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(4789);
				match(INSERT);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 12);
				{
				setState(4790);
				match(LOCK);
				setState(4791);
				match(TABLES);
				}
				break;
			case PROCESS:
				enterOuterAlt(_localctx, 13);
				{
				setState(4792);
				match(PROCESS);
				}
				break;
			case PROXY:
				enterOuterAlt(_localctx, 14);
				{
				setState(4793);
				match(PROXY);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 15);
				{
				setState(4794);
				match(REFERENCES);
				}
				break;
			case RELOAD:
				enterOuterAlt(_localctx, 16);
				{
				setState(4795);
				match(RELOAD);
				}
				break;
			case REPLICATION:
				enterOuterAlt(_localctx, 17);
				{
				setState(4796);
				match(REPLICATION);
				setState(4797);
				_la = _input.LA(1);
				if ( !(_la==CLIENT || _la==SLAVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 18);
				{
				setState(4798);
				match(SELECT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 19);
				{
				setState(4799);
				match(SHOW);
				setState(4800);
				_la = _input.LA(1);
				if ( !(_la==DATABASES || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 20);
				{
				setState(4801);
				match(SHUTDOWN);
				}
				break;
			case SUPER:
				enterOuterAlt(_localctx, 21);
				{
				setState(4802);
				match(SUPER);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 22);
				{
				setState(4803);
				match(TRIGGER);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 23);
				{
				setState(4804);
				match(UPDATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 24);
				{
				setState(4805);
				match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeLevelContext extends ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeLevel; }
	 
		public PrivilegeLevelContext() { }
		public void copyFrom(PrivilegeLevelContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDefiniteSchemaPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDefiniteFullTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GlobalPrivLevelContext extends PrivilegeLevelContext {
		public GlobalPrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGlobalPrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDefiniteTablePrivLevel(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCurrentSchemaPriviLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeLevelContext privilegeLevel() throws RecognitionException {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_privilegeLevel);
		try {
			setState(4821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4808);
				match(ASTERISK);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4809);
				match(ASTERISK);
				setState(4810);
				match(PERIOD);
				setState(4811);
				match(ASTERISK);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4812);
				nameIdentifier();
				setState(4813);
				match(PERIOD);
				setState(4814);
				match(ASTERISK);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4816);
				nameIdentifier();
				setState(4817);
				match(PERIOD);
				setState(4818);
				nameIdentifier();
				}
				break;
			case 5:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4820);
				nameIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserClauseContext extends ParserRuleContext {
		public NameIdentifierContext fromFirst;
		public NameIdentifierContext toFirst;
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUserClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRenameUserClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserClauseContext renameUserClause() throws RecognitionException {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_renameUserClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4823);
			((RenameUserClauseContext)_localctx).fromFirst = nameIdentifier();
			setState(4824);
			match(TO);
			setState(4825);
			((RenameUserClauseContext)_localctx).toFirst = nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode ANALYZE() { return getToken(MySQLSQLStatementParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySQLSQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4827);
			match(ANALYZE);
			setState(4829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4828);
				((AnalyzeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((AnalyzeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4831);
			match(TABLE);
			setState(4832);
			expr(0);
			setState(4837);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4833);
				match(COMMA);
				setState(4834);
				expr(0);
				}
				}
				setState(4839);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(MySQLSQLStatementParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public List<CheckTableOptionContext> checkTableOption() {
			return getRuleContexts(CheckTableOptionContext.class);
		}
		public CheckTableOptionContext checkTableOption(int i) {
			return getRuleContext(CheckTableOptionContext.class,i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_checkTable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4840);
			match(CHECK);
			setState(4841);
			match(TABLE);
			setState(4842);
			expr(0);
			setState(4847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4843);
				match(COMMA);
				setState(4844);
				expr(0);
				}
				}
				setState(4849);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4853);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,623,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4850);
					checkTableOption();
					}
					} 
				}
				setState(4855);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,623,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode CHECKSUM() { return getToken(MySQLSQLStatementParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode QUICK() { return getToken(MySQLSQLStatementParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLSQLStatementParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4856);
			match(CHECKSUM);
			setState(4857);
			match(TABLE);
			setState(4858);
			expr(0);
			setState(4863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4859);
				match(COMMA);
				setState(4860);
				expr(0);
				}
				}
				setState(4865);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4867);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				{
				setState(4866);
				((ChecksumTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					((ChecksumTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode OPTIMIZE() { return getToken(MySQLSQLStatementParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySQLSQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4869);
			match(OPTIMIZE);
			setState(4871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4870);
				((OptimizeTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((OptimizeTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4873);
			match(TABLE);
			setState(4874);
			expr(0);
			setState(4879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4875);
				match(COMMA);
				setState(4876);
				expr(0);
				}
				}
				setState(4881);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public Token actionOption;
		public TerminalNode REPAIR() { return getToken(MySQLSQLStatementParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode QUICK() { return getToken(MySQLSQLStatementParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLSQLStatementParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(MySQLSQLStatementParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySQLSQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4882);
			match(REPAIR);
			setState(4884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(4883);
				((RepairTableContext)_localctx).actionOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((RepairTableContext)_localctx).actionOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4886);
			match(TABLE);
			setState(4887);
			expr(0);
			setState(4892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4888);
				match(COMMA);
				setState(4889);
				expr(0);
				}
				}
				setState(4894);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,630,_ctx) ) {
			case 1:
				{
				setState(4895);
				match(QUICK);
				}
				break;
			}
			setState(4899);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(4898);
				match(EXTENDED);
				}
			}

			setState(4902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(4901);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOptionContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(MySQLSQLStatementParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(MySQLSQLStatementParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(MySQLSQLStatementParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(MySQLSQLStatementParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLSQLStatementParser.EXTENDED, 0); }
		public TerminalNode CHANGED() { return getToken(MySQLSQLStatementParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCheckTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOptionContext checkTableOption() throws RecognitionException {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_checkTableOption);
		try {
			setState(4911);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4904);
				match(FOR);
				setState(4905);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4906);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(4907);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(4908);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(4909);
				match(EXTENDED);
				}
				break;
			case CHANGED:
				enterOuterAlt(_localctx, 6);
				{
				setState(4910);
				match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfunctionContext extends ParserRuleContext {
		public Token returnType;
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(MySQLSQLStatementParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(MySQLSQLStatementParser.SONAME, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode STRING() { return getToken(MySQLSQLStatementParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(MySQLSQLStatementParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(MySQLSQLStatementParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(MySQLSQLStatementParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySQLSQLStatementParser.AGGREGATE, 0); }
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdfunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCreateUdfunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfunctionContext createUdfunction() throws RecognitionException {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_createUdfunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4913);
			match(CREATE);
			setState(4915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(4914);
				match(AGGREGATE);
				}
			}

			setState(4917);
			match(FUNCTION);
			setState(4918);
			nameIdentifier();
			setState(4919);
			match(RETURNS);
			setState(4920);
			((CreateUdfunctionContext)_localctx).returnType = _input.LT(1);
			_la = _input.LA(1);
			if ( !(((((_la - 186)) & ~0x3f) == 0 && ((1L << (_la - 186)) & ((1L << (INTEGER - 186)) | (1L << (REAL - 186)) | (1L << (DECIMAL - 186)))) != 0) || _la==STRING) ) {
				((CreateUdfunctionContext)_localctx).returnType = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4921);
			match(SONAME);
			setState(4922);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(MySQLSQLStatementParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySQLSQLStatementParser.PLUGIN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(MySQLSQLStatementParser.SONAME, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4924);
			match(INSTALL);
			setState(4925);
			match(PLUGIN);
			setState(4926);
			nameIdentifier();
			setState(4927);
			match(SONAME);
			setState(4928);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(MySQLSQLStatementParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(MySQLSQLStatementParser.PLUGIN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4930);
			match(UNINSTALL);
			setState(4931);
			match(PLUGIN);
			setState(4932);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
	 
		public SetStatementContext() { }
		public void copyFrom(SetStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SetPasswordStatementContext extends SetStatementContext {
		public ExprContext user;
		public ExprContext password;
		public ExprContext replace;
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode PASSWORD() { return getToken(MySQLSQLStatementParser.PASSWORD, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode REPLACE() { return getToken(MySQLSQLStatementParser.REPLACE, 0); }
		public SetPasswordStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetPasswordStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetTransactionStatementContext extends SetStatementContext {
		public Token priori;
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySQLSQLStatementParser.TRANSACTION, 0); }
		public List<TransactionOptionContext> transactionOption() {
			return getRuleContexts(TransactionOptionContext.class);
		}
		public TransactionOptionContext transactionOption(int i) {
			return getRuleContext(TransactionOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode GLOBAL() { return getToken(MySQLSQLStatementParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySQLSQLStatementParser.SESSION, 0); }
		public SetTransactionStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetAutocommitContext extends SetStatementContext {
		public SetAutoCommitStatementContext setAutoCommitStatement() {
			return getRuleContext(SetAutoCommitStatementContext.class,0);
		}
		public SetAutocommitContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetAutocommit(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetNamesStatementContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(MySQLSQLStatementParser.NAMES, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetNamesStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetNamesStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharacterSetStatementContext extends SetStatementContext {
		public List<TerminalNode> SET() { return getTokens(MySQLSQLStatementParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySQLSQLStatementParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySQLSQLStatementParser.CHARACTER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetCharacterSetStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetCharacterSetStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetDefaultRoleStatementContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(MySQLSQLStatementParser.ROLE, 0); }
		public List<SetDefaultRoleContext> setDefaultRole() {
			return getRuleContexts(SetDefaultRoleContext.class);
		}
		public SetDefaultRoleContext setDefaultRole(int i) {
			return getRuleContext(SetDefaultRoleContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public SetDefaultRoleStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetDefaultRoleStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetCharsetStatementContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode CHARSET() { return getToken(MySQLSQLStatementParser.CHARSET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetCharsetStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetCharsetStatement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetVariableStatementContext extends SetStatementContext {
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public List<AssignmentExprContext> assignmentExpr() {
			return getRuleContexts(AssignmentExprContext.class);
		}
		public AssignmentExprContext assignmentExpr(int i) {
			return getRuleContext(AssignmentExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public SetVariableStatementContext(SetStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetVariableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_setStatement);
		int _la;
		try {
			setState(4999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				_localctx = new SetDefaultRoleStatementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4934);
				match(SET);
				setState(4935);
				match(DEFAULT);
				setState(4936);
				match(ROLE);
				setState(4937);
				setDefaultRole();
				setState(4942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4938);
					match(COMMA);
					setState(4939);
					setDefaultRole();
					}
					}
					setState(4944);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4945);
				match(TO);
				setState(4946);
				expr(0);
				setState(4951);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4947);
					match(COMMA);
					setState(4948);
					expr(0);
					}
					}
					setState(4953);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetPasswordStatementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4954);
				match(SET);
				setState(4955);
				match(PASSWORD);
				setState(4958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4956);
					match(FOR);
					setState(4957);
					((SetPasswordStatementContext)_localctx).user = expr(0);
					}
				}

				setState(4960);
				match(EQUALS_OP);
				setState(4961);
				((SetPasswordStatementContext)_localctx).password = expr(0);
				setState(4964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
				case 1:
					{
					setState(4962);
					match(REPLACE);
					setState(4963);
					((SetPasswordStatementContext)_localctx).replace = expr(0);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SetVariableStatementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4966);
				match(SET);
				setState(4967);
				assignmentExpr();
				setState(4972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4968);
					match(COMMA);
					setState(4969);
					assignmentExpr();
					}
					}
					setState(4974);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new SetCharacterSetStatementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4975);
				match(SET);
				setState(4976);
				match(CHARACTER);
				setState(4977);
				match(SET);
				setState(4978);
				expr(0);
				}
				break;
			case 5:
				_localctx = new SetCharsetStatementContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4979);
				match(SET);
				setState(4980);
				match(CHARSET);
				setState(4981);
				expr(0);
				}
				break;
			case 6:
				_localctx = new SetNamesStatementContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(4982);
				match(SET);
				setState(4983);
				match(NAMES);
				setState(4984);
				expr(0);
				}
				break;
			case 7:
				_localctx = new SetTransactionStatementContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(4985);
				match(SET);
				setState(4987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(4986);
					((SetTransactionStatementContext)_localctx).priori = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
						((SetTransactionStatementContext)_localctx).priori = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4989);
				match(TRANSACTION);
				setState(4990);
				transactionOption();
				setState(4995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4991);
					match(COMMA);
					setState(4992);
					transactionOption();
					}
					}
					setState(4997);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new SetAutocommitContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(4998);
				setAutoCommitStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetDefaultRoleContext extends ParserRuleContext {
		public AllLiteralContext allLiteral() {
			return getRuleContext(AllLiteralContext.class,0);
		}
		public NoneLiteralContext noneLiteral() {
			return getRuleContext(NoneLiteralContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetDefaultRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setDefaultRole; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetDefaultRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetDefaultRoleContext setDefaultRole() throws RecognitionException {
		SetDefaultRoleContext _localctx = new SetDefaultRoleContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_setDefaultRole);
		try {
			setState(5004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5001);
				allLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5002);
				noneLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5003);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySQLSQLStatementParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySQLSQLStatementParser.TABLES, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreatenameIdentifierObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(MySQLSQLStatementParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySQLSQLStatementParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(MySQLSQLStatementParser.VIEW, 0); }
		public ShowCreatenameIdentifierObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowCreatenameIdentifierObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public ExprContext offset;
		public ExprContext rowCount;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySQLSQLStatementParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySQLSQLStatementParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(MySQLSQLStatementParser.LIMIT, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(MySQLSQLStatementParser.COUNT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode ERRORS() { return getToken(MySQLSQLStatementParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySQLSQLStatementParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySQLSQLStatementParser.CREATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySQLSQLStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySQLSQLStatementParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySQLSQLStatementParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySQLSQLStatementParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public List<TerminalNode> FROM() { return getTokens(MySQLSQLStatementParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySQLSQLStatementParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySQLSQLStatementParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySQLSQLStatementParser.IN, i);
		}
		public TerminalNode WHERE() { return getToken(MySQLSQLStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(MySQLSQLStatementParser.KEYS, 0); }
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public ExprContext filename;
		public ExprContext fromPosition;
		public ExprContext offset;
		public ExprContext rowCount;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySQLSQLStatementParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(MySQLSQLStatementParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySQLSQLStatementParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(MySQLSQLStatementParser.LIMIT, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySQLSQLStatementParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySQLSQLStatementParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySQLSQLStatementParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySQLSQLStatementParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLSQLStatementParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySQLSQLStatementParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLSQLStatementParser.CHANNEL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(MySQLSQLStatementParser.CODE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLSQLStatementParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public ExprContext queryCount;
		public ExprContext offset;
		public ExprContext rowCount;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySQLSQLStatementParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySQLSQLStatementParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySQLSQLStatementParser.QUERY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySQLSQLStatementParser.SHOW, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode COLUMNS() { return getToken(MySQLSQLStatementParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySQLSQLStatementParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySQLSQLStatementParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySQLSQLStatementParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySQLSQLStatementParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySQLSQLStatementParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(MySQLSQLStatementParser.FULL, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_showStatement);
		int _la;
		try {
			setState(5181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5006);
				match(SHOW);
				setState(5007);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5008);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5009);
				match(SHOW);
				setState(5010);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5011);
				match(EVENTS);
				setState(5014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5012);
					match(IN);
					setState(5013);
					((ShowLogEventsContext)_localctx).filename = expr(0);
					}
				}

				setState(5018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(5016);
					match(FROM);
					setState(5017);
					((ShowLogEventsContext)_localctx).fromPosition = expr(0);
					}
				}

				setState(5027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(5020);
					match(LIMIT);
					setState(5024);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
					case 1:
						{
						setState(5021);
						((ShowLogEventsContext)_localctx).offset = expr(0);
						setState(5022);
						match(COMMA);
						}
						break;
					}
					setState(5026);
					((ShowLogEventsContext)_localctx).rowCount = expr(0);
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5029);
				match(SHOW);
				setState(5030);
				showCommonEntity();
				setState(5032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5031);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5034);
				match(SHOW);
				setState(5036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5035);
					match(FULL);
					}
				}

				setState(5038);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5039);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5040);
				nameIdentifier();
				setState(5043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5041);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5042);
					nameIdentifier();
					}
				}

				setState(5046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5045);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5048);
				match(SHOW);
				setState(5049);
				match(CREATE);
				setState(5050);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(5051);
					ifNotExists();
					}
				}

				setState(5054);
				nameIdentifier();
				}
				break;
			case 6:
				_localctx = new ShowCreatenameIdentifierObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5055);
				match(SHOW);
				setState(5056);
				match(CREATE);
				setState(5057);
				((ShowCreatenameIdentifierObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (PROCEDURE - 121)) | (1L << (TABLE - 121)) | (1L << (TRIGGER - 121)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreatenameIdentifierObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5058);
				nameIdentifier();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5059);
				match(SHOW);
				setState(5060);
				match(CREATE);
				setState(5061);
				match(USER);
				setState(5062);
				nameIdentifier();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5063);
				match(SHOW);
				setState(5064);
				match(ENGINE);
				setState(5065);
				engineName();
				setState(5066);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5068);
				match(SHOW);
				setState(5069);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5070);
				match(SHOW);
				setState(5071);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				{
				setState(5072);
				match(LIMIT);
				setState(5076);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
				case 1:
					{
					setState(5073);
					((ShowErrorsContext)_localctx).offset = expr(0);
					setState(5074);
					match(COMMA);
					}
					break;
				}
				setState(5078);
				((ShowErrorsContext)_localctx).rowCount = expr(0);
				}
				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5079);
				match(SHOW);
				setState(5080);
				match(COUNT);
				setState(5081);
				match(LEFT_PAREN);
				setState(5082);
				match(ASTERISK);
				setState(5083);
				match(RIGHT_PAREN);
				setState(5084);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5085);
				match(SHOW);
				setState(5086);
				showSchemaEntity();
				setState(5089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5087);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5088);
					nameIdentifier();
					}
				}

				setState(5092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5091);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5094);
				match(SHOW);
				setState(5095);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5096);
				match(CODE);
				setState(5097);
				nameIdentifier();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5098);
				match(SHOW);
				setState(5099);
				match(GRANTS);
				setState(5102);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5100);
					match(FOR);
					setState(5101);
					nameIdentifier();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5104);
				match(SHOW);
				setState(5105);
				match(INDEX);
				setState(5106);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5107);
				nameIdentifier();
				setState(5110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5108);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5109);
					nameIdentifier();
					}
				}

				setState(5114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5112);
					match(WHERE);
					setState(5113);
					expr(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(5116);
				match(SHOW);
				setState(5117);
				match(KEY);
				setState(5118);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5119);
				nameIdentifier();
				setState(5122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5120);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5121);
					nameIdentifier();
					}
				}

				setState(5126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5124);
					match(WHERE);
					setState(5125);
					expr(0);
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(5128);
				match(SHOW);
				setState(5129);
				match(KEYS);
				setState(5130);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5131);
				nameIdentifier();
				setState(5134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5132);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5133);
					nameIdentifier();
					}
				}

				setState(5138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5136);
					match(WHERE);
					setState(5137);
					expr(0);
					}
				}

				}
				break;
			case 18:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(5140);
				match(SHOW);
				setState(5141);
				match(OPEN);
				setState(5142);
				match(TABLES);
				setState(5145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(5143);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5144);
					nameIdentifier();
					}
				}

				setState(5148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(5147);
					showFilter();
					}
				}

				}
				break;
			case 19:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(5150);
				match(SHOW);
				setState(5151);
				match(PROFILE);
				setState(5152);
				showProfileType();
				setState(5157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5153);
					match(COMMA);
					setState(5154);
					showProfileType();
					}
					}
					setState(5159);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5160);
					match(FOR);
					setState(5161);
					match(QUERY);
					setState(5162);
					((ShowProfileContext)_localctx).queryCount = expr(0);
					}
				}

				{
				setState(5165);
				match(LIMIT);
				setState(5169);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
				case 1:
					{
					setState(5166);
					((ShowProfileContext)_localctx).offset = expr(0);
					setState(5167);
					match(COMMA);
					}
					break;
				}
				setState(5171);
				((ShowProfileContext)_localctx).rowCount = expr(0);
				}
				}
				break;
			case 20:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(5173);
				match(SHOW);
				setState(5174);
				match(SLAVE);
				setState(5175);
				match(STATUS);
				setState(5179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5176);
					match(FOR);
					setState(5177);
					match(CHANNEL);
					setState(5178);
					expr(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySQLSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySQLSQLStatementParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(MySQLSQLStatementParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySQLSQLStatementParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySQLSQLStatementParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySQLSQLStatementParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySQLSQLStatementParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(MySQLSQLStatementParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySQLSQLStatementParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_showCommonEntity);
		int _la;
		try {
			setState(5196);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5183);
				match(CHARACTER);
				setState(5184);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(5185);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5186);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5187);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(5188);
				match(FUNCTION);
				setState(5189);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5190);
				match(PROCEDURE);
				setState(5191);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(5193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(5192);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5195);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySQLSQLStatementParser.LIKE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySQLSQLStatementParser.WHERE, 0); }
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_showFilter);
		try {
			setState(5202);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5198);
				match(LIKE);
				setState(5199);
				expr(0);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5200);
				match(WHERE);
				setState(5201);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(MySQLSQLStatementParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(MySQLSQLStatementParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(MySQLSQLStatementParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySQLSQLStatementParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySQLSQLStatementParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySQLSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySQLSQLStatementParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(MySQLSQLStatementParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(MySQLSQLStatementParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLSQLStatementParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(MySQLSQLStatementParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(MySQLSQLStatementParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySQLSQLStatementParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(5221);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(5204);
					match(STORAGE);
					}
				}

				setState(5207);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5208);
				match(MASTER);
				setState(5209);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5210);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(5211);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(5213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5212);
					match(FULL);
					}
				}

				setState(5215);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5216);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5217);
				match(SLAVE);
				setState(5218);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5219);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5220);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(MySQLSQLStatementParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(MySQLSQLStatementParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySQLSQLStatementParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySQLSQLStatementParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(MySQLSQLStatementParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySQLSQLStatementParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_showSchemaEntity);
		int _la;
		try {
			setState(5231);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5223);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5224);
				match(TABLE);
				setState(5225);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(5227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(5226);
					match(FULL);
					}
				}

				setState(5229);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(5230);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySQLSQLStatementParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySQLSQLStatementParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySQLSQLStatementParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySQLSQLStatementParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySQLSQLStatementParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySQLSQLStatementParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLSQLStatementParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySQLSQLStatementParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySQLSQLStatementParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySQLSQLStatementParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySQLSQLStatementParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_showProfileType);
		try {
			setState(5245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5233);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5234);
				match(BLOCK);
				setState(5235);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5236);
				match(CONTEXT);
				setState(5237);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(5238);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(5239);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(5240);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5241);
				match(PAGE);
				setState(5242);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5243);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5244);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogStatementContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(MySQLSQLStatementParser.BINLOG, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public BinlogStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlogStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBinlogStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogStatementContext binlogStatement() throws RecognitionException {
		BinlogStatementContext _localctx = new BinlogStatementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_binlogStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5247);
			match(BINLOG);
			setState(5248);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexStatementContext extends ParserRuleContext {
		public NameIdentifierContext schema;
		public TerminalNode CACHE() { return getToken(MySQLSQLStatementParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public List<TableIndexesContext> tableIndexes() {
			return getRuleContexts(TableIndexesContext.class);
		}
		public TableIndexesContext tableIndexes(int i) {
			return getRuleContext(TableIndexesContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndexStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCacheIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexStatementContext cacheIndexStatement() throws RecognitionException {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_cacheIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5250);
			match(CACHE);
			setState(5251);
			match(INDEX);
			setState(5252);
			tableIndexes();
			setState(5257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5253);
				match(COMMA);
				setState(5254);
				tableIndexes();
				}
				}
				setState(5259);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5260);
				match(PARTITION);
				setState(5261);
				match(LEFT_PAREN);
				setState(5271);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
				case 1:
					{
					setState(5262);
					expr(0);
					setState(5267);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5263);
						match(COMMA);
						setState(5264);
						expr(0);
						}
						}
						setState(5269);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(5270);
					match(ALL);
					}
					break;
				}
				setState(5273);
				match(RIGHT_PAREN);
				}
			}

			setState(5276);
			match(IN);
			setState(5277);
			((CacheIndexStatementContext)_localctx).schema = nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushStatementContext extends ParserRuleContext {
		public Token flushFormat;
		public TerminalNode FLUSH() { return getToken(MySQLSQLStatementParser.FLUSH, 0); }
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(MySQLSQLStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFlushStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushStatementContext flushStatement() throws RecognitionException {
		FlushStatementContext _localctx = new FlushStatementContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_flushStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5279);
			match(FLUSH);
			setState(5281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				setState(5280);
				((FlushStatementContext)_localctx).flushFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					((FlushStatementContext)_localctx).flushFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5283);
			flushOption();
			setState(5288);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5284);
				match(COMMA);
				setState(5285);
				flushOption();
				}
				}
				setState(5290);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillStatementContext extends ParserRuleContext {
		public Token connectionFormat;
		public TerminalNode KILL() { return getToken(MySQLSQLStatementParser.KILL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CONNECTION() { return getToken(MySQLSQLStatementParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(MySQLSQLStatementParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_killStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitKillStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillStatementContext killStatement() throws RecognitionException {
		KillStatementContext _localctx = new KillStatementContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_killStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5291);
			match(KILL);
			setState(5293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				{
				setState(5292);
				((KillStatementContext)_localctx).connectionFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					((KillStatementContext)_localctx).connectionFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5296); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(5295);
					expr(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5298); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,686,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexIntoCacheContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(MySQLSQLStatementParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(MySQLSQLStatementParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(MySQLSQLStatementParser.CACHE, 0); }
		public List<LoadedTableIndexesContext> loadedTableIndexes() {
			return getRuleContexts(LoadedTableIndexesContext.class);
		}
		public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return getRuleContext(LoadedTableIndexesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexIntoCache; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLoadIndexIntoCache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexIntoCacheContext loadIndexIntoCache() throws RecognitionException {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_loadIndexIntoCache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5300);
			match(LOAD);
			setState(5301);
			match(INDEX);
			setState(5302);
			match(INTO);
			setState(5303);
			match(CACHE);
			setState(5304);
			loadedTableIndexes();
			setState(5309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5305);
				match(COMMA);
				setState(5306);
				loadedTableIndexes();
				}
				}
				setState(5311);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(MySQLSQLStatementParser.RESET, 0); }
		public TerminalNode QUERY() { return getToken(MySQLSQLStatementParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySQLSQLStatementParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_resetStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5312);
			match(RESET);
			setState(5313);
			match(QUERY);
			setState(5314);
			match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownStatementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(MySQLSQLStatementParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdownStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitShutdownStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownStatementContext shutdownStatement() throws RecognitionException {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_shutdownStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5316);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexesContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexesContext tableIndexes() throws RecognitionException {
		TableIndexesContext _localctx = new TableIndexesContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_tableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5318);
			nameIdentifier();
			setState(5333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INDEX - 68)) | (1L << (KEY - 68)) | (1L << (KEYS - 68)))) != 0) || _la==LEFT_PAREN) {
				{
				setState(5320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INDEX - 68)) | (1L << (KEY - 68)) | (1L << (KEYS - 68)))) != 0)) {
					{
					setState(5319);
					indexFormat();
					}
				}

				setState(5322);
				match(LEFT_PAREN);
				setState(5323);
				expr(0);
				setState(5328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5324);
					match(COMMA);
					setState(5325);
					expr(0);
					}
					}
					setState(5330);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5331);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
	 
		public FlushOptionContext() { }
		public void copyFrom(FlushOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableFlushOptionContext extends FlushOptionContext {
		public TerminalNode TABLES() { return getToken(MySQLSQLStatementParser.TABLES, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public FlushTableOptionContext flushTableOption() {
			return getRuleContext(FlushTableOptionContext.class,0);
		}
		public TableFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTableFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ChannelFlushOptionContext extends FlushOptionContext {
		public TerminalNode RELAY() { return getToken(MySQLSQLStatementParser.RELAY, 0); }
		public TerminalNode LOGS() { return getToken(MySQLSQLStatementParser.LOGS, 0); }
		public ChannelOptionContext channelOption() {
			return getRuleContext(ChannelOptionContext.class,0);
		}
		public ChannelFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitChannelFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFlushOptionContext extends FlushOptionContext {
		public TerminalNode DES_KEY_FILE() { return getToken(MySQLSQLStatementParser.DES_KEY_FILE, 0); }
		public TerminalNode HOSTS() { return getToken(MySQLSQLStatementParser.HOSTS, 0); }
		public TerminalNode LOGS() { return getToken(MySQLSQLStatementParser.LOGS, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySQLSQLStatementParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySQLSQLStatementParser.PRIVILEGES, 0); }
		public TerminalNode QUERY() { return getToken(MySQLSQLStatementParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(MySQLSQLStatementParser.CACHE, 0); }
		public TerminalNode STATUS() { return getToken(MySQLSQLStatementParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySQLSQLStatementParser.USER_RESOURCES, 0); }
		public TerminalNode TABLES() { return getToken(MySQLSQLStatementParser.TABLES, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySQLSQLStatementParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySQLSQLStatementParser.LOCK, 0); }
		public TerminalNode BINARY() { return getToken(MySQLSQLStatementParser.BINARY, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(MySQLSQLStatementParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(MySQLSQLStatementParser.GENERAL, 0); }
		public TerminalNode RELAY() { return getToken(MySQLSQLStatementParser.RELAY, 0); }
		public TerminalNode SLOW() { return getToken(MySQLSQLStatementParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSimpleFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_flushOption);
		int _la;
		try {
			int _alt;
			setState(5372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5353);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DES_KEY_FILE:
					{
					setState(5335);
					match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					setState(5336);
					match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					setState(5338);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BINARY || ((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (ENGINE - 307)) | (1L << (ERROR - 307)) | (1L << (GENERAL - 307)))) != 0) || _la==RELAY || _la==SLOW) {
						{
						setState(5337);
						_la = _input.LA(1);
						if ( !(_la==BINARY || ((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (ENGINE - 307)) | (1L << (ERROR - 307)) | (1L << (GENERAL - 307)))) != 0) || _la==RELAY || _la==SLOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(5340);
					match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					setState(5341);
					match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					setState(5342);
					match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					setState(5343);
					match(QUERY);
					setState(5344);
					match(CACHE);
					}
					break;
				case STATUS:
					{
					setState(5345);
					match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					setState(5346);
					match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					setState(5347);
					match(TABLES);
					setState(5351);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(5348);
						match(WITH);
						setState(5349);
						match(READ);
						setState(5350);
						match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5355);
				match(RELAY);
				setState(5356);
				match(LOGS);
				setState(5358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(5357);
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5360);
				match(TABLES);
				setState(5361);
				expr(0);
				setState(5366);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,695,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5362);
						match(COMMA);
						setState(5363);
						expr(0);
						}
						} 
					}
					setState(5368);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,695,_ctx);
				}
				setState(5370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					setState(5369);
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTableOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode READ() { return getToken(MySQLSQLStatementParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(MySQLSQLStatementParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(MySQLSQLStatementParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTableOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFlushTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTableOptionContext flushTableOption() throws RecognitionException {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_flushTableOption);
		try {
			setState(5379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(5374);
				match(WITH);
				setState(5375);
				match(READ);
				setState(5376);
				match(LOCK);
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5377);
				match(FOR);
				setState(5378);
				match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadedTableIndexesContext extends ParserRuleContext {
		public ExprContext partitionList;
		public ExprContext indexList;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(MySQLSQLStatementParser.LEAVES, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public IndexFormatContext indexFormat() {
			return getRuleContext(IndexFormatContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadedTableIndexes; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLoadedTableIndexes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadedTableIndexesContext loadedTableIndexes() throws RecognitionException {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_loadedTableIndexes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5381);
			nameIdentifier();
			setState(5396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(5382);
				match(PARTITION);
				setState(5383);
				match(LEFT_PAREN);
				setState(5393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
				case 1:
					{
					setState(5384);
					((LoadedTableIndexesContext)_localctx).partitionList = expr(0);
					setState(5389);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5385);
						match(COMMA);
						setState(5386);
						expr(0);
						}
						}
						setState(5391);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(5392);
					match(ALL);
					}
					break;
				}
				setState(5395);
				match(RIGHT_PAREN);
				}
			}

			setState(5412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				{
				setState(5399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INDEX - 68)) | (1L << (KEY - 68)) | (1L << (KEYS - 68)))) != 0)) {
					{
					setState(5398);
					indexFormat();
					}
				}

				setState(5401);
				match(LEFT_PAREN);
				setState(5402);
				((LoadedTableIndexesContext)_localctx).indexList = expr(0);
				setState(5407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5403);
					match(COMMA);
					setState(5404);
					expr(0);
					}
					}
					setState(5409);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5410);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(5416);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(5414);
				match(IGNORE);
				setState(5415);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public NameIdentifierContext column;
		public ExprContext pattern;
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public TerminalNode EXPLAIN() { return getToken(MySQLSQLStatementParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySQLSQLStatementParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySQLSQLStatementParser.DESC, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5418);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5419);
			nameIdentifier();
			setState(5422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(5420);
				((SimpleDescribeStatementContext)_localctx).column = nameIdentifier();
				}
				break;
			case 2:
				{
				setState(5421);
				((SimpleDescribeStatementContext)_localctx).pattern = expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySQLSQLStatementParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySQLSQLStatementParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySQLSQLStatementParser.DESC, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode EXTENDED() { return getToken(MySQLSQLStatementParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySQLSQLStatementParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(MySQLSQLStatementParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySQLSQLStatementParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySQLSQLStatementParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5424);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(5425);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5426);
				match(EQUALS_OP);
				setState(5427);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5430);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(MySQLSQLStatementParser.HELP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5432);
			match(HELP);
			setState(5433);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySQLSQLStatementParser.USE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5435);
			match(USE);
			setState(5436);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySQLSQLStatementParser.CONNECTION, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_describeObjectClause);
		try {
			setState(5448);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LEFT_PAREN:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5443);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LEFT_PAREN:
					{
					setState(5438);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(5439);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(5440);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(5441);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(5442);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5445);
				match(FOR);
				setState(5446);
				match(CONNECTION);
				setState(5447);
				nameIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySQLSQLStatementParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySQLSQLStatementParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySQLSQLStatementParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySQLSQLStatementParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySQLSQLStatementParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLSQLStatementParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySQLSQLStatementParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySQLSQLStatementParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySQLSQLStatementParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySQLSQLStatementParser.NDBCLUSTER, 0); }
		public TerminalNode PERFOMANCE_SCHEMA() { return getToken(MySQLSQLStatementParser.PERFOMANCE_SCHEMA, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5450);
			_la = _input.LA(1);
			if ( !(((((_la - 617)) & ~0x3f) == 0 && ((1L << (_la - 617)) & ((1L << (ARCHIVE - 617)) | (1L << (BLACKHOLE - 617)) | (1L << (CSV - 617)) | (1L << (FEDERATED - 617)) | (1L << (INNODB - 617)) | (1L << (MEMORY - 617)) | (1L << (MRG_MYISAM - 617)) | (1L << (MYISAM - 617)) | (1L << (NDB - 617)) | (1L << (NDBCLUSTER - 617)) | (1L << (PERFOMANCE_SCHEMA - 617)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnameIdentifierSetContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public UnameIdentifierSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unameIdentifierSet; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUnameIdentifierSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnameIdentifierSetContext unameIdentifierSet() throws RecognitionException {
		UnameIdentifierSetContext _localctx = new UnameIdentifierSetContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_unameIdentifierSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5452);
			expr(0);
			setState(5453);
			match(MINUS_SIGN);
			setState(5454);
			expr(0);
			setState(5455);
			match(MINUS_SIGN);
			setState(5456);
			expr(0);
			setState(5457);
			match(MINUS_SIGN);
			setState(5458);
			expr(0);
			setState(5459);
			match(MINUS_SIGN);
			setState(5460);
			expr(0);
			setState(5466); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5461);
				match(COLON);
				setState(5462);
				expr(0);
				setState(5463);
				match(MINUS_SIGN);
				setState(5464);
				expr(0);
				}
				}
				setState(5468); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XnameIdentifierStringIdContext globalnameIdentifierIdentifier;
		public XnameIdentifierStringIdContext qualifier;
		public ExprContext idFormat;
		public List<XnameIdentifierStringIdContext> xnameIdentifierStringId() {
			return getRuleContexts(XnameIdentifierStringIdContext.class);
		}
		public XnameIdentifierStringIdContext xnameIdentifierStringId(int i) {
			return getRuleContext(XnameIdentifierStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5470);
			((XidContext)_localctx).globalnameIdentifierIdentifier = xnameIdentifierStringId();
			setState(5477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5471);
				match(COMMA);
				setState(5472);
				((XidContext)_localctx).qualifier = xnameIdentifierStringId();
				setState(5475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5473);
					match(COMMA);
					setState(5474);
					((XidContext)_localctx).idFormat = expr(0);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XnameIdentifierStringIdContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode BIT_STRING() { return getToken(MySQLSQLStatementParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySQLSQLStatementParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySQLSQLStatementParser.HEXADECIMAL_LITERAL, i);
		}
		public XnameIdentifierStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xnameIdentifierStringId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitXnameIdentifierStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XnameIdentifierStringIdContext xnameIdentifierStringId() throws RecognitionException {
		XnameIdentifierStringIdContext _localctx = new XnameIdentifierStringIdContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_xnameIdentifierStringId);
		try {
			int _alt;
			setState(5486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5479);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5480);
				match(BIT_STRING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5482); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5481);
						match(HEXADECIMAL_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5484); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,713,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_authPlugin);
		try {
			setState(5490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5488);
				nameIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5489);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_Context extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySQLSQLStatementParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySQLSQLStatementParser.NULL_SPEC_LITERAL, 0); }
		public Null_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNull_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_Context null_() throws RecognitionException {
		Null_Context _localctx = new Null_Context(_ctx, getState());
		enterRule(_localctx, 540, RULE_null_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5492);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotNullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public Null_Context null_() {
			return getRuleContext(Null_Context.class,0);
		}
		public NotNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notNull; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNotNull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotNullContext notNull() throws RecognitionException {
		NotNullContext _localctx = new NotNullContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_notNull);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5494);
			match(NOT);
			setState(5495);
			null_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode BINARY() { return getToken(MySQLSQLStatementParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySQLSQLStatementParser.NCHAR, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySQLSQLStatementParser.CHAR, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public TerminalNode DATE() { return getToken(MySQLSQLStatementParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySQLSQLStatementParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySQLSQLStatementParser.TIME, 0); }
		public TerminalNode DECIMAL() { return getToken(MySQLSQLStatementParser.DECIMAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(MySQLSQLStatementParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode INTEGER() { return getToken(MySQLSQLStatementParser.INTEGER, 0); }
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_convertedDataType);
		int _la;
		try {
			setState(5517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(5497);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5498);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5501);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(5503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5502);
					lengthOneDimension();
					}
				}

				setState(5506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER || _la==DEFAULT) {
					{
					setState(5505);
					characterSetOptionExpr();
					}
				}

				}
				break;
			case DATE:
			case TIME:
			case DATETIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(5508);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (DATE - 194)) | (1L << (TIME - 194)) | (1L << (DATETIME - 194)))) != 0)) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5509);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(5511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5510);
					lengthTwoDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				enterOuterAlt(_localctx, 5);
				{
				setState(5513);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(5514);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5519);
			match(LEFT_PAREN);
			setState(5520);
			expr(0);
			setState(5521);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5523);
			match(LEFT_PAREN);
			setState(5524);
			expr(0);
			setState(5525);
			match(COMMA);
			setState(5526);
			expr(0);
			setState(5527);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5529);
			match(LEFT_PAREN);
			setState(5530);
			expr(0);
			setState(5533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5531);
				match(COMMA);
				setState(5532);
				expr(0);
				}
			}

			setState(5535);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5537);
			expr(0);
			setState(5542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5538);
				match(COMMA);
				setState(5539);
				expr(0);
				}
				}
				setState(5544);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySQLSQLStatementParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySQLSQLStatementParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5545);
			match(LOCAL_ID);
			setState(5550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5546);
				match(COMMA);
				setState(5547);
				match(LOCAL_ID);
				}
				}
				setState(5552);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public ExprContext firstLevel;
		public ExprContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySQLSQLStatementParser.LEVEL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySQLSQLStatementParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_levelsInWeightString);
		int _la;
		try {
			setState(5567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5553);
				match(LEVEL);
				setState(5554);
				levelInWeightListElement();
				setState(5559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5555);
					match(COMMA);
					setState(5556);
					levelInWeightListElement();
					}
					}
					setState(5561);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5562);
				match(LEVEL);
				setState(5563);
				((LevelWeightRangeContext)_localctx).firstLevel = expr(0);
				setState(5564);
				match(MINUS_SIGN);
				setState(5565);
				((LevelWeightRangeContext)_localctx).lastLevel = expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySQLSQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySQLSQLStatementParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySQLSQLStatementParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5569);
			expr(0);
			setState(5571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(5570);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public ExprContext separator;
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode AVG() { return getToken(MySQLSQLStatementParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySQLSQLStatementParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySQLSQLStatementParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySQLSQLStatementParser.SUM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySQLSQLStatementParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySQLSQLStatementParser.COUNT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySQLSQLStatementParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySQLSQLStatementParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySQLSQLStatementParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySQLSQLStatementParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySQLSQLStatementParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySQLSQLStatementParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySQLSQLStatementParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySQLSQLStatementParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySQLSQLStatementParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySQLSQLStatementParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySQLSQLStatementParser.GROUP_CONCAT, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode SEPARATOR() { return getToken(MySQLSQLStatementParser.SEPARATOR, 0); }
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(5655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5573);
				_la = _input.LA(1);
				if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (AVG - 212)) | (1L << (MAX - 212)) | (1L << (MIN - 212)) | (1L << (SUM - 212)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5574);
				match(LEFT_PAREN);
				setState(5576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
				case 1:
					{
					setState(5575);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5578);
				expr(0);
				setState(5583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5579);
					match(COMMA);
					setState(5580);
					expr(0);
					}
					}
					setState(5585);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5586);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5588);
				match(COUNT);
				setState(5589);
				match(LEFT_PAREN);
				setState(5602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
				case 1:
					{
					setState(5590);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(ASTERISK);
					}
					break;
				case 2:
					{
					setState(5592);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
					case 1:
						{
						setState(5591);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(5594);
					expr(0);
					setState(5599);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5595);
						match(COMMA);
						setState(5596);
						expr(0);
						}
						}
						setState(5601);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				setState(5604);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5605);
				match(COUNT);
				setState(5606);
				match(LEFT_PAREN);
				setState(5607);
				((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
				setState(5608);
				expr(0);
				setState(5613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5609);
					match(COMMA);
					setState(5610);
					expr(0);
					}
					}
					setState(5615);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5616);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5618);
				_la = _input.LA(1);
				if ( !(((((_la - 213)) & ~0x3f) == 0 && ((1L << (_la - 213)) & ((1L << (BIT_AND - 213)) | (1L << (BIT_OR - 213)) | (1L << (BIT_XOR - 213)) | (1L << (STD - 213)) | (1L << (STDDEV - 213)) | (1L << (STDDEV_POP - 213)) | (1L << (STDDEV_SAMP - 213)) | (1L << (VAR_POP - 213)) | (1L << (VAR_SAMP - 213)) | (1L << (VARIANCE - 213)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5619);
				match(LEFT_PAREN);
				setState(5621);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
				case 1:
					{
					setState(5620);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(5623);
				expr(0);
				setState(5628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5624);
					match(COMMA);
					setState(5625);
					expr(0);
					}
					}
					setState(5630);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5631);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5633);
				match(GROUP_CONCAT);
				setState(5634);
				match(LEFT_PAREN);
				setState(5636);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(5635);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
				}

				setState(5638);
				expr(0);
				setState(5643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5639);
					match(COMMA);
					setState(5640);
					expr(0);
					}
					}
					setState(5645);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(5646);
					orderByClause();
					}
				}

				setState(5651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(5649);
					match(SEPARATOR);
					setState(5650);
					((AggregateWindowedFunctionContext)_localctx).separator = expr(0);
					}
				}

				setState(5653);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySQLSQLStatementParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySQLSQLStatementParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySQLSQLStatementParser.BIG5, 0); }
		public TerminalNode CP1250() { return getToken(MySQLSQLStatementParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySQLSQLStatementParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySQLSQLStatementParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySQLSQLStatementParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySQLSQLStatementParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySQLSQLStatementParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySQLSQLStatementParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySQLSQLStatementParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySQLSQLStatementParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySQLSQLStatementParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySQLSQLStatementParser.EUCKR, 0); }
		public TerminalNode GB2312() { return getToken(MySQLSQLStatementParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySQLSQLStatementParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySQLSQLStatementParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySQLSQLStatementParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySQLSQLStatementParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySQLSQLStatementParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySQLSQLStatementParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySQLSQLStatementParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySQLSQLStatementParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySQLSQLStatementParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySQLSQLStatementParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySQLSQLStatementParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySQLSQLStatementParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySQLSQLStatementParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySQLSQLStatementParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySQLSQLStatementParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySQLSQLStatementParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySQLSQLStatementParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySQLSQLStatementParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySQLSQLStatementParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySQLSQLStatementParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySQLSQLStatementParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySQLSQLStatementParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySQLSQLStatementParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySQLSQLStatementParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySQLSQLStatementParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5657);
			_la = _input.LA(1);
			if ( !(((((_la - 577)) & ~0x3f) == 0 && ((1L << (_la - 577)) & ((1L << (ARMSCII8 - 577)) | (1L << (ASCII - 577)) | (1L << (BIG5 - 577)) | (1L << (CP1250 - 577)) | (1L << (CP1251 - 577)) | (1L << (CP1256 - 577)) | (1L << (CP1257 - 577)) | (1L << (CP850 - 577)) | (1L << (CP852 - 577)) | (1L << (CP866 - 577)) | (1L << (CP932 - 577)) | (1L << (DEC8 - 577)) | (1L << (EUCJPMS - 577)) | (1L << (EUCKR - 577)) | (1L << (GB2312 - 577)) | (1L << (GBK - 577)) | (1L << (GEOSTD8 - 577)) | (1L << (GREEK - 577)) | (1L << (HEBREW - 577)) | (1L << (HP8 - 577)) | (1L << (KEYBCS2 - 577)) | (1L << (KOI8R - 577)) | (1L << (KOI8U - 577)) | (1L << (LATIN1 - 577)) | (1L << (LATIN2 - 577)) | (1L << (LATIN5 - 577)) | (1L << (LATIN7 - 577)) | (1L << (MACCE - 577)) | (1L << (MACROMAN - 577)) | (1L << (SJIS - 577)) | (1L << (SWE7 - 577)) | (1L << (TIS620 - 577)) | (1L << (UCS2 - 577)) | (1L << (UJIS - 577)) | (1L << (UTF16 - 577)) | (1L << (UTF16LE - 577)) | (1L << (UTF32 - 577)) | (1L << (UTF8 - 577)) | (1L << (UTF8MB3 - 577)) | (1L << (UTF8MB4 - 577)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySQLSQLStatementParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySQLSQLStatementParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySQLSQLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySQLSQLStatementParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5659);
			_la = _input.LA(1);
			if ( !(((((_la - 628)) & ~0x3f) == 0 && ((1L << (_la - 628)) & ((1L << (REPEATABLE - 628)) | (1L << (COMMITTED - 628)) | (1L << (UNCOMMITTED - 628)) | (1L << (SERIALIZABLE - 628)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySQLSQLStatementParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySQLSQLStatementParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySQLSQLStatementParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySQLSQLStatementParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySQLSQLStatementParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySQLSQLStatementParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySQLSQLStatementParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySQLSQLStatementParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySQLSQLStatementParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5661);
			_la = _input.LA(1);
			if ( !(((((_la - 568)) & ~0x3f) == 0 && ((1L << (_la - 568)) & ((1L << (TABLES - 568)) | (1L << (ROUTINE - 568)) | (1L << (EXECUTE - 568)) | (1L << (FILE - 568)) | (1L << (PROCESS - 568)) | (1L << (RELOAD - 568)) | (1L << (SHUTDOWN - 568)) | (1L << (SUPER - 568)) | (1L << (PRIVILEGES - 568)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySQLSQLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySQLSQLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySQLSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySQLSQLStatementParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySQLSQLStatementParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySQLSQLStatementParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySQLSQLStatementParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5663);
			_la = _input.LA(1);
			if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (DATE - 194)) | (1L << (TIME - 194)) | (1L << (TIMESTAMP - 194)) | (1L << (DATETIME - 194)) | (1L << (YEAR - 194)) | (1L << (TEXT - 194)) | (1L << (ENUM - 194)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySQLSQLStatementParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySQLSQLStatementParser.ACTION, 0); }
		public TerminalNode AFTER() { return getToken(MySQLSQLStatementParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySQLSQLStatementParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySQLSQLStatementParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySQLSQLStatementParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySQLSQLStatementParser.AT, 0); }
		public TerminalNode AUTHORS() { return getToken(MySQLSQLStatementParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySQLSQLStatementParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySQLSQLStatementParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySQLSQLStatementParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySQLSQLStatementParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BEGIN() { return getToken(MySQLSQLStatementParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySQLSQLStatementParser.BINLOG, 0); }
		public TerminalNode BIT() { return getToken(MySQLSQLStatementParser.BIT, 0); }
		public TerminalNode BLOCK() { return getToken(MySQLSQLStatementParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySQLSQLStatementParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySQLSQLStatementParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySQLSQLStatementParser.BTREE, 0); }
		public TerminalNode CASCADED() { return getToken(MySQLSQLStatementParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySQLSQLStatementParser.CHAIN, 0); }
		public TerminalNode CHANNEL() { return getToken(MySQLSQLStatementParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySQLSQLStatementParser.CHECKSUM, 0); }
		public TerminalNode CIPHER() { return getToken(MySQLSQLStatementParser.CIPHER, 0); }
		public TerminalNode CLIENT() { return getToken(MySQLSQLStatementParser.CLIENT, 0); }
		public TerminalNode COALESCE() { return getToken(MySQLSQLStatementParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySQLSQLStatementParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySQLSQLStatementParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySQLSQLStatementParser.COLUMN_FORMAT, 0); }
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySQLSQLStatementParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySQLSQLStatementParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySQLSQLStatementParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySQLSQLStatementParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySQLSQLStatementParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySQLSQLStatementParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySQLSQLStatementParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySQLSQLStatementParser.CONSISTENT, 0); }
		public TerminalNode CONTAINS() { return getToken(MySQLSQLStatementParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySQLSQLStatementParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySQLSQLStatementParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySQLSQLStatementParser.COPY, 0); }
		public TerminalNode CPU() { return getToken(MySQLSQLStatementParser.CPU, 0); }
		public TerminalNode DATA() { return getToken(MySQLSQLStatementParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySQLSQLStatementParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySQLSQLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySQLSQLStatementParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySQLSQLStatementParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySQLSQLStatementParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLSQLStatementParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySQLSQLStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySQLSQLStatementParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySQLSQLStatementParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySQLSQLStatementParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySQLSQLStatementParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySQLSQLStatementParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySQLSQLStatementParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySQLSQLStatementParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySQLSQLStatementParser.ENCRYPTION, 0); }
		public TerminalNode ENDS() { return getToken(MySQLSQLStatementParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(MySQLSQLStatementParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySQLSQLStatementParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySQLSQLStatementParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySQLSQLStatementParser.ESCAPE, 0); }
		public TerminalNode EVEN() { return getToken(MySQLSQLStatementParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySQLSQLStatementParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySQLSQLStatementParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySQLSQLStatementParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySQLSQLStatementParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySQLSQLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySQLSQLStatementParser.EXPIRE, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySQLSQLStatementParser.EXTENT_SIZE, 0); }
		public TerminalNode FAULTS() { return getToken(MySQLSQLStatementParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySQLSQLStatementParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySQLSQLStatementParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySQLSQLStatementParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(MySQLSQLStatementParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySQLSQLStatementParser.FIXED, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySQLSQLStatementParser.FOLLOWS, 0); }
		public TerminalNode FULL() { return getToken(MySQLSQLStatementParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySQLSQLStatementParser.FUNCTION, 0); }
		public TerminalNode GLOBAL() { return getToken(MySQLSQLStatementParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySQLSQLStatementParser.GRANTS, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySQLSQLStatementParser.GROUP_REPLICATION, 0); }
		public TerminalNode HASH() { return getToken(MySQLSQLStatementParser.HASH, 0); }
		public TerminalNode HOST() { return getToken(MySQLSQLStatementParser.HOST, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySQLSQLStatementParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySQLSQLStatementParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySQLSQLStatementParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySQLSQLStatementParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySQLSQLStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode INPLACE() { return getToken(MySQLSQLStatementParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySQLSQLStatementParser.INSERT_METHOD, 0); }
		public TerminalNode INSTANCE() { return getToken(MySQLSQLStatementParser.INSTANCE, 0); }
		public TerminalNode INVOKER() { return getToken(MySQLSQLStatementParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySQLSQLStatementParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySQLSQLStatementParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySQLSQLStatementParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(MySQLSQLStatementParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySQLSQLStatementParser.ISSUER, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySQLSQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySQLSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySQLSQLStatementParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(MySQLSQLStatementParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySQLSQLStatementParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySQLSQLStatementParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySQLSQLStatementParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySQLSQLStatementParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySQLSQLStatementParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySQLSQLStatementParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySQLSQLStatementParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySQLSQLStatementParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySQLSQLStatementParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySQLSQLStatementParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySQLSQLStatementParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySQLSQLStatementParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySQLSQLStatementParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySQLSQLStatementParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySQLSQLStatementParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySQLSQLStatementParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySQLSQLStatementParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySQLSQLStatementParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySQLSQLStatementParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySQLSQLStatementParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySQLSQLStatementParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySQLSQLStatementParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySQLSQLStatementParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySQLSQLStatementParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySQLSQLStatementParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySQLSQLStatementParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySQLSQLStatementParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySQLSQLStatementParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLSQLStatementParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySQLSQLStatementParser.MERGE, 0); }
		public TerminalNode MID() { return getToken(MySQLSQLStatementParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySQLSQLStatementParser.MIGRATE, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySQLSQLStatementParser.MIN_ROWS, 0); }
		public TerminalNode MODIFY() { return getToken(MySQLSQLStatementParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySQLSQLStatementParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySQLSQLStatementParser.MYSQL, 0); }
		public TerminalNode NAME() { return getToken(MySQLSQLStatementParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySQLSQLStatementParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySQLSQLStatementParser.NCHAR, 0); }
		public TerminalNode NEVER() { return getToken(MySQLSQLStatementParser.NEVER, 0); }
		public TerminalNode NO() { return getToken(MySQLSQLStatementParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySQLSQLStatementParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySQLSQLStatementParser.NONE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySQLSQLStatementParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySQLSQLStatementParser.OFFSET, 0); }
		public TerminalNode OJ() { return getToken(MySQLSQLStatementParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySQLSQLStatementParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySQLSQLStatementParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySQLSQLStatementParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySQLSQLStatementParser.ONLY, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySQLSQLStatementParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONS() { return getToken(MySQLSQLStatementParser.OPTIONS, 0); }
		public TerminalNode OWNER() { return getToken(MySQLSQLStatementParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySQLSQLStatementParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySQLSQLStatementParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySQLSQLStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySQLSQLStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySQLSQLStatementParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySQLSQLStatementParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySQLSQLStatementParser.PASSWORD, 0); }
		public TerminalNode PHASE() { return getToken(MySQLSQLStatementParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySQLSQLStatementParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySQLSQLStatementParser.PLUGIN_DIR, 0); }
		public TerminalNode PORT() { return getToken(MySQLSQLStatementParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySQLSQLStatementParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySQLSQLStatementParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySQLSQLStatementParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySQLSQLStatementParser.PREV, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySQLSQLStatementParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySQLSQLStatementParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySQLSQLStatementParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySQLSQLStatementParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySQLSQLStatementParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySQLSQLStatementParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySQLSQLStatementParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySQLSQLStatementParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySQLSQLStatementParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySQLSQLStatementParser.REDUNDANT, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySQLSQLStatementParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySQLSQLStatementParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySQLSQLStatementParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySQLSQLStatementParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySQLSQLStatementParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySQLSQLStatementParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySQLSQLStatementParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySQLSQLStatementParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySQLSQLStatementParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySQLSQLStatementParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySQLSQLStatementParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySQLSQLStatementParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySQLSQLStatementParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySQLSQLStatementParser.REPLICATION, 0); }
		public TerminalNode RESUME() { return getToken(MySQLSQLStatementParser.RESUME, 0); }
		public TerminalNode RETURNS() { return getToken(MySQLSQLStatementParser.RETURNS, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySQLSQLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySQLSQLStatementParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySQLSQLStatementParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySQLSQLStatementParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySQLSQLStatementParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySQLSQLStatementParser.ROW_FORMAT, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySQLSQLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySQLSQLStatementParser.SCHEDULE, 0); }
		public TerminalNode SECURITY() { return getToken(MySQLSQLStatementParser.SECURITY, 0); }
		public TerminalNode SERVER() { return getToken(MySQLSQLStatementParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySQLSQLStatementParser.SESSION, 0); }
		public TerminalNode SHARE() { return getToken(MySQLSQLStatementParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySQLSQLStatementParser.SHARED, 0); }
		public TerminalNode SIGNED() { return getToken(MySQLSQLStatementParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySQLSQLStatementParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySQLSQLStatementParser.SLAVE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySQLSQLStatementParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySQLSQLStatementParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySQLSQLStatementParser.SOME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySQLSQLStatementParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySQLSQLStatementParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySQLSQLStatementParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySQLSQLStatementParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySQLSQLStatementParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySQLSQLStatementParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySQLSQLStatementParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySQLSQLStatementParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySQLSQLStatementParser.SQL_THREAD, 0); }
		public TerminalNode START() { return getToken(MySQLSQLStatementParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySQLSQLStatementParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySQLSQLStatementParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySQLSQLStatementParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySQLSQLStatementParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySQLSQLStatementParser.STATUS, 0); }
		public TerminalNode STOP() { return getToken(MySQLSQLStatementParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySQLSQLStatementParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySQLSQLStatementParser.STRING, 0); }
		public TerminalNode SUBJECT() { return getToken(MySQLSQLStatementParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySQLSQLStatementParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySQLSQLStatementParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySQLSQLStatementParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySQLSQLStatementParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySQLSQLStatementParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySQLSQLStatementParser.SWITCHES, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySQLSQLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySQLSQLStatementParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySQLSQLStatementParser.THAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySQLSQLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySQLSQLStatementParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySQLSQLStatementParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySQLSQLStatementParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySQLSQLStatementParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySQLSQLStatementParser.UNKNOWN, 0); }
		public TerminalNode UPGRADE() { return getToken(MySQLSQLStatementParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(MySQLSQLStatementParser.USER, 0); }
		public TerminalNode VALIDATION() { return getToken(MySQLSQLStatementParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySQLSQLStatementParser.VALUE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySQLSQLStatementParser.VARIABLES, 0); }
		public TerminalNode VIEW() { return getToken(MySQLSQLStatementParser.VIEW, 0); }
		public TerminalNode WAIT() { return getToken(MySQLSQLStatementParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySQLSQLStatementParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySQLSQLStatementParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySQLSQLStatementParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySQLSQLStatementParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySQLSQLStatementParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySQLSQLStatementParser.XA, 0); }
		public TerminalNode XML() { return getToken(MySQLSQLStatementParser.XML, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5665);
			_la = _input.LA(1);
			if ( !(((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (SUM - 224)) | (1L << (ACCOUNT - 224)) | (1L << (ACTION - 224)) | (1L << (AFTER - 224)) | (1L << (AGGREGATE - 224)) | (1L << (ALGORITHM - 224)) | (1L << (ANY - 224)) | (1L << (AT - 224)) | (1L << (AUTHORS - 224)) | (1L << (AUTOCOMMIT - 224)) | (1L << (AUTOEXTEND_SIZE - 224)) | (1L << (AUTO_INCREMENT - 224)) | (1L << (AVG_ROW_LENGTH - 224)) | (1L << (BEGIN - 224)) | (1L << (BINLOG - 224)) | (1L << (BIT - 224)) | (1L << (BLOCK - 224)) | (1L << (BOOL - 224)) | (1L << (BOOLEAN - 224)) | (1L << (BTREE - 224)) | (1L << (CASCADED - 224)) | (1L << (CHAIN - 224)) | (1L << (CHANNEL - 224)) | (1L << (CHECKSUM - 224)) | (1L << (CIPHER - 224)) | (1L << (CLIENT - 224)) | (1L << (COALESCE - 224)) | (1L << (CODE - 224)) | (1L << (COLUMNS - 224)) | (1L << (COLUMN_FORMAT - 224)) | (1L << (COMMENT - 224)) | (1L << (COMMIT - 224)) | (1L << (COMPACT - 224)) | (1L << (COMPLETION - 224)) | (1L << (COMPRESSED - 224)) | (1L << (COMPRESSION - 224)) | (1L << (CONCURRENT - 224)) | (1L << (CONNECTION - 224)) | (1L << (CONSISTENT - 224)) | (1L << (CONTAINS - 224)) | (1L << (CONTEXT - 224)) | (1L << (CONTRIBUTORS - 224)) | (1L << (COPY - 224)) | (1L << (CPU - 224)))) != 0) || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & ((1L << (DATA - 288)) | (1L << (DATAFILE - 288)) | (1L << (DEALLOCATE - 288)) | (1L << (DEFAULT_AUTH - 288)) | (1L << (DEFINER - 288)) | (1L << (DELAY_KEY_WRITE - 288)) | (1L << (DIRECTORY - 288)) | (1L << (DISABLE - 288)) | (1L << (DISCARD - 288)) | (1L << (DISK - 288)) | (1L << (DO - 288)) | (1L << (DUMPFILE - 288)) | (1L << (DUPLICATE - 288)) | (1L << (DYNAMIC - 288)) | (1L << (ENABLE - 288)) | (1L << (ENCRYPTION - 288)) | (1L << (ENDS - 288)) | (1L << (ENGINE - 288)) | (1L << (ENGINES - 288)) | (1L << (ERROR - 288)) | (1L << (ERRORS - 288)) | (1L << (ESCAPE - 288)) | (1L << (EVEN - 288)) | (1L << (EVENT - 288)) | (1L << (EVENTS - 288)) | (1L << (EVERY - 288)) | (1L << (EXCHANGE - 288)) | (1L << (EXCLUSIVE - 288)) | (1L << (EXPIRE - 288)) | (1L << (EXTENT_SIZE - 288)) | (1L << (FAULTS - 288)) | (1L << (FIELDS - 288)) | (1L << (FILE_BLOCK_SIZE - 288)) | (1L << (FILTER - 288)) | (1L << (FIRST - 288)) | (1L << (FIXED - 288)) | (1L << (FOLLOWS - 288)) | (1L << (FULL - 288)) | (1L << (FUNCTION - 288)) | (1L << (GLOBAL - 288)) | (1L << (GRANTS - 288)) | (1L << (GROUP_REPLICATION - 288)) | (1L << (HASH - 288)) | (1L << (HOST - 288)) | (1L << (IDENTIFIED - 288)) | (1L << (IGNORE_SERVER_IDS - 288)) | (1L << (IMPORT - 288)) | (1L << (INDEXES - 288)) | (1L << (INITIAL_SIZE - 288)) | (1L << (INPLACE - 288)) | (1L << (INSERT_METHOD - 288)))) != 0) || ((((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & ((1L << (INSTANCE - 352)) | (1L << (INVOKER - 352)) | (1L << (IO - 352)) | (1L << (IO_THREAD - 352)) | (1L << (IPC - 352)) | (1L << (ISOLATION - 352)) | (1L << (ISSUER - 352)) | (1L << (KEY_BLOCK_SIZE - 352)) | (1L << (LANGUAGE - 352)) | (1L << (LAST - 352)) | (1L << (LEAVES - 352)) | (1L << (LESS - 352)) | (1L << (LEVEL - 352)) | (1L << (LIST - 352)) | (1L << (LOCAL - 352)) | (1L << (LOGFILE - 352)) | (1L << (LOGS - 352)) | (1L << (MASTER - 352)) | (1L << (MASTER_AUTO_POSITION - 352)) | (1L << (MASTER_CONNECT_RETRY - 352)) | (1L << (MASTER_DELAY - 352)) | (1L << (MASTER_HEARTBEAT_PERIOD - 352)) | (1L << (MASTER_HOST - 352)) | (1L << (MASTER_LOG_FILE - 352)) | (1L << (MASTER_LOG_POS - 352)) | (1L << (MASTER_PASSWORD - 352)) | (1L << (MASTER_PORT - 352)) | (1L << (MASTER_RETRY_COUNT - 352)) | (1L << (MASTER_SSL - 352)) | (1L << (MASTER_SSL_CA - 352)) | (1L << (MASTER_SSL_CAPATH - 352)) | (1L << (MASTER_SSL_CERT - 352)) | (1L << (MASTER_SSL_CIPHER - 352)) | (1L << (MASTER_SSL_CRL - 352)) | (1L << (MASTER_SSL_CRLPATH - 352)) | (1L << (MASTER_SSL_KEY - 352)) | (1L << (MASTER_TLS_VERSION - 352)) | (1L << (MASTER_USER - 352)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 352)) | (1L << (MAX_QUERIES_PER_HOUR - 352)) | (1L << (MAX_ROWS - 352)) | (1L << (MAX_SIZE - 352)) | (1L << (MAX_UPDATES_PER_HOUR - 352)) | (1L << (MAX_USER_CONNECTIONS - 352)) | (1L << (MERGE - 352)) | (1L << (MIGRATE - 352)) | (1L << (MIN_ROWS - 352)) | (1L << (MODIFY - 352)) | (1L << (MUTEX - 352)) | (1L << (MYSQL - 352)) | (1L << (NAME - 352)) | (1L << (NAMES - 352)) | (1L << (NCHAR - 352)) | (1L << (NEVER - 352)) | (1L << (NO - 352)) | (1L << (NODEGROUP - 352)) | (1L << (NONE - 352)) | (1L << (OFFLINE - 352)) | (1L << (OFFSET - 352)) | (1L << (OJ - 352)))) != 0) || ((((_la - 416)) & ~0x3f) == 0 && ((1L << (_la - 416)) & ((1L << (OLD_PASSWORD - 416)) | (1L << (ONE - 416)) | (1L << (ONLINE - 416)) | (1L << (ONLY - 416)) | (1L << (OPTIMIZER_COSTS - 416)) | (1L << (OPTIONS - 416)) | (1L << (OWNER - 416)) | (1L << (PACK_KEYS - 416)) | (1L << (PAGE - 416)) | (1L << (PARSER - 416)) | (1L << (PARTIAL - 416)) | (1L << (PARTITIONING - 416)) | (1L << (PARTITIONS - 416)) | (1L << (PASSWORD - 416)) | (1L << (PHASE - 416)) | (1L << (PLUGIN_DIR - 416)) | (1L << (PLUGINS - 416)) | (1L << (PORT - 416)) | (1L << (PRECEDES - 416)) | (1L << (PREPARE - 416)) | (1L << (PRESERVE - 416)) | (1L << (PREV - 416)) | (1L << (PROCESSLIST - 416)) | (1L << (PROFILE - 416)) | (1L << (PROFILES - 416)) | (1L << (PROXY - 416)) | (1L << (QUERY - 416)) | (1L << (QUICK - 416)) | (1L << (REBUILD - 416)) | (1L << (RECOVER - 416)) | (1L << (REDO_BUFFER_SIZE - 416)) | (1L << (REDUNDANT - 416)) | (1L << (RELAY_LOG_FILE - 416)) | (1L << (RELAY_LOG_POS - 416)) | (1L << (RELAYLOG - 416)) | (1L << (REMOVE - 416)) | (1L << (REORGANIZE - 416)) | (1L << (REPAIR - 416)) | (1L << (REPLICATE_DO_DB - 416)) | (1L << (REPLICATE_DO_TABLE - 416)) | (1L << (REPLICATE_IGNORE_DB - 416)) | (1L << (REPLICATE_IGNORE_TABLE - 416)) | (1L << (REPLICATE_REWRITE_DB - 416)) | (1L << (REPLICATE_WILD_DO_TABLE - 416)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 416)) | (1L << (REPLICATION - 416)) | (1L << (RESUME - 416)) | (1L << (RETURNS - 416)) | (1L << (ROLLBACK - 416)) | (1L << (ROLLUP - 416)) | (1L << (ROTATE - 416)) | (1L << (ROW - 416)) | (1L << (ROWS - 416)) | (1L << (ROW_FORMAT - 416)) | (1L << (SAVEPOINT - 416)) | (1L << (SCHEDULE - 416)) | (1L << (SECURITY - 416)) | (1L << (SERVER - 416)) | (1L << (SESSION - 416)))) != 0) || ((((_la - 480)) & ~0x3f) == 0 && ((1L << (_la - 480)) & ((1L << (SHARE - 480)) | (1L << (SHARED - 480)) | (1L << (SIGNED - 480)) | (1L << (SIMPLE - 480)) | (1L << (SLAVE - 480)) | (1L << (SNAPSHOT - 480)) | (1L << (SOCKET - 480)) | (1L << (SOME - 480)) | (1L << (SOUNDS - 480)) | (1L << (SOURCE - 480)) | (1L << (SQL_AFTER_GTIDS - 480)) | (1L << (SQL_AFTER_MTS_GAPS - 480)) | (1L << (SQL_BEFORE_GTIDS - 480)) | (1L << (SQL_BUFFER_RESULT - 480)) | (1L << (SQL_CACHE - 480)) | (1L << (SQL_NO_CACHE - 480)) | (1L << (SQL_THREAD - 480)) | (1L << (START - 480)) | (1L << (STARTS - 480)) | (1L << (STATS_AUTO_RECALC - 480)) | (1L << (STATS_PERSISTENT - 480)) | (1L << (STATS_SAMPLE_PAGES - 480)) | (1L << (STATUS - 480)) | (1L << (STOP - 480)) | (1L << (STORAGE - 480)) | (1L << (STRING - 480)) | (1L << (SUBJECT - 480)) | (1L << (SUBPARTITION - 480)) | (1L << (SUBPARTITIONS - 480)) | (1L << (SUSPEND - 480)) | (1L << (SWAPS - 480)) | (1L << (SWITCHES - 480)) | (1L << (TABLESPACE - 480)) | (1L << (TEMPORARY - 480)) | (1L << (TEMPTABLE - 480)) | (1L << (THAN - 480)) | (1L << (TRANSACTION - 480)) | (1L << (TRUNCATE - 480)) | (1L << (UNDEFINED - 480)) | (1L << (UNDOFILE - 480)) | (1L << (UNDO_BUFFER_SIZE - 480)) | (1L << (UNKNOWN - 480)) | (1L << (UPGRADE - 480)) | (1L << (USER - 480)) | (1L << (VALIDATION - 480)) | (1L << (VALUE - 480)) | (1L << (VARIABLES - 480)) | (1L << (VIEW - 480)) | (1L << (WAIT - 480)) | (1L << (WARNINGS - 480)) | (1L << (WITHOUT - 480)) | (1L << (WORK - 480)) | (1L << (WRAPPER - 480)) | (1L << (X509 - 480)) | (1L << (XA - 480)) | (1L << (XML - 480)))) != 0) || _la==MEMORY || _la==MID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllTokensContext extends ParserRuleContext {
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(MySQLSQLStatementParser.INSERT, 0); }
		public TerminalNode LEFT() { return getToken(MySQLSQLStatementParser.LEFT, 0); }
		public TerminalNode MOD() { return getToken(MySQLSQLStatementParser.MOD, 0); }
		public TerminalNode REPLACE() { return getToken(MySQLSQLStatementParser.REPLACE, 0); }
		public TerminalNode REVERSE() { return getToken(MySQLSQLStatementParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySQLSQLStatementParser.RIGHT, 0); }
		public TerminalNode SUBSTR() { return getToken(MySQLSQLStatementParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySQLSQLStatementParser.SUBSTRING, 0); }
		public AllTokensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allTokens; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAllTokens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllTokensContext allTokens() throws RecognitionException {
		AllTokensContext _localctx = new AllTokensContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_allTokens);
		try {
			setState(5681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5667);
				charsetNameBase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5668);
				transactionLevelBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5669);
				engineName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5670);
				privilegesBase();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5671);
				dataTypeBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5672);
				keywordsCanBeId();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5673);
				match(INSERT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5674);
				match(LEFT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5675);
				match(MOD);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5676);
				match(REPLACE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5677);
				match(REVERSE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5678);
				match(RIGHT);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5679);
				match(SUBSTR);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5680);
				match(SUBSTRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public IStringDataTypeContext iStringDataType() {
			return getRuleContext(IStringDataTypeContext.class,0);
		}
		public INumericDatatypeContext iNumericDatatype() {
			return getRuleContext(INumericDatatypeContext.class,0);
		}
		public IDateTimeDataTypeContext iDateTimeDataType() {
			return getRuleContext(IDateTimeDataTypeContext.class,0);
		}
		public SpatialDataTypeContext spatialDataType() {
			return getRuleContext(SpatialDataTypeContext.class,0);
		}
		public IBoolDataTypeContext iBoolDataType() {
			return getRuleContext(IBoolDataTypeContext.class,0);
		}
		public IJsonDataTypeContext iJsonDataType() {
			return getRuleContext(IJsonDataTypeContext.class,0);
		}
		public OtherDataTypeContext otherDataType() {
			return getRuleContext(OtherDataTypeContext.class,0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_dataType);
		try {
			setState(5690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5683);
				iStringDataType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5684);
				iNumericDatatype();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5685);
				iDateTimeDataType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5686);
				spatialDataType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5687);
				iBoolDataType();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5688);
				iJsonDataType();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5689);
				otherDataType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class INumericDatatypeContext extends ParserRuleContext {
		public INumericDatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iNumericDatatype; }
	 
		public INumericDatatypeContext() { }
		public void copyFrom(INumericDatatypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class NumericDataTypeContext extends INumericDatatypeContext {
		public TerminalNode NUMERIC() { return getToken(MySQLSQLStatementParser.NUMERIC, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public NumericDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNumericDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FloatDataTypeContext extends INumericDatatypeContext {
		public TerminalNode FLOAT() { return getToken(MySQLSQLStatementParser.FLOAT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public FloatDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFloatDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RealDataTypeContext extends INumericDatatypeContext {
		public TerminalNode REAL() { return getToken(MySQLSQLStatementParser.REAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public RealDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRealDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DecDataTypeContext extends INumericDatatypeContext {
		public TerminalNode DEC() { return getToken(MySQLSQLStatementParser.DEC, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public DecDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDecDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntDataTypeContext extends INumericDatatypeContext {
		public TerminalNode INT() { return getToken(MySQLSQLStatementParser.INT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public IntDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIntDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BigintDataTypeContext extends INumericDatatypeContext {
		public TerminalNode BIGINT() { return getToken(MySQLSQLStatementParser.BIGINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public BigintDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBigintDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoublePrecisionDataTypeContext extends INumericDatatypeContext {
		public TerminalNode DOUBLE() { return getToken(MySQLSQLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySQLSQLStatementParser.PRECISION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public DoublePrecisionDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDoublePrecisionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FixedDataTypeContext extends INumericDatatypeContext {
		public TerminalNode FIXED() { return getToken(MySQLSQLStatementParser.FIXED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public FixedDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFixedDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TinyintDataTypeContext extends INumericDatatypeContext {
		public TerminalNode TINYINT() { return getToken(MySQLSQLStatementParser.TINYINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public TinyintDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTinyintDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MediumintDataTypeContext extends INumericDatatypeContext {
		public TerminalNode MEDIUMINT() { return getToken(MySQLSQLStatementParser.MEDIUMINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public MediumintDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMediumintDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntegerDataTypeContext extends INumericDatatypeContext {
		public TerminalNode INTEGER() { return getToken(MySQLSQLStatementParser.INTEGER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public IntegerDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIntegerDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitDataTypeContext extends INumericDatatypeContext {
		public TerminalNode BIT() { return getToken(MySQLSQLStatementParser.BIT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public BitDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBitDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DecimalDataTypeContext extends INumericDatatypeContext {
		public TerminalNode DECIMAL() { return getToken(MySQLSQLStatementParser.DECIMAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public DecimalDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDecimalDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SmallintDataTypeContext extends INumericDatatypeContext {
		public TerminalNode SMALLINT() { return getToken(MySQLSQLStatementParser.SMALLINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public SmallintDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSmallintDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleDataTypeContext extends INumericDatatypeContext {
		public TerminalNode DOUBLE() { return getToken(MySQLSQLStatementParser.DOUBLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySQLSQLStatementParser.UNSIGNED, 0); }
		public TerminalNode ZEROFILL() { return getToken(MySQLSQLStatementParser.ZEROFILL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public DoubleDataTypeContext(INumericDatatypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDoubleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final INumericDatatypeContext iNumericDatatype() throws RecognitionException {
		INumericDatatypeContext _localctx = new INumericDatatypeContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_iNumericDatatype);
		int _la;
		try {
			setState(5926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
			case 1:
				_localctx = new BitDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5692);
				match(BIT);
				setState(5697);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
				case 1:
					{
					setState(5693);
					match(LEFT_PAREN);
					setState(5694);
					expr(0);
					setState(5695);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new TinyintDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5699);
				match(TINYINT);
				setState(5704);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
				case 1:
					{
					setState(5700);
					match(LEFT_PAREN);
					setState(5701);
					expr(0);
					setState(5702);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5706);
					match(UNSIGNED);
					}
				}

				setState(5710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5709);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 3:
				_localctx = new SmallintDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5712);
				match(SMALLINT);
				setState(5717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					setState(5713);
					match(LEFT_PAREN);
					setState(5714);
					expr(0);
					setState(5715);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5719);
					match(UNSIGNED);
					}
				}

				setState(5723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5722);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 4:
				_localctx = new MediumintDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5725);
				match(MEDIUMINT);
				setState(5730);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
				case 1:
					{
					setState(5726);
					match(LEFT_PAREN);
					setState(5727);
					expr(0);
					setState(5728);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5732);
					match(UNSIGNED);
					}
				}

				setState(5736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5735);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 5:
				_localctx = new IntDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5738);
				match(INT);
				setState(5743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
				case 1:
					{
					setState(5739);
					match(LEFT_PAREN);
					setState(5740);
					expr(0);
					setState(5741);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5745);
					match(UNSIGNED);
					}
				}

				setState(5749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5748);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 6:
				_localctx = new IntegerDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5751);
				match(INTEGER);
				setState(5756);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
				case 1:
					{
					setState(5752);
					match(LEFT_PAREN);
					setState(5753);
					expr(0);
					setState(5754);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5759);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5758);
					match(UNSIGNED);
					}
				}

				setState(5762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5761);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 7:
				_localctx = new BigintDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5764);
				match(BIGINT);
				setState(5769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
				case 1:
					{
					setState(5765);
					match(LEFT_PAREN);
					setState(5766);
					expr(0);
					setState(5767);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5771);
					match(UNSIGNED);
					}
				}

				setState(5775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5774);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 8:
				_localctx = new DecimalDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5777);
				match(DECIMAL);
				setState(5786);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(5778);
					match(LEFT_PAREN);
					setState(5779);
					expr(0);
					setState(5782);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5780);
						match(COMMA);
						setState(5781);
						expr(0);
						}
					}

					setState(5784);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5788);
					match(UNSIGNED);
					}
				}

				setState(5792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5791);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 9:
				_localctx = new DecDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(5794);
				match(DEC);
				setState(5803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(5795);
					match(LEFT_PAREN);
					setState(5796);
					expr(0);
					setState(5799);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5797);
						match(COMMA);
						setState(5798);
						expr(0);
						}
					}

					setState(5801);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5805);
					match(UNSIGNED);
					}
				}

				setState(5809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5808);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 10:
				_localctx = new NumericDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(5811);
				match(NUMERIC);
				setState(5820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(5812);
					match(LEFT_PAREN);
					setState(5813);
					expr(0);
					setState(5816);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5814);
						match(COMMA);
						setState(5815);
						expr(0);
						}
					}

					setState(5818);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5823);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5822);
					match(UNSIGNED);
					}
				}

				setState(5826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5825);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 11:
				_localctx = new FixedDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(5828);
				match(FIXED);
				setState(5837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(5829);
					match(LEFT_PAREN);
					setState(5830);
					expr(0);
					setState(5833);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5831);
						match(COMMA);
						setState(5832);
						expr(0);
						}
					}

					setState(5835);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5839);
					match(UNSIGNED);
					}
				}

				setState(5843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5842);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 12:
				_localctx = new FloatDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(5845);
				match(FLOAT);
				setState(5857);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
				case 1:
					{
					setState(5846);
					match(LEFT_PAREN);
					setState(5847);
					expr(0);
					setState(5852);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5848);
						match(COMMA);
						setState(5849);
						expr(0);
						}
						}
						setState(5854);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5855);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5859);
					match(UNSIGNED);
					}
				}

				setState(5863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5862);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 13:
				_localctx = new DoubleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(5865);
				match(DOUBLE);
				setState(5877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
				case 1:
					{
					setState(5866);
					match(LEFT_PAREN);
					setState(5867);
					expr(0);
					setState(5872);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5868);
						match(COMMA);
						setState(5869);
						expr(0);
						}
						}
						setState(5874);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5875);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5879);
					match(UNSIGNED);
					}
				}

				setState(5883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5882);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 14:
				_localctx = new DoublePrecisionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(5885);
				match(DOUBLE);
				setState(5886);
				match(PRECISION);
				setState(5898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
				case 1:
					{
					setState(5887);
					match(LEFT_PAREN);
					setState(5888);
					expr(0);
					setState(5893);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5889);
						match(COMMA);
						setState(5890);
						expr(0);
						}
						}
						setState(5895);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5896);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5900);
					match(UNSIGNED);
					}
				}

				setState(5904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5903);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 15:
				_localctx = new RealDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(5906);
				match(REAL);
				setState(5918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(5907);
					match(LEFT_PAREN);
					setState(5908);
					expr(0);
					setState(5913);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5909);
						match(COMMA);
						setState(5910);
						expr(0);
						}
						}
						setState(5915);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5916);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNSIGNED) {
					{
					setState(5920);
					match(UNSIGNED);
					}
				}

				setState(5924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(5923);
					match(ZEROFILL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IStringDataTypeContext extends ParserRuleContext {
		public IStringDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iStringDataType; }
	 
		public IStringDataTypeContext() { }
		public void copyFrom(IStringDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TinyBlobDataTypeContext extends IStringDataTypeContext {
		public TerminalNode TINYBLOB() { return getToken(MySQLSQLStatementParser.TINYBLOB, 0); }
		public TinyBlobDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTinyBlobDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalCharDataTypeContext extends IStringDataTypeContext {
		public TerminalNode NATIONAL() { return getToken(MySQLSQLStatementParser.NATIONAL, 0); }
		public TerminalNode CHAR() { return getToken(MySQLSQLStatementParser.CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public NationalCharDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNationalCharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MediumBlobDataTypeContext extends IStringDataTypeContext {
		public TerminalNode MEDIUMBLOB() { return getToken(MySQLSQLStatementParser.MEDIUMBLOB, 0); }
		public MediumBlobDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMediumBlobDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BlobDataTypeContext extends IStringDataTypeContext {
		public TerminalNode BLOB() { return getToken(MySQLSQLStatementParser.BLOB, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public BlobDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBlobDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class EnumDataTypeContext extends IStringDataTypeContext {
		public TerminalNode ENUM() { return getToken(MySQLSQLStatementParser.ENUM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public EnumDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitEnumDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VarcharDataTypeContext extends IStringDataTypeContext {
		public TerminalNode VARCHAR() { return getToken(MySQLSQLStatementParser.VARCHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public VarcharDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryDataTypeContext extends IStringDataTypeContext {
		public TerminalNode BINARY() { return getToken(MySQLSQLStatementParser.BINARY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public BinaryDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVarcharDataTypeContext extends IStringDataTypeContext {
		public TerminalNode NATIONAL() { return getToken(MySQLSQLStatementParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySQLSQLStatementParser.VARCHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public NationalVarcharDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNationalVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongTextDataTypeContext extends IStringDataTypeContext {
		public TerminalNode LONGTEXT() { return getToken(MySQLSQLStatementParser.LONGTEXT, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public LongTextDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLongTextDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TinyTextDataTypeContext extends IStringDataTypeContext {
		public TerminalNode TINYTEXT() { return getToken(MySQLSQLStatementParser.TINYTEXT, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public TinyTextDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTinyTextDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SetDataTypeContext extends IStringDataTypeContext {
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public SetDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSetDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VarBinaryDataTypeContext extends IStringDataTypeContext {
		public TerminalNode VARBINARY() { return getToken(MySQLSQLStatementParser.VARBINARY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public VarBinaryDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitVarBinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MediumTextDataTypeContext extends IStringDataTypeContext {
		public TerminalNode MEDIUMTEXT() { return getToken(MySQLSQLStatementParser.MEDIUMTEXT, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public MediumTextDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMediumTextDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TextDataTypeContext extends IStringDataTypeContext {
		public TerminalNode TEXT() { return getToken(MySQLSQLStatementParser.TEXT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public TextDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTextDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharDataTypeContext extends IStringDataTypeContext {
		public TerminalNode CHAR() { return getToken(MySQLSQLStatementParser.CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CharacterSetOptionExprContext characterSetOptionExpr() {
			return getRuleContext(CharacterSetOptionExprContext.class,0);
		}
		public CollateOptionExprContext collateOptionExpr() {
			return getRuleContext(CollateOptionExprContext.class,0);
		}
		public CharDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongBlobDataTypeContext extends IStringDataTypeContext {
		public TerminalNode LONGBLOB() { return getToken(MySQLSQLStatementParser.LONGBLOB, 0); }
		public LongBlobDataTypeContext(IStringDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLongBlobDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IStringDataTypeContext iStringDataType() throws RecognitionException {
		IStringDataTypeContext _localctx = new IStringDataTypeContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_iStringDataType);
		int _la;
		try {
			setState(6080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				_localctx = new CharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5928);
				match(CHAR);
				setState(5933);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
				case 1:
					{
					setState(5929);
					match(LEFT_PAREN);
					setState(5930);
					expr(0);
					setState(5931);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5936);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
				case 1:
					{
					setState(5935);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
				case 1:
					{
					setState(5938);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalCharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5941);
				match(NATIONAL);
				setState(5942);
				match(CHAR);
				setState(5947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(5943);
					match(LEFT_PAREN);
					setState(5944);
					expr(0);
					setState(5945);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5950);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
				case 1:
					{
					setState(5949);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5953);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
				case 1:
					{
					setState(5952);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new VarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5955);
				match(VARCHAR);
				setState(5960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
				case 1:
					{
					setState(5956);
					match(LEFT_PAREN);
					setState(5957);
					expr(0);
					setState(5958);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5963);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
				case 1:
					{
					setState(5962);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
				case 1:
					{
					setState(5965);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5968);
				match(NATIONAL);
				setState(5969);
				match(VARCHAR);
				setState(5974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
				case 1:
					{
					setState(5970);
					match(LEFT_PAREN);
					setState(5971);
					expr(0);
					setState(5972);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5977);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
				case 1:
					{
					setState(5976);
					characterSetOptionExpr();
					}
					break;
				}
				setState(5980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
				case 1:
					{
					setState(5979);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new BinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(5982);
				match(BINARY);
				setState(5987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(5983);
					match(LEFT_PAREN);
					setState(5984);
					expr(0);
					setState(5985);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new VarBinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(5989);
				match(VARBINARY);
				setState(5994);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
				case 1:
					{
					setState(5990);
					match(LEFT_PAREN);
					setState(5991);
					expr(0);
					setState(5992);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new TinyBlobDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(5996);
				match(TINYBLOB);
				}
				break;
			case 8:
				_localctx = new TinyTextDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(5997);
				match(TINYTEXT);
				setState(5999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
				case 1:
					{
					setState(5998);
					characterSetOptionExpr();
					}
					break;
				}
				setState(6002);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(6001);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 9:
				_localctx = new BlobDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6004);
				match(BLOB);
				setState(6009);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
				case 1:
					{
					setState(6005);
					match(LEFT_PAREN);
					setState(6006);
					expr(0);
					setState(6007);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 10:
				_localctx = new TextDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6011);
				match(TEXT);
				setState(6016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					setState(6012);
					match(LEFT_PAREN);
					setState(6013);
					expr(0);
					setState(6014);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(6019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(6018);
					characterSetOptionExpr();
					}
					break;
				}
				setState(6022);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(6021);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new MediumBlobDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6024);
				match(MEDIUMBLOB);
				}
				break;
			case 12:
				_localctx = new MediumTextDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6025);
				match(MEDIUMTEXT);
				setState(6027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(6026);
					characterSetOptionExpr();
					}
					break;
				}
				setState(6030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(6029);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 13:
				_localctx = new LongBlobDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6032);
				match(LONGBLOB);
				}
				break;
			case 14:
				_localctx = new LongTextDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6033);
				match(LONGTEXT);
				setState(6035);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
				case 1:
					{
					setState(6034);
					characterSetOptionExpr();
					}
					break;
				}
				setState(6038);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
				case 1:
					{
					setState(6037);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 15:
				_localctx = new EnumDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6040);
				match(ENUM);
				setState(6052);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
				case 1:
					{
					setState(6041);
					match(LEFT_PAREN);
					setState(6042);
					expr(0);
					setState(6047);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6043);
						match(COMMA);
						setState(6044);
						expr(0);
						}
						}
						setState(6049);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6050);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(6055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
				case 1:
					{
					setState(6054);
					characterSetOptionExpr();
					}
					break;
				}
				setState(6058);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
				case 1:
					{
					setState(6057);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			case 16:
				_localctx = new SetDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(6060);
				match(SET);
				setState(6072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
				case 1:
					{
					setState(6061);
					match(LEFT_PAREN);
					setState(6062);
					expr(0);
					setState(6067);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6063);
						match(COMMA);
						setState(6064);
						expr(0);
						}
						}
						setState(6069);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6070);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(6075);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
				case 1:
					{
					setState(6074);
					characterSetOptionExpr();
					}
					break;
				}
				setState(6078);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
				case 1:
					{
					setState(6077);
					collateOptionExpr();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IDateTimeDataTypeContext extends ParserRuleContext {
		public IDateTimeDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iDateTimeDataType; }
	 
		public IDateTimeDataTypeContext() { }
		public void copyFrom(IDateTimeDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DateDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode DATE() { return getToken(MySQLSQLStatementParser.DATE, 0); }
		public DateDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDateDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DatetimeDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode DATETIME() { return getToken(MySQLSQLStatementParser.DATETIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public DatetimeDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDatetimeDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimestampDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode TIMESTAMP() { return getToken(MySQLSQLStatementParser.TIMESTAMP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TimestampDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTimestampDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class YearDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode YEAR() { return getToken(MySQLSQLStatementParser.YEAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public YearDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitYearDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimeDataTypeContext extends IDateTimeDataTypeContext {
		public TerminalNode TIME() { return getToken(MySQLSQLStatementParser.TIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TimeDataTypeContext(IDateTimeDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTimeDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IDateTimeDataTypeContext iDateTimeDataType() throws RecognitionException {
		IDateTimeDataTypeContext _localctx = new IDateTimeDataTypeContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_iDateTimeDataType);
		try {
			setState(6111);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				_localctx = new DateDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6082);
				match(DATE);
				}
				break;
			case DATETIME:
				_localctx = new DatetimeDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6083);
				match(DATETIME);
				setState(6088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,828,_ctx) ) {
				case 1:
					{
					setState(6084);
					match(LEFT_PAREN);
					setState(6085);
					expr(0);
					setState(6086);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				_localctx = new TimestampDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6090);
				match(TIMESTAMP);
				setState(6095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
				case 1:
					{
					setState(6091);
					match(LEFT_PAREN);
					setState(6092);
					expr(0);
					setState(6093);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case TIME:
				_localctx = new TimeDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6097);
				match(TIME);
				setState(6102);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
				case 1:
					{
					setState(6098);
					match(LEFT_PAREN);
					setState(6099);
					expr(0);
					setState(6100);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				_localctx = new YearDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6104);
				match(YEAR);
				setState(6109);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					setState(6105);
					match(LEFT_PAREN);
					setState(6106);
					expr(0);
					setState(6107);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpatialDataTypeContext extends ParserRuleContext {
		public SpatialDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialDataType; }
	 
		public SpatialDataTypeContext() { }
		public void copyFrom(SpatialDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class GeometryDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode GEOMETRY() { return getToken(MySQLSQLStatementParser.GEOMETRY, 0); }
		public GeometryDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGeometryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PointDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode POINT() { return getToken(MySQLSQLStatementParser.POINT, 0); }
		public PointDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPointDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LineStringDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode LINESTRING() { return getToken(MySQLSQLStatementParser.LINESTRING, 0); }
		public LineStringDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLineStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PolygonDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode POLYGON() { return getToken(MySQLSQLStatementParser.POLYGON, 0); }
		public PolygonDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPolygonDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultiPointDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode MULTIPOINT() { return getToken(MySQLSQLStatementParser.MULTIPOINT, 0); }
		public MultiPointDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMultiPointDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultiLineStringDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode MULTILINESTRING() { return getToken(MySQLSQLStatementParser.MULTILINESTRING, 0); }
		public MultiLineStringDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMultiLineStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MultiPolygonDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode MULTIPOLYGON() { return getToken(MySQLSQLStatementParser.MULTIPOLYGON, 0); }
		public MultiPolygonDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMultiPolygonDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeometryCollectionDataTypeContext extends SpatialDataTypeContext {
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySQLSQLStatementParser.GEOMETRYCOLLECTION, 0); }
		public GeometryCollectionDataTypeContext(SpatialDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGeometryCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpatialDataTypeContext spatialDataType() throws RecognitionException {
		SpatialDataTypeContext _localctx = new SpatialDataTypeContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_spatialDataType);
		try {
			setState(6121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GEOMETRY:
				_localctx = new GeometryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6113);
				match(GEOMETRY);
				}
				break;
			case POINT:
				_localctx = new PointDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6114);
				match(POINT);
				}
				break;
			case LINESTRING:
				_localctx = new LineStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6115);
				match(LINESTRING);
				}
				break;
			case POLYGON:
				_localctx = new PolygonDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6116);
				match(POLYGON);
				}
				break;
			case MULTIPOINT:
				_localctx = new MultiPointDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6117);
				match(MULTIPOINT);
				}
				break;
			case MULTILINESTRING:
				_localctx = new MultiLineStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6118);
				match(MULTILINESTRING);
				}
				break;
			case MULTIPOLYGON:
				_localctx = new MultiPolygonDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6119);
				match(MULTIPOLYGON);
				}
				break;
			case GEOMETRYCOLLECTION:
				_localctx = new GeometryCollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6120);
				match(GEOMETRYCOLLECTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IBoolDataTypeContext extends ParserRuleContext {
		public IBoolDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iBoolDataType; }
	 
		public IBoolDataTypeContext() { }
		public void copyFrom(IBoolDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class BoolDataTypeContext extends IBoolDataTypeContext {
		public TerminalNode BOOL() { return getToken(MySQLSQLStatementParser.BOOL, 0); }
		public BoolDataTypeContext(IBoolDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBoolDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BooleanDataTypeContext extends IBoolDataTypeContext {
		public TerminalNode BOOLEAN() { return getToken(MySQLSQLStatementParser.BOOLEAN, 0); }
		public BooleanDataTypeContext(IBoolDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBooleanDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IBoolDataTypeContext iBoolDataType() throws RecognitionException {
		IBoolDataTypeContext _localctx = new IBoolDataTypeContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_iBoolDataType);
		try {
			setState(6125);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BOOL:
				_localctx = new BoolDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6123);
				match(BOOL);
				}
				break;
			case BOOLEAN:
				_localctx = new BooleanDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6124);
				match(BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IJsonDataTypeContext extends ParserRuleContext {
		public IJsonDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iJsonDataType; }
	 
		public IJsonDataTypeContext() { }
		public void copyFrom(IJsonDataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class JsonDataTypeContext extends IJsonDataTypeContext {
		public TerminalNode JSON() { return getToken(MySQLSQLStatementParser.JSON, 0); }
		public JsonDataTypeContext(IJsonDataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IJsonDataTypeContext iJsonDataType() throws RecognitionException {
		IJsonDataTypeContext _localctx = new IJsonDataTypeContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_iJsonDataType);
		try {
			_localctx = new JsonDataTypeContext(_localctx);
			enterOuterAlt(_localctx, 1);
			{
			setState(6127);
			match(JSON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherDataTypeContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public OtherDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherDataType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOtherDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherDataTypeContext otherDataType() throws RecognitionException {
		OtherDataTypeContext _localctx = new OtherDataTypeContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_otherDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6129);
			((OtherDataTypeContext)_localctx).name = nameIdentifier();
			setState(6142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
			case 1:
				{
				setState(6130);
				match(LEFT_PAREN);
				setState(6132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
					{
					setState(6131);
					expr(0);
					}
				}

				setState(6138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6134);
					match(COMMA);
					setState(6135);
					expr(0);
					}
					}
					setState(6140);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6141);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	 
		public IdentifierContext() { }
		public void copyFrom(IdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class NormalIdentifierContext extends IdentifierContext {
		public TerminalNode REGULAR_ID() { return getToken(MySQLSQLStatementParser.REGULAR_ID, 0); }
		public AllTokensContext allTokens() {
			return getRuleContext(AllTokensContext.class,0);
		}
		public NormalIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNormalIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AsteriskIdentifierContext extends IdentifierContext {
		public TerminalNode ASTERISK() { return getToken(MySQLSQLStatementParser.ASTERISK, 0); }
		public AsteriskIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAsteriskIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReverseQuoteIdentifierContext extends IdentifierContext {
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySQLSQLStatementParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySQLSQLStatementParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public ReverseQuoteIdentifierContext(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitReverseQuoteIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleQuoteIdentifier1Context extends IdentifierContext {
		public TerminalNode DELIMITED_ID() { return getToken(MySQLSQLStatementParser.DELIMITED_ID, 0); }
		public DoubleQuoteIdentifier1Context(IdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDoubleQuoteIdentifier1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_identifier);
		try {
			setState(6150);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				_localctx = new AsteriskIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6144);
				match(ASTERISK);
				}
				break;
			case REGULAR_ID:
				_localctx = new NormalIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6145);
				match(REGULAR_ID);
				}
				break;
			case INSERT:
			case LEFT:
			case REPLACE:
			case RIGHT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case TEXT:
			case ENUM:
			case SUM:
			case SUBSTR:
			case SUBSTRING:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case MOD:
			case REVERSE:
			case MID:
				_localctx = new NormalIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6146);
				allTokens();
				}
				break;
			case REVERSE_QUOTE_ID:
				_localctx = new ReverseQuoteIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6147);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				_localctx = new ReverseQuoteIdentifierContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6148);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			case DELIMITED_ID:
				_localctx = new DoubleQuoteIdentifier1Context(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6149);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameIdentifierContext extends ParserRuleContext {
		public NameIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nameIdentifier; }
	 
		public NameIdentifierContext() { }
		public void copyFrom(NameIdentifierContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Identifier1Context extends NameIdentifierContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Identifier1Context(NameIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIdentifier1(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PropertyIdentifier1Context extends NameIdentifierContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(MySQLSQLStatementParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(MySQLSQLStatementParser.PERIOD, i);
		}
		public PropertyIdentifier1Context(NameIdentifierContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPropertyIdentifier1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameIdentifierContext nameIdentifier() throws RecognitionException {
		NameIdentifierContext _localctx = new NameIdentifierContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_nameIdentifier);
		try {
			int _alt;
			setState(6160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				_localctx = new Identifier1Context(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6152);
				identifier();
				}
				break;
			case 2:
				_localctx = new PropertyIdentifier1Context(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6153);
				identifier();
				setState(6156); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6154);
						match(PERIOD);
						setState(6155);
						identifier();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6158); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
	 
		public LiteralContext() { }
		public void copyFrom(LiteralContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TimestampLiteralContext extends LiteralContext {
		public ExprContext value;
		public TerminalNode TIMESTAMP() { return getToken(MySQLSQLStatementParser.TIMESTAMP, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TimestampLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTimestampLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullLiteralContext extends LiteralContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySQLSQLStatementParser.NULL_LITERAL, 0); }
		public NullLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNullLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharLiteralContext extends LiteralContext {
		public TerminalNode CHAR_STRING() { return getToken(MySQLSQLStatementParser.CHAR_STRING, 0); }
		public CharLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCharLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DoubleQuoteIdentifier2Context extends LiteralContext {
		public TerminalNode DELIMITED_ID() { return getToken(MySQLSQLStatementParser.DELIMITED_ID, 0); }
		public DoubleQuoteIdentifier2Context(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDoubleQuoteIdentifier2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrueLiteralContext extends LiteralContext {
		public TerminalNode TRUE() { return getToken(MySQLSQLStatementParser.TRUE, 0); }
		public TrueLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTrueLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharsetNamChareLiteralContext extends LiteralContext {
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySQLSQLStatementParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(MySQLSQLStatementParser.CHAR_STRING, 0); }
		public CharsetNamChareLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCharsetNamChareLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitLiteralContext extends LiteralContext {
		public TerminalNode BIT_STRING() { return getToken(MySQLSQLStatementParser.BIT_STRING, 0); }
		public BitLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class HexadecimalLiteralContext extends LiteralContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySQLSQLStatementParser.HEXADECIMAL_LITERAL, 0); }
		public HexadecimalLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TimeLiteralContext extends LiteralContext {
		public TerminalNode TIME() { return getToken(MySQLSQLStatementParser.TIME, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TimeLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTimeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FalseLiteralContext extends LiteralContext {
		public TerminalNode FALSE() { return getToken(MySQLSQLStatementParser.FALSE, 0); }
		public FalseLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFalseLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NCharLiteralContext extends LiteralContext {
		public TerminalNode NCHAR_STRING() { return getToken(MySQLSQLStatementParser.NCHAR_STRING, 0); }
		public NCharLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNCharLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntegerLiteralContext extends LiteralContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(MySQLSQLStatementParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(MySQLSQLStatementParser.MINUS_SIGN, 0); }
		public IntegerLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIntegerLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DateLiteralContext extends LiteralContext {
		public TerminalNode DATE() { return getToken(MySQLSQLStatementParser.DATE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DateLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDateLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalLiteralContext extends LiteralContext {
		public TerminalNode INTERVAL() { return getToken(MySQLSQLStatementParser.INTERVAL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIntervalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NumberLiteralContext extends LiteralContext {
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(MySQLSQLStatementParser.APPROXIMATE_NUM_LIT, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(MySQLSQLStatementParser.MINUS_SIGN, 0); }
		public NumberLiteralContext(LiteralContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNumberLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_literal);
		int _la;
		try {
			setState(6190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
			case 1:
				_localctx = new NCharLiteralContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6162);
				match(NCHAR_STRING);
				}
				break;
			case 2:
				_localctx = new CharLiteralContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6163);
				match(CHAR_STRING);
				}
				break;
			case 3:
				_localctx = new DoubleQuoteIdentifier2Context(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6164);
				match(DELIMITED_ID);
				}
				break;
			case 4:
				_localctx = new CharsetNamChareLiteralContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6165);
				match(STRING_CHARSET_NAME);
				setState(6166);
				match(CHAR_STRING);
				}
				break;
			case 5:
				_localctx = new IntegerLiteralContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS_SIGN) {
					{
					setState(6167);
					match(MINUS_SIGN);
					}
				}

				setState(6170);
				match(UNSIGNED_INTEGER);
				}
				break;
			case 6:
				_localctx = new NumberLiteralContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS_SIGN) {
					{
					setState(6171);
					match(MINUS_SIGN);
					}
				}

				setState(6174);
				match(APPROXIMATE_NUM_LIT);
				}
				break;
			case 7:
				_localctx = new DateLiteralContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6175);
				match(DATE);
				setState(6176);
				expr(0);
				}
				break;
			case 8:
				_localctx = new TimeLiteralContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6177);
				match(TIME);
				setState(6178);
				expr(0);
				}
				break;
			case 9:
				_localctx = new TimestampLiteralContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6179);
				match(TIMESTAMP);
				setState(6180);
				((TimestampLiteralContext)_localctx).value = expr(0);
				}
				break;
			case 10:
				_localctx = new IntervalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6181);
				match(INTERVAL);
				setState(6182);
				expr(0);
				setState(6183);
				intervalType();
				}
				break;
			case 11:
				_localctx = new HexadecimalLiteralContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6185);
				match(HEXADECIMAL_LITERAL);
				}
				break;
			case 12:
				_localctx = new BitLiteralContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6186);
				match(BIT_STRING);
				}
				break;
			case 13:
				_localctx = new FalseLiteralContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6187);
				match(FALSE);
				}
				break;
			case 14:
				_localctx = new TrueLiteralContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6188);
				match(TRUE);
				}
				break;
			case 15:
				_localctx = new NullLiteralContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(6189);
				match(NULL_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public TerminalNode MICROSECOND() { return getToken(MySQLSQLStatementParser.MICROSECOND, 0); }
		public TerminalNode SECOND() { return getToken(MySQLSQLStatementParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySQLSQLStatementParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(MySQLSQLStatementParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(MySQLSQLStatementParser.DAY, 0); }
		public TerminalNode WEEK() { return getToken(MySQLSQLStatementParser.WEEK, 0); }
		public TerminalNode MONTH() { return getToken(MySQLSQLStatementParser.MONTH, 0); }
		public TerminalNode QUARTER() { return getToken(MySQLSQLStatementParser.QUARTER, 0); }
		public TerminalNode YEAR() { return getToken(MySQLSQLStatementParser.YEAR, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySQLSQLStatementParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySQLSQLStatementParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySQLSQLStatementParser.MINUTE_SECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySQLSQLStatementParser.HOUR_MICROSECOND, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySQLSQLStatementParser.HOUR_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySQLSQLStatementParser.HOUR_MINUTE, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySQLSQLStatementParser.DAY_MICROSECOND, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySQLSQLStatementParser.DAY_SECOND, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySQLSQLStatementParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySQLSQLStatementParser.DAY_HOUR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySQLSQLStatementParser.YEAR_MONTH, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_intervalType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6192);
			_la = _input.LA(1);
			if ( !(_la==YEAR || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (YEAR_MONTH - 549)) | (1L << (DAY_HOUR - 549)) | (1L << (DAY_MINUTE - 549)) | (1L << (DAY_SECOND - 549)) | (1L << (HOUR_MINUTE - 549)) | (1L << (HOUR_SECOND - 549)) | (1L << (MINUTE_SECOND - 549)) | (1L << (SECOND_MICROSECOND - 549)) | (1L << (MINUTE_MICROSECOND - 549)) | (1L << (HOUR_MICROSECOND - 549)) | (1L << (DAY_MICROSECOND - 549)) | (1L << (QUARTER - 549)) | (1L << (MONTH - 549)) | (1L << (DAY - 549)) | (1L << (HOUR - 549)) | (1L << (MINUTE - 549)) | (1L << (WEEK - 549)) | (1L << (SECOND - 549)) | (1L << (MICROSECOND - 549)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorExprContext extends ParserRuleContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public UnaryOperatorExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperatorExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUnaryOperatorExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorExprContext unaryOperatorExpr() throws RecognitionException {
		UnaryOperatorExprContext _localctx = new UnaryOperatorExprContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_unaryOperatorExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6195);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(6194);
				match(LEFT_PAREN);
				}
			}

			setState(6197);
			unaryOperator();
			setState(6198);
			expr(0);
			setState(6200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(6199);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(MySQLSQLStatementParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(MySQLSQLStatementParser.MINUS_SIGN, 0); }
		public TerminalNode EXCLAMATION_OP() { return getToken(MySQLSQLStatementParser.EXCLAMATION_OP, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySQLSQLStatementParser.BIT_NOT_OP, 0); }
		public TerminalNode BINARY() { return getToken(MySQLSQLStatementParser.BINARY, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6202);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableExprContext extends ParserRuleContext {
		public TerminalNode QUESTION_MARK() { return getToken(MySQLSQLStatementParser.QUESTION_MARK, 0); }
		public VariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableExprContext variableExpr() throws RecognitionException {
		VariableExprContext _localctx = new VariableExprContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_variableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6204);
			match(QUESTION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LocalVariableExprContext extends ParserRuleContext {
		public TerminalNode AT_SIGN() { return getToken(MySQLSQLStatementParser.AT_SIGN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LocalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLocalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LocalVariableExprContext localVariableExpr() throws RecognitionException {
		LocalVariableExprContext _localctx = new LocalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_localVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6206);
			match(AT_SIGN);
			setState(6207);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalVariableExprContext extends ParserRuleContext {
		public List<TerminalNode> AT_SIGN() { return getTokens(MySQLSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySQLSQLStatementParser.AT_SIGN, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public GlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GlobalVariableExprContext globalVariableExpr() throws RecognitionException {
		GlobalVariableExprContext _localctx = new GlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_globalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6209);
			match(AT_SIGN);
			setState(6210);
			match(AT_SIGN);
			setState(6211);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GlobalGlobalVariableExprContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_SIGN() { return getTokens(MySQLSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySQLSQLStatementParser.AT_SIGN, i);
		}
		public TerminalNode GLOBAL() { return getToken(MySQLSQLStatementParser.GLOBAL, 0); }
		public TerminalNode PERIOD() { return getToken(MySQLSQLStatementParser.PERIOD, 0); }
		public GlobalGlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_globalGlobalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGlobalGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GlobalGlobalVariableExprContext globalGlobalVariableExpr() throws RecognitionException {
		GlobalGlobalVariableExprContext _localctx = new GlobalGlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_globalGlobalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6218);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN:
				{
				setState(6213);
				match(AT_SIGN);
				setState(6214);
				match(AT_SIGN);
				setState(6215);
				match(GLOBAL);
				setState(6216);
				match(PERIOD);
				}
				break;
			case GLOBAL:
				{
				setState(6217);
				match(GLOBAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6220);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SessionGlobalVariableExprContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_SIGN() { return getTokens(MySQLSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySQLSQLStatementParser.AT_SIGN, i);
		}
		public TerminalNode SESSION() { return getToken(MySQLSQLStatementParser.SESSION, 0); }
		public TerminalNode PERIOD() { return getToken(MySQLSQLStatementParser.PERIOD, 0); }
		public SessionGlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionGlobalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSessionGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SessionGlobalVariableExprContext sessionGlobalVariableExpr() throws RecognitionException {
		SessionGlobalVariableExprContext _localctx = new SessionGlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_sessionGlobalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6227);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN:
				{
				setState(6222);
				match(AT_SIGN);
				setState(6223);
				match(AT_SIGN);
				setState(6224);
				match(SESSION);
				setState(6225);
				match(PERIOD);
				}
				break;
			case SESSION:
				{
				setState(6226);
				match(SESSION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6229);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PersistGlobalVariableExprContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_SIGN() { return getTokens(MySQLSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySQLSQLStatementParser.AT_SIGN, i);
		}
		public TerminalNode PERSIST() { return getToken(MySQLSQLStatementParser.PERSIST, 0); }
		public TerminalNode PERIOD() { return getToken(MySQLSQLStatementParser.PERIOD, 0); }
		public PersistGlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_persistGlobalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPersistGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PersistGlobalVariableExprContext persistGlobalVariableExpr() throws RecognitionException {
		PersistGlobalVariableExprContext _localctx = new PersistGlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_persistGlobalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN:
				{
				setState(6231);
				match(AT_SIGN);
				setState(6232);
				match(AT_SIGN);
				setState(6233);
				match(PERSIST);
				setState(6234);
				match(PERIOD);
				}
				break;
			case PERSIST:
				{
				setState(6235);
				match(PERSIST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6238);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PersistOnlyGlobalVariableExprContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_SIGN() { return getTokens(MySQLSQLStatementParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySQLSQLStatementParser.AT_SIGN, i);
		}
		public TerminalNode PERSIST_ONLY() { return getToken(MySQLSQLStatementParser.PERSIST_ONLY, 0); }
		public TerminalNode PERIOD() { return getToken(MySQLSQLStatementParser.PERIOD, 0); }
		public PersistOnlyGlobalVariableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_persistOnlyGlobalVariableExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPersistOnlyGlobalVariableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PersistOnlyGlobalVariableExprContext persistOnlyGlobalVariableExpr() throws RecognitionException {
		PersistOnlyGlobalVariableExprContext _localctx = new PersistOnlyGlobalVariableExprContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_persistOnlyGlobalVariableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN:
				{
				setState(6240);
				match(AT_SIGN);
				setState(6241);
				match(AT_SIGN);
				setState(6242);
				match(PERSIST_ONLY);
				setState(6243);
				match(PERIOD);
				}
				break;
			case PERSIST_ONLY:
				{
				setState(6244);
				match(PERSIST_ONLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6247);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowExprContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(MySQLSQLStatementParser.ROW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public RowExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRowExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowExprContext rowExpr() throws RecognitionException {
		RowExprContext _localctx = new RowExprContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_rowExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6249);
			match(ROW);
			setState(6250);
			match(LEFT_PAREN);
			setState(6251);
			expr(0);
			setState(6256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6252);
				match(COMMA);
				setState(6253);
				expr(0);
				}
				}
				setState(6258);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6259);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectQueryExprContext extends ParserRuleContext {
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public SelectQueryExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQueryExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSelectQueryExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectQueryExprContext selectQueryExpr() throws RecognitionException {
		SelectQueryExprContext _localctx = new SelectQueryExprContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_selectQueryExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				setState(6261);
				match(LEFT_PAREN);
				}
				break;
			}
			setState(6264);
			iSelectQuery();
			setState(6266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
			case 1:
				{
				setState(6265);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchExprContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> matchs = new ArrayList<ExprContext>();
		public List<ExprContext> against = new ArrayList<ExprContext>();
		public TerminalNode MATCH() { return getToken(MySQLSQLStatementParser.MATCH, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode AGAINST() { return getToken(MySQLSQLStatementParser.AGAINST, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public SearchModifierContext searchModifier() {
			return getRuleContext(SearchModifierContext.class,0);
		}
		public MatchExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMatchExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchExprContext matchExpr() throws RecognitionException {
		MatchExprContext _localctx = new MatchExprContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_matchExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6268);
			match(MATCH);
			setState(6269);
			match(LEFT_PAREN);
			setState(6270);
			((MatchExprContext)_localctx).expr = expr(0);
			((MatchExprContext)_localctx).matchs.add(((MatchExprContext)_localctx).expr);
			setState(6275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6271);
				match(COMMA);
				setState(6272);
				((MatchExprContext)_localctx).expr = expr(0);
				((MatchExprContext)_localctx).matchs.add(((MatchExprContext)_localctx).expr);
				}
				}
				setState(6277);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6278);
			match(RIGHT_PAREN);
			setState(6279);
			match(AGAINST);
			setState(6280);
			match(LEFT_PAREN);
			setState(6281);
			((MatchExprContext)_localctx).expr = expr(0);
			((MatchExprContext)_localctx).against.add(((MatchExprContext)_localctx).expr);
			setState(6283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN || _la==WITH) {
				{
				setState(6282);
				searchModifier();
				}
			}

			setState(6285);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SearchModifierContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public TerminalNode NATURAL() { return getToken(MySQLSQLStatementParser.NATURAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySQLSQLStatementParser.LANGUAGE, 0); }
		public TerminalNode MODE() { return getToken(MySQLSQLStatementParser.MODE, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode QUERY() { return getToken(MySQLSQLStatementParser.QUERY, 0); }
		public TerminalNode EXPANSION() { return getToken(MySQLSQLStatementParser.EXPANSION, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySQLSQLStatementParser.BOOLEAN, 0); }
		public SearchModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchModifier; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSearchModifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SearchModifierContext searchModifier() throws RecognitionException {
		SearchModifierContext _localctx = new SearchModifierContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_searchModifier);
		try {
			setState(6304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6287);
				match(IN);
				setState(6288);
				match(NATURAL);
				setState(6289);
				match(LANGUAGE);
				setState(6290);
				match(MODE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6291);
				match(IN);
				setState(6292);
				match(NATURAL);
				setState(6293);
				match(LANGUAGE);
				setState(6294);
				match(MODE);
				setState(6295);
				match(WITH);
				setState(6296);
				match(QUERY);
				setState(6297);
				match(EXPANSION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6298);
				match(IN);
				setState(6299);
				match(BOOLEAN);
				setState(6300);
				match(MODE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6301);
				match(WITH);
				setState(6302);
				match(QUERY);
				setState(6303);
				match(EXPANSION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(MySQLSQLStatementParser.CASE, 0); }
		public TerminalNode END() { return getToken(MySQLSQLStatementParser.END, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<CaseExprWhenItemContext> caseExprWhenItem() {
			return getRuleContexts(CaseExprWhenItemContext.class);
		}
		public CaseExprWhenItemContext caseExprWhenItem(int i) {
			return getRuleContext(CaseExprWhenItemContext.class,i);
		}
		public CaseExprElseClauseContext caseExprElseClause() {
			return getRuleContext(CaseExprElseClauseContext.class,0);
		}
		public CaseExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCaseExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprContext caseExpr() throws RecognitionException {
		CaseExprContext _localctx = new CaseExprContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_caseExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6306);
			match(CASE);
			setState(6308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
				{
				setState(6307);
				expr(0);
				}
			}

			setState(6311); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6310);
				caseExprWhenItem();
				}
				}
				setState(6313); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(6316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(6315);
				caseExprElseClause();
				}
			}

			setState(6318);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprWhenItemContext extends ParserRuleContext {
		public ExprContext when;
		public ExprContext then;
		public TerminalNode WHEN() { return getToken(MySQLSQLStatementParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySQLSQLStatementParser.THEN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public CaseExprWhenItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExprWhenItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCaseExprWhenItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprWhenItemContext caseExprWhenItem() throws RecognitionException {
		CaseExprWhenItemContext _localctx = new CaseExprWhenItemContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_caseExprWhenItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6320);
			match(WHEN);
			setState(6322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
				{
				setState(6321);
				((CaseExprWhenItemContext)_localctx).when = expr(0);
				}
			}

			setState(6324);
			match(THEN);
			setState(6325);
			((CaseExprWhenItemContext)_localctx).then = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprElseClauseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(MySQLSQLStatementParser.ELSE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CaseExprElseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExprElseClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCaseExprElseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprElseClauseContext caseExprElseClause() throws RecognitionException {
		CaseExprElseClauseContext _localctx = new CaseExprElseClauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_caseExprElseClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6327);
			match(ELSE);
			setState(6328);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListExprContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public ListExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitListExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListExprContext listExpr() throws RecognitionException {
		ListExprContext _localctx = new ListExprContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_listExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6330);
			match(LEFT_PAREN);
			setState(6331);
			expr(0);
			setState(6336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6332);
				match(COMMA);
				setState(6333);
				expr(0);
				}
				}
				setState(6338);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6339);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprBasicContext extends ParserRuleContext {
		public VariableExprContext variableExpr() {
			return getRuleContext(VariableExprContext.class,0);
		}
		public LocalVariableExprContext localVariableExpr() {
			return getRuleContext(LocalVariableExprContext.class,0);
		}
		public GlobalVariableExprContext globalVariableExpr() {
			return getRuleContext(GlobalVariableExprContext.class,0);
		}
		public GlobalGlobalVariableExprContext globalGlobalVariableExpr() {
			return getRuleContext(GlobalGlobalVariableExprContext.class,0);
		}
		public SessionGlobalVariableExprContext sessionGlobalVariableExpr() {
			return getRuleContext(SessionGlobalVariableExprContext.class,0);
		}
		public PersistGlobalVariableExprContext persistGlobalVariableExpr() {
			return getRuleContext(PersistGlobalVariableExprContext.class,0);
		}
		public PersistOnlyGlobalVariableExprContext persistOnlyGlobalVariableExpr() {
			return getRuleContext(PersistOnlyGlobalVariableExprContext.class,0);
		}
		public FunctionContext function() {
			return getRuleContext(FunctionContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public UnaryOperatorExprContext unaryOperatorExpr() {
			return getRuleContext(UnaryOperatorExprContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public RowExprContext rowExpr() {
			return getRuleContext(RowExprContext.class,0);
		}
		public MatchExprContext matchExpr() {
			return getRuleContext(MatchExprContext.class,0);
		}
		public CaseExprContext caseExpr() {
			return getRuleContext(CaseExprContext.class,0);
		}
		public SelectQueryExprContext selectQueryExpr() {
			return getRuleContext(SelectQueryExprContext.class,0);
		}
		public ListExprContext listExpr() {
			return getRuleContext(ListExprContext.class,0);
		}
		public ExprBasicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprBasic; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitExprBasic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprBasicContext exprBasic() throws RecognitionException {
		ExprBasicContext _localctx = new ExprBasicContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_exprBasic);
		try {
			setState(6357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6341);
				variableExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6342);
				localVariableExpr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6343);
				globalVariableExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6344);
				globalGlobalVariableExpr();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6345);
				sessionGlobalVariableExpr();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6346);
				persistGlobalVariableExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6347);
				persistOnlyGlobalVariableExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6348);
				function();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6349);
				literal();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6350);
				unaryOperatorExpr();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6351);
				nameIdentifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6352);
				rowExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6353);
				matchExpr();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6354);
				caseExpr();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6355);
				selectQueryExpr();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6356);
				listExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
	 
		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikeConditionContext extends ExprContext {
		public ExprContext value;
		public ExprContext pattern;
		public TerminalNode SOUNDS() { return getToken(MySQLSQLStatementParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySQLSQLStatementParser.LIKE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public SoundsLikeConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSoundsLikeCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RlikeConditionContext extends ExprContext {
		public ExprContext value;
		public Token operator;
		public ExprContext pattern;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RLIKE() { return getToken(MySQLSQLStatementParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public RlikeConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRlikeCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InConditionContext extends ExprContext {
		public ExprContext name;
		public ExprContext expr;
		public List<ExprContext> values = new ArrayList<ExprContext>();
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public InConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitInCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SomeExprContext extends ExprContext {
		public TerminalNode SOME() { return getToken(MySQLSQLStatementParser.SOME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public SomeExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSomeExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NewVariableRefExprContext extends ExprContext {
		public TerminalNode NEW() { return getToken(MySQLSQLStatementParser.NEW, 0); }
		public TerminalNode PERIOD() { return getToken(MySQLSQLStatementParser.PERIOD, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public NewVariableRefExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNewVariableRefExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullConditionContext extends ExprContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySQLSQLStatementParser.IS, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySQLSQLStatementParser.NULL_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public IsNullConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIsNullCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpConditionContext extends ExprContext {
		public ExprContext value;
		public ExprContext pattern;
		public TerminalNode REGEXP() { return getToken(MySQLSQLStatementParser.REGEXP, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public RegexpConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRegexpCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IConditionContext extends ExprContext {
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public IConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitICondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryOperatorExprContext extends ExprContext {
		public Token operator;
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySQLSQLStatementParser.BIT_XOR_OP, 0); }
		public TerminalNode ASTERISK() { return getToken(MySQLSQLStatementParser.ASTERISK, 0); }
		public TerminalNode DIVIDE() { return getToken(MySQLSQLStatementParser.DIVIDE, 0); }
		public TerminalNode MOD() { return getToken(MySQLSQLStatementParser.MOD, 0); }
		public TerminalNode PERCENT() { return getToken(MySQLSQLStatementParser.PERCENT, 0); }
		public TerminalNode DIV() { return getToken(MySQLSQLStatementParser.DIV, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(MySQLSQLStatementParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(MySQLSQLStatementParser.MINUS_SIGN, 0); }
		public TerminalNode LESS_THAN_LESS_THAN_OP() { return getToken(MySQLSQLStatementParser.LESS_THAN_LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_GREATER_THAN_OP() { return getToken(MySQLSQLStatementParser.GREATER_THAN_GREATER_THAN_OP, 0); }
		public TerminalNode BIT_AND_OP() { return getToken(MySQLSQLStatementParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySQLSQLStatementParser.BIT_OR_OP, 0); }
		public TerminalNode COLLATE() { return getToken(MySQLSQLStatementParser.COLLATE, 0); }
		public TerminalNode LOGIC_AND_OP() { return getToken(MySQLSQLStatementParser.LOGIC_AND_OP, 0); }
		public TerminalNode AND() { return getToken(MySQLSQLStatementParser.AND, 0); }
		public TerminalNode XOR() { return getToken(MySQLSQLStatementParser.XOR, 0); }
		public TerminalNode LOGIC_OR_OP() { return getToken(MySQLSQLStatementParser.LOGIC_OR_OP, 0); }
		public TerminalNode OR() { return getToken(MySQLSQLStatementParser.OR, 0); }
		public TerminalNode ASSIGN_OP() { return getToken(MySQLSQLStatementParser.ASSIGN_OP, 0); }
		public BinaryOperatorExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBinaryOperatorExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikeConditionContext extends ExprContext {
		public ExprContext value;
		public Token operator;
		public ExprContext pattern;
		public ExprContext escape;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySQLSQLStatementParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySQLSQLStatementParser.ESCAPE, 0); }
		public LikeConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLikeCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AllExprContext extends ExprContext {
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public AllExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAllExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OldVariableRefExprContext extends ExprContext {
		public TerminalNode OLD() { return getToken(MySQLSQLStatementParser.OLD, 0); }
		public TerminalNode PERIOD() { return getToken(MySQLSQLStatementParser.PERIOD, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public OldVariableRefExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOldVariableRefExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PropertyIdentifier2Context extends ExprContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(MySQLSQLStatementParser.PERIOD, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public PropertyIdentifier2Context(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPropertyIdentifier2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MethodInvocation1Context extends ExprContext {
		public ExprContext expr;
		public List<ExprContext> arguments = new ArrayList<ExprContext>();
		public NoArgumentFunctionNameContext noArgumentFunctionName() {
			return getRuleContext(NoArgumentFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public MethodInvocation1Context(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMethodInvocation1(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BasicExprContext extends ExprContext {
		public ExprBasicContext exprBasic() {
			return getRuleContext(ExprBasicContext.class,0);
		}
		public BasicExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBasicExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MethodInvocation2Context extends ExprContext {
		public ExprContext name;
		public ExprContext expr;
		public List<ExprContext> arguments = new ArrayList<ExprContext>();
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public MethodInvocation2Context(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMethodInvocation2(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenConditionContext extends ExprContext {
		public ExprContext name;
		public ExprContext between;
		public ExprContext and;
		public TerminalNode BETWEEN() { return getToken(MySQLSQLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySQLSQLStatementParser.AND, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public BetweenConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitBetweenCondition(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CursorExprContext extends ExprContext {
		public TerminalNode CURSOR() { return getToken(MySQLSQLStatementParser.CURSOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CursorExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCursorExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AnyExprContext extends ExprContext {
		public TerminalNode ANY() { return getToken(MySQLSQLStatementParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public AnyExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAnyExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ComparisonBinaryOperatorExprContext extends ExprContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public ComparisonOpContext comparisonOp() {
			return getRuleContext(ComparisonOpContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public ComparisonBinaryOperatorExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitComparisonBinaryOperatorExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprToExprExprContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySQLSQLStatementParser.TO, 0); }
		public ExprToExprExprContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitExprToExprExpr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsBooleanLiteralConditionContext extends ExprContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySQLSQLStatementParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySQLSQLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySQLSQLStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySQLSQLStatementParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public IsBooleanLiteralConditionContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIsBooleanLiteralCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 634;
		enterRecursionRule(_localctx, 634, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
			case 1:
				{
				_localctx = new CursorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(6360);
				match(CURSOR);
				setState(6361);
				match(LEFT_PAREN);
				setState(6362);
				iSelectQuery();
				setState(6363);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new AnyExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6365);
				match(ANY);
				setState(6366);
				match(LEFT_PAREN);
				setState(6367);
				expr(0);
				setState(6368);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				_localctx = new AllExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6370);
				match(ALL);
				setState(6371);
				match(LEFT_PAREN);
				setState(6372);
				expr(0);
				setState(6373);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				_localctx = new SomeExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6375);
				match(SOME);
				setState(6376);
				match(LEFT_PAREN);
				setState(6377);
				expr(0);
				setState(6378);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				{
				_localctx = new NewVariableRefExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6380);
				match(NEW);
				setState(6381);
				match(PERIOD);
				setState(6382);
				nameIdentifier();
				}
				break;
			case 6:
				{
				_localctx = new OldVariableRefExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6383);
				match(OLD);
				setState(6384);
				match(PERIOD);
				setState(6385);
				nameIdentifier();
				}
				break;
			case 7:
				{
				_localctx = new MethodInvocation1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6386);
				noArgumentFunctionName();
				setState(6399);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
				case 1:
					{
					setState(6387);
					match(LEFT_PAREN);
					setState(6396);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
						{
						setState(6388);
						((MethodInvocation1Context)_localctx).expr = expr(0);
						((MethodInvocation1Context)_localctx).arguments.add(((MethodInvocation1Context)_localctx).expr);
						setState(6393);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6389);
							match(COMMA);
							setState(6390);
							((MethodInvocation1Context)_localctx).expr = expr(0);
							((MethodInvocation1Context)_localctx).arguments.add(((MethodInvocation1Context)_localctx).expr);
							}
							}
							setState(6395);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(6398);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6401);
				match(LEFT_PAREN);
				setState(6402);
				expr(0);
				setState(6403);
				((BinaryOperatorExprContext)_localctx).operator = match(BIT_XOR_OP);
				setState(6404);
				expr(0);
				setState(6405);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6407);
				match(LEFT_PAREN);
				setState(6408);
				expr(0);
				setState(6409);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DIV || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (MOD - 642)) | (1L << (ASTERISK - 642)) | (1L << (DIVIDE - 642)) | (1L << (PERCENT - 642)))) != 0)) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6410);
				expr(0);
				setState(6411);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6413);
				match(LEFT_PAREN);
				setState(6414);
				expr(0);
				setState(6415);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6416);
				expr(0);
				setState(6417);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6419);
				match(LEFT_PAREN);
				setState(6420);
				expr(0);
				setState(6421);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6422);
				expr(0);
				setState(6423);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6425);
				match(LEFT_PAREN);
				setState(6426);
				expr(0);
				setState(6427);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LESS_THAN_LESS_THAN_OP || _la==GREATER_THAN_GREATER_THAN_OP) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6428);
				expr(0);
				setState(6429);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6431);
				match(LEFT_PAREN);
				setState(6432);
				expr(0);
				setState(6433);
				((BinaryOperatorExprContext)_localctx).operator = match(BIT_AND_OP);
				setState(6434);
				expr(0);
				setState(6435);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6437);
				match(LEFT_PAREN);
				setState(6438);
				expr(0);
				setState(6439);
				((BinaryOperatorExprContext)_localctx).operator = match(BIT_OR_OP);
				setState(6440);
				expr(0);
				setState(6441);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				{
				_localctx = new ComparisonBinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6443);
				match(LEFT_PAREN);
				setState(6444);
				expr(0);
				setState(6445);
				comparisonOp();
				setState(6446);
				expr(0);
				setState(6447);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				{
				_localctx = new IConditionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6449);
				condition();
				}
				break;
			case 17:
				{
				_localctx = new BasicExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6450);
				exprBasic();
				}
				break;
			case 18:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6451);
				match(LEFT_PAREN);
				setState(6452);
				expr(0);
				setState(6453);
				((BinaryOperatorExprContext)_localctx).operator = match(COLLATE);
				setState(6454);
				expr(0);
				setState(6455);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6457);
				match(LEFT_PAREN);
				setState(6458);
				expr(0);
				setState(6459);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==AND || _la==LOGIC_AND_OP) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6460);
				expr(0);
				setState(6461);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6463);
				match(LEFT_PAREN);
				setState(6464);
				expr(0);
				setState(6465);
				((BinaryOperatorExprContext)_localctx).operator = match(XOR);
				setState(6466);
				expr(0);
				setState(6467);
				match(RIGHT_PAREN);
				}
				break;
			case 21:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6469);
				match(LEFT_PAREN);
				setState(6470);
				expr(0);
				setState(6471);
				((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OR || _la==LOGIC_OR_OP) ) {
					((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6472);
				expr(0);
				setState(6473);
				match(RIGHT_PAREN);
				}
				break;
			case 22:
				{
				_localctx = new BinaryOperatorExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(6475);
				match(LEFT_PAREN);
				setState(6476);
				expr(0);
				setState(6477);
				((BinaryOperatorExprContext)_localctx).operator = match(ASSIGN_OP);
				setState(6478);
				expr(0);
				setState(6479);
				match(RIGHT_PAREN);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6607);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,879,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6605);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
					case 1:
						{
						_localctx = new ExprToExprExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6483);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(6484);
						match(TO);
						setState(6485);
						expr(38);
						}
						break;
					case 2:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6486);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(6487);
						((BinaryOperatorExprContext)_localctx).operator = match(BIT_XOR_OP);
						setState(6488);
						expr(29);
						}
						break;
					case 3:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6489);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(6490);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DIV || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (MOD - 642)) | (1L << (ASTERISK - 642)) | (1L << (DIVIDE - 642)) | (1L << (PERCENT - 642)))) != 0)) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6491);
						expr(28);
						}
						break;
					case 4:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6492);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(6493);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6494);
						expr(27);
						}
						break;
					case 5:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6495);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(6496);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==LESS_THAN_LESS_THAN_OP || _la==GREATER_THAN_GREATER_THAN_OP) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6497);
						expr(26);
						}
						break;
					case 6:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6498);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(6499);
						((BinaryOperatorExprContext)_localctx).operator = match(BIT_AND_OP);
						setState(6500);
						expr(25);
						}
						break;
					case 7:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6501);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(6502);
						((BinaryOperatorExprContext)_localctx).operator = match(BIT_OR_OP);
						setState(6503);
						expr(24);
						}
						break;
					case 8:
						{
						_localctx = new ComparisonBinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6504);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(6505);
						comparisonOp();
						setState(6506);
						expr(23);
						}
						break;
					case 9:
						{
						_localctx = new SoundsLikeConditionContext(new ExprContext(_parentctx, _parentState));
						((SoundsLikeConditionContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6508);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(6509);
						match(SOUNDS);
						setState(6510);
						match(LIKE);
						setState(6511);
						((SoundsLikeConditionContext)_localctx).pattern = expr(20);
						}
						break;
					case 10:
						{
						_localctx = new RlikeConditionContext(new ExprContext(_parentctx, _parentState));
						((RlikeConditionContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6512);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(6514);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6513);
							match(NOT);
							}
						}

						setState(6516);
						((RlikeConditionContext)_localctx).operator = match(RLIKE);
						setState(6517);
						((RlikeConditionContext)_localctx).pattern = expr(18);
						}
						break;
					case 11:
						{
						_localctx = new RegexpConditionContext(new ExprContext(_parentctx, _parentState));
						((RegexpConditionContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6518);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(6520);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6519);
							match(NOT);
							}
						}

						setState(6522);
						match(REGEXP);
						setState(6523);
						((RegexpConditionContext)_localctx).pattern = expr(17);
						}
						break;
					case 12:
						{
						_localctx = new BetweenConditionContext(new ExprContext(_parentctx, _parentState));
						((BetweenConditionContext)_localctx).name = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6524);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(6526);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6525);
							match(NOT);
							}
						}

						setState(6528);
						match(BETWEEN);
						setState(6529);
						((BetweenConditionContext)_localctx).between = expr(0);
						setState(6530);
						match(AND);
						setState(6531);
						((BetweenConditionContext)_localctx).and = expr(15);
						}
						break;
					case 13:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6533);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6534);
						((BinaryOperatorExprContext)_localctx).operator = match(COLLATE);
						setState(6535);
						expr(10);
						}
						break;
					case 14:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6536);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6537);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==LOGIC_AND_OP) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6538);
						expr(5);
						}
						break;
					case 15:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6539);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6540);
						((BinaryOperatorExprContext)_localctx).operator = match(XOR);
						setState(6541);
						expr(4);
						}
						break;
					case 16:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6542);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6543);
						((BinaryOperatorExprContext)_localctx).operator = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==OR || _la==LOGIC_OR_OP) ) {
							((BinaryOperatorExprContext)_localctx).operator = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6544);
						expr(3);
						}
						break;
					case 17:
						{
						_localctx = new BinaryOperatorExprContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6545);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6546);
						((BinaryOperatorExprContext)_localctx).operator = match(ASSIGN_OP);
						setState(6547);
						expr(2);
						}
						break;
					case 18:
						{
						_localctx = new MethodInvocation2Context(new ExprContext(_parentctx, _parentState));
						((MethodInvocation2Context)_localctx).name = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6548);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(6549);
						match(LEFT_PAREN);
						setState(6561);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << DISTINCT) | (1L << DISTINCTROW) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
							{
							setState(6551);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
							case 1:
								{
								setState(6550);
								setQuantifier();
								}
								break;
							}
							setState(6553);
							((MethodInvocation2Context)_localctx).expr = expr(0);
							((MethodInvocation2Context)_localctx).arguments.add(((MethodInvocation2Context)_localctx).expr);
							setState(6558);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(6554);
								match(COMMA);
								setState(6555);
								((MethodInvocation2Context)_localctx).expr = expr(0);
								((MethodInvocation2Context)_localctx).arguments.add(((MethodInvocation2Context)_localctx).expr);
								}
								}
								setState(6560);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
						}

						setState(6563);
						match(RIGHT_PAREN);
						}
						break;
					case 19:
						{
						_localctx = new IsBooleanLiteralConditionContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6564);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(6565);
						match(IS);
						setState(6567);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6566);
							match(NOT);
							}
						}

						setState(6569);
						_la = _input.LA(1);
						if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 20:
						{
						_localctx = new InConditionContext(new ExprContext(_parentctx, _parentState));
						((InConditionContext)_localctx).name = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6570);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(6572);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6571);
							match(NOT);
							}
						}

						setState(6574);
						match(IN);
						setState(6575);
						match(LEFT_PAREN);
						setState(6576);
						((InConditionContext)_localctx).expr = expr(0);
						((InConditionContext)_localctx).values.add(((InConditionContext)_localctx).expr);
						setState(6581);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6577);
							match(COMMA);
							setState(6578);
							((InConditionContext)_localctx).expr = expr(0);
							((InConditionContext)_localctx).values.add(((InConditionContext)_localctx).expr);
							}
							}
							setState(6583);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6584);
						match(RIGHT_PAREN);
						}
						break;
					case 21:
						{
						_localctx = new LikeConditionContext(new ExprContext(_parentctx, _parentState));
						((LikeConditionContext)_localctx).value = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6586);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(6588);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6587);
							match(NOT);
							}
						}

						setState(6590);
						((LikeConditionContext)_localctx).operator = match(LIKE);
						setState(6591);
						((LikeConditionContext)_localctx).pattern = expr(0);
						setState(6594);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
						case 1:
							{
							setState(6592);
							match(ESCAPE);
							setState(6593);
							((LikeConditionContext)_localctx).escape = expr(0);
							}
							break;
						}
						}
						break;
					case 22:
						{
						_localctx = new IsNullConditionContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6596);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(6597);
						match(IS);
						setState(6599);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6598);
							match(NOT);
							}
						}

						setState(6601);
						match(NULL_LITERAL);
						}
						break;
					case 23:
						{
						_localctx = new PropertyIdentifier2Context(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(6602);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(6603);
						match(PERIOD);
						setState(6604);
						nameIdentifier();
						}
						break;
					}
					} 
				}
				setState(6609);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,879,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ComparisonOpContext extends ParserRuleContext {
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP() { return getToken(MySQLSQLStatementParser.LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP, 0); }
		public TerminalNode NOT_EQUAL_OP() { return getToken(MySQLSQLStatementParser.NOT_EQUAL_OP, 0); }
		public TerminalNode EXCLAMATION_OP() { return getToken(MySQLSQLStatementParser.EXCLAMATION_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(MySQLSQLStatementParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(MySQLSQLStatementParser.GREATER_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(MySQLSQLStatementParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(MySQLSQLStatementParser.LESS_THAN_OR_EQUALS_OP, 0); }
		public ComparisonOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOp; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitComparisonOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOpContext comparisonOp() throws RecognitionException {
		ComparisonOpContext _localctx = new ComparisonOpContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_comparisonOp);
		try {
			setState(6625);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6610);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6611);
				match(LESS_THAN_OR_EQUAL_OR_GREATER_THAN_OP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6612);
				match(NOT_EQUAL_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6613);
				match(EXCLAMATION_OP);
				setState(6614);
				match(EQUALS_OP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6615);
				match(LESS_THAN_OP);
				setState(6616);
				match(GREATER_THAN_OP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6617);
				match(GREATER_THAN_OP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6618);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6619);
				match(GREATER_THAN_OP);
				setState(6620);
				match(EQUALS_OP);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6621);
				match(LESS_THAN_OP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6622);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6623);
				match(LESS_THAN_OP);
				setState(6624);
				match(EQUALS_OP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDefaultClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultClauseContext defaultClause() throws RecognitionException {
		DefaultClauseContext _localctx = new DefaultClauseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_defaultClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6627);
			match(DEFAULT);
			setState(6628);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AutoIncrementOptionExprContext extends ParserRuleContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySQLSQLStatementParser.AUTO_INCREMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public AutoIncrementOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_autoIncrementOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAutoIncrementOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AutoIncrementOptionExprContext autoIncrementOptionExpr() throws RecognitionException {
		AutoIncrementOptionExprContext _localctx = new AutoIncrementOptionExprContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_autoIncrementOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6630);
			match(AUTO_INCREMENT);
			setState(6632);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6631);
				match(EQUALS_OP);
				}
			}

			setState(6634);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AvgRowLengthOptionExprContext extends ParserRuleContext {
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySQLSQLStatementParser.AVG_ROW_LENGTH, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public AvgRowLengthOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_avgRowLengthOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAvgRowLengthOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AvgRowLengthOptionExprContext avgRowLengthOptionExpr() throws RecognitionException {
		AvgRowLengthOptionExprContext _localctx = new AvgRowLengthOptionExprContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_avgRowLengthOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6636);
			match(AVG_ROW_LENGTH);
			setState(6638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6637);
				match(EQUALS_OP);
				}
			}

			setState(6640);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSetOptionExprContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySQLSQLStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySQLSQLStatementParser.SET, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public CharacterSetOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSetOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCharacterSetOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetOptionExprContext characterSetOptionExpr() throws RecognitionException {
		CharacterSetOptionExprContext _localctx = new CharacterSetOptionExprContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_characterSetOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(6642);
				match(DEFAULT);
				}
			}

			setState(6645);
			match(CHARACTER);
			setState(6646);
			match(SET);
			setState(6648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6647);
				match(EQUALS_OP);
				}
			}

			setState(6650);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetOptionExprContext extends ParserRuleContext {
		public TerminalNode CHARSET() { return getToken(MySQLSQLStatementParser.CHARSET, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public CharsetOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCharsetOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetOptionExprContext charsetOptionExpr() throws RecognitionException {
		CharsetOptionExprContext _localctx = new CharsetOptionExprContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_charsetOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(6652);
				match(DEFAULT);
				}
			}

			setState(6655);
			match(CHARSET);
			setState(6657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6656);
				match(EQUALS_OP);
				}
			}

			setState(6659);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumOptionExprContext extends ParserRuleContext {
		public TerminalNode CHECKSUM() { return getToken(MySQLSQLStatementParser.CHECKSUM, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ChecksumOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitChecksumOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumOptionExprContext checksumOptionExpr() throws RecognitionException {
		ChecksumOptionExprContext _localctx = new ChecksumOptionExprContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_checksumOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6661);
			match(CHECKSUM);
			setState(6663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6662);
				match(EQUALS_OP);
				}
			}

			setState(6665);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateOptionExprContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(MySQLSQLStatementParser.COLLATE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public CollateOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCollateOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateOptionExprContext collateOptionExpr() throws RecognitionException {
		CollateOptionExprContext _localctx = new CollateOptionExprContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_collateOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(6667);
				match(DEFAULT);
				}
			}

			setState(6670);
			match(COLLATE);
			setState(6672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6671);
				match(EQUALS_OP);
				}
			}

			setState(6674);
			nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentOptionExprContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(MySQLSQLStatementParser.COMMENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public CommentOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCommentOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentOptionExprContext commentOptionExpr() throws RecognitionException {
		CommentOptionExprContext _localctx = new CommentOptionExprContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_commentOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6676);
			match(COMMENT);
			setState(6678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6677);
				match(EQUALS_OP);
				}
			}

			setState(6680);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompressionOptionExprContext extends ParserRuleContext {
		public TerminalNode COMPRESSION() { return getToken(MySQLSQLStatementParser.COMPRESSION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public CompressionOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compressionOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCompressionOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressionOptionExprContext compressionOptionExpr() throws RecognitionException {
		CompressionOptionExprContext _localctx = new CompressionOptionExprContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_compressionOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6682);
			match(COMPRESSION);
			setState(6684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6683);
				match(EQUALS_OP);
				}
			}

			setState(6686);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionOptionExprContext extends ParserRuleContext {
		public TerminalNode CONNECTION() { return getToken(MySQLSQLStatementParser.CONNECTION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public ConnectionOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitConnectionOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionOptionExprContext connectionOptionExpr() throws RecognitionException {
		ConnectionOptionExprContext _localctx = new ConnectionOptionExprContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_connectionOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6688);
			match(CONNECTION);
			setState(6690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6689);
				match(EQUALS_OP);
				}
			}

			setState(6692);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataDirectoryOptionExprContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(MySQLSQLStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLSQLStatementParser.DIRECTORY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public DataDirectoryOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataDirectoryOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDataDirectoryOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataDirectoryOptionExprContext dataDirectoryOptionExpr() throws RecognitionException {
		DataDirectoryOptionExprContext _localctx = new DataDirectoryOptionExprContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_dataDirectoryOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6694);
			match(DATA);
			setState(6695);
			match(DIRECTORY);
			setState(6697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6696);
				match(EQUALS_OP);
				}
			}

			setState(6699);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexDirectoryOptionExprContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySQLSQLStatementParser.DIRECTORY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public IndexDirectoryOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexDirectoryOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexDirectoryOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexDirectoryOptionExprContext indexDirectoryOptionExpr() throws RecognitionException {
		IndexDirectoryOptionExprContext _localctx = new IndexDirectoryOptionExprContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_indexDirectoryOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6701);
			match(INDEX);
			setState(6702);
			match(DIRECTORY);
			setState(6704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6703);
				match(EQUALS_OP);
				}
			}

			setState(6706);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DelayKeyWriteOptionExprContext extends ParserRuleContext {
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySQLSQLStatementParser.DELAY_KEY_WRITE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public DelayKeyWriteOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayKeyWriteOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDelayKeyWriteOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DelayKeyWriteOptionExprContext delayKeyWriteOptionExpr() throws RecognitionException {
		DelayKeyWriteOptionExprContext _localctx = new DelayKeyWriteOptionExprContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_delayKeyWriteOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6708);
			match(DELAY_KEY_WRITE);
			setState(6710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6709);
				match(EQUALS_OP);
				}
			}

			setState(6712);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncryptionOptionExprContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(MySQLSQLStatementParser.ENCRYPTION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public EncryptionOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryptionOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitEncryptionOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncryptionOptionExprContext encryptionOptionExpr() throws RecognitionException {
		EncryptionOptionExprContext _localctx = new EncryptionOptionExprContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_encryptionOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6714);
			match(ENCRYPTION);
			setState(6716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6715);
				match(EQUALS_OP);
				}
			}

			setState(6718);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineOptionExprContext extends ParserRuleContext {
		public TerminalNode ENGINE() { return getToken(MySQLSQLStatementParser.ENGINE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public EngineOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitEngineOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineOptionExprContext engineOptionExpr() throws RecognitionException {
		EngineOptionExprContext _localctx = new EngineOptionExprContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_engineOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6720);
			match(ENGINE);
			setState(6722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6721);
				match(EQUALS_OP);
				}
			}

			setState(6724);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertMethodOptionExprContext extends ParserRuleContext {
		public Token insertMethod;
		public TerminalNode INSERT_METHOD() { return getToken(MySQLSQLStatementParser.INSERT_METHOD, 0); }
		public TerminalNode NO() { return getToken(MySQLSQLStatementParser.NO, 0); }
		public TerminalNode FIRST() { return getToken(MySQLSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySQLSQLStatementParser.LAST, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public InsertMethodOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertMethodOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitInsertMethodOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertMethodOptionExprContext insertMethodOptionExpr() throws RecognitionException {
		InsertMethodOptionExprContext _localctx = new InsertMethodOptionExprContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_insertMethodOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6726);
			match(INSERT_METHOD);
			setState(6728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6727);
				match(EQUALS_OP);
				}
			}

			setState(6730);
			((InsertMethodOptionExprContext)_localctx).insertMethod = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
				((InsertMethodOptionExprContext)_localctx).insertMethod = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyBlockSizeOptionExprContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySQLSQLStatementParser.KEY_BLOCK_SIZE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public KeyBlockSizeOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyBlockSizeOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitKeyBlockSizeOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyBlockSizeOptionExprContext keyBlockSizeOptionExpr() throws RecognitionException {
		KeyBlockSizeOptionExprContext _localctx = new KeyBlockSizeOptionExprContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_keyBlockSizeOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6732);
			match(KEY_BLOCK_SIZE);
			setState(6734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6733);
				match(EQUALS_OP);
				}
			}

			setState(6736);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaxRowsOptionExprContext extends ParserRuleContext {
		public TerminalNode MAX_ROWS() { return getToken(MySQLSQLStatementParser.MAX_ROWS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public MaxRowsOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxRowsOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMaxRowsOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaxRowsOptionExprContext maxRowsOptionExpr() throws RecognitionException {
		MaxRowsOptionExprContext _localctx = new MaxRowsOptionExprContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_maxRowsOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6738);
			match(MAX_ROWS);
			setState(6740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6739);
				match(EQUALS_OP);
				}
			}

			setState(6742);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MinRowsOptionExprContext extends ParserRuleContext {
		public TerminalNode MIN_ROWS() { return getToken(MySQLSQLStatementParser.MIN_ROWS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public MinRowsOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_minRowsOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMinRowsOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MinRowsOptionExprContext minRowsOptionExpr() throws RecognitionException {
		MinRowsOptionExprContext _localctx = new MinRowsOptionExprContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_minRowsOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6744);
			match(MIN_ROWS);
			setState(6746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6745);
				match(EQUALS_OP);
				}
			}

			setState(6748);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PackKeysOptionExprContext extends ParserRuleContext {
		public TerminalNode PACK_KEYS() { return getToken(MySQLSQLStatementParser.PACK_KEYS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PackKeysOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_packKeysOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPackKeysOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PackKeysOptionExprContext packKeysOptionExpr() throws RecognitionException {
		PackKeysOptionExprContext _localctx = new PackKeysOptionExprContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_packKeysOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6750);
			match(PACK_KEYS);
			setState(6752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6751);
				match(EQUALS_OP);
				}
			}

			setState(6754);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PasswordOptionExprContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(MySQLSQLStatementParser.PASSWORD, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public PasswordOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_passwordOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPasswordOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PasswordOptionExprContext passwordOptionExpr() throws RecognitionException {
		PasswordOptionExprContext _localctx = new PasswordOptionExprContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_passwordOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6756);
			match(PASSWORD);
			setState(6758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6757);
				match(EQUALS_OP);
				}
			}

			setState(6760);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowFormatOptionExprContext extends ParserRuleContext {
		public Token rowFormat;
		public TerminalNode ROW_FORMAT() { return getToken(MySQLSQLStatementParser.ROW_FORMAT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySQLSQLStatementParser.DYNAMIC, 0); }
		public TerminalNode FIXED() { return getToken(MySQLSQLStatementParser.FIXED, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySQLSQLStatementParser.COMPRESSED, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySQLSQLStatementParser.REDUNDANT, 0); }
		public TerminalNode COMPACT() { return getToken(MySQLSQLStatementParser.COMPACT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public RowFormatOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowFormatOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitRowFormatOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowFormatOptionExprContext rowFormatOptionExpr() throws RecognitionException {
		RowFormatOptionExprContext _localctx = new RowFormatOptionExprContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_rowFormatOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6762);
			match(ROW_FORMAT);
			setState(6764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6763);
				match(EQUALS_OP);
				}
			}

			setState(6766);
			((RowFormatOptionExprContext)_localctx).rowFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (COMPACT - 276)) | (1L << (COMPRESSED - 276)) | (1L << (DYNAMIC - 276)) | (1L << (FIXED - 276)))) != 0) || _la==REDUNDANT) ) {
				((RowFormatOptionExprContext)_localctx).rowFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatsAutoRecalcOptionExprContext extends ParserRuleContext {
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySQLSQLStatementParser.STATS_AUTO_RECALC, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public StatsAutoRecalcOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statsAutoRecalcOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStatsAutoRecalcOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatsAutoRecalcOptionExprContext statsAutoRecalcOptionExpr() throws RecognitionException {
		StatsAutoRecalcOptionExprContext _localctx = new StatsAutoRecalcOptionExprContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_statsAutoRecalcOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6768);
			match(STATS_AUTO_RECALC);
			setState(6770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6769);
				match(EQUALS_OP);
				}
			}

			setState(6772);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatsPersistentOptionExprContext extends ParserRuleContext {
		public TerminalNode STATS_PERSISTENT() { return getToken(MySQLSQLStatementParser.STATS_PERSISTENT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public StatsPersistentOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statsPersistentOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStatsPersistentOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatsPersistentOptionExprContext statsPersistentOptionExpr() throws RecognitionException {
		StatsPersistentOptionExprContext _localctx = new StatsPersistentOptionExprContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_statsPersistentOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6774);
			match(STATS_PERSISTENT);
			setState(6776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6775);
				match(EQUALS_OP);
				}
			}

			setState(6778);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatsSamplePageOptionExprContext extends ParserRuleContext {
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySQLSQLStatementParser.STATS_SAMPLE_PAGES, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public StatsSamplePageOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statsSamplePageOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitStatsSamplePageOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatsSamplePageOptionExprContext statsSamplePageOptionExpr() throws RecognitionException {
		StatsSamplePageOptionExprContext _localctx = new StatsSamplePageOptionExprContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_statsSamplePageOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6780);
			match(STATS_SAMPLE_PAGES);
			setState(6782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6781);
				match(EQUALS_OP);
				}
			}

			setState(6784);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionExprContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(MySQLSQLStatementParser.TABLESPACE, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(MySQLSQLStatementParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySQLSQLStatementParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySQLSQLStatementParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public TablespaceOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTablespaceOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceOptionExprContext tablespaceOptionExpr() throws RecognitionException {
		TablespaceOptionExprContext _localctx = new TablespaceOptionExprContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_tablespaceOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6786);
			match(TABLESPACE);
			setState(6787);
			nameIdentifier();
			setState(6790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
			case 1:
				{
				setState(6788);
				match(STORAGE);
				setState(6789);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionOptionExprContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(MySQLSQLStatementParser.UNION, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public UnionOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitUnionOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionOptionExprContext unionOptionExpr() throws RecognitionException {
		UnionOptionExprContext _localctx = new UnionOptionExprContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_unionOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6792);
			match(UNION);
			setState(6794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUALS_OP) {
				{
				setState(6793);
				match(EQUALS_OP);
				}
			}

			setState(6796);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentExprContext extends ParserRuleContext {
		public ExprContext name;
		public ExprContext value;
		public TerminalNode EQUALS_OP() { return getToken(MySQLSQLStatementParser.EQUALS_OP, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public AssignmentExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAssignmentExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentExprContext assignmentExpr() throws RecognitionException {
		AssignmentExprContext _localctx = new AssignmentExprContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_assignmentExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6798);
			((AssignmentExprContext)_localctx).name = expr(0);
			setState(6799);
			match(EQUALS_OP);
			setState(6800);
			((AssignmentExprContext)_localctx).value = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultLiteralContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public DefaultLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDefaultLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultLiteralContext defaultLiteral() throws RecognitionException {
		DefaultLiteralContext _localctx = new DefaultLiteralContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_defaultLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6802);
			match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllLiteralContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySQLSQLStatementParser.ALL, 0); }
		public AllLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAllLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllLiteralContext allLiteral() throws RecognitionException {
		AllLiteralContext _localctx = new AllLiteralContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_allLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6804);
			match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoneLiteralContext extends ParserRuleContext {
		public TerminalNode NONE() { return getToken(MySQLSQLStatementParser.NONE, 0); }
		public NoneLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noneLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNoneLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoneLiteralContext noneLiteral() throws RecognitionException {
		NoneLiteralContext _localctx = new NoneLiteralContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_noneLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6806);
			match(NONE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MaxValueLiteralContext extends ParserRuleContext {
		public TerminalNode MAXVALUE() { return getToken(MySQLSQLStatementParser.MAXVALUE, 0); }
		public MaxValueLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxValueLiteral; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitMaxValueLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MaxValueLiteralContext maxValueLiteral() throws RecognitionException {
		MaxValueLiteralContext _localctx = new MaxValueLiteralContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_maxValueLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6808);
			match(MAXVALUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public NotConditionContext notCondition() {
			return getRuleContext(NotConditionContext.class,0);
		}
		public ExistsConditionContext existsCondition() {
			return getRuleContext(ExistsConditionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_condition);
		try {
			setState(6812);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6810);
				notCondition();
				}
				break;
			case EXISTS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6811);
				existsCondition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotConditionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public NotConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notCondition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNotCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotConditionContext notCondition() throws RecognitionException {
		NotConditionContext _localctx = new NotConditionContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_notCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6814);
			match(NOT);
			setState(6815);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FormatJsonContext extends ParserRuleContext {
		public TerminalNode FORMAT() { return getToken(MySQLSQLStatementParser.FORMAT, 0); }
		public TerminalNode JSON() { return getToken(MySQLSQLStatementParser.JSON, 0); }
		public FormatJsonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_formatJson; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFormatJson(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FormatJsonContext formatJson() throws RecognitionException {
		FormatJsonContext _localctx = new FormatJsonContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_formatJson);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6817);
			match(FORMAT);
			setState(6818);
			match(JSON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprAsObjectExprContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public ExprAsObjectExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprAsObjectExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitExprAsObjectExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprAsObjectExprContext exprAsObjectExpr() throws RecognitionException {
		ExprAsObjectExprContext _localctx = new ExprAsObjectExprContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_exprAsObjectExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6820);
			expr(0);
			setState(6822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6821);
				match(AS);
				}
			}

			setState(6826);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
			case 1:
				{
				setState(6824);
				expr(0);
				}
				break;
			case 2:
				{
				setState(6825);
				dataType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistsConditionContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(MySQLSQLStatementParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ISelectQueryContext iSelectQuery() {
			return getRuleContext(ISelectQueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public ExistsConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existsCondition; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitExistsCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistsConditionContext existsCondition() throws RecognitionException {
		ExistsConditionContext _localctx = new ExistsConditionContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_existsCondition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6828);
			match(EXISTS);
			setState(6829);
			match(LEFT_PAREN);
			setState(6830);
			iSelectQuery();
			setState(6831);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public ExprContext inString;
		public ExprContext inexpr;
		public TerminalNode POSITION() { return getToken(MySQLSQLStatementParser.POSITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CastFunctionContext extends SpecificFunctionContext {
		public TerminalNode CAST() { return getToken(MySQLSQLStatementParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public CastFunctionContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public TerminalNode TRIM() { return getToken(MySQLSQLStatementParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode BOTH() { return getToken(MySQLSQLStatementParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySQLSQLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySQLSQLStatementParser.TRAILING, 0); }
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySQLSQLStatementParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(MySQLSQLStatementParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.RIGHT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySQLSQLStatementParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySQLSQLStatementParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySQLSQLStatementParser.GET_FORMAT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode DATE() { return getToken(MySQLSQLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySQLSQLStatementParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySQLSQLStatementParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySQLSQLStatementParser.CHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public CharFunctionContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCharFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySQLSQLStatementParser.CONVERT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySQLSQLStatementParser.VALUES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode SUBSTR() { return getToken(MySQLSQLStatementParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySQLSQLStatementParser.SUBSTRING, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_specificFunction);
		int _la;
		try {
			setState(6936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
			case 1:
				_localctx = new CastFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6833);
				match(CAST);
				setState(6834);
				match(LEFT_PAREN);
				setState(6835);
				expr(0);
				setState(6836);
				match(AS);
				setState(6837);
				dataType();
				setState(6838);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new CharFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6840);
				match(CHAR);
				setState(6841);
				match(LEFT_PAREN);
				setState(6842);
				expr(0);
				setState(6847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6843);
					match(COMMA);
					setState(6844);
					expr(0);
					}
					}
					setState(6849);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(6850);
					match(USING);
					setState(6851);
					expr(0);
					}
				}

				setState(6854);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6856);
				match(CONVERT);
				setState(6857);
				match(LEFT_PAREN);
				setState(6858);
				expr(0);
				setState(6859);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(6860);
				convertedDataType();
				setState(6861);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6863);
				match(CONVERT);
				setState(6864);
				match(LEFT_PAREN);
				setState(6865);
				expr(0);
				setState(6866);
				match(USING);
				setState(6867);
				expr(0);
				setState(6868);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6870);
				match(VALUES);
				setState(6871);
				match(LEFT_PAREN);
				setState(6872);
				expr(0);
				setState(6873);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6875);
				match(POSITION);
				setState(6876);
				match(LEFT_PAREN);
				setState(6877);
				expr(0);
				setState(6878);
				match(IN);
				setState(6881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
				case 1:
					{
					setState(6879);
					((PositionFunctionCallContext)_localctx).inString = expr(0);
					}
					break;
				case 2:
					{
					setState(6880);
					((PositionFunctionCallContext)_localctx).inexpr = expr(0);
					}
					break;
				}
				setState(6883);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6885);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6886);
				match(LEFT_PAREN);
				setState(6887);
				expr(0);
				setState(6888);
				match(FROM);
				setState(6889);
				expr(0);
				setState(6892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6890);
					match(FOR);
					setState(6891);
					expr(0);
					}
				}

				setState(6894);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6896);
				match(TRIM);
				setState(6897);
				match(LEFT_PAREN);
				setState(6898);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6900);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
					{
					setState(6899);
					expr(0);
					}
				}

				setState(6902);
				match(FROM);
				setState(6903);
				expr(0);
				setState(6904);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6906);
				match(TRIM);
				setState(6907);
				match(LEFT_PAREN);
				setState(6908);
				expr(0);
				setState(6909);
				match(FROM);
				setState(6910);
				expr(0);
				setState(6911);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6913);
				match(WEIGHT_STRING);
				setState(6914);
				match(LEFT_PAREN);
				setState(6915);
				expr(0);
				setState(6922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6916);
					match(AS);
					setState(6917);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6918);
					match(LEFT_PAREN);
					setState(6919);
					expr(0);
					setState(6920);
					match(RIGHT_PAREN);
					}
				}

				setState(6925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(6924);
					levelsInWeightString();
					}
				}

				setState(6927);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6929);
				match(GET_FORMAT);
				setState(6930);
				match(LEFT_PAREN);
				setState(6931);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (DATE - 194)) | (1L << (TIME - 194)) | (1L << (DATETIME - 194)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6932);
				match(COMMA);
				setState(6933);
				expr(0);
				setState(6934);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionContext extends ParserRuleContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public ExtractFunctionContext extractFunction() {
			return getRuleContext(ExtractFunctionContext.class,0);
		}
		public TreatFunctionContext treatFunction() {
			return getRuleContext(TreatFunctionContext.class,0);
		}
		public ConvertUsingFunctionContext convertUsingFunction() {
			return getRuleContext(ConvertUsingFunctionContext.class,0);
		}
		public JsonFunctionContext jsonFunction() {
			return getRuleContext(JsonFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public FirstFunctionContext firstFunction() {
			return getRuleContext(FirstFunctionContext.class,0);
		}
		public LastFunctionContext lastFunction() {
			return getRuleContext(LastFunctionContext.class,0);
		}
		public ListAggFunctionContext listAggFunction() {
			return getRuleContext(ListAggFunctionContext.class,0);
		}
		public CubeTableFunctionContext cubeTableFunction() {
			return getRuleContext(CubeTableFunctionContext.class,0);
		}
		public WindowFunctionContext windowFunction() {
			return getRuleContext(WindowFunctionContext.class,0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionContext function() throws RecognitionException {
		FunctionContext _localctx = new FunctionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_function);
		try {
			setState(6950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6938);
				specificFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6939);
				trimFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6940);
				extractFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6941);
				treatFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6942);
				convertUsingFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6943);
				jsonFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6944);
				aggregateFunction();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6945);
				firstFunction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6946);
				lastFunction();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6947);
				listAggFunction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6948);
				cubeTableFunction();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6949);
				windowFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoArgumentFunctionNameContext extends ParserRuleContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySQLSQLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySQLSQLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySQLSQLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySQLSQLStatementParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySQLSQLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySQLSQLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySQLSQLStatementParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySQLSQLStatementParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySQLSQLStatementParser.UTC_TIMESTAMP, 0); }
		public NoArgumentFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noArgumentFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitNoArgumentFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoArgumentFunctionNameContext noArgumentFunctionName() throws RecognitionException {
		NoArgumentFunctionNameContext _localctx = new NoArgumentFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_noArgumentFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6952);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (CURRENT_DATE - 228)) | (1L << (CURRENT_TIME - 228)) | (1L << (CURRENT_TIMESTAMP - 228)) | (1L << (LOCALTIME - 228)) | (1L << (LOCALTIMESTAMP - 228)) | (1L << (UTC_DATE - 228)) | (1L << (UTC_TIME - 228)) | (1L << (UTC_TIMESTAMP - 228)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionFunctionContext extends ParserRuleContext {
		public TerminalNode POSITION() { return getToken(MySQLSQLStatementParser.POSITION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(MySQLSQLStatementParser.IN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public PositionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPositionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionFunctionContext positionFunction() throws RecognitionException {
		PositionFunctionContext _localctx = new PositionFunctionContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_positionFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6954);
			match(POSITION);
			setState(6955);
			match(LEFT_PAREN);
			setState(6956);
			expr(0);
			setState(6957);
			match(IN);
			setState(6958);
			expr(0);
			setState(6959);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubStrFromFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTR() { return getToken(MySQLSQLStatementParser.SUBSTR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public SubStrFromFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subStrFromFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSubStrFromFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubStrFromFunctionContext subStrFromFunction() throws RecognitionException {
		SubStrFromFunctionContext _localctx = new SubStrFromFunctionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_subStrFromFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6961);
			match(SUBSTR);
			setState(6962);
			match(LEFT_PAREN);
			setState(6963);
			expr(0);
			setState(6964);
			match(FROM);
			setState(6965);
			expr(0);
			setState(6968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6966);
				match(FOR);
				setState(6967);
				expr(0);
				}
			}

			setState(6970);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubStringFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTRING() { return getToken(MySQLSQLStatementParser.SUBSTRING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public SubStringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subStringFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitSubStringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubStringFunctionContext subStringFunction() throws RecognitionException {
		SubStringFunctionContext _localctx = new SubStringFunctionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_subStringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6972);
			match(SUBSTRING);
			setState(6973);
			match(LEFT_PAREN);
			setState(6974);
			expr(0);
			setState(6975);
			match(FROM);
			setState(6976);
			expr(0);
			setState(6979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6977);
				match(FOR);
				setState(6978);
				expr(0);
				}
			}

			setState(6981);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimFunctionContext extends ParserRuleContext {
		public ExprContext character;
		public ExprContext source;
		public TerminalNode TRIM() { return getToken(MySQLSQLStatementParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(MySQLSQLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySQLSQLStatementParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(MySQLSQLStatementParser.BOTH, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTrimFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_trimFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6983);
			match(TRIM);
			setState(6984);
			match(LEFT_PAREN);
			setState(6992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
			case 1:
				{
				setState(6986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BOTH || _la==LEADING || _la==TRAILING) {
					{
					setState(6985);
					_la = _input.LA(1);
					if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
					{
					setState(6988);
					((TrimFunctionContext)_localctx).character = expr(0);
					}
				}

				setState(6991);
				match(FROM);
				}
				break;
			}
			setState(6994);
			((TrimFunctionContext)_localctx).source = expr(0);
			setState(6995);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringFunctionContext extends ParserRuleContext {
		public TerminalNode WEIGHT_STRING() { return getToken(MySQLSQLStatementParser.WEIGHT_STRING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public WeightStringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWeightStringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WeightStringFunctionContext weightStringFunction() throws RecognitionException {
		WeightStringFunctionContext _localctx = new WeightStringFunctionContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_weightStringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6997);
			match(WEIGHT_STRING);
			setState(6998);
			match(LEFT_PAREN);
			setState(6999);
			expr(0);
			setState(7002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7000);
				match(AS);
				setState(7001);
				dataType();
				}
			}

			setState(7004);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractFunctionContext extends ParserRuleContext {
		public TerminalNode EXTRACT() { return getToken(MySQLSQLStatementParser.EXTRACT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public ExtractFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitExtractFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractFunctionContext extractFunction() throws RecognitionException {
		ExtractFunctionContext _localctx = new ExtractFunctionContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_extractFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7006);
			match(EXTRACT);
			setState(7007);
			match(LEFT_PAREN);
			setState(7008);
			intervalType();
			setState(7009);
			match(FROM);
			setState(7010);
			expr(0);
			setState(7011);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TreatFunctionContext extends ParserRuleContext {
		public TerminalNode TREAT() { return getToken(MySQLSQLStatementParser.TREAT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySQLSQLStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode REF() { return getToken(MySQLSQLStatementParser.REF, 0); }
		public TreatFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_treatFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitTreatFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TreatFunctionContext treatFunction() throws RecognitionException {
		TreatFunctionContext _localctx = new TreatFunctionContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_treatFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7013);
			match(TREAT);
			setState(7014);
			match(LEFT_PAREN);
			setState(7015);
			expr(0);
			setState(7016);
			match(AS);
			setState(7018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REF) {
				{
				setState(7017);
				match(REF);
				}
			}

			setState(7020);
			dataType();
			setState(7021);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertUsingFunctionContext extends ParserRuleContext {
		public TerminalNode CONVERT() { return getToken(MySQLSQLStatementParser.CONVERT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public ConvertUsingFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertUsingFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitConvertUsingFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertUsingFunctionContext convertUsingFunction() throws RecognitionException {
		ConvertUsingFunctionContext _localctx = new ConvertUsingFunctionContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_convertUsingFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7023);
			match(CONVERT);
			setState(7024);
			match(LEFT_PAREN);
			setState(7025);
			expr(0);
			setState(7026);
			match(USING);
			setState(7027);
			nameIdentifier();
			setState(7028);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CostMatrixClauseContext extends ParserRuleContext {
		public ExprContext expr;
		public List<ExprContext> classValues = new ArrayList<ExprContext>();
		public List<ExprContext> costValues = new ArrayList<ExprContext>();
		public TerminalNode COST() { return getToken(MySQLSQLStatementParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(MySQLSQLStatementParser.MODEL, 0); }
		public TerminalNode AUTO() { return getToken(MySQLSQLStatementParser.AUTO, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(MySQLSQLStatementParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(MySQLSQLStatementParser.LEFT_PAREN, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(MySQLSQLStatementParser.VALUES, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public CostMatrixClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_costMatrixClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCostMatrixClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CostMatrixClauseContext costMatrixClause() throws RecognitionException {
		CostMatrixClauseContext _localctx = new CostMatrixClauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_costMatrixClause);
		int _la;
		try {
			setState(7056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7030);
				match(COST);
				setState(7031);
				match(MODEL);
				setState(7033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(7032);
					match(AUTO);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7035);
				match(COST);
				setState(7036);
				match(LEFT_PAREN);
				setState(7037);
				((CostMatrixClauseContext)_localctx).expr = expr(0);
				((CostMatrixClauseContext)_localctx).classValues.add(((CostMatrixClauseContext)_localctx).expr);
				setState(7042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7038);
					match(COMMA);
					setState(7039);
					((CostMatrixClauseContext)_localctx).expr = expr(0);
					((CostMatrixClauseContext)_localctx).classValues.add(((CostMatrixClauseContext)_localctx).expr);
					}
					}
					setState(7044);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7045);
				match(RIGHT_PAREN);
				setState(7046);
				match(VALUES);
				setState(7047);
				match(LEFT_PAREN);
				setState(7048);
				((CostMatrixClauseContext)_localctx).expr = expr(0);
				((CostMatrixClauseContext)_localctx).costValues.add(((CostMatrixClauseContext)_localctx).expr);
				setState(7053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7049);
					match(COMMA);
					setState(7050);
					((CostMatrixClauseContext)_localctx).expr = expr(0);
					((CostMatrixClauseContext)_localctx).costValues.add(((CostMatrixClauseContext)_localctx).expr);
					}
					}
					setState(7055);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionContext extends ParserRuleContext {
		public JsonFunctionNameContext jsonFunctionName() {
			return getRuleContext(JsonFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public JsonOnNullClauseContext jsonOnNullClause() {
			return getRuleContext(JsonOnNullClauseContext.class,0);
		}
		public JsonReturningClauseContext jsonReturningClause() {
			return getRuleContext(JsonReturningClauseContext.class,0);
		}
		public TerminalNode STRICT() { return getToken(MySQLSQLStatementParser.STRICT, 0); }
		public WithUniqueKeysContext withUniqueKeys() {
			return getRuleContext(WithUniqueKeysContext.class,0);
		}
		public JsonWrapperClauseContext jsonWrapperClause() {
			return getRuleContext(JsonWrapperClauseContext.class,0);
		}
		public JsonOnErrorClauseContext jsonOnErrorClause() {
			return getRuleContext(JsonOnErrorClauseContext.class,0);
		}
		public JsonOnEmptyClauseContext jsonOnEmptyClause() {
			return getRuleContext(JsonOnEmptyClauseContext.class,0);
		}
		public JsonColumnsClauseContext jsonColumnsClause() {
			return getRuleContext(JsonColumnsClauseContext.class,0);
		}
		public JsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionContext jsonFunction() throws RecognitionException {
		JsonFunctionContext _localctx = new JsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_jsonFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7058);
			jsonFunctionName();
			setState(7059);
			match(LEFT_PAREN);
			setState(7060);
			expr(0);
			setState(7065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7061);
				match(COMMA);
				setState(7062);
				expr(0);
				}
				}
				setState(7067);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7068);
				orderByClause();
				}
			}

			setState(7072);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
			case 1:
				{
				setState(7071);
				jsonOnNullClause();
				}
				break;
			}
			setState(7075);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				setState(7074);
				jsonReturningClause();
				}
				break;
			}
			setState(7078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRICT) {
				{
				setState(7077);
				match(STRICT);
				}
			}

			setState(7081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
			case 1:
				{
				setState(7080);
				withUniqueKeys();
				}
				break;
			}
			setState(7084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				setState(7083);
				jsonWrapperClause();
				}
			}

			setState(7087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
			case 1:
				{
				setState(7086);
				jsonOnErrorClause();
				}
				break;
			}
			setState(7090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ERROR || _la==NULL || _la==EMPTY) {
				{
				setState(7089);
				jsonOnEmptyClause();
				}
			}

			setState(7093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(7092);
				jsonColumnsClause();
				}
			}

			setState(7095);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionNameContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE() { return getToken(MySQLSQLStatementParser.JSON_TABLE, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(MySQLSQLStatementParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySQLSQLStatementParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(MySQLSQLStatementParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySQLSQLStatementParser.JSON_OBJECTAGG, 0); }
		public JsonFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionNameContext jsonFunctionName() throws RecognitionException {
		JsonFunctionNameContext _localctx = new JsonFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_jsonFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7097);
			_la = _input.LA(1);
			if ( !(((((_la - 725)) & ~0x3f) == 0 && ((1L << (_la - 725)) & ((1L << (JSON_TABLE - 725)) | (1L << (JSON_ARRAY - 725)) | (1L << (JSON_ARRAYAGG - 725)) | (1L << (JSON_OBJECT - 725)) | (1L << (JSON_OBJECTAGG - 725)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionArgumentContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonFormatJsonArgumentExprContext jsonFormatJsonArgumentExpr() {
			return getRuleContext(JsonFormatJsonArgumentExprContext.class,0);
		}
		public JsonKeyValueArgumentExprContext jsonKeyValueArgumentExpr() {
			return getRuleContext(JsonKeyValueArgumentExprContext.class,0);
		}
		public JsonFunctionArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunctionArgument; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonFunctionArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionArgumentContext jsonFunctionArgument() throws RecognitionException {
		JsonFunctionArgumentContext _localctx = new JsonFunctionArgumentContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_jsonFunctionArgument);
		try {
			setState(7102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7099);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7100);
				jsonFormatJsonArgumentExpr();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7101);
				jsonKeyValueArgumentExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFormatJsonArgumentExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public FormatJsonContext formatJson() {
			return getRuleContext(FormatJsonContext.class,0);
		}
		public JsonFormatJsonArgumentExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFormatJsonArgumentExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonFormatJsonArgumentExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFormatJsonArgumentExprContext jsonFormatJsonArgumentExpr() throws RecognitionException {
		JsonFormatJsonArgumentExprContext _localctx = new JsonFormatJsonArgumentExprContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_jsonFormatJsonArgumentExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7104);
			expr(0);
			setState(7105);
			formatJson();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonKeyValueArgumentExprContext extends ParserRuleContext {
		public ExprContext key;
		public ExprContext val;
		public TerminalNode VALUE() { return getToken(MySQLSQLStatementParser.VALUE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public JsonKeyValueArgumentExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonKeyValueArgumentExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonKeyValueArgumentExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonKeyValueArgumentExprContext jsonKeyValueArgumentExpr() throws RecognitionException {
		JsonKeyValueArgumentExprContext _localctx = new JsonKeyValueArgumentExprContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_jsonKeyValueArgumentExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEY) {
				{
				setState(7107);
				match(KEY);
				}
			}

			setState(7110);
			((JsonKeyValueArgumentExprContext)_localctx).key = expr(0);
			setState(7111);
			match(VALUE);
			setState(7112);
			((JsonKeyValueArgumentExprContext)_localctx).val = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOnNullClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(MySQLSQLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(MySQLSQLStatementParser.NULL, i);
		}
		public TerminalNode ABSENT() { return getToken(MySQLSQLStatementParser.ABSENT, 0); }
		public JsonOnNullClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnNullClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonOnNullClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOnNullClauseContext jsonOnNullClause() throws RecognitionException {
		JsonOnNullClauseContext _localctx = new JsonOnNullClauseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_jsonOnNullClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7114);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==ABSENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7115);
			match(ON);
			setState(7116);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonReturningClauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(MySQLSQLStatementParser.RETURNING, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PRETTY() { return getToken(MySQLSQLStatementParser.PRETTY, 0); }
		public TerminalNode ASCII() { return getToken(MySQLSQLStatementParser.ASCII, 0); }
		public JsonReturningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonReturningClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonReturningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonReturningClauseContext jsonReturningClause() throws RecognitionException {
		JsonReturningClauseContext _localctx = new JsonReturningClauseContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_jsonReturningClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(7118);
				match(RETURNING);
				setState(7119);
				dataType();
				}
			}

			setState(7123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRETTY) {
				{
				setState(7122);
				match(PRETTY);
				}
			}

			setState(7126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASCII) {
				{
				setState(7125);
				match(ASCII);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithUniqueKeysContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode UNIQUE() { return getToken(MySQLSQLStatementParser.UNIQUE, 0); }
		public TerminalNode KEYS() { return getToken(MySQLSQLStatementParser.KEYS, 0); }
		public WithUniqueKeysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withUniqueKeys; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWithUniqueKeys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithUniqueKeysContext withUniqueKeys() throws RecognitionException {
		WithUniqueKeysContext _localctx = new WithUniqueKeysContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_withUniqueKeys);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7128);
			match(WITH);
			setState(7129);
			match(UNIQUE);
			setState(7130);
			match(KEYS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonWrapperClauseContext extends ParserRuleContext {
		public TerminalNode WITHOUT() { return getToken(MySQLSQLStatementParser.WITHOUT, 0); }
		public TerminalNode WRAPPER() { return getToken(MySQLSQLStatementParser.WRAPPER, 0); }
		public TerminalNode ARRAY() { return getToken(MySQLSQLStatementParser.ARRAY, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode UNCONDITIONAL() { return getToken(MySQLSQLStatementParser.UNCONDITIONAL, 0); }
		public TerminalNode CONDITIONAL() { return getToken(MySQLSQLStatementParser.CONDITIONAL, 0); }
		public JsonWrapperClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonWrapperClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonWrapperClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonWrapperClauseContext jsonWrapperClause() throws RecognitionException {
		JsonWrapperClauseContext _localctx = new JsonWrapperClauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_jsonWrapperClause);
		int _la;
		try {
			setState(7145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHOUT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7132);
				match(WITHOUT);
				setState(7134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARRAY) {
					{
					setState(7133);
					match(ARRAY);
					}
				}

				setState(7136);
				match(WRAPPER);
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(7137);
				match(WITH);
				setState(7139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNCONDITIONAL || _la==CONDITIONAL) {
					{
					setState(7138);
					_la = _input.LA(1);
					if ( !(_la==UNCONDITIONAL || _la==CONDITIONAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ARRAY) {
					{
					setState(7141);
					match(ARRAY);
					}
				}

				setState(7144);
				match(WRAPPER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOnErrorClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public List<TerminalNode> ERROR() { return getTokens(MySQLSQLStatementParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(MySQLSQLStatementParser.ERROR, i);
		}
		public TerminalNode NULL() { return getToken(MySQLSQLStatementParser.NULL, 0); }
		public TerminalNode EMPTY() { return getToken(MySQLSQLStatementParser.EMPTY, 0); }
		public TerminalNode ARRAY() { return getToken(MySQLSQLStatementParser.ARRAY, 0); }
		public TerminalNode OBJECT() { return getToken(MySQLSQLStatementParser.OBJECT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonOnErrorClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnErrorClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonOnErrorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOnErrorClauseContext jsonOnErrorClause() throws RecognitionException {
		JsonOnErrorClauseContext _localctx = new JsonOnErrorClauseContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_jsonOnErrorClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
			case 1:
				{
				setState(7147);
				match(ERROR);
				}
				break;
			case 2:
				{
				setState(7148);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(7149);
				match(EMPTY);
				}
				break;
			case 4:
				{
				setState(7150);
				match(EMPTY);
				setState(7151);
				match(ARRAY);
				}
				break;
			case 5:
				{
				setState(7152);
				match(EMPTY);
				setState(7153);
				match(OBJECT);
				}
				break;
			case 6:
				{
				setState(7154);
				match(DEFAULT);
				setState(7155);
				expr(0);
				}
				break;
			}
			setState(7158);
			match(ON);
			setState(7159);
			match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOnEmptyClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public List<TerminalNode> EMPTY() { return getTokens(MySQLSQLStatementParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(MySQLSQLStatementParser.EMPTY, i);
		}
		public TerminalNode ERROR() { return getToken(MySQLSQLStatementParser.ERROR, 0); }
		public TerminalNode NULL() { return getToken(MySQLSQLStatementParser.NULL, 0); }
		public TerminalNode ARRAY() { return getToken(MySQLSQLStatementParser.ARRAY, 0); }
		public TerminalNode OBJECT() { return getToken(MySQLSQLStatementParser.OBJECT, 0); }
		public TerminalNode DEFAULT() { return getToken(MySQLSQLStatementParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonOnEmptyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOnEmptyClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonOnEmptyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOnEmptyClauseContext jsonOnEmptyClause() throws RecognitionException {
		JsonOnEmptyClauseContext _localctx = new JsonOnEmptyClauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_jsonOnEmptyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
			case 1:
				{
				setState(7161);
				match(ERROR);
				}
				break;
			case 2:
				{
				setState(7162);
				match(NULL);
				}
				break;
			case 3:
				{
				setState(7163);
				match(EMPTY);
				}
				break;
			case 4:
				{
				setState(7164);
				match(EMPTY);
				setState(7165);
				match(ARRAY);
				}
				break;
			case 5:
				{
				setState(7166);
				match(EMPTY);
				setState(7167);
				match(OBJECT);
				}
				break;
			case 6:
				{
				setState(7168);
				match(DEFAULT);
				setState(7169);
				expr(0);
				}
				break;
			}
			setState(7172);
			match(ON);
			setState(7173);
			match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonColumnsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS() { return getToken(MySQLSQLStatementParser.COLUMNS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<JsonColumnDefinitionContext> jsonColumnDefinition() {
			return getRuleContexts(JsonColumnDefinitionContext.class);
		}
		public JsonColumnDefinitionContext jsonColumnDefinition(int i) {
			return getRuleContext(JsonColumnDefinitionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public JsonColumnsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumnsClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonColumnsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonColumnsClauseContext jsonColumnsClause() throws RecognitionException {
		JsonColumnsClauseContext _localctx = new JsonColumnsClauseContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_jsonColumnsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7175);
			match(COLUMNS);
			setState(7176);
			match(LEFT_PAREN);
			setState(7177);
			jsonColumnDefinition();
			setState(7182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7178);
				match(COMMA);
				setState(7179);
				jsonColumnDefinition();
				}
				}
				setState(7184);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7185);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonColumnDefinitionContext extends ParserRuleContext {
		public JsonColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonColumnDefinition; }
	 
		public JsonColumnDefinitionContext() { }
		public void copyFrom(JsonColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class JsonExistsColumnContext extends JsonColumnDefinitionContext {
		public ExprContext path;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(MySQLSQLStatementParser.EXISTS, 0); }
		public TerminalNode PATH() { return getToken(MySQLSQLStatementParser.PATH, 0); }
		public JsonOnErrorClauseContext jsonOnErrorClause() {
			return getRuleContext(JsonOnErrorClauseContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonExistsColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonExistsColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonNestedPathColumnContext extends JsonColumnDefinitionContext {
		public ExprContext path;
		public TerminalNode NESTED() { return getToken(MySQLSQLStatementParser.NESTED, 0); }
		public JsonColumnsClauseContext jsonColumnsClause() {
			return getRuleContext(JsonColumnsClauseContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode PATH() { return getToken(MySQLSQLStatementParser.PATH, 0); }
		public JsonNestedPathColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonNestedPathColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueColumnContext extends JsonColumnDefinitionContext {
		public ExprContext path;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(MySQLSQLStatementParser.EXISTS, 0); }
		public TerminalNode PATH() { return getToken(MySQLSQLStatementParser.PATH, 0); }
		public JsonOnErrorClauseContext jsonOnErrorClause() {
			return getRuleContext(JsonOnErrorClauseContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonValueColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonValueColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonOrdinalityColumnContext extends JsonColumnDefinitionContext {
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(MySQLSQLStatementParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(MySQLSQLStatementParser.ORDINALITY, 0); }
		public JsonOrdinalityColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonOrdinalityColumn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonQueryColumnContext extends JsonColumnDefinitionContext {
		public ExprContext path;
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FormatJsonContext formatJson() {
			return getRuleContext(FormatJsonContext.class,0);
		}
		public JsonWrapperClauseContext jsonWrapperClause() {
			return getRuleContext(JsonWrapperClauseContext.class,0);
		}
		public TerminalNode PATH() { return getToken(MySQLSQLStatementParser.PATH, 0); }
		public JsonOnErrorClauseContext jsonOnErrorClause() {
			return getRuleContext(JsonOnErrorClauseContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public JsonQueryColumnContext(JsonColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitJsonQueryColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonColumnDefinitionContext jsonColumnDefinition() throws RecognitionException {
		JsonColumnDefinitionContext _localctx = new JsonColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_jsonColumnDefinition);
		int _la;
		try {
			setState(7231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
			case 1:
				_localctx = new JsonExistsColumnContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(7187);
				nameIdentifier();
				setState(7188);
				dataType();
				setState(7189);
				match(EXISTS);
				setState(7192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(7190);
					match(PATH);
					setState(7191);
					((JsonExistsColumnContext)_localctx).path = expr(0);
					}
				}

				setState(7195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==ERROR || _la==NULL || _la==EMPTY) {
					{
					setState(7194);
					jsonOnErrorClause();
					}
				}

				}
				break;
			case 2:
				_localctx = new JsonQueryColumnContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(7197);
				nameIdentifier();
				setState(7198);
				dataType();
				setState(7199);
				formatJson();
				setState(7201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(7200);
					jsonWrapperClause();
					}
				}

				setState(7205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(7203);
					match(PATH);
					setState(7204);
					((JsonQueryColumnContext)_localctx).path = expr(0);
					}
				}

				setState(7208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==ERROR || _la==NULL || _la==EMPTY) {
					{
					setState(7207);
					jsonOnErrorClause();
					}
				}

				}
				break;
			case 3:
				_localctx = new JsonValueColumnContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(7210);
				nameIdentifier();
				setState(7211);
				dataType();
				setState(7212);
				match(EXISTS);
				setState(7215);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(7213);
					match(PATH);
					setState(7214);
					((JsonValueColumnContext)_localctx).path = expr(0);
					}
				}

				setState(7218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==ERROR || _la==NULL || _la==EMPTY) {
					{
					setState(7217);
					jsonOnErrorClause();
					}
				}

				}
				break;
			case 4:
				_localctx = new JsonNestedPathColumnContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(7220);
				match(NESTED);
				setState(7222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(7221);
					match(PATH);
					}
				}

				setState(7224);
				((JsonNestedPathColumnContext)_localctx).path = expr(0);
				setState(7225);
				jsonColumnsClause();
				}
				break;
			case 5:
				_localctx = new JsonOrdinalityColumnContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(7227);
				nameIdentifier();
				setState(7228);
				match(FOR);
				setState(7229);
				match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionContext extends ParserRuleContext {
		public AggregateFunctionNameContext aggregateFunctionName() {
			return getRuleContext(AggregateFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public WithinGroupSpecificationContext withinGroupSpecification() {
			return getRuleContext(WithinGroupSpecificationContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode DETERMINISTIC() { return getToken(MySQLSQLStatementParser.DETERMINISTIC, 0); }
		public PartitionByClauseContext partitionByClause() {
			return getRuleContext(PartitionByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAggregateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_aggregateFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7233);
			aggregateFunctionName();
			setState(7234);
			match(LEFT_PAREN);
			setState(7248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << DISTINCT) | (1L << DISTINCTROW) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
				{
				setState(7236);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,964,_ctx) ) {
				case 1:
					{
					setState(7235);
					setQuantifier();
					}
					break;
				}
				setState(7238);
				expr(0);
				setState(7240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DETERMINISTIC) {
					{
					setState(7239);
					match(DETERMINISTIC);
					}
				}

				setState(7243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(7242);
					partitionByClause();
					}
				}

				setState(7246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(7245);
					orderByClause();
					}
				}

				}
			}

			setState(7254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7250);
				match(COMMA);
				setState(7251);
				expr(0);
				}
				}
				setState(7256);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHIN) {
				{
				setState(7257);
				withinGroupSpecification();
				}
			}

			setState(7261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVER) {
				{
				setState(7260);
				overClause();
				}
			}

			setState(7263);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateFunctionNameContext extends ParserRuleContext {
		public TerminalNode APPROX_COUNT() { return getToken(MySQLSQLStatementParser.APPROX_COUNT, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT() { return getToken(MySQLSQLStatementParser.APPROX_COUNT_DISTINCT, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_AGG() { return getToken(MySQLSQLStatementParser.APPROX_COUNT_DISTINCT_AGG, 0); }
		public TerminalNode APPROX_COUNT_DISTINCT_DETAIL() { return getToken(MySQLSQLStatementParser.APPROX_COUNT_DISTINCT_DETAIL, 0); }
		public TerminalNode APPROX_MEDIAN() { return getToken(MySQLSQLStatementParser.APPROX_MEDIAN, 0); }
		public TerminalNode APPROX_PERCENTILE() { return getToken(MySQLSQLStatementParser.APPROX_PERCENTILE, 0); }
		public TerminalNode APPROX_PERCENTILE_AGG() { return getToken(MySQLSQLStatementParser.APPROX_PERCENTILE_AGG, 0); }
		public TerminalNode APPROX_PERCENTILE_DETAIL() { return getToken(MySQLSQLStatementParser.APPROX_PERCENTILE_DETAIL, 0); }
		public TerminalNode APPROX_RANK() { return getToken(MySQLSQLStatementParser.APPROX_RANK, 0); }
		public TerminalNode APPROX_SUM() { return getToken(MySQLSQLStatementParser.APPROX_SUM, 0); }
		public TerminalNode AVG() { return getToken(MySQLSQLStatementParser.AVG, 0); }
		public TerminalNode COLLECT() { return getToken(MySQLSQLStatementParser.COLLECT, 0); }
		public TerminalNode CORR() { return getToken(MySQLSQLStatementParser.CORR, 0); }
		public TerminalNode CORR_S() { return getToken(MySQLSQLStatementParser.CORR_S, 0); }
		public TerminalNode CORR_K() { return getToken(MySQLSQLStatementParser.CORR_K, 0); }
		public TerminalNode COUNT() { return getToken(MySQLSQLStatementParser.COUNT, 0); }
		public TerminalNode COVAR_POP() { return getToken(MySQLSQLStatementParser.COVAR_POP, 0); }
		public TerminalNode COVAR_SAMP() { return getToken(MySQLSQLStatementParser.COVAR_SAMP, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySQLSQLStatementParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySQLSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode GROUP_ID() { return getToken(MySQLSQLStatementParser.GROUP_ID, 0); }
		public TerminalNode GROUPING() { return getToken(MySQLSQLStatementParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(MySQLSQLStatementParser.GROUPING_ID, 0); }
		public TerminalNode MAX() { return getToken(MySQLSQLStatementParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(MySQLSQLStatementParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(MySQLSQLStatementParser.MIN, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySQLSQLStatementParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(MySQLSQLStatementParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(MySQLSQLStatementParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(MySQLSQLStatementParser.RANK, 0); }
		public TerminalNode REGR_SLOPE() { return getToken(MySQLSQLStatementParser.REGR_SLOPE, 0); }
		public TerminalNode REGR_INTERCEPT() { return getToken(MySQLSQLStatementParser.REGR_INTERCEPT, 0); }
		public TerminalNode REGR_COUNT() { return getToken(MySQLSQLStatementParser.REGR_COUNT, 0); }
		public TerminalNode REGR_R2() { return getToken(MySQLSQLStatementParser.REGR_R2, 0); }
		public TerminalNode REGR_AVGX() { return getToken(MySQLSQLStatementParser.REGR_AVGX, 0); }
		public TerminalNode REGR_AVGY() { return getToken(MySQLSQLStatementParser.REGR_AVGY, 0); }
		public TerminalNode REGR_SXX() { return getToken(MySQLSQLStatementParser.REGR_SXX, 0); }
		public TerminalNode REGR_SYY() { return getToken(MySQLSQLStatementParser.REGR_SYY, 0); }
		public TerminalNode REGR_SXY() { return getToken(MySQLSQLStatementParser.REGR_SXY, 0); }
		public TerminalNode STATS_BINOMIAL_TEST() { return getToken(MySQLSQLStatementParser.STATS_BINOMIAL_TEST, 0); }
		public TerminalNode STATS_CROSSTAB() { return getToken(MySQLSQLStatementParser.STATS_CROSSTAB, 0); }
		public TerminalNode STATS_F_TEST() { return getToken(MySQLSQLStatementParser.STATS_F_TEST, 0); }
		public TerminalNode STATS_KS_TEST() { return getToken(MySQLSQLStatementParser.STATS_KS_TEST, 0); }
		public TerminalNode STATS_MODE() { return getToken(MySQLSQLStatementParser.STATS_MODE, 0); }
		public TerminalNode STATS_MW_TEST() { return getToken(MySQLSQLStatementParser.STATS_MW_TEST, 0); }
		public TerminalNode STATS_ONE_WAY_ANOVA() { return getToken(MySQLSQLStatementParser.STATS_ONE_WAY_ANOVA, 0); }
		public TerminalNode STATS_T_TEST_ONE() { return getToken(MySQLSQLStatementParser.STATS_T_TEST_ONE, 0); }
		public TerminalNode STATS_T_TEST_PAIRED() { return getToken(MySQLSQLStatementParser.STATS_T_TEST_PAIRED, 0); }
		public TerminalNode STATS_T_TEST_INDEP() { return getToken(MySQLSQLStatementParser.STATS_T_TEST_INDEP, 0); }
		public TerminalNode STATS_T_TEST_INDEPU() { return getToken(MySQLSQLStatementParser.STATS_T_TEST_INDEPU, 0); }
		public TerminalNode STATS_WSR_TEST() { return getToken(MySQLSQLStatementParser.STATS_WSR_TEST, 0); }
		public TerminalNode STDDEV() { return getToken(MySQLSQLStatementParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySQLSQLStatementParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySQLSQLStatementParser.STDDEV_SAMP, 0); }
		public TerminalNode SUM() { return getToken(MySQLSQLStatementParser.SUM, 0); }
		public TerminalNode SYS_OP_ZONE_ID() { return getToken(MySQLSQLStatementParser.SYS_OP_ZONE_ID, 0); }
		public TerminalNode SYS_XMLAGG() { return getToken(MySQLSQLStatementParser.SYS_XMLAGG, 0); }
		public TerminalNode TO_APPROX_COUNT_DISTINCT() { return getToken(MySQLSQLStatementParser.TO_APPROX_COUNT_DISTINCT, 0); }
		public TerminalNode TO_APPROX_PERCENTILE() { return getToken(MySQLSQLStatementParser.TO_APPROX_PERCENTILE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySQLSQLStatementParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySQLSQLStatementParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySQLSQLStatementParser.VARIANCE, 0); }
		public TerminalNode XMLAGG() { return getToken(MySQLSQLStatementParser.XMLAGG, 0); }
		public AggregateFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunctionName; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAggregateFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateFunctionNameContext aggregateFunctionName() throws RecognitionException {
		AggregateFunctionNameContext _localctx = new AggregateFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_aggregateFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7265);
			_la = _input.LA(1);
			if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (AVG - 212)) | (1L << (COUNT - 212)) | (1L << (MAX - 212)) | (1L << (MIN - 212)) | (1L << (STDDEV - 212)) | (1L << (STDDEV_POP - 212)) | (1L << (STDDEV_SAMP - 212)) | (1L << (SUM - 212)) | (1L << (VAR_POP - 212)) | (1L << (VAR_SAMP - 212)) | (1L << (VARIANCE - 212)))) != 0) || ((((_la - 742)) & ~0x3f) == 0 && ((1L << (_la - 742)) & ((1L << (APPROX_COUNT - 742)) | (1L << (APPROX_COUNT_DISTINCT - 742)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 742)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 742)) | (1L << (APPROX_MEDIAN - 742)) | (1L << (APPROX_PERCENTILE - 742)) | (1L << (APPROX_PERCENTILE_AGG - 742)) | (1L << (APPROX_PERCENTILE_DETAIL - 742)) | (1L << (APPROX_RANK - 742)) | (1L << (APPROX_SUM - 742)) | (1L << (COLLECT - 742)) | (1L << (CORR - 742)) | (1L << (CORR_S - 742)) | (1L << (CORR_K - 742)) | (1L << (COVAR_POP - 742)) | (1L << (COVAR_SAMP - 742)) | (1L << (CUME_DIST - 742)) | (1L << (DENSE_RANK - 742)) | (1L << (GROUP_ID - 742)) | (1L << (GROUPING - 742)) | (1L << (GROUPING_ID - 742)) | (1L << (MEDIAN - 742)) | (1L << (PERCENT_RANK - 742)) | (1L << (PERCENTILE_CONT - 742)) | (1L << (PERCENTILE_DISC - 742)) | (1L << (RANK - 742)) | (1L << (REGR_SLOPE - 742)) | (1L << (REGR_INTERCEPT - 742)) | (1L << (REGR_COUNT - 742)) | (1L << (REGR_R2 - 742)) | (1L << (REGR_AVGX - 742)) | (1L << (REGR_AVGY - 742)) | (1L << (REGR_SXX - 742)) | (1L << (REGR_SYY - 742)) | (1L << (REGR_SXY - 742)) | (1L << (STATS_BINOMIAL_TEST - 742)) | (1L << (STATS_CROSSTAB - 742)) | (1L << (STATS_F_TEST - 742)) | (1L << (STATS_KS_TEST - 742)) | (1L << (STATS_MODE - 742)) | (1L << (STATS_MW_TEST - 742)) | (1L << (STATS_ONE_WAY_ANOVA - 742)) | (1L << (STATS_T_TEST_ONE - 742)) | (1L << (STATS_T_TEST_PAIRED - 742)) | (1L << (STATS_T_TEST_INDEP - 742)) | (1L << (STATS_T_TEST_INDEPU - 742)) | (1L << (STATS_WSR_TEST - 742)) | (1L << (SYS_OP_ZONE_ID - 742)) | (1L << (SYS_XMLAGG - 742)) | (1L << (TO_APPROX_COUNT_DISTINCT - 742)) | (1L << (TO_APPROX_PERCENTILE - 742)) | (1L << (XMLAGG - 742)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithinGroupSpecificationContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(MySQLSQLStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(MySQLSQLStatementParser.GROUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public WithinGroupSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withinGroupSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWithinGroupSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithinGroupSpecificationContext withinGroupSpecification() throws RecognitionException {
		WithinGroupSpecificationContext _localctx = new WithinGroupSpecificationContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_withinGroupSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7267);
			match(WITHIN);
			setState(7268);
			match(GROUP);
			setState(7269);
			match(LEFT_PAREN);
			setState(7270);
			orderByClause();
			setState(7271);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstFunctionContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public TerminalNode KEEP() { return getToken(MySQLSQLStatementParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySQLSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode FIRST() { return getToken(MySQLSQLStatementParser.FIRST, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public FirstFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitFirstFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstFunctionContext firstFunction() throws RecognitionException {
		FirstFunctionContext _localctx = new FirstFunctionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_firstFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7273);
			aggregateFunction();
			setState(7274);
			match(KEEP);
			setState(7275);
			match(LEFT_PAREN);
			setState(7276);
			match(DENSE_RANK);
			setState(7277);
			match(FIRST);
			setState(7278);
			orderByClause();
			setState(7279);
			match(RIGHT_PAREN);
			setState(7281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,972,_ctx) ) {
			case 1:
				{
				setState(7280);
				overClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LastFunctionContext extends ParserRuleContext {
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public TerminalNode KEEP() { return getToken(MySQLSQLStatementParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySQLSQLStatementParser.DENSE_RANK, 0); }
		public TerminalNode LAST() { return getToken(MySQLSQLStatementParser.LAST, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public LastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lastFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitLastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LastFunctionContext lastFunction() throws RecognitionException {
		LastFunctionContext _localctx = new LastFunctionContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_lastFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7283);
			aggregateFunction();
			setState(7284);
			match(KEEP);
			setState(7285);
			match(LEFT_PAREN);
			setState(7286);
			match(DENSE_RANK);
			setState(7287);
			match(LAST);
			setState(7288);
			orderByClause();
			setState(7289);
			match(RIGHT_PAREN);
			setState(7291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
			case 1:
				{
				setState(7290);
				overClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListAggFunctionContext extends ParserRuleContext {
		public TerminalNode LISTAGG() { return getToken(MySQLSQLStatementParser.LISTAGG, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public WithinGroupSpecificationContext withinGroupSpecification() {
			return getRuleContext(WithinGroupSpecificationContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(MySQLSQLStatementParser.COMMA, 0); }
		public ListaggOverflowClauseContext listaggOverflowClause() {
			return getRuleContext(ListaggOverflowClauseContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public ListAggFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listAggFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitListAggFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListAggFunctionContext listAggFunction() throws RecognitionException {
		ListAggFunctionContext _localctx = new ListAggFunctionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_listAggFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7293);
			match(LISTAGG);
			setState(7294);
			match(LEFT_PAREN);
			setState(7296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				{
				setState(7295);
				setQuantifier();
				}
				break;
			}
			setState(7298);
			expr(0);
			setState(7301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7299);
				match(COMMA);
				setState(7300);
				expr(0);
				}
			}

			setState(7304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(7303);
				listaggOverflowClause();
				}
			}

			setState(7306);
			match(RIGHT_PAREN);
			setState(7307);
			withinGroupSpecification();
			setState(7309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
			case 1:
				{
				setState(7308);
				overClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListaggOverflowClauseContext extends ParserRuleContext {
		public ListaggOverflowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listaggOverflowClause; }
	 
		public ListaggOverflowClauseContext() { }
		public void copyFrom(ListaggOverflowClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class OnOverflowTruncateClauseContext extends ListaggOverflowClauseContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode OVERFLOW() { return getToken(MySQLSQLStatementParser.OVERFLOW, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySQLSQLStatementParser.TRUNCATE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(MySQLSQLStatementParser.COUNT, 0); }
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(MySQLSQLStatementParser.WITHOUT, 0); }
		public OnOverflowTruncateClauseContext(ListaggOverflowClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOnOverflowTruncateClause(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OnOverflowErrorClauseContext extends ListaggOverflowClauseContext {
		public TerminalNode ON() { return getToken(MySQLSQLStatementParser.ON, 0); }
		public TerminalNode OVERFLOW() { return getToken(MySQLSQLStatementParser.OVERFLOW, 0); }
		public TerminalNode ERROR() { return getToken(MySQLSQLStatementParser.ERROR, 0); }
		public OnOverflowErrorClauseContext(ListaggOverflowClauseContext ctx) { copyFrom(ctx); }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOnOverflowErrorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListaggOverflowClauseContext listaggOverflowClause() throws RecognitionException {
		ListaggOverflowClauseContext _localctx = new ListaggOverflowClauseContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_listaggOverflowClause);
		int _la;
		try {
			setState(7324);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
			case 1:
				_localctx = new OnOverflowErrorClauseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(7311);
				match(ON);
				setState(7312);
				match(OVERFLOW);
				setState(7313);
				match(ERROR);
				}
				break;
			case 2:
				_localctx = new OnOverflowTruncateClauseContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(7314);
				match(ON);
				setState(7315);
				match(OVERFLOW);
				setState(7316);
				match(TRUNCATE);
				setState(7318);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
				case 1:
					{
					setState(7317);
					expr(0);
					}
					break;
				}
				setState(7322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					setState(7320);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7321);
					match(COUNT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionContext extends ParserRuleContext {
		public NameIdentifierContext name;
		public WindowFunctionNullsOptionContext inside;
		public WindowFunctionNullsOptionContext outside;
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public WindowFunctionFromOptionContext windowFunctionFromOption() {
			return getRuleContext(WindowFunctionFromOptionContext.class,0);
		}
		public List<WindowFunctionNullsOptionContext> windowFunctionNullsOption() {
			return getRuleContexts(WindowFunctionNullsOptionContext.class);
		}
		public WindowFunctionNullsOptionContext windowFunctionNullsOption(int i) {
			return getRuleContext(WindowFunctionNullsOptionContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public WindowFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWindowFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionContext windowFunction() throws RecognitionException {
		WindowFunctionContext _localctx = new WindowFunctionContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_windowFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7326);
			((WindowFunctionContext)_localctx).name = nameIdentifier();
			setState(7327);
			match(LEFT_PAREN);
			setState(7342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT_USER) | (1L << CURSOR) | (1L << DISTINCT) | (1L << DISTINCTROW) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (INSERT - 73)) | (1L << (INTERVAL - 73)) | (1L << (LEFT - 73)) | (1L << (MATCH - 73)) | (1L << (NEW - 73)) | (1L << (NOT - 73)) | (1L << (NULL_LITERAL - 73)) | (1L << (OLD - 73)) | (1L << (PERSIST - 73)) | (1L << (PERSIST_ONLY - 73)) | (1L << (REPLACE - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (RIGHT - 137)) | (1L << (SELECT - 137)) | (1L << (TRUE - 137)) | (1L << (VALUES - 137)) | (1L << (DATE - 137)) | (1L << (TIME - 137)) | (1L << (TIMESTAMP - 137)) | (1L << (DATETIME - 137)) | (1L << (YEAR - 137)) | (1L << (CHAR - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (BINARY - 201)) | (1L << (TEXT - 201)) | (1L << (ENUM - 201)) | (1L << (AVG - 201)) | (1L << (COUNT - 201)) | (1L << (MAX - 201)) | (1L << (MIN - 201)) | (1L << (STDDEV - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUM - 201)) | (1L << (VAR_POP - 201)) | (1L << (VAR_SAMP - 201)) | (1L << (VARIANCE - 201)) | (1L << (CURRENT_DATE - 201)) | (1L << (CURRENT_TIME - 201)) | (1L << (CURRENT_TIMESTAMP - 201)) | (1L << (LOCALTIME - 201)) | (1L << (EXTRACT - 201)) | (1L << (LOCALTIMESTAMP - 201)) | (1L << (POSITION - 201)) | (1L << (SUBSTR - 201)) | (1L << (SUBSTRING - 201)) | (1L << (TRIM - 201)) | (1L << (UTC_DATE - 201)) | (1L << (UTC_TIME - 201)) | (1L << (UTC_TIMESTAMP - 201)) | (1L << (ACCOUNT - 201)) | (1L << (ACTION - 201)) | (1L << (AFTER - 201)) | (1L << (AGGREGATE - 201)) | (1L << (ALGORITHM - 201)) | (1L << (ANY - 201)) | (1L << (AT - 201)) | (1L << (AUTHORS - 201)) | (1L << (AUTOCOMMIT - 201)) | (1L << (AUTOEXTEND_SIZE - 201)) | (1L << (AUTO_INCREMENT - 201)) | (1L << (AVG_ROW_LENGTH - 201)) | (1L << (BEGIN - 201)) | (1L << (BINLOG - 201)) | (1L << (BIT - 201)) | (1L << (BLOCK - 201)) | (1L << (BOOL - 201)) | (1L << (BOOLEAN - 201)) | (1L << (BTREE - 201)) | (1L << (CASCADED - 201)) | (1L << (CHAIN - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (CHANNEL - 265)) | (1L << (CHECKSUM - 265)) | (1L << (CIPHER - 265)) | (1L << (CLIENT - 265)) | (1L << (COALESCE - 265)) | (1L << (CODE - 265)) | (1L << (COLUMNS - 265)) | (1L << (COLUMN_FORMAT - 265)) | (1L << (COMMENT - 265)) | (1L << (COMMIT - 265)) | (1L << (COMPACT - 265)) | (1L << (COMPLETION - 265)) | (1L << (COMPRESSED - 265)) | (1L << (COMPRESSION - 265)) | (1L << (CONCURRENT - 265)) | (1L << (CONNECTION - 265)) | (1L << (CONSISTENT - 265)) | (1L << (CONTAINS - 265)) | (1L << (CONTEXT - 265)) | (1L << (CONTRIBUTORS - 265)) | (1L << (COPY - 265)) | (1L << (CPU - 265)) | (1L << (DATA - 265)) | (1L << (DATAFILE - 265)) | (1L << (DEALLOCATE - 265)) | (1L << (DEFAULT_AUTH - 265)) | (1L << (DEFINER - 265)) | (1L << (DELAY_KEY_WRITE - 265)) | (1L << (DIRECTORY - 265)) | (1L << (DISABLE - 265)) | (1L << (DISCARD - 265)) | (1L << (DISK - 265)) | (1L << (DO - 265)) | (1L << (DUMPFILE - 265)) | (1L << (DUPLICATE - 265)) | (1L << (DYNAMIC - 265)) | (1L << (ENABLE - 265)) | (1L << (ENCRYPTION - 265)) | (1L << (ENDS - 265)) | (1L << (ENGINE - 265)) | (1L << (ENGINES - 265)) | (1L << (ERROR - 265)) | (1L << (ERRORS - 265)) | (1L << (ESCAPE - 265)) | (1L << (EVEN - 265)) | (1L << (EVENT - 265)) | (1L << (EVENTS - 265)) | (1L << (EVERY - 265)) | (1L << (EXCHANGE - 265)) | (1L << (EXCLUSIVE - 265)) | (1L << (EXPIRE - 265)) | (1L << (EXTENT_SIZE - 265)) | (1L << (FAULTS - 265)) | (1L << (FIELDS - 265)) | (1L << (FILE_BLOCK_SIZE - 265)) | (1L << (FILTER - 265)) | (1L << (FIRST - 265)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (FIXED - 329)) | (1L << (FOLLOWS - 329)) | (1L << (FULL - 329)) | (1L << (FUNCTION - 329)) | (1L << (GLOBAL - 329)) | (1L << (GRANTS - 329)) | (1L << (GROUP_REPLICATION - 329)) | (1L << (HASH - 329)) | (1L << (HOST - 329)) | (1L << (IDENTIFIED - 329)) | (1L << (IGNORE_SERVER_IDS - 329)) | (1L << (IMPORT - 329)) | (1L << (INDEXES - 329)) | (1L << (INITIAL_SIZE - 329)) | (1L << (INPLACE - 329)) | (1L << (INSERT_METHOD - 329)) | (1L << (INSTANCE - 329)) | (1L << (INVOKER - 329)) | (1L << (IO - 329)) | (1L << (IO_THREAD - 329)) | (1L << (IPC - 329)) | (1L << (ISOLATION - 329)) | (1L << (ISSUER - 329)) | (1L << (KEY_BLOCK_SIZE - 329)) | (1L << (LANGUAGE - 329)) | (1L << (LAST - 329)) | (1L << (LEAVES - 329)) | (1L << (LESS - 329)) | (1L << (LEVEL - 329)) | (1L << (LIST - 329)) | (1L << (LOCAL - 329)) | (1L << (LOGFILE - 329)) | (1L << (LOGS - 329)) | (1L << (MASTER - 329)) | (1L << (MASTER_AUTO_POSITION - 329)) | (1L << (MASTER_CONNECT_RETRY - 329)) | (1L << (MASTER_DELAY - 329)) | (1L << (MASTER_HEARTBEAT_PERIOD - 329)) | (1L << (MASTER_HOST - 329)) | (1L << (MASTER_LOG_FILE - 329)) | (1L << (MASTER_LOG_POS - 329)) | (1L << (MASTER_PASSWORD - 329)) | (1L << (MASTER_PORT - 329)) | (1L << (MASTER_RETRY_COUNT - 329)) | (1L << (MASTER_SSL - 329)) | (1L << (MASTER_SSL_CA - 329)) | (1L << (MASTER_SSL_CAPATH - 329)) | (1L << (MASTER_SSL_CERT - 329)) | (1L << (MASTER_SSL_CIPHER - 329)) | (1L << (MASTER_SSL_CRL - 329)) | (1L << (MASTER_SSL_CRLPATH - 329)) | (1L << (MASTER_SSL_KEY - 329)) | (1L << (MASTER_TLS_VERSION - 329)) | (1L << (MASTER_USER - 329)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 329)) | (1L << (MAX_QUERIES_PER_HOUR - 329)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (MAX_ROWS - 393)) | (1L << (MAX_SIZE - 393)) | (1L << (MAX_UPDATES_PER_HOUR - 393)) | (1L << (MAX_USER_CONNECTIONS - 393)) | (1L << (MERGE - 393)) | (1L << (MIGRATE - 393)) | (1L << (MIN_ROWS - 393)) | (1L << (MODIFY - 393)) | (1L << (MUTEX - 393)) | (1L << (MYSQL - 393)) | (1L << (NAME - 393)) | (1L << (NAMES - 393)) | (1L << (NCHAR - 393)) | (1L << (NEVER - 393)) | (1L << (NO - 393)) | (1L << (NODEGROUP - 393)) | (1L << (NONE - 393)) | (1L << (OFFLINE - 393)) | (1L << (OFFSET - 393)) | (1L << (OJ - 393)) | (1L << (OLD_PASSWORD - 393)) | (1L << (ONE - 393)) | (1L << (ONLINE - 393)) | (1L << (ONLY - 393)) | (1L << (OPTIMIZER_COSTS - 393)) | (1L << (OPTIONS - 393)) | (1L << (OWNER - 393)) | (1L << (PACK_KEYS - 393)) | (1L << (PAGE - 393)) | (1L << (PARSER - 393)) | (1L << (PARTIAL - 393)) | (1L << (PARTITIONING - 393)) | (1L << (PARTITIONS - 393)) | (1L << (PASSWORD - 393)) | (1L << (PHASE - 393)) | (1L << (PLUGIN_DIR - 393)) | (1L << (PLUGINS - 393)) | (1L << (PORT - 393)) | (1L << (PRECEDES - 393)) | (1L << (PREPARE - 393)) | (1L << (PRESERVE - 393)) | (1L << (PREV - 393)) | (1L << (PROCESSLIST - 393)) | (1L << (PROFILE - 393)) | (1L << (PROFILES - 393)) | (1L << (PROXY - 393)) | (1L << (QUERY - 393)) | (1L << (QUICK - 393)) | (1L << (REBUILD - 393)) | (1L << (RECOVER - 393)) | (1L << (REDO_BUFFER_SIZE - 393)) | (1L << (REDUNDANT - 393)) | (1L << (RELAY_LOG_FILE - 393)) | (1L << (RELAY_LOG_POS - 393)) | (1L << (RELAYLOG - 393)) | (1L << (REMOVE - 393)) | (1L << (REORGANIZE - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (REPAIR - 457)) | (1L << (REPLICATE_DO_DB - 457)) | (1L << (REPLICATE_DO_TABLE - 457)) | (1L << (REPLICATE_IGNORE_DB - 457)) | (1L << (REPLICATE_IGNORE_TABLE - 457)) | (1L << (REPLICATE_REWRITE_DB - 457)) | (1L << (REPLICATE_WILD_DO_TABLE - 457)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 457)) | (1L << (REPLICATION - 457)) | (1L << (RESUME - 457)) | (1L << (RETURNS - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROTATE - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (ROW_FORMAT - 457)) | (1L << (SAVEPOINT - 457)) | (1L << (SCHEDULE - 457)) | (1L << (SECURITY - 457)) | (1L << (SERVER - 457)) | (1L << (SESSION - 457)) | (1L << (SHARE - 457)) | (1L << (SHARED - 457)) | (1L << (SIGNED - 457)) | (1L << (SIMPLE - 457)) | (1L << (SLAVE - 457)) | (1L << (SNAPSHOT - 457)) | (1L << (SOCKET - 457)) | (1L << (SOME - 457)) | (1L << (SOUNDS - 457)) | (1L << (SOURCE - 457)) | (1L << (SQL_AFTER_GTIDS - 457)) | (1L << (SQL_AFTER_MTS_GAPS - 457)) | (1L << (SQL_BEFORE_GTIDS - 457)) | (1L << (SQL_BUFFER_RESULT - 457)) | (1L << (SQL_CACHE - 457)) | (1L << (SQL_NO_CACHE - 457)) | (1L << (SQL_THREAD - 457)) | (1L << (START - 457)) | (1L << (STARTS - 457)) | (1L << (STATS_AUTO_RECALC - 457)) | (1L << (STATS_PERSISTENT - 457)) | (1L << (STATS_SAMPLE_PAGES - 457)) | (1L << (STATUS - 457)) | (1L << (STOP - 457)) | (1L << (STORAGE - 457)) | (1L << (STRING - 457)) | (1L << (SUBJECT - 457)) | (1L << (SUBPARTITION - 457)) | (1L << (SUBPARTITIONS - 457)) | (1L << (SUSPEND - 457)) | (1L << (SWAPS - 457)) | (1L << (SWITCHES - 457)) | (1L << (TABLESPACE - 457)) | (1L << (TEMPORARY - 457)) | (1L << (TEMPTABLE - 457)) | (1L << (THAN - 457)) | (1L << (TRANSACTION - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (TRUNCATE - 521)) | (1L << (UNDEFINED - 521)) | (1L << (UNDOFILE - 521)) | (1L << (UNDO_BUFFER_SIZE - 521)) | (1L << (UNKNOWN - 521)) | (1L << (UPGRADE - 521)) | (1L << (USER - 521)) | (1L << (VALIDATION - 521)) | (1L << (VALUE - 521)) | (1L << (VARIABLES - 521)) | (1L << (VIEW - 521)) | (1L << (WAIT - 521)) | (1L << (WARNINGS - 521)) | (1L << (WITHOUT - 521)) | (1L << (WORK - 521)) | (1L << (WRAPPER - 521)) | (1L << (X509 - 521)) | (1L << (XA - 521)) | (1L << (XML - 521)) | (1L << (TABLES - 521)) | (1L << (ROUTINE - 521)) | (1L << (EXECUTE - 521)) | (1L << (FILE - 521)) | (1L << (PROCESS - 521)) | (1L << (RELOAD - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SUPER - 521)) | (1L << (PRIVILEGES - 521)) | (1L << (ARMSCII8 - 521)) | (1L << (ASCII - 521)) | (1L << (BIG5 - 521)) | (1L << (CP1250 - 521)) | (1L << (CP1251 - 521)) | (1L << (CP1256 - 521)) | (1L << (CP1257 - 521)) | (1L << (CP850 - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (CP852 - 585)) | (1L << (CP866 - 585)) | (1L << (CP932 - 585)) | (1L << (DEC8 - 585)) | (1L << (EUCJPMS - 585)) | (1L << (EUCKR - 585)) | (1L << (GB2312 - 585)) | (1L << (GBK - 585)) | (1L << (GEOSTD8 - 585)) | (1L << (GREEK - 585)) | (1L << (HEBREW - 585)) | (1L << (HP8 - 585)) | (1L << (KEYBCS2 - 585)) | (1L << (KOI8R - 585)) | (1L << (KOI8U - 585)) | (1L << (LATIN1 - 585)) | (1L << (LATIN2 - 585)) | (1L << (LATIN5 - 585)) | (1L << (LATIN7 - 585)) | (1L << (MACCE - 585)) | (1L << (MACROMAN - 585)) | (1L << (SJIS - 585)) | (1L << (SWE7 - 585)) | (1L << (TIS620 - 585)) | (1L << (UCS2 - 585)) | (1L << (UJIS - 585)) | (1L << (UTF16 - 585)) | (1L << (UTF16LE - 585)) | (1L << (UTF32 - 585)) | (1L << (UTF8 - 585)) | (1L << (UTF8MB3 - 585)) | (1L << (UTF8MB4 - 585)) | (1L << (ARCHIVE - 585)) | (1L << (BLACKHOLE - 585)) | (1L << (CSV - 585)) | (1L << (FEDERATED - 585)) | (1L << (INNODB - 585)) | (1L << (MEMORY - 585)) | (1L << (MRG_MYISAM - 585)) | (1L << (MYISAM - 585)) | (1L << (NDB - 585)) | (1L << (NDBCLUSTER - 585)) | (1L << (PERFOMANCE_SCHEMA - 585)) | (1L << (REPEATABLE - 585)) | (1L << (COMMITTED - 585)) | (1L << (UNCOMMITTED - 585)) | (1L << (SERIALIZABLE - 585)) | (1L << (GET_FORMAT - 585)) | (1L << (MOD - 585)) | (1L << (REVERSE - 585)) | (1L << (WEIGHT_STRING - 585)))) != 0) || ((((_la - 654)) & ~0x3f) == 0 && ((1L << (_la - 654)) & ((1L << (PLUS_SIGN - 654)) | (1L << (MINUS_SIGN - 654)) | (1L << (ASTERISK - 654)) | (1L << (EXCLAMATION_OP - 654)) | (1L << (BIT_NOT_OP - 654)) | (1L << (LEFT_PAREN - 654)) | (1L << (AT_SIGN - 654)) | (1L << (QUESTION_MARK - 654)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 654)) | (1L << (REGULAR_ID - 654)) | (1L << (DELIMITED_ID - 654)) | (1L << (REVERSE_QUOTE_ID - 654)) | (1L << (CHAR_STRING - 654)) | (1L << (NCHAR_STRING - 654)) | (1L << (STRING_CHARSET_NAME - 654)) | (1L << (UNSIGNED_INTEGER - 654)) | (1L << (APPROXIMATE_NUM_LIT - 654)) | (1L << (HEXADECIMAL_LITERAL - 654)) | (1L << (BIT_STRING - 654)))) != 0) || ((((_la - 718)) & ~0x3f) == 0 && ((1L << (_la - 718)) & ((1L << (MID - 718)) | (1L << (TREAT - 718)) | (1L << (JSON_TABLE - 718)) | (1L << (JSON_ARRAY - 718)) | (1L << (JSON_ARRAYAGG - 718)) | (1L << (JSON_OBJECT - 718)) | (1L << (JSON_OBJECTAGG - 718)) | (1L << (APPROX_COUNT - 718)) | (1L << (APPROX_COUNT_DISTINCT - 718)) | (1L << (APPROX_COUNT_DISTINCT_AGG - 718)) | (1L << (APPROX_COUNT_DISTINCT_DETAIL - 718)) | (1L << (APPROX_MEDIAN - 718)) | (1L << (APPROX_PERCENTILE - 718)) | (1L << (APPROX_PERCENTILE_AGG - 718)) | (1L << (APPROX_PERCENTILE_DETAIL - 718)) | (1L << (APPROX_RANK - 718)) | (1L << (APPROX_SUM - 718)) | (1L << (COLLECT - 718)) | (1L << (CORR - 718)) | (1L << (CORR_S - 718)) | (1L << (CORR_K - 718)) | (1L << (COVAR_POP - 718)) | (1L << (COVAR_SAMP - 718)) | (1L << (CUME_DIST - 718)) | (1L << (DENSE_RANK - 718)) | (1L << (GROUP_ID - 718)) | (1L << (GROUPING - 718)) | (1L << (GROUPING_ID - 718)) | (1L << (MEDIAN - 718)) | (1L << (PERCENT_RANK - 718)) | (1L << (PERCENTILE_CONT - 718)) | (1L << (PERCENTILE_DISC - 718)) | (1L << (RANK - 718)) | (1L << (REGR_SLOPE - 718)) | (1L << (REGR_INTERCEPT - 718)) | (1L << (REGR_COUNT - 718)) | (1L << (REGR_R2 - 718)) | (1L << (REGR_AVGX - 718)) | (1L << (REGR_AVGY - 718)) | (1L << (REGR_SXX - 718)) | (1L << (REGR_SYY - 718)) | (1L << (REGR_SXY - 718)) | (1L << (STATS_BINOMIAL_TEST - 718)) | (1L << (STATS_CROSSTAB - 718)) | (1L << (STATS_F_TEST - 718)) | (1L << (STATS_KS_TEST - 718)) | (1L << (STATS_MODE - 718)))) != 0) || ((((_la - 782)) & ~0x3f) == 0 && ((1L << (_la - 782)) & ((1L << (STATS_MW_TEST - 782)) | (1L << (STATS_ONE_WAY_ANOVA - 782)) | (1L << (STATS_T_TEST_ONE - 782)) | (1L << (STATS_T_TEST_PAIRED - 782)) | (1L << (STATS_T_TEST_INDEP - 782)) | (1L << (STATS_T_TEST_INDEPU - 782)) | (1L << (STATS_WSR_TEST - 782)) | (1L << (SYS_OP_ZONE_ID - 782)) | (1L << (SYS_XMLAGG - 782)) | (1L << (TO_APPROX_COUNT_DISTINCT - 782)) | (1L << (TO_APPROX_PERCENTILE - 782)) | (1L << (XMLAGG - 782)) | (1L << (LISTAGG - 782)) | (1L << (CUBE_TABLE - 782)))) != 0)) {
				{
				setState(7329);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
				case 1:
					{
					setState(7328);
					setQuantifier();
					}
					break;
				}
				setState(7331);
				expr(0);
				setState(7333);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(7332);
					((WindowFunctionContext)_localctx).inside = windowFunctionNullsOption();
					}
				}

				setState(7339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7335);
					match(COMMA);
					setState(7336);
					expr(0);
					}
					}
					setState(7341);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7344);
			match(RIGHT_PAREN);
			setState(7346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7345);
				windowFunctionFromOption();
				}
			}

			setState(7349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==RESPECT) {
				{
				setState(7348);
				((WindowFunctionContext)_localctx).outside = windowFunctionNullsOption();
				}
			}

			setState(7351);
			overClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionNullsOptionContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(MySQLSQLStatementParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(MySQLSQLStatementParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public WindowFunctionNullsOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionNullsOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWindowFunctionNullsOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionNullsOptionContext windowFunctionNullsOption() throws RecognitionException {
		WindowFunctionNullsOptionContext _localctx = new WindowFunctionNullsOptionContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_windowFunctionNullsOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7353);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7354);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionFromOptionContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(MySQLSQLStatementParser.FROM, 0); }
		public TerminalNode FIRST() { return getToken(MySQLSQLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(MySQLSQLStatementParser.LAST, 0); }
		public WindowFunctionFromOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionFromOption; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWindowFunctionFromOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionFromOptionContext windowFunctionFromOption() throws RecognitionException {
		WindowFunctionFromOptionContext _localctx = new WindowFunctionFromOptionContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_windowFunctionFromOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7356);
			match(FROM);
			setState(7357);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MySQLSQLStatementParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public AnalyticClauseContext analyticClause() {
			return getRuleContext(AnalyticClauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7359);
			match(OVER);
			setState(7360);
			match(LEFT_PAREN);
			setState(7361);
			analyticClause();
			setState(7362);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyticClauseContext extends ParserRuleContext {
		public PartitionByClauseContext partitionByClause() {
			return getRuleContext(PartitionByClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return getRuleContext(WindowFrameClauseContext.class,0);
		}
		public AnalyticClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyticClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitAnalyticClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyticClauseContext analyticClause() throws RecognitionException {
		AnalyticClauseContext _localctx = new AnalyticClauseContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_analyticClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7364);
				partitionByClause();
				}
			}

			setState(7371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7367);
				orderByClause();
				setState(7369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(7368);
					windowFrameClause();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionByClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySQLSQLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySQLSQLStatementParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySQLSQLStatementParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySQLSQLStatementParser.COMMA, i);
		}
		public PartitionByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPartitionByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByClauseContext partitionByClause() throws RecognitionException {
		PartitionByClauseContext _localctx = new PartitionByClauseContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_partitionByClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7373);
			match(PARTITION);
			setState(7374);
			match(BY);
			setState(7375);
			expr(0);
			setState(7380);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,990,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7376);
					match(COMMA);
					setState(7377);
					expr(0);
					}
					} 
				}
				setState(7382);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,990,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameClauseContext extends ParserRuleContext {
		public WindowFrameUnitContext windowFrameUnit() {
			return getRuleContext(WindowFrameUnitContext.class,0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return getRuleContext(WindowFrameExtentContext.class,0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameClause; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWindowFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameClauseContext windowFrameClause() throws RecognitionException {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_windowFrameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7383);
			windowFrameUnit();
			setState(7384);
			windowFrameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameUnitContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(MySQLSQLStatementParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MySQLSQLStatementParser.RANGE, 0); }
		public WindowFrameUnitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameUnit; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWindowFrameUnit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameUnitContext windowFrameUnit() throws RecognitionException {
		WindowFrameUnitContext _localctx = new WindowFrameUnitContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_windowFrameUnit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7386);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExtentContext extends ParserRuleContext {
		public WindowFrameExtentItemContext between;
		public WindowFrameExtentItemContext and;
		public WindowFrameExtentItemContext extent;
		public TerminalNode BETWEEN() { return getToken(MySQLSQLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySQLSQLStatementParser.AND, 0); }
		public List<WindowFrameExtentItemContext> windowFrameExtentItem() {
			return getRuleContexts(WindowFrameExtentItemContext.class);
		}
		public WindowFrameExtentItemContext windowFrameExtentItem(int i) {
			return getRuleContext(WindowFrameExtentItemContext.class,i);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtent; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWindowFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExtentContext windowFrameExtent() throws RecognitionException {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_windowFrameExtent);
		try {
			setState(7394);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7388);
				match(BETWEEN);
				setState(7389);
				((WindowFrameExtentContext)_localctx).between = windowFrameExtentItem();
				setState(7390);
				match(AND);
				setState(7391);
				((WindowFrameExtentContext)_localctx).and = windowFrameExtentItem();
				}
				break;
			case ALL:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case CURSOR:
			case EXISTS:
			case FALSE:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case MATCH:
			case NEW:
			case NOT:
			case NULL_LITERAL:
			case OLD:
			case PERSIST:
			case PERSIST_ONLY:
			case REPLACE:
			case RIGHT:
			case SELECT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case COUNT:
			case MAX:
			case MIN:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GET_FORMAT:
			case MOD:
			case REVERSE:
			case WEIGHT_STRING:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case ASTERISK:
			case EXCLAMATION_OP:
			case BIT_NOT_OP:
			case LEFT_PAREN:
			case AT_SIGN:
			case QUESTION_MARK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case CHAR_STRING:
			case NCHAR_STRING:
			case STRING_CHARSET_NAME:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case HEXADECIMAL_LITERAL:
			case BIT_STRING:
			case MID:
			case TREAT:
			case JSON_TABLE:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case APPROX_COUNT:
			case APPROX_COUNT_DISTINCT:
			case APPROX_COUNT_DISTINCT_AGG:
			case APPROX_COUNT_DISTINCT_DETAIL:
			case APPROX_MEDIAN:
			case APPROX_PERCENTILE:
			case APPROX_PERCENTILE_AGG:
			case APPROX_PERCENTILE_DETAIL:
			case APPROX_RANK:
			case APPROX_SUM:
			case COLLECT:
			case CORR:
			case CORR_S:
			case CORR_K:
			case COVAR_POP:
			case COVAR_SAMP:
			case CUME_DIST:
			case DENSE_RANK:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case MEDIAN:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case REGR_SLOPE:
			case REGR_INTERCEPT:
			case REGR_COUNT:
			case REGR_R2:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_SXX:
			case REGR_SYY:
			case REGR_SXY:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_WSR_TEST:
			case SYS_OP_ZONE_ID:
			case SYS_XMLAGG:
			case TO_APPROX_COUNT_DISTINCT:
			case TO_APPROX_PERCENTILE:
			case XMLAGG:
			case LISTAGG:
			case UNBOUNDED:
			case CURRENT:
			case CUBE_TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7393);
				((WindowFrameExtentContext)_localctx).extent = windowFrameExtentItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExtentItemContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(MySQLSQLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MySQLSQLStatementParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(MySQLSQLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MySQLSQLStatementParser.ROW, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(MySQLSQLStatementParser.FOLLOWING, 0); }
		public WindowFrameExtentItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtentItem; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWindowFrameExtentItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExtentItemContext windowFrameExtentItem() throws RecognitionException {
		WindowFrameExtentItemContext _localctx = new WindowFrameExtentItemContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_windowFrameExtentItem);
		int _la;
		try {
			setState(7403);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(7396);
				match(UNBOUNDED);
				setState(7397);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7398);
				match(CURRENT);
				setState(7399);
				match(ROW);
				}
				break;
			case ALL:
			case CASE:
			case CAST:
			case CONVERT:
			case CURRENT_USER:
			case CURSOR:
			case EXISTS:
			case FALSE:
			case INSERT:
			case INTERVAL:
			case LEFT:
			case MATCH:
			case NEW:
			case NOT:
			case NULL_LITERAL:
			case OLD:
			case PERSIST:
			case PERSIST_ONLY:
			case REPLACE:
			case RIGHT:
			case SELECT:
			case TRUE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case CHAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case AVG:
			case COUNT:
			case MAX:
			case MIN:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case EXTRACT:
			case LOCALTIMESTAMP:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CASCADED:
			case CHAIN:
			case CHANNEL:
			case CHECKSUM:
			case CIPHER:
			case CLIENT:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXTENT_SIZE:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FOLLOWS:
			case FULL:
			case FUNCTION:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HASH:
			case HOST:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTANCE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MERGE:
			case MIGRATE:
			case MIN_ROWS:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NO:
			case NODEGROUP:
			case NONE:
			case OFFLINE:
			case OFFSET:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESUME:
			case RETURNS:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLESPACE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRANSACTION:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNKNOWN:
			case UPGRADE:
			case USER:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFOMANCE_SCHEMA:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GET_FORMAT:
			case MOD:
			case REVERSE:
			case WEIGHT_STRING:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case ASTERISK:
			case EXCLAMATION_OP:
			case BIT_NOT_OP:
			case LEFT_PAREN:
			case AT_SIGN:
			case QUESTION_MARK:
			case CHARSET_REVERSE_QOUTE_STRING:
			case REGULAR_ID:
			case DELIMITED_ID:
			case REVERSE_QUOTE_ID:
			case CHAR_STRING:
			case NCHAR_STRING:
			case STRING_CHARSET_NAME:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case HEXADECIMAL_LITERAL:
			case BIT_STRING:
			case MID:
			case TREAT:
			case JSON_TABLE:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case APPROX_COUNT:
			case APPROX_COUNT_DISTINCT:
			case APPROX_COUNT_DISTINCT_AGG:
			case APPROX_COUNT_DISTINCT_DETAIL:
			case APPROX_MEDIAN:
			case APPROX_PERCENTILE:
			case APPROX_PERCENTILE_AGG:
			case APPROX_PERCENTILE_DETAIL:
			case APPROX_RANK:
			case APPROX_SUM:
			case COLLECT:
			case CORR:
			case CORR_S:
			case CORR_K:
			case COVAR_POP:
			case COVAR_SAMP:
			case CUME_DIST:
			case DENSE_RANK:
			case GROUP_ID:
			case GROUPING:
			case GROUPING_ID:
			case MEDIAN:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case REGR_SLOPE:
			case REGR_INTERCEPT:
			case REGR_COUNT:
			case REGR_R2:
			case REGR_AVGX:
			case REGR_AVGY:
			case REGR_SXX:
			case REGR_SYY:
			case REGR_SXY:
			case STATS_BINOMIAL_TEST:
			case STATS_CROSSTAB:
			case STATS_F_TEST:
			case STATS_KS_TEST:
			case STATS_MODE:
			case STATS_MW_TEST:
			case STATS_ONE_WAY_ANOVA:
			case STATS_T_TEST_ONE:
			case STATS_T_TEST_PAIRED:
			case STATS_T_TEST_INDEP:
			case STATS_T_TEST_INDEPU:
			case STATS_WSR_TEST:
			case SYS_OP_ZONE_ID:
			case SYS_XMLAGG:
			case TO_APPROX_COUNT_DISTINCT:
			case TO_APPROX_PERCENTILE:
			case XMLAGG:
			case LISTAGG:
			case CUBE_TABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7400);
				expr(0);
				setState(7401);
				_la = _input.LA(1);
				if ( !(_la==PRECEDING || _la==FOLLOWING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CubeTableFunctionContext extends ParserRuleContext {
		public NameIdentifierContext cube;
		public TerminalNode CUBE_TABLE() { return getToken(MySQLSQLStatementParser.CUBE_TABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(MySQLSQLStatementParser.LEFT_PAREN, 0); }
		public List<TerminalNode> SINGLE_QUOTE() { return getTokens(MySQLSQLStatementParser.SINGLE_QUOTE); }
		public TerminalNode SINGLE_QUOTE(int i) {
			return getToken(MySQLSQLStatementParser.SINGLE_QUOTE, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(MySQLSQLStatementParser.RIGHT_PAREN, 0); }
		public NameIdentifierContext nameIdentifier() {
			return getRuleContext(NameIdentifierContext.class,0);
		}
		public List<CubeTableOptionExprContext> cubeTableOptionExpr() {
			return getRuleContexts(CubeTableOptionExprContext.class);
		}
		public CubeTableOptionExprContext cubeTableOptionExpr(int i) {
			return getRuleContext(CubeTableOptionExprContext.class,i);
		}
		public CubeTableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeTableFunction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCubeTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeTableFunctionContext cubeTableFunction() throws RecognitionException {
		CubeTableFunctionContext _localctx = new CubeTableFunctionContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_cubeTableFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7405);
			match(CUBE_TABLE);
			setState(7406);
			match(LEFT_PAREN);
			setState(7407);
			match(SINGLE_QUOTE);
			setState(7408);
			((CubeTableFunctionContext)_localctx).cube = nameIdentifier();
			setState(7412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==HIERARCHY || _la==HRR) {
				{
				{
				setState(7409);
				cubeTableOptionExpr();
				}
				}
				setState(7414);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7415);
			match(SINGLE_QUOTE);
			setState(7416);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CubeTableOptionExprContext extends ParserRuleContext {
		public NameIdentifierContext dimension;
		public NameIdentifierContext hierarchy;
		public TerminalNode HIERARCHY() { return getToken(MySQLSQLStatementParser.HIERARCHY, 0); }
		public TerminalNode HRR() { return getToken(MySQLSQLStatementParser.HRR, 0); }
		public List<NameIdentifierContext> nameIdentifier() {
			return getRuleContexts(NameIdentifierContext.class);
		}
		public NameIdentifierContext nameIdentifier(int i) {
			return getRuleContext(NameIdentifierContext.class,i);
		}
		public CubeTableOptionExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeTableOptionExpr; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitCubeTableOptionExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeTableOptionExprContext cubeTableOptionExpr() throws RecognitionException {
		CubeTableOptionExprContext _localctx = new CubeTableOptionExprContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_cubeTableOptionExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7418);
			_la = _input.LA(1);
			if ( !(_la==HIERARCHY || _la==HRR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
			case 1:
				{
				setState(7419);
				((CubeTableOptionExprContext)_localctx).dimension = nameIdentifier();
				}
				break;
			}
			setState(7422);
			((CubeTableOptionExprContext)_localctx).hierarchy = nameIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrReplaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(MySQLSQLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(MySQLSQLStatementParser.REPLACE, 0); }
		public OrReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orReplace; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOrReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrReplaceContext orReplace() throws RecognitionException {
		OrReplaceContext _localctx = new OrReplaceContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_orReplace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7424);
			match(OR);
			setState(7425);
			match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySQLSQLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLSQLStatementParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7427);
			match(IF);
			setState(7428);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySQLSQLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySQLSQLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySQLSQLStatementParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7430);
			match(IF);
			setState(7431);
			match(NOT);
			setState(7432);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithRollupContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySQLSQLStatementParser.ROLLUP, 0); }
		public WithRollupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withRollup; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWithRollup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithRollupContext withRollup() throws RecognitionException {
		WithRollupContext _localctx = new WithRollupContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_withRollup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7434);
			match(WITH);
			setState(7435);
			match(ROLLUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderingSpecificationContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(MySQLSQLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySQLSQLStatementParser.DESC, 0); }
		public OrderingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderingSpecification; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitOrderingSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderingSpecificationContext orderingSpecification() throws RecognitionException {
		OrderingSpecificationContext _localctx = new OrderingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_orderingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7437);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntimeActionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(MySQLSQLStatementParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(MySQLSQLStatementParser.OFFLINE, 0); }
		public IntimeActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intimeAction; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIntimeAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntimeActionContext intimeAction() throws RecognitionException {
		IntimeActionContext _localctx = new IntimeActionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_intimeAction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7439);
			_la = _input.LA(1);
			if ( !(_la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexCategoryContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(MySQLSQLStatementParser.UNIQUE, 0); }
		public TerminalNode FULLTEXT() { return getToken(MySQLSQLStatementParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySQLSQLStatementParser.SPATIAL, 0); }
		public IndexCategoryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexCategory; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexCategory(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexCategoryContext indexCategory() throws RecognitionException {
		IndexCategoryContext _localctx = new IndexCategoryContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_indexCategory);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7441);
			_la = _input.LA(1);
			if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyViolateContext extends ParserRuleContext {
		public TerminalNode IGNORE() { return getToken(MySQLSQLStatementParser.IGNORE, 0); }
		public TerminalNode REPLACE() { return getToken(MySQLSQLStatementParser.REPLACE, 0); }
		public KeyViolateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyViolate; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitKeyViolate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyViolateContext keyViolate() throws RecognitionException {
		KeyViolateContext _localctx = new KeyViolateContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_keyViolate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7443);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==REPLACE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexFormatContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(MySQLSQLStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySQLSQLStatementParser.KEY, 0); }
		public TerminalNode KEYS() { return getToken(MySQLSQLStatementParser.KEYS, 0); }
		public IndexFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexFormat; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexFormatContext indexFormat() throws RecognitionException {
		IndexFormatContext _localctx = new IndexFormatContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_indexFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7445);
			_la = _input.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (INDEX - 68)) | (1L << (KEY - 68)) | (1L << (KEYS - 68)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySQLSQLStatementParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySQLSQLStatementParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySQLSQLStatementParser.HASH, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7447);
			match(USING);
			setState(7448);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithTypeContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySQLSQLStatementParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(MySQLSQLStatementParser.WITHOUT, 0); }
		public WithTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitWithType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithTypeContext withType() throws RecognitionException {
		WithTypeContext _localctx = new WithTypeContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_withType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7450);
			_la = _input.LA(1);
			if ( !(_la==WITH || _la==WITHOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VisibleTypeContext extends ParserRuleContext {
		public TerminalNode VISIBLE() { return getToken(MySQLSQLStatementParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySQLSQLStatementParser.INVISIBLE, 0); }
		public VisibleTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibleType; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitVisibleType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VisibleTypeContext visibleType() throws RecognitionException {
		VisibleTypeContext _localctx = new VisibleTypeContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_visibleType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7452);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PriorityContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(MySQLSQLStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySQLSQLStatementParser.DELAYED, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySQLSQLStatementParser.CONCURRENT, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySQLSQLStatementParser.HIGH_PRIORITY, 0); }
		public PriorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_priority; }
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLSQLStatementParserVisitor ) return ((MySQLSQLStatementParserVisitor<? extends T>)visitor).visitPriority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PriorityContext priority() throws RecognitionException {
		PriorityContext _localctx = new PriorityContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7454);
			_la = _input.LA(1);
			if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & ((1L << (DELAYED - 37)) | (1L << (HIGH_PRIORITY - 37)) | (1L << (LOW_PRIORITY - 37)))) != 0) || _la==CONCURRENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 317:
			return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 37);
		case 1:
			return precpred(_ctx, 28);
		case 2:
			return precpred(_ctx, 27);
		case 3:
			return precpred(_ctx, 26);
		case 4:
			return precpred(_ctx, 25);
		case 5:
			return precpred(_ctx, 24);
		case 6:
			return precpred(_ctx, 23);
		case 7:
			return precpred(_ctx, 22);
		case 8:
			return precpred(_ctx, 19);
		case 9:
			return precpred(_ctx, 17);
		case 10:
			return precpred(_ctx, 16);
		case 11:
			return precpred(_ctx, 14);
		case 12:
			return precpred(_ctx, 9);
		case 13:
			return precpred(_ctx, 4);
		case 14:
			return precpred(_ctx, 3);
		case 15:
			return precpred(_ctx, 2);
		case 16:
			return precpred(_ctx, 1);
		case 17:
			return precpred(_ctx, 38);
		case 18:
			return precpred(_ctx, 21);
		case 19:
			return precpred(_ctx, 20);
		case 20:
			return precpred(_ctx, 18);
		case 21:
			return precpred(_ctx, 15);
		case 22:
			return precpred(_ctx, 11);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u032a\u1d23\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\3\2\3\2\3\2\5\2\u0340\n\2\3\2"+
		"\5\2\u0343\n\2\7\2\u0345\n\2\f\2\16\2\u0348\13\2\3\2\5\2\u034b\n\2\3\2"+
		"\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u0357\n\3\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\5\4\u0381\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u038e\n"+
		"\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u039f"+
		"\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u03aa\n\7\3\b\3\b\3\b\5\b"+
		"\u03af\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u03bb\n\t\3\n\3"+
		"\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n"+
		"\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u03d6\n\n\3\13\3\13\3\13\3\13\5\13\u03dc"+
		"\n\13\3\f\3\f\3\f\5\f\u03e1\n\f\3\f\3\f\7\f\u03e5\n\f\f\f\16\f\u03e8\13"+
		"\f\3\r\3\r\3\r\5\r\u03ed\n\r\3\r\3\r\7\r\u03f1\n\r\f\r\16\r\u03f4\13\r"+
		"\3\16\3\16\5\16\u03f8\n\16\3\16\3\16\5\16\u03fc\n\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\16\5\16\u0405\n\16\3\16\5\16\u0408\n\16\3\16\5\16\u040b"+
		"\n\16\3\16\3\16\5\16\u040f\n\16\3\16\3\16\3\16\3\17\3\17\5\17\u0416\n"+
		"\17\3\17\5\17\u0419\n\17\3\17\3\17\3\17\5\17\u041e\n\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\7\17\u0426\n\17\f\17\16\17\u0429\13\17\3\17\3\17\7\17"+
		"\u042d\n\17\f\17\16\17\u0430\13\17\3\20\3\20\3\20\3\20\3\20\5\20\u0437"+
		"\n\20\3\20\5\20\u043a\n\20\3\21\3\21\3\21\5\21\u043f\n\21\3\22\3\22\5"+
		"\22\u0443\n\22\3\22\3\22\3\23\3\23\5\23\u0449\n\23\3\23\3\23\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0456\n\24\3\24\5\24\u0459\n"+
		"\24\3\24\3\24\5\24\u045d\n\24\3\24\5\24\u0460\n\24\3\24\3\24\5\24\u0464"+
		"\n\24\3\24\5\24\u0467\n\24\3\24\3\24\5\24\u046b\n\24\3\24\5\24\u046e\n"+
		"\24\3\24\5\24\u0471\n\24\3\24\3\24\5\24\u0475\n\24\3\24\5\24\u0478\n\24"+
		"\3\24\3\24\5\24\u047c\n\24\3\24\3\24\3\25\3\25\5\25\u0482\n\25\3\25\3"+
		"\25\3\25\3\25\5\25\u0488\n\25\3\25\3\25\7\25\u048c\n\25\f\25\16\25\u048f"+
		"\13\25\3\25\3\25\7\25\u0493\n\25\f\25\16\25\u0496\13\25\3\25\3\25\3\26"+
		"\3\26\5\26\u049c\n\26\3\26\3\26\3\26\3\26\5\26\u04a2\n\26\3\26\3\26\7"+
		"\26\u04a6\n\26\f\26\16\26\u04a9\13\26\3\26\3\26\3\26\3\26\7\26\u04af\n"+
		"\26\f\26\16\26\u04b2\13\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\7\27\u04c2\n\27\f\27\16\27\u04c5\13\27\3\27"+
		"\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\5\30\u04d7\n\30\3\31\3\31\5\31\u04db\n\31\3\31\3\31\5\31\u04df\n"+
		"\31\3\31\3\31\5\31\u04e3\n\31\3\31\3\31\3\31\7\31\u04e8\n\31\f\31\16\31"+
		"\u04eb\13\31\3\31\5\31\u04ee\n\31\5\31\u04f0\n\31\3\31\3\31\5\31\u04f4"+
		"\n\31\3\31\7\31\u04f7\n\31\f\31\16\31\u04fa\13\31\5\31\u04fc\n\31\3\31"+
		"\5\31\u04ff\n\31\3\31\5\31\u0502\n\31\3\31\5\31\u0505\n\31\3\31\5\31\u0508"+
		"\n\31\3\32\3\32\3\32\5\32\u050d\n\32\3\33\3\33\5\33\u0511\n\33\3\33\7"+
		"\33\u0514\n\33\f\33\16\33\u0517\13\33\3\34\3\34\3\34\3\35\3\35\3\35\3"+
		"\35\3\35\5\35\u0521\n\35\3\35\3\35\3\35\5\35\u0526\n\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u0534\n\35\f\35\16"+
		"\35\u0537\13\35\3\35\3\35\3\35\5\35\u053c\n\35\3\35\7\35\u053f\n\35\f"+
		"\35\16\35\u0542\13\35\5\35\u0544\n\35\3\36\3\36\5\36\u0548\n\36\5\36\u054a"+
		"\n\36\3\36\3\36\3\36\5\36\u054f\n\36\3\36\3\36\3\36\3\36\7\36\u0555\n"+
		"\36\f\36\16\36\u0558\13\36\3\36\3\36\7\36\u055c\n\36\f\36\16\36\u055f"+
		"\13\36\3\36\3\36\5\36\u0563\n\36\3\36\5\36\u0566\n\36\3\36\3\36\3\36\3"+
		"\36\7\36\u056c\n\36\f\36\16\36\u056f\13\36\3\36\3\36\7\36\u0573\n\36\f"+
		"\36\16\36\u0576\13\36\3\36\3\36\5\36\u057a\n\36\3\36\5\36\u057d\n\36\3"+
		"\36\3\36\3\36\3\36\7\36\u0583\n\36\f\36\16\36\u0586\13\36\3\36\3\36\7"+
		"\36\u058a\n\36\f\36\16\36\u058d\13\36\3\36\3\36\5\36\u0591\n\36\5\36\u0593"+
		"\n\36\3\36\3\36\5\36\u0597\n\36\3\36\5\36\u059a\n\36\3\36\5\36\u059d\n"+
		"\36\3\36\3\36\3\36\3\36\7\36\u05a3\n\36\f\36\16\36\u05a6\13\36\3\36\3"+
		"\36\7\36\u05aa\n\36\f\36\16\36\u05ad\13\36\3\36\3\36\5\36\u05b1\n\36\3"+
		"\36\5\36\u05b4\n\36\3\36\3\36\3\36\3\36\7\36\u05ba\n\36\f\36\16\36\u05bd"+
		"\13\36\3\36\3\36\7\36\u05c1\n\36\f\36\16\36\u05c4\13\36\3\36\3\36\5\36"+
		"\u05c8\n\36\3\36\5\36\u05cb\n\36\3\36\3\36\3\36\3\36\7\36\u05d1\n\36\f"+
		"\36\16\36\u05d4\13\36\3\36\3\36\7\36\u05d8\n\36\f\36\16\36\u05db\13\36"+
		"\3\36\3\36\5\36\u05df\n\36\5\36\u05e1\n\36\3\36\3\36\3\36\5\36\u05e6\n"+
		"\36\3\36\3\36\3\36\3\36\7\36\u05ec\n\36\f\36\16\36\u05ef\13\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\7\36\u05f8\n\36\f\36\16\36\u05fb\13\36\3"+
		"\36\3\36\3\36\5\36\u0600\n\36\3\36\7\36\u0603\n\36\f\36\16\36\u0606\13"+
		"\36\3\36\3\36\3\36\3\36\3\36\5\36\u060d\n\36\3\37\3\37\3\37\3\37\3\37"+
		"\5\37\u0614\n\37\3\37\5\37\u0617\n\37\3 \3 \3!\3!\3!\3!\3!\3!\5!\u0621"+
		"\n!\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0629\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#\3"+
		"#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u0645\n#\3$\3$\3"+
		"$\5$\u064a\n$\3$\3$\3$\3$\3$\3$\5$\u0652\n$\3$\5$\u0655\n$\3$\3$\3$\3"+
		"$\7$\u065b\n$\f$\16$\u065e\13$\3$\3$\5$\u0662\n$\3$\3$\3$\5$\u0667\n$"+
		"\3$\3$\3$\3$\5$\u066d\n$\3$\3$\3$\3$\7$\u0673\n$\f$\16$\u0676\13$\3$\3"+
		"$\3$\5$\u067b\n$\3$\5$\u067e\n$\3$\3$\3$\3$\7$\u0684\n$\f$\16$\u0687\13"+
		"$\3$\3$\5$\u068b\n$\3$\3$\3$\5$\u0690\n$\3$\3$\3$\3$\3$\3$\5$\u0698\n"+
		"$\3$\5$\u069b\n$\3$\3$\3$\3$\7$\u06a1\n$\f$\16$\u06a4\13$\3$\3$\5$\u06a8"+
		"\n$\3$\3$\3$\5$\u06ad\n$\3$\3$\3$\3$\3$\3$\7$\u06b5\n$\f$\16$\u06b8\13"+
		"$\3$\3$\3$\5$\u06bd\n$\3$\5$\u06c0\n$\3$\3$\3$\3$\7$\u06c6\n$\f$\16$\u06c9"+
		"\13$\3$\3$\5$\u06cd\n$\3$\3$\3$\5$\u06d2\n$\3$\3$\3$\3$\3$\3$\5$\u06da"+
		"\n$\3$\5$\u06dd\n$\3$\3$\3$\3$\7$\u06e3\n$\f$\16$\u06e6\13$\3$\3$\5$\u06ea"+
		"\n$\3$\3$\3$\5$\u06ef\n$\3$\3$\3$\3$\3$\3$\7$\u06f7\n$\f$\16$\u06fa\13"+
		"$\3$\3$\3$\5$\u06ff\n$\3$\5$\u0702\n$\3$\3$\3$\3$\7$\u0708\n$\f$\16$\u070b"+
		"\13$\3$\3$\5$\u070f\n$\5$\u0711\n$\3%\3%\3%\5%\u0716\n%\3%\3%\3%\3%\3"+
		"%\3%\5%\u071e\n%\3%\3%\3%\5%\u0723\n%\3%\3%\3%\3%\5%\u0729\n%\3%\3%\3"+
		"%\3%\7%\u072f\n%\f%\16%\u0732\13%\3%\3%\3%\5%\u0737\n%\5%\u0739\n%\3&"+
		"\3&\3&\5&\u073e\n&\3&\7&\u0741\n&\f&\16&\u0744\13&\3&\3&\3&\3&\7&\u074a"+
		"\n&\f&\16&\u074d\13&\3&\3&\5&\u0751\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\7\'"+
		"\u075a\n\'\f\'\16\'\u075d\13\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'"+
		"\3\'\3\'\7\'\u076b\n\'\f\'\16\'\u076e\13\'\3\'\3\'\5\'\u0772\n\'\3(\3"+
		"(\3(\7(\u0777\n(\f(\16(\u077a\13(\3)\5)\u077d\n)\3)\3)\5)\u0781\n)\3)"+
		"\3)\3)\5)\u0786\n)\3)\3)\3)\3)\5)\u078c\n)\3)\3)\3)\3)\5)\u0792\n)\3)"+
		"\3)\3)\5)\u0797\n)\3)\3)\3)\5)\u079c\n)\3)\3)\3)\5)\u07a1\n)\3)\3)\3)"+
		"\5)\u07a6\n)\3)\5)\u07a9\n)\3*\3*\5*\u07ad\n*\3+\3+\3+\3+\3+\3+\3+\3+"+
		"\3+\5+\u07b8\n+\3+\3+\5+\u07bc\n+\3+\5+\u07bf\n+\3,\3,\3,\3,\3,\3,\3,"+
		"\3,\3,\3,\3,\3,\5,\u07cd\n,\3,\5,\u07d0\n,\3,\3,\5,\u07d4\n,\3,\5,\u07d7"+
		"\n,\3,\3,\5,\u07db\n,\3,\5,\u07de\n,\3,\3,\5,\u07e2\n,\3,\5,\u07e5\n,"+
		"\3,\3,\5,\u07e9\n,\3,\5,\u07ec\n,\3,\5,\u07ef\n,\3,\3,\5,\u07f3\n,\3,"+
		"\5,\u07f6\n,\3,\3,\5,\u07fa\n,\3,\3,\3-\3-\5-\u0800\n-\3-\3-\3-\3-\3-"+
		"\3-\3-\3-\3-\3-\5-\u080c\n-\3-\3-\3.\3.\3.\3.\3.\5.\u0815\n.\3.\5.\u0818"+
		"\n.\3/\3/\3/\3\60\3\60\5\60\u081f\n\60\3\60\5\60\u0822\n\60\3\60\5\60"+
		"\u0825\n\60\3\60\3\60\3\60\5\60\u082a\n\60\3\60\3\60\3\60\3\60\3\60\3"+
		"\60\7\60\u0832\n\60\f\60\16\60\u0835\13\60\3\60\3\60\5\60\u0839\n\60\3"+
		"\60\3\60\3\60\5\60\u083e\n\60\3\61\3\61\5\61\u0842\n\61\3\61\3\61\3\61"+
		"\3\62\3\62\5\62\u0849\n\62\3\63\3\63\3\63\7\63\u084e\n\63\f\63\16\63\u0851"+
		"\13\63\3\63\3\63\3\63\5\63\u0856\n\63\3\63\3\63\3\63\3\63\7\63\u085c\n"+
		"\63\f\63\16\63\u085f\13\63\5\63\u0861\n\63\3\63\3\63\3\63\7\63\u0866\n"+
		"\63\f\63\16\63\u0869\13\63\5\63\u086b\n\63\5\63\u086d\n\63\3\64\3\64\3"+
		"\64\3\64\5\64\u0873\n\64\3\65\3\65\3\65\3\65\3\65\5\65\u087a\n\65\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0883\n\66\3\67\3\67\5\67\u0887\n"+
		"\67\3\67\3\67\38\38\38\39\39\39\3:\3:\3:\3:\3;\3;\3<\3<\3=\3=\3=\3>\5"+
		">\u089d\n>\3>\3>\3>\3?\3?\3?\3?\3?\5?\u08a7\n?\3?\3?\3?\3?\3?\3?\3?\3"+
		"?\3?\3?\3?\5?\u08b4\n?\3?\3?\3?\5?\u08b9\n?\3@\3@\3@\5@\u08be\n@\3@\6"+
		"@\u08c1\n@\r@\16@\u08c2\3@\3@\3@\3@\3@\3@\3@\3@\5@\u08cd\n@\3A\3A\3A\5"+
		"A\u08d2\nA\3A\6A\u08d5\nA\rA\16A\u08d6\3A\3A\3A\3A\3A\3A\3A\3A\5A\u08e1"+
		"\nA\3B\3B\5B\u08e5\nB\3B\3B\3B\3B\3B\5B\u08ec\nB\3B\3B\3B\5B\u08f1\nB"+
		"\3B\5B\u08f4\nB\3B\3B\3B\5B\u08f9\nB\3B\5B\u08fc\nB\3B\3B\5B\u0900\nB"+
		"\3B\3B\5B\u0904\nB\3C\3C\3C\3C\7C\u090a\nC\fC\16C\u090d\13C\3D\3D\3D\3"+
		"D\3D\3D\3D\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u091f\nE\3E\5E\u0922\nE\3E\5"+
		"E\u0925\nE\3E\3E\5E\u0929\nE\3E\3E\3F\3F\3F\3F\7F\u0931\nF\fF\16F\u0934"+
		"\13F\3G\3G\3G\3G\3G\3G\3G\3G\7G\u093e\nG\fG\16G\u0941\13G\3G\3G\3H\3H"+
		"\5H\u0947\nH\3H\5H\u094a\nH\3H\3H\3H\3H\3H\7H\u0951\nH\fH\16H\u0954\13"+
		"H\3H\5H\u0957\nH\3I\3I\3I\5I\u095c\nI\3I\3I\3I\3I\5I\u0962\nI\3I\3I\5"+
		"I\u0966\nI\3I\3I\3I\3I\7I\u096c\nI\fI\16I\u096f\13I\3I\3I\3I\3I\3I\3I"+
		"\5I\u0977\nI\3I\3I\3I\5I\u097c\nI\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u0988"+
		"\nI\3I\3I\3I\5I\u098d\nI\3I\5I\u0990\nI\3I\3I\3I\3I\3I\3I\3I\5I\u0999"+
		"\nI\3I\3I\3I\3I\3I\3I\3I\5I\u09a2\nI\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I"+
		"\u09ae\nI\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u09c1"+
		"\nI\3I\3I\3I\5I\u09c6\nI\3I\3I\3I\3I\5I\u09cc\nI\3I\3I\3I\3I\3I\7I\u09d3"+
		"\nI\fI\16I\u09d6\13I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3"+
		"I\3I\3I\3I\5I\u09ec\nI\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\7I\u09fb"+
		"\nI\fI\16I\u09fe\13I\3I\3I\3I\3I\3I\7I\u0a05\nI\fI\16I\u0a08\13I\3I\3"+
		"I\3I\3I\3I\3I\3I\7I\u0a11\nI\fI\16I\u0a14\13I\3I\3I\3I\3I\3I\3I\3I\7I"+
		"\u0a1d\nI\fI\16I\u0a20\13I\3I\3I\3I\3I\3I\3I\3I\3I\7I\u0a2a\nI\fI\16I"+
		"\u0a2d\13I\3I\3I\3I\3I\3I\7I\u0a34\nI\fI\16I\u0a37\13I\3I\3I\3I\3I\3I"+
		"\3I\3I\3I\3I\3I\3I\5I\u0a44\nI\3I\3I\3I\3I\3I\7I\u0a4b\nI\fI\16I\u0a4e"+
		"\13I\3I\3I\3I\3I\3I\7I\u0a55\nI\fI\16I\u0a58\13I\3I\3I\3I\3I\3I\7I\u0a5f"+
		"\nI\fI\16I\u0a62\13I\3I\3I\3I\3I\3I\7I\u0a69\nI\fI\16I\u0a6c\13I\3I\3"+
		"I\3I\3I\3I\7I\u0a73\nI\fI\16I\u0a76\13I\3I\3I\3I\3I\5I\u0a7c\nI\3J\3J"+
		"\3J\5J\u0a81\nJ\3K\3K\3K\3K\3K\5K\u0a88\nK\3L\3L\5L\u0a8c\nL\3M\3M\3M"+
		"\3M\3M\3M\3M\3M\3M\5M\u0a97\nM\3M\5M\u0a9a\nM\3M\3M\5M\u0a9e\nM\3M\3M"+
		"\3N\3N\3N\3N\5N\u0aa6\nN\3N\5N\u0aa9\nN\3N\3N\3N\5N\u0aae\nN\3N\3N\3N"+
		"\3N\3N\3N\7N\u0ab6\nN\fN\16N\u0ab9\13N\3N\3N\5N\u0abd\nN\3N\3N\3N\3N\5"+
		"N\u0ac3\nN\3N\3N\5N\u0ac7\nN\3O\3O\3O\5O\u0acc\nO\3O\3O\3P\3P\3P\5P\u0ad3"+
		"\nP\3P\3P\3Q\3Q\3Q\5Q\u0ada\nQ\3Q\3Q\3R\3R\3R\5R\u0ae1\nR\3R\3R\3R\3R"+
		"\7R\u0ae7\nR\fR\16R\u0aea\13R\3S\3S\5S\u0aee\nS\3T\3T\3T\3T\3T\3T\3T\3"+
		"T\3U\3U\3U\5U\u0afb\nU\3U\3U\3V\3V\3V\5V\u0b02\nV\3V\3V\3W\3W\3W\5W\u0b09"+
		"\nW\3W\3W\3X\3X\5X\u0b0f\nX\3X\3X\5X\u0b13\nX\3X\3X\3X\7X\u0b18\nX\fX"+
		"\16X\u0b1b\13X\3X\5X\u0b1e\nX\3Y\3Y\3Y\3Y\3Y\5Y\u0b25\nY\3Y\5Y\u0b28\n"+
		"Y\3Z\3Z\3Z\5Z\u0b2d\nZ\3Z\3Z\3[\3[\3[\5[\u0b34\n[\3[\3[\3[\7[\u0b39\n"+
		"[\f[\16[\u0b3c\13[\3[\5[\u0b3f\n[\3\\\3\\\3\\\3\\\3\\\7\\\u0b46\n\\\f"+
		"\\\16\\\u0b49\13\\\3]\3]\3]\3]\3^\3^\5^\u0b51\n^\3^\3^\3_\3_\3`\3`\5`"+
		"\u0b59\n`\3a\3a\5a\u0b5d\na\3b\3b\5b\u0b61\nb\3b\5b\u0b64\nb\3b\5b\u0b67"+
		"\nb\3b\5b\u0b6a\nb\3b\5b\u0b6d\nb\3b\5b\u0b70\nb\3b\5b\u0b73\nb\3b\5b"+
		"\u0b76\nb\3b\3b\3b\7b\u0b7b\nb\fb\16b\u0b7e\13b\3b\5b\u0b81\nb\3b\5b\u0b84"+
		"\nb\3b\5b\u0b87\nb\3b\5b\u0b8a\nb\3b\5b\u0b8d\nb\3b\5b\u0b90\nb\3b\5b"+
		"\u0b93\nb\3c\3c\3d\3d\3d\3d\5d\u0b9b\nd\3d\5d\u0b9e\nd\3d\5d\u0ba1\nd"+
		"\3e\3e\3e\3e\6e\u0ba7\ne\re\16e\u0ba8\3e\5e\u0bac\ne\3e\5e\u0baf\ne\3"+
		"e\5e\u0bb2\ne\3f\3f\3g\3g\5g\u0bb8\ng\3h\3h\5h\u0bbc\nh\3h\5h\u0bbf\n"+
		"h\3i\3i\5i\u0bc3\ni\3j\3j\3j\3k\3k\5k\u0bca\nk\3l\3l\5l\u0bce\nl\3l\5"+
		"l\u0bd1\nl\3l\3l\3l\3l\7l\u0bd7\nl\fl\16l\u0bda\13l\5l\u0bdc\nl\5l\u0bde"+
		"\nl\3l\3l\3l\3l\5l\u0be4\nl\3l\3l\3l\3l\3l\7l\u0beb\nl\fl\16l\u0bee\13"+
		"l\3l\3l\5l\u0bf2\nl\3l\3l\3l\3l\3l\3l\3l\3l\3l\5l\u0bfd\nl\3m\3m\6m\u0c01"+
		"\nm\rm\16m\u0c02\3n\3n\3n\3n\3n\7n\u0c0a\nn\fn\16n\u0c0d\13n\3n\3n\3o"+
		"\3o\3o\3o\5o\u0c15\no\3o\3o\3o\3o\7o\u0c1b\no\fo\16o\u0c1e\13o\3o\3o\3"+
		"o\3o\3o\3o\5o\u0c26\no\3o\3o\3o\3o\7o\u0c2c\no\fo\16o\u0c2f\13o\3o\3o"+
		"\3o\3o\3o\3o\5o\u0c37\no\3o\3o\3o\3o\7o\u0c3d\no\fo\16o\u0c40\13o\3o\3"+
		"o\3o\3o\3o\3o\5o\u0c48\no\3o\3o\3o\3o\7o\u0c4e\no\fo\16o\u0c51\13o\3o"+
		"\3o\3o\3o\3o\3o\5o\u0c59\no\3o\3o\3o\3o\7o\u0c5f\no\fo\16o\u0c62\13o\3"+
		"o\3o\3o\3o\3o\3o\5o\u0c6a\no\3o\3o\3o\3o\7o\u0c70\no\fo\16o\u0c73\13o"+
		"\3o\3o\5o\u0c77\no\3p\3p\3p\3p\3p\5p\u0c7e\np\3q\3q\3r\3r\3r\5r\u0c85"+
		"\nr\3s\3s\3s\3s\3s\3s\3s\7s\u0c8e\ns\fs\16s\u0c91\13s\3s\3s\5s\u0c95\n"+
		"s\3t\3t\3t\3u\3u\3u\3u\3u\7u\u0c9f\nu\fu\16u\u0ca2\13u\3u\5u\u0ca5\nu"+
		"\5u\u0ca7\nu\3u\5u\u0caa\nu\3v\3v\3v\3w\3w\3x\3x\3x\3x\3x\7x\u0cb6\nx"+
		"\fx\16x\u0cb9\13x\3x\5x\u0cbc\nx\3y\3y\5y\u0cc0\ny\3z\3z\3z\3z\5z\u0cc6"+
		"\nz\3z\3z\3z\3z\3z\5z\u0ccd\nz\3{\3{\3{\3{\7{\u0cd3\n{\f{\16{\u0cd6\13"+
		"{\3{\3{\3{\3{\3{\3{\3{\5{\u0cdf\n{\3{\3{\6{\u0ce3\n{\r{\16{\u0ce4\5{\u0ce7"+
		"\n{\3{\3{\6{\u0ceb\n{\r{\16{\u0cec\5{\u0cef\n{\5{\u0cf1\n{\3|\3|\3|\3"+
		"|\3|\3|\7|\u0cf9\n|\f|\16|\u0cfc\13|\5|\u0cfe\n|\3|\5|\u0d01\n|\3|\3|"+
		"\3|\3|\5|\u0d07\n|\3}\3}\3}\5}\u0d0c\n}\3~\3~\5~\u0d10\n~\3~\5~\u0d13"+
		"\n~\3~\5~\u0d16\n~\3~\5~\u0d19\n~\3~\5~\u0d1c\n~\3~\5~\u0d1f\n~\3~\5~"+
		"\u0d22\n~\3~\5~\u0d25\n~\3~\3~\3~\7~\u0d2a\n~\f~\16~\u0d2d\13~\3~\3~\3"+
		"~\3~\7~\u0d33\n~\f~\16~\u0d36\13~\3~\5~\u0d39\n~\3~\5~\u0d3c\n~\3~\5~"+
		"\u0d3f\n~\3~\5~\u0d42\n~\3~\5~\u0d45\n~\3~\5~\u0d48\n~\3~\5~\u0d4b\n~"+
		"\3\177\3\177\3\u0080\3\u0080\5\u0080\u0d51\n\u0080\3\u0080\5\u0080\u0d54"+
		"\n\u0080\3\u0080\5\u0080\u0d57\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\7\u0080\u0d5e\n\u0080\f\u0080\16\u0080\u0d61\13\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0d65\n\u0080\3\u0080\3\u0080\5\u0080\u0d69\n\u0080\3"+
		"\u0081\3\u0081\3\u0081\5\u0081\u0d6e\n\u0081\3\u0082\3\u0082\3\u0082\3"+
		"\u0082\7\u0082\u0d74\n\u0082\f\u0082\16\u0082\u0d77\13\u0082\3\u0083\3"+
		"\u0083\3\u0083\3\u0083\7\u0083\u0d7d\n\u0083\f\u0083\16\u0083\u0d80\13"+
		"\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\7\u0084\u0d8b\n\u0084\f\u0084\16\u0084\u0d8e\13\u0084\3\u0085"+
		"\3\u0085\5\u0085\u0d92\n\u0085\3\u0085\5\u0085\u0d95\n\u0085\3\u0085\3"+
		"\u0085\5\u0085\u0d99\n\u0085\3\u0085\5\u0085\u0d9c\n\u0085\3\u0085\5\u0085"+
		"\u0d9f\n\u0085\3\u0085\5\u0085\u0da2\n\u0085\3\u0086\3\u0086\3\u0086\3"+
		"\u0086\7\u0086\u0da8\n\u0086\f\u0086\16\u0086\u0dab\13\u0086\3\u0087\3"+
		"\u0087\3\u0087\3\u0087\3\u0088\3\u0088\5\u0088\u0db3\n\u0088\3\u0088\5"+
		"\u0088\u0db6\n\u0088\3\u0088\5\u0088\u0db9\n\u0088\3\u0088\3\u0088\3\u0088"+
		"\5\u0088\u0dbe\n\u0088\3\u0088\5\u0088\u0dc1\n\u0088\3\u0088\5\u0088\u0dc4"+
		"\n\u0088\3\u0088\5\u0088\u0dc7\n\u0088\3\u0089\3\u0089\3\u0089\3\u008a"+
		"\3\u008a\5\u008a\u0dce\n\u008a\3\u008a\5\u008a\u0dd1\n\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\7\u008a\u0dd8\n\u008a\f\u008a\16\u008a"+
		"\u0ddb\13\u008a\3\u008a\3\u008a\5\u008a\u0ddf\n\u008a\3\u008a\3\u008a"+
		"\3\u008b\3\u008b\3\u008b\5\u008b\u0de6\n\u008b\3\u008c\3\u008c\3\u008c"+
		"\3\u008d\3\u008d\3\u008d\5\u008d\u0dee\n\u008d\3\u008d\5\u008d\u0df1\n"+
		"\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0df6\n\u008d\3\u008d\3\u008d\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d\u0e00\n\u008d\f"+
		"\u008d\16\u008d\u0e03\13\u008d\3\u008d\3\u008d\5\u008d\u0e07\n\u008d\3"+
		"\u008d\3\u008d\3\u008d\5\u008d\u0e0c\n\u008d\3\u008d\3\u008d\6\u008d\u0e10"+
		"\n\u008d\r\u008d\16\u008d\u0e11\5\u008d\u0e14\n\u008d\3\u008d\3\u008d"+
		"\6\u008d\u0e18\n\u008d\r\u008d\16\u008d\u0e19\5\u008d\u0e1c\n\u008d\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0e22\n\u008d\3\u008d\3\u008d\3"+
		"\u008d\3\u008d\7\u008d\u0e28\n\u008d\f\u008d\16\u008d\u0e2b\13\u008d\3"+
		"\u008d\3\u008d\5\u008d\u0e2f\n\u008d\3\u008d\5\u008d\u0e32\n\u008d\3\u008e"+
		"\3\u008e\3\u008e\5\u008e\u0e37\n\u008e\3\u008e\5\u008e\u0e3a\n\u008e\3"+
		"\u008e\3\u008e\3\u008e\5\u008e\u0e3f\n\u008e\3\u008e\3\u008e\3\u008e\3"+
		"\u008e\3\u008e\3\u008e\5\u008e\u0e47\n\u008e\3\u008e\3\u008e\3\u008e\3"+
		"\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0e50\n\u008e\3\u008e\3\u008e\3"+
		"\u008e\3\u008e\5\u008e\u0e56\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e\7"+
		"\u008e\u0e5c\n\u008e\f\u008e\16\u008e\u0e5f\13\u008e\3\u008e\3\u008e\5"+
		"\u008e\u0e63\n\u008e\3\u008e\5\u008e\u0e66\n\u008e\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\7\u008f\u0e6c\n\u008f\f\u008f\16\u008f\u0e6f\13\u008f\3\u0090"+
		"\3\u0090\3\u0090\5\u0090\u0e74\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u0e7a\n\u0091\3\u0091\5\u0091\u0e7d\n\u0091\3\u0092\3\u0092\3"+
		"\u0092\3\u0092\5\u0092\u0e83\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3"+
		"\u0092\7\u0092\u0e8a\n\u0092\f\u0092\16\u0092\u0e8d\13\u0092\3\u0092\3"+
		"\u0092\5\u0092\u0e91\n\u0092\3\u0092\5\u0092\u0e94\n\u0092\3\u0092\5\u0092"+
		"\u0e97\n\u0092\3\u0092\5\u0092\u0e9a\n\u0092\3\u0093\3\u0093\3\u0093\3"+
		"\u0093\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ea4\n\u0094\3\u0094\3"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0eac\n\u0094\3\u0095\3"+
		"\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0eb4\n\u0095\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u0ebb\n\u0096\f\u0096\16\u0096"+
		"\u0ebe\13\u0096\5\u0096\u0ec0\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\5\u0097\u0ec9\n\u0097\3\u0098\3\u0098\5\u0098"+
		"\u0ecd\n\u0098\3\u0099\3\u0099\5\u0099\u0ed1\n\u0099\3\u0099\3\u0099\5"+
		"\u0099\u0ed5\n\u0099\3\u0099\5\u0099\u0ed8\n\u0099\3\u0099\5\u0099\u0edb"+
		"\n\u0099\3\u0099\5\u0099\u0ede\n\u0099\3\u009a\3\u009a\5\u009a\u0ee2\n"+
		"\u009a\3\u009a\3\u009a\5\u009a\u0ee6\n\u009a\3\u009a\5\u009a\u0ee9\n\u009a"+
		"\3\u009a\5\u009a\u0eec\n\u009a\3\u009a\5\u009a\u0eef\n\u009a\3\u009b\3"+
		"\u009b\3\u009b\3\u009c\3\u009c\5\u009c\u0ef6\n\u009c\3\u009c\3\u009c\5"+
		"\u009c\u0efa\n\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3"+
		"\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0f07\n\u009e\f\u009e\16"+
		"\u009e\u0f0a\13\u009e\3\u009f\3\u009f\5\u009f\u0f0e\n\u009f\3\u009f\5"+
		"\u009f\u0f11\n\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\5\u00a0\u0f17\n\u00a0"+
		"\3\u00a0\5\u00a0\u0f1a\n\u00a0\3\u00a0\5\u00a0\u0f1d\n\u00a0\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f2e\n\u00a3\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f37\n\u00a4"+
		"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0f3f\n\u00a5"+
		"\f\u00a5\16\u00a5\u0f42\13\u00a5\3\u00a5\5\u00a5\u0f45\n\u00a5\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\7\u00a6\u0f4d\n\u00a6\f\u00a6"+
		"\16\u00a6\u0f50\13\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\5\u00a7\u0f59\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9"+
		"\3\u00a9\5\u00a9\u0f61\n\u00a9\3\u00a9\5\u00a9\u0f64\n\u00a9\3\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0f6b\n\u00aa\f\u00aa\16\u00aa"+
		"\u0f6e\13\u00aa\5\u00aa\u0f70\n\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f74\n"+
		"\u00aa\3\u00aa\7\u00aa\u0f77\n\u00aa\f\u00aa\16\u00aa\u0f7a\13\u00aa\3"+
		"\u00aa\5\u00aa\u0f7d\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7"+
		"\u00ab\u0f84\n\u00ab\f\u00ab\16\u00ab\u0f87\13\u00ab\5\u00ab\u0f89\n\u00ab"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\7\u00ae\u0fa6\n\u00ae\f\u00ae\16\u00ae\u0fa9\13\u00ae\5\u00ae\u0fab\n"+
		"\u00ae\3\u00ae\5\u00ae\u0fae\n\u00ae\3\u00af\3\u00af\3\u00b0\3\u00b0\3"+
		"\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0fc0\n\u00b3\f\u00b3\16\u00b3\u0fc3"+
		"\13\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\7\u00b3\u0fcd\n\u00b3\f\u00b3\16\u00b3\u0fd0\13\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0fda\n\u00b3"+
		"\f\u00b3\16\u00b3\u0fdd\13\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u0fe7\n\u00b3\f\u00b3\16\u00b3\u0fea"+
		"\13\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\7\u00b3\u1000\n\u00b3\f\u00b3\16\u00b3\u1003"+
		"\13\u00b3\3\u00b3\3\u00b3\5\u00b3\u1007\n\u00b3\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u1025"+
		"\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1033\n\u00b7\3\u00b8\3\u00b8"+
		"\3\u00b8\7\u00b8\u1038\n\u00b8\f\u00b8\16\u00b8\u103b\13\u00b8\3\u00b8"+
		"\5\u00b8\u103e\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1044\n"+
		"\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u104c\n"+
		"\u00ba\5\u00ba\u104e\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1059\n\u00bc\3\u00bd\3\u00bd\3"+
		"\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1063\n\u00be\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\5\u00c0\u106e\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u107a\n\u00c3\3\u00c3\3\u00c3"+
		"\7\u00c3\u107e\n\u00c3\f\u00c3\16\u00c3\u1081\13\u00c3\3\u00c3\3\u00c3"+
		"\5\u00c3\u1085\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c6"+
		"\3\u00c6\5\u00c6\u108e\n\u00c6\3\u00c6\6\u00c6\u1091\n\u00c6\r\u00c6\16"+
		"\u00c6\u1092\3\u00c6\5\u00c6\u1096\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8\6\u00c8\u10a2\n\u00c8"+
		"\r\u00c8\16\u00c8\u10a3\3\u00c9\3\u00c9\3\u00c9\3\u00c9\6\u00c9\u10aa"+
		"\n\u00c9\r\u00c9\16\u00c9\u10ab\3\u00c9\7\u00c9\u10af\n\u00c9\f\u00c9"+
		"\16\u00c9\u10b2\13\u00c9\3\u00c9\3\u00c9\6\u00c9\u10b6\n\u00c9\r\u00c9"+
		"\16\u00c9\u10b7\5\u00c9\u10ba\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\6\u00ca\u10c3\n\u00ca\r\u00ca\16\u00ca\u10c4"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd"+
		"\5\u00cd\u10d0\n\u00cd\3\u00cd\3\u00cd\6\u00cd\u10d4\n\u00cd\r\u00cd\16"+
		"\u00cd\u10d5\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u10db\n\u00cd\3\u00ce\3\u00ce"+
		"\3\u00ce\5\u00ce\u10e0\n\u00ce\3\u00ce\3\u00ce\6\u00ce\u10e4\n\u00ce\r"+
		"\u00ce\16\u00ce\u10e5\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u10ed\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\5\u00d0"+
		"\u10f5\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\6\u00d0\u10fb\n\u00d0\r"+
		"\u00d0\16\u00d0\u10fc\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u1102\n\u00d0\3"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1108\n\u00d1\3\u00d1\5\u00d1\u110b"+
		"\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u1112\n\u00d1"+
		"\f\u00d1\16\u00d1\u1115\13\u00d1\3\u00d1\3\u00d1\5\u00d1\u1119\n\u00d1"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u111f\n\u00d2\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\7\u00d3\u1125\n\u00d3\f\u00d3\16\u00d3\u1128\13\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\5\u00d4\u1134\n\u00d4\3\u00d4\5\u00d4\u1137\n\u00d4\3\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\7\u00d6\u1146\n\u00d6\f\u00d6\16\u00d6\u1149"+
		"\13\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1150\n\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1158\n\u00d7"+
		"\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u115d\n\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\7\u00d8\u1162\n\u00d8\f\u00d8\16\u00d8\u1165\13\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\5\u00d8\u116a\n\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u116f\n"+
		"\u00d8\f\u00d8\16\u00d8\u1172\13\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\5\u00d8\u1178\n\u00d8\3\u00d8\7\u00d8\u117b\n\u00d8\f\u00d8\16\u00d8"+
		"\u117e\13\u00d8\5\u00d8\u1180\n\u00d8\5\u00d8\u1182\n\u00d8\3\u00d8\3"+
		"\u00d8\6\u00d8\u1186\n\u00d8\r\u00d8\16\u00d8\u1187\5\u00d8\u118a\n\u00d8"+
		"\3\u00d8\3\u00d8\7\u00d8\u118e\n\u00d8\f\u00d8\16\u00d8\u1191\13\u00d8"+
		"\5\u00d8\u1193\n\u00d8\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1198\n\u00d9\3"+
		"\u00d9\3\u00d9\3\u00d9\7\u00d9\u119d\n\u00d9\f\u00d9\16\u00d9\u11a0\13"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u11a6\n\u00d9\3\u00d9\7"+
		"\u00d9\u11a9\n\u00d9\f\u00d9\16\u00d9\u11ac\13\u00d9\5\u00d9\u11ae\n\u00d9"+
		"\5\u00d9\u11b0\n\u00d9\3\u00d9\3\u00d9\6\u00d9\u11b4\n\u00d9\r\u00d9\16"+
		"\u00d9\u11b5\5\u00d9\u11b8\n\u00d9\3\u00d9\3\u00d9\7\u00d9\u11bc\n\u00d9"+
		"\f\u00d9\16\u00d9\u11bf\13\u00d9\3\u00da\3\u00da\3\u00da\5\u00da\u11c4"+
		"\n\u00da\3\u00da\3\u00da\3\u00da\7\u00da\u11c9\n\u00da\f\u00da\16\u00da"+
		"\u11cc\13\u00da\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u11d2\n\u00db"+
		"\f\u00db\16\u00db\u11d5\13\u00db\3\u00db\3\u00db\5\u00db\u11d9\n\u00db"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u11e0\n\u00db\f\u00db"+
		"\16\u00db\u11e3\13\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u11e9"+
		"\n\u00db\3\u00db\7\u00db\u11ec\n\u00db\f\u00db\16\u00db\u11ef\13\u00db"+
		"\5\u00db\u11f1\n\u00db\5\u00db\u11f3\n\u00db\3\u00db\3\u00db\3\u00db\3"+
		"\u00db\7\u00db\u11f9\n\u00db\f\u00db\16\u00db\u11fc\13\u00db\5\u00db\u11fe"+
		"\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\7\u00dc\u1208\n\u00dc\f\u00dc\16\u00dc\u120b\13\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\5\u00dc\u1210\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\7\u00dd\u1217\n\u00dd\f\u00dd\16\u00dd\u121a\13\u00dd\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\7\u00de\u1220\n\u00de\f\u00de\16\u00de\u1223\13\u00de"+
		"\3\u00de\3\u00de\5\u00de\u1227\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\7\u00de\u122e\n\u00de\f\u00de\16\u00de\u1231\13\u00de\3\u00de"+
		"\3\u00de\3\u00de\5\u00de\u1236\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\7\u00de\u123f\n\u00de\f\u00de\16\u00de\u1242"+
		"\13\u00de\5\u00de\u1244\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\7\u00df\u124e\n\u00df\f\u00df\16\u00df\u1251"+
		"\13\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1260\n\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1"+
		"\u126b\n\u00e1\3\u00e1\5\u00e1\u126e\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u1278\n\u00e2\3\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1282\n"+
		"\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\5\u00e4\u128c\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\7\u00e6\u1296\n\u00e6\f\u00e6\16\u00e6\u1299\13\u00e6"+
		"\3\u00e6\3\u00e6\5\u00e6\u129d\n\u00e6\3\u00e7\3\u00e7\5\u00e7\u12a1\n"+
		"\u00e7\3\u00e7\3\u00e7\5\u00e7\u12a5\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u12ae\n\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u12c9\n\u00e7\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u12d8\n\u00e8\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00ea\3\u00ea\5\u00ea\u12e0\n\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\7\u00ea\u12e6\n\u00ea\f\u00ea\16\u00ea\u12e9\13\u00ea\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u12f0\n\u00eb\f\u00eb\16\u00eb"+
		"\u12f3\13\u00eb\3\u00eb\7\u00eb\u12f6\n\u00eb\f\u00eb\16\u00eb\u12f9\13"+
		"\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\7\u00ec\u1300\n\u00ec\f"+
		"\u00ec\16\u00ec\u1303\13\u00ec\3\u00ec\5\u00ec\u1306\n\u00ec\3\u00ed\3"+
		"\u00ed\5\u00ed\u130a\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7\u00ed\u1310"+
		"\n\u00ed\f\u00ed\16\u00ed\u1313\13\u00ed\3\u00ee\3\u00ee\5\u00ee\u1317"+
		"\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u131d\n\u00ee\f\u00ee"+
		"\16\u00ee\u1320\13\u00ee\3\u00ee\5\u00ee\u1323\n\u00ee\3\u00ee\5\u00ee"+
		"\u1326\n\u00ee\3\u00ee\5\u00ee\u1329\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3"+
		"\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u1332\n\u00ef\3\u00f0\3\u00f0\5"+
		"\u00f0\u1336\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3"+
		"\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\7\u00f3"+
		"\u134f\n\u00f3\f\u00f3\16\u00f3\u1352\13\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\7\u00f3\u1358\n\u00f3\f\u00f3\16\u00f3\u135b\13\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1361\n\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\5\u00f3\u1367\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\7\u00f3"+
		"\u136d\n\u00f3\f\u00f3\16\u00f3\u1370\13\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\5\u00f3\u137e\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\7\u00f3\u1384\n"+
		"\u00f3\f\u00f3\16\u00f3\u1387\13\u00f3\3\u00f3\5\u00f3\u138a\n\u00f3\3"+
		"\u00f4\3\u00f4\3\u00f4\5\u00f4\u138f\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1399\n\u00f5\3\u00f5\3"+
		"\u00f5\5\u00f5\u139d\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u13a3"+
		"\n\u00f5\3\u00f5\5\u00f5\u13a6\n\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5"+
		"\u13ab\n\u00f5\3\u00f5\3\u00f5\5\u00f5\u13af\n\u00f5\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\5\u00f5\u13b6\n\u00f5\3\u00f5\5\u00f5\u13b9\n\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u13bf\n\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\5\u00f5\u13d7\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u13e4"+
		"\n\u00f5\3\u00f5\5\u00f5\u13e7\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u13f1\n\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u13f9\n\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u13fd\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u1405\n\u00f5\3\u00f5\3\u00f5\5\u00f5\u1409\n\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1411\n\u00f5\3\u00f5\3"+
		"\u00f5\5\u00f5\u1415\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5"+
		"\u00f5\u141c\n\u00f5\3\u00f5\5\u00f5\u141f\n\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\7\u00f5\u1426\n\u00f5\f\u00f5\16\u00f5\u1429\13\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u142e\n\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\5\u00f5\u1434\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u143e\n\u00f5\5\u00f5\u1440\n\u00f5\3"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\5\u00f6\u144c\n\u00f6\3\u00f6\5\u00f6\u144f\n\u00f6\3\u00f7\3"+
		"\u00f7\3\u00f7\3\u00f7\5\u00f7\u1455\n\u00f7\3\u00f8\5\u00f8\u1458\n\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1460\n\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u1468\n\u00f8"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u146e\n\u00f9\3\u00f9\3\u00f9"+
		"\5\u00f9\u1472\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1480\n\u00fa"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\7\u00fc"+
		"\u148a\n\u00fc\f\u00fc\16\u00fc\u148d\13\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\7\u00fc\u1494\n\u00fc\f\u00fc\16\u00fc\u1497\13\u00fc"+
		"\3\u00fc\5\u00fc\u149a\n\u00fc\3\u00fc\5\u00fc\u149d\n\u00fc\3\u00fc\3"+
		"\u00fc\3\u00fc\3\u00fd\3\u00fd\5\u00fd\u14a4\n\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\7\u00fd\u14a9\n\u00fd\f\u00fd\16\u00fd\u14ac\13\u00fd\3\u00fe\3"+
		"\u00fe\5\u00fe\u14b0\n\u00fe\3\u00fe\6\u00fe\u14b3\n\u00fe\r\u00fe\16"+
		"\u00fe\u14b4\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\7"+
		"\u00ff\u14be\n\u00ff\f\u00ff\16\u00ff\u14c1\13\u00ff\3\u0100\3\u0100\3"+
		"\u0100\3\u0100\3\u0101\3\u0101\3\u0102\3\u0102\5\u0102\u14cb\n\u0102\3"+
		"\u0102\3\u0102\3\u0102\3\u0102\7\u0102\u14d1\n\u0102\f\u0102\16\u0102"+
		"\u14d4\13\u0102\3\u0102\3\u0102\5\u0102\u14d8\n\u0102\3\u0103\3\u0103"+
		"\3\u0103\5\u0103\u14dd\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u14ea\n\u0103"+
		"\5\u0103\u14ec\n\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u14f1\n\u0103\3"+
		"\u0103\3\u0103\3\u0103\3\u0103\7\u0103\u14f7\n\u0103\f\u0103\16\u0103"+
		"\u14fa\13\u0103\3\u0103\5\u0103\u14fd\n\u0103\5\u0103\u14ff\n\u0103\3"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1506\n\u0104\3\u0105\3"+
		"\u0105\3\u0105\3\u0105\3\u0105\3\u0105\7\u0105\u150e\n\u0105\f\u0105\16"+
		"\u0105\u1511\13\u0105\3\u0105\5\u0105\u1514\n\u0105\3\u0105\5\u0105\u1517"+
		"\n\u0105\3\u0105\5\u0105\u151a\n\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\7\u0105\u1520\n\u0105\f\u0105\16\u0105\u1523\13\u0105\3\u0105\3\u0105"+
		"\5\u0105\u1527\n\u0105\3\u0105\3\u0105\5\u0105\u152b\n\u0105\3\u0106\3"+
		"\u0106\3\u0106\3\u0106\5\u0106\u1531\n\u0106\3\u0107\3\u0107\3\u0107\3"+
		"\u0107\5\u0107\u1537\n\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108\3"+
		"\u0109\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a"+
		"\u1546\n\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u154b\n\u010a\3\u010b\3"+
		"\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\6\u010c\u155d\n\u010c"+
		"\r\u010c\16\u010c\u155e\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d"+
		"\u1566\n\u010d\5\u010d\u1568\n\u010d\3\u010e\3\u010e\3\u010e\6\u010e\u156d"+
		"\n\u010e\r\u010e\16\u010e\u156e\5\u010e\u1571\n\u010e\3\u010f\3\u010f"+
		"\5\u010f\u1575\n\u010f\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\3\u0112"+
		"\3\u0112\5\u0112\u157e\n\u0112\3\u0112\3\u0112\5\u0112\u1582\n\u0112\3"+
		"\u0112\5\u0112\u1585\n\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u158a\n\u0112"+
		"\3\u0112\3\u0112\5\u0112\u158e\n\u0112\5\u0112\u1590\n\u0112\3\u0113\3"+
		"\u0113\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u15a0\n\u0115\3\u0115\3\u0115"+
		"\3\u0116\3\u0116\3\u0116\7\u0116\u15a7\n\u0116\f\u0116\16\u0116\u15aa"+
		"\13\u0116\3\u0117\3\u0117\3\u0117\7\u0117\u15af\n\u0117\f\u0117\16\u0117"+
		"\u15b2\13\u0117\3\u0118\3\u0118\3\u0118\3\u0118\7\u0118\u15b8\n\u0118"+
		"\f\u0118\16\u0118\u15bb\13\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\5\u0118\u15c2\n\u0118\3\u0119\3\u0119\5\u0119\u15c6\n\u0119\3\u011a\3"+
		"\u011a\3\u011a\5\u011a\u15cb\n\u011a\3\u011a\3\u011a\3\u011a\7\u011a\u15d0"+
		"\n\u011a\f\u011a\16\u011a\u15d3\13\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\5\u011a\u15db\n\u011a\3\u011a\3\u011a\3\u011a\7\u011a"+
		"\u15e0\n\u011a\f\u011a\16\u011a\u15e3\13\u011a\5\u011a\u15e5\n\u011a\3"+
		"\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\7\u011a\u15ee\n"+
		"\u011a\f\u011a\16\u011a\u15f1\13\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\5\u011a\u15f8\n\u011a\3\u011a\3\u011a\3\u011a\7\u011a\u15fd\n"+
		"\u011a\f\u011a\16\u011a\u1600\13\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\5\u011a\u1607\n\u011a\3\u011a\3\u011a\3\u011a\7\u011a\u160c\n"+
		"\u011a\f\u011a\16\u011a\u160f\13\u011a\3\u011a\5\u011a\u1612\n\u011a\3"+
		"\u011a\3\u011a\5\u011a\u1616\n\u011a\3\u011a\3\u011a\5\u011a\u161a\n\u011a"+
		"\3\u011b\3\u011b\3\u011c\3\u011c\3\u011d\3\u011d\3\u011e\3\u011e\3\u011f"+
		"\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1634\n\u0120"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u163d"+
		"\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1644\n\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u164b\n\u0122\3\u0122"+
		"\5\u0122\u164e\n\u0122\3\u0122\5\u0122\u1651\n\u0122\3\u0122\3\u0122\3"+
		"\u0122\3\u0122\3\u0122\5\u0122\u1658\n\u0122\3\u0122\5\u0122\u165b\n\u0122"+
		"\3\u0122\5\u0122\u165e\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\5\u0122\u1665\n\u0122\3\u0122\5\u0122\u1668\n\u0122\3\u0122\5\u0122\u166b"+
		"\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1672\n\u0122"+
		"\3\u0122\5\u0122\u1675\n\u0122\3\u0122\5\u0122\u1678\n\u0122\3\u0122\3"+
		"\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u167f\n\u0122\3\u0122\5\u0122\u1682"+
		"\n\u0122\3\u0122\5\u0122\u1685\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\5\u0122\u168c\n\u0122\3\u0122\5\u0122\u168f\n\u0122\3\u0122\5"+
		"\u0122\u1692\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1699"+
		"\n\u0122\3\u0122\3\u0122\5\u0122\u169d\n\u0122\3\u0122\5\u0122\u16a0\n"+
		"\u0122\3\u0122\5\u0122\u16a3\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3"+
		"\u0122\5\u0122\u16aa\n\u0122\3\u0122\3\u0122\5\u0122\u16ae\n\u0122\3\u0122"+
		"\5\u0122\u16b1\n\u0122\3\u0122\5\u0122\u16b4\n\u0122\3\u0122\3\u0122\3"+
		"\u0122\3\u0122\3\u0122\5\u0122\u16bb\n\u0122\3\u0122\3\u0122\5\u0122\u16bf"+
		"\n\u0122\3\u0122\5\u0122\u16c2\n\u0122\3\u0122\5\u0122\u16c5\n\u0122\3"+
		"\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u16cc\n\u0122\3\u0122\3"+
		"\u0122\5\u0122\u16d0\n\u0122\3\u0122\5\u0122\u16d3\n\u0122\3\u0122\5\u0122"+
		"\u16d6\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u16dd\n"+
		"\u0122\f\u0122\16\u0122\u16e0\13\u0122\3\u0122\3\u0122\5\u0122\u16e4\n"+
		"\u0122\3\u0122\5\u0122\u16e7\n\u0122\3\u0122\5\u0122\u16ea\n\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u16f1\n\u0122\f\u0122\16\u0122"+
		"\u16f4\13\u0122\3\u0122\3\u0122\5\u0122\u16f8\n\u0122\3\u0122\5\u0122"+
		"\u16fb\n\u0122\3\u0122\5\u0122\u16fe\n\u0122\3\u0122\3\u0122\3\u0122\3"+
		"\u0122\3\u0122\3\u0122\7\u0122\u1706\n\u0122\f\u0122\16\u0122\u1709\13"+
		"\u0122\3\u0122\3\u0122\5\u0122\u170d\n\u0122\3\u0122\5\u0122\u1710\n\u0122"+
		"\3\u0122\5\u0122\u1713\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\7\u0122\u171a\n\u0122\f\u0122\16\u0122\u171d\13\u0122\3\u0122\3\u0122"+
		"\5\u0122\u1721\n\u0122\3\u0122\5\u0122\u1724\n\u0122\3\u0122\5\u0122\u1727"+
		"\n\u0122\5\u0122\u1729\n\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123"+
		"\5\u0123\u1730\n\u0123\3\u0123\5\u0123\u1733\n\u0123\3\u0123\5\u0123\u1736"+
		"\n\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u173e"+
		"\n\u0123\3\u0123\5\u0123\u1741\n\u0123\3\u0123\5\u0123\u1744\n\u0123\3"+
		"\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u174b\n\u0123\3\u0123\5"+
		"\u0123\u174e\n\u0123\3\u0123\5\u0123\u1751\n\u0123\3\u0123\3\u0123\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\5\u0123\u1759\n\u0123\3\u0123\5\u0123\u175c\n"+
		"\u0123\3\u0123\5\u0123\u175f\n\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3"+
		"\u0123\5\u0123\u1766\n\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5"+
		"\u0123\u176d\n\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u1772\n\u0123\3\u0123"+
		"\5\u0123\u1775\n\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123"+
		"\u177c\n\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u1783\n"+
		"\u0123\3\u0123\5\u0123\u1786\n\u0123\3\u0123\5\u0123\u1789\n\u0123\3\u0123"+
		"\3\u0123\3\u0123\5\u0123\u178e\n\u0123\3\u0123\5\u0123\u1791\n\u0123\3"+
		"\u0123\3\u0123\3\u0123\5\u0123\u1796\n\u0123\3\u0123\5\u0123\u1799\n\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\7\u0123\u17a0\n\u0123\f\u0123"+
		"\16\u0123\u17a3\13\u0123\3\u0123\3\u0123\5\u0123\u17a7\n\u0123\3\u0123"+
		"\5\u0123\u17aa\n\u0123\3\u0123\5\u0123\u17ad\n\u0123\3\u0123\3\u0123\3"+
		"\u0123\3\u0123\3\u0123\7\u0123\u17b4\n\u0123\f\u0123\16\u0123\u17b7\13"+
		"\u0123\3\u0123\3\u0123\5\u0123\u17bb\n\u0123\3\u0123\5\u0123\u17be\n\u0123"+
		"\3\u0123\5\u0123\u17c1\n\u0123\5\u0123\u17c3\n\u0123\3\u0124\3\u0124\3"+
		"\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u17cb\n\u0124\3\u0124\3\u0124\3"+
		"\u0124\3\u0124\3\u0124\5\u0124\u17d2\n\u0124\3\u0124\3\u0124\3\u0124\3"+
		"\u0124\3\u0124\5\u0124\u17d9\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3"+
		"\u0124\5\u0124\u17e0\n\u0124\5\u0124\u17e2\n\u0124\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u17ec\n\u0125\3\u0126"+
		"\3\u0126\5\u0126\u17f0\n\u0126\3\u0127\3\u0127\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u17f7\n\u0128\3\u0128\3\u0128\7\u0128\u17fb\n\u0128\f\u0128\16"+
		"\u0128\u17fe\13\u0128\3\u0128\5\u0128\u1801\n\u0128\3\u0129\3\u0129\3"+
		"\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1809\n\u0129\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\6\u012a\u180f\n\u012a\r\u012a\16\u012a\u1810\5\u012a\u1813"+
		"\n\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u181b"+
		"\n\u012b\3\u012b\3\u012b\5\u012b\u181f\n\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1831\n\u012b\3\u012c\3\u012c"+
		"\3\u012d\5\u012d\u1836\n\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u183b\n"+
		"\u012d\3\u012e\3\u012e\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132"+
		"\u184d\n\u0132\3\u0132\3\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\5\u0133\u1856\n\u0133\3\u0133\3\u0133\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\5\u0134\u185f\n\u0134\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\5\u0135\u1868\n\u0135\3\u0135\3\u0135\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\7\u0136\u1871\n\u0136\f\u0136\16\u0136\u1874"+
		"\13\u0136\3\u0136\3\u0136\3\u0137\5\u0137\u1879\n\u0137\3\u0137\3\u0137"+
		"\5\u0137\u187d\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\7\u0138"+
		"\u1884\n\u0138\f\u0138\16\u0138\u1887\13\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\3\u0138\5\u0138\u188e\n\u0138\3\u0138\3\u0138\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u18a3\n\u0139"+
		"\3\u013a\3\u013a\5\u013a\u18a7\n\u013a\3\u013a\6\u013a\u18aa\n\u013a\r"+
		"\u013a\16\u013a\u18ab\3\u013a\5\u013a\u18af\n\u013a\3\u013a\3\u013a\3"+
		"\u013b\3\u013b\5\u013b\u18b5\n\u013b\3\u013b\3\u013b\3\u013b\3\u013c\3"+
		"\u013c\3\u013c\3\u013d\3\u013d\3\u013d\3\u013d\7\u013d\u18c1\n\u013d\f"+
		"\u013d\16\u013d\u18c4\13\u013d\3\u013d\3\u013d\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u18d8\n\u013e\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\7\u013f\u18fa\n\u013f\f\u013f\16\u013f\u18fd"+
		"\13\u013f\5\u013f\u18ff\n\u013f\3\u013f\5\u013f\u1902\n\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1954"+
		"\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1975\n\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\5\u013f\u197b\n\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\5\u013f\u1981\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\5\u013f\u199a\n\u013f\3\u013f\3\u013f\3\u013f\7\u013f\u199f\n\u013f\f"+
		"\u013f\16\u013f\u19a2\13\u013f\5\u013f\u19a4\n\u013f\3\u013f\3\u013f\3"+
		"\u013f\3\u013f\5\u013f\u19aa\n\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u19af"+
		"\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\7\u013f\u19b6\n\u013f"+
		"\f\u013f\16\u013f\u19b9\13\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f"+
		"\u19bf\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u19c5\n\u013f\3"+
		"\u013f\3\u013f\3\u013f\5\u013f\u19ca\n\u013f\3\u013f\3\u013f\3\u013f\3"+
		"\u013f\7\u013f\u19d0\n\u013f\f\u013f\16\u013f\u19d3\13\u013f\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u19e4\n\u0140\3\u0141"+
		"\3\u0141\3\u0141\3\u0142\3\u0142\5\u0142\u19eb\n\u0142\3\u0142\3\u0142"+
		"\3\u0143\3\u0143\5\u0143\u19f1\n\u0143\3\u0143\3\u0143\3\u0144\5\u0144"+
		"\u19f6\n\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u19fb\n\u0144\3\u0144\3"+
		"\u0144\3\u0145\5\u0145\u1a00\n\u0145\3\u0145\3\u0145\5\u0145\u1a04\n\u0145"+
		"\3\u0145\3\u0145\3\u0146\3\u0146\5\u0146\u1a0a\n\u0146\3\u0146\3\u0146"+
		"\3\u0147\5\u0147\u1a0f\n\u0147\3\u0147\3\u0147\5\u0147\u1a13\n\u0147\3"+
		"\u0147\3\u0147\3\u0148\3\u0148\5\u0148\u1a19\n\u0148\3\u0148\3\u0148\3"+
		"\u0149\3\u0149\5\u0149\u1a1f\n\u0149\3\u0149\3\u0149\3\u014a\3\u014a\5"+
		"\u014a\u1a25\n\u014a\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\5\u014b\u1a2c"+
		"\n\u014b\3\u014b\3\u014b\3\u014c\3\u014c\3\u014c\5\u014c\u1a33\n\u014c"+
		"\3\u014c\3\u014c\3\u014d\3\u014d\5\u014d\u1a39\n\u014d\3\u014d\3\u014d"+
		"\3\u014e\3\u014e\5\u014e\u1a3f\n\u014e\3\u014e\3\u014e\3\u014f\3\u014f"+
		"\5\u014f\u1a45\n\u014f\3\u014f\3\u014f\3\u0150\3\u0150\5\u0150\u1a4b\n"+
		"\u0150\3\u0150\3\u0150\3\u0151\3\u0151\5\u0151\u1a51\n\u0151\3\u0151\3"+
		"\u0151\3\u0152\3\u0152\5\u0152\u1a57\n\u0152\3\u0152\3\u0152\3\u0153\3"+
		"\u0153\5\u0153\u1a5d\n\u0153\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u1a63"+
		"\n\u0154\3\u0154\3\u0154\3\u0155\3\u0155\5\u0155\u1a69\n\u0155\3\u0155"+
		"\3\u0155\3\u0156\3\u0156\5\u0156\u1a6f\n\u0156\3\u0156\3\u0156\3\u0157"+
		"\3\u0157\5\u0157\u1a75\n\u0157\3\u0157\3\u0157\3\u0158\3\u0158\5\u0158"+
		"\u1a7b\n\u0158\3\u0158\3\u0158\3\u0159\3\u0159\5\u0159\u1a81\n\u0159\3"+
		"\u0159\3\u0159\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u1a89\n\u015a\3"+
		"\u015b\3\u015b\5\u015b\u1a8d\n\u015b\3\u015b\3\u015b\3\u015c\3\u015c\3"+
		"\u015c\3\u015c\3\u015d\3\u015d\3\u015e\3\u015e\3\u015f\3\u015f\3\u0160"+
		"\3\u0160\3\u0161\3\u0161\5\u0161\u1a9f\n\u0161\3\u0162\3\u0162\3\u0162"+
		"\3\u0163\3\u0163\3\u0163\3\u0164\3\u0164\5\u0164\u1aa9\n\u0164\3\u0164"+
		"\3\u0164\5\u0164\u1aad\n\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\7\u0166\u1ac0\n\u0166\f\u0166\16\u0166\u1ac3"+
		"\13\u0166\3\u0166\3\u0166\5\u0166\u1ac7\n\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\5\u0166\u1ae4\n\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\5\u0166\u1aef\n\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\5\u0166\u1af7\n\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\5\u0166\u1b0d\n\u0166\3\u0166"+
		"\5\u0166\u1b10\n\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\5\u0166\u1b1b\n\u0166\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\5\u0167\u1b29\n\u0167\3\u0168\3\u0168\3\u0169\3\u0169\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a\3\u016a"+
		"\3\u016a\5\u016a\u1b3b\n\u016a\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1b46\n\u016b\3\u016b\3\u016b"+
		"\3\u016c\3\u016c\3\u016c\5\u016c\u1b4d\n\u016c\3\u016c\5\u016c\u1b50\n"+
		"\u016c\3\u016c\5\u016c\u1b53\n\u016c\3\u016c\3\u016c\3\u016c\3\u016d\3"+
		"\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u1b5d\n\u016d\3\u016d\3\u016d\3"+
		"\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\5\u016f\u1b6d\n\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171"+
		"\3\u0171\5\u0171\u1b7c\n\u0171\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171"+
		"\7\u0171\u1b83\n\u0171\f\u0171\16\u0171\u1b86\13\u0171\3\u0171\3\u0171"+
		"\3\u0171\3\u0171\3\u0171\3\u0171\7\u0171\u1b8e\n\u0171\f\u0171\16\u0171"+
		"\u1b91\13\u0171\5\u0171\u1b93\n\u0171\3\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0172\7\u0172\u1b9a\n\u0172\f\u0172\16\u0172\u1b9d\13\u0172\3\u0172"+
		"\5\u0172\u1ba0\n\u0172\3\u0172\5\u0172\u1ba3\n\u0172\3\u0172\5\u0172\u1ba6"+
		"\n\u0172\3\u0172\5\u0172\u1ba9\n\u0172\3\u0172\5\u0172\u1bac\n\u0172\3"+
		"\u0172\5\u0172\u1baf\n\u0172\3\u0172\5\u0172\u1bb2\n\u0172\3\u0172\5\u0172"+
		"\u1bb5\n\u0172\3\u0172\5\u0172\u1bb8\n\u0172\3\u0172\3\u0172\3\u0173\3"+
		"\u0173\3\u0174\3\u0174\3\u0174\5\u0174\u1bc1\n\u0174\3\u0175\3\u0175\3"+
		"\u0175\3\u0176\5\u0176\u1bc7\n\u0176\3\u0176\3\u0176\3\u0176\3\u0176\3"+
		"\u0177\3\u0177\3\u0177\3\u0177\3\u0178\3\u0178\5\u0178\u1bd3\n\u0178\3"+
		"\u0178\5\u0178\u1bd6\n\u0178\3\u0178\5\u0178\u1bd9\n\u0178\3\u0179\3\u0179"+
		"\3\u0179\3\u0179\3\u017a\3\u017a\5\u017a\u1be1\n\u017a\3\u017a\3\u017a"+
		"\3\u017a\5\u017a\u1be6\n\u017a\3\u017a\5\u017a\u1be9\n\u017a\3\u017a\5"+
		"\u017a\u1bec\n\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3"+
		"\u017b\3\u017b\3\u017b\5\u017b\u1bf7\n\u017b\3\u017b\3\u017b\3\u017b\3"+
		"\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\5\u017c\u1c05\n\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\7\u017d\u1c0f\n\u017d\f\u017d\16\u017d\u1c12\13\u017d"+
		"\3\u017d\3\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1c1b"+
		"\n\u017e\3\u017e\5\u017e\u1c1e\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\5\u017e\u1c24\n\u017e\3\u017e\3\u017e\5\u017e\u1c28\n\u017e\3\u017e\5"+
		"\u017e\u1c2b\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1c32"+
		"\n\u017e\3\u017e\5\u017e\u1c35\n\u017e\3\u017e\3\u017e\5\u017e\u1c39\n"+
		"\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e"+
		"\u1c42\n\u017e\3\u017f\3\u017f\3\u017f\5\u017f\u1c47\n\u017f\3\u017f\3"+
		"\u017f\5\u017f\u1c4b\n\u017f\3\u017f\5\u017f\u1c4e\n\u017f\3\u017f\5\u017f"+
		"\u1c51\n\u017f\5\u017f\u1c53\n\u017f\3\u017f\3\u017f\7\u017f\u1c57\n\u017f"+
		"\f\u017f\16\u017f\u1c5a\13\u017f\3\u017f\5\u017f\u1c5d\n\u017f\3\u017f"+
		"\5\u017f\u1c60\n\u017f\3\u017f\3\u017f\3\u0180\3\u0180\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\5\u0182\u1c74\n\u0182\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u1c7e\n\u0183\3\u0184"+
		"\3\u0184\3\u0184\5\u0184\u1c83\n\u0184\3\u0184\3\u0184\3\u0184\5\u0184"+
		"\u1c88\n\u0184\3\u0184\5\u0184\u1c8b\n\u0184\3\u0184\3\u0184\3\u0184\5"+
		"\u0184\u1c90\n\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3"+
		"\u0185\5\u0185\u1c99\n\u0185\3\u0185\3\u0185\5\u0185\u1c9d\n\u0185\5\u0185"+
		"\u1c9f\n\u0185\3\u0186\3\u0186\3\u0186\5\u0186\u1ca4\n\u0186\3\u0186\3"+
		"\u0186\5\u0186\u1ca8\n\u0186\3\u0186\3\u0186\7\u0186\u1cac\n\u0186\f\u0186"+
		"\16\u0186\u1caf\13\u0186\5\u0186\u1cb1\n\u0186\3\u0186\3\u0186\5\u0186"+
		"\u1cb5\n\u0186\3\u0186\5\u0186\u1cb8\n\u0186\3\u0186\3\u0186\3\u0187\3"+
		"\u0187\3\u0187\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189\3\u0189"+
		"\3\u0189\3\u018a\5\u018a\u1cc8\n\u018a\3\u018a\3\u018a\5\u018a\u1ccc\n"+
		"\u018a\5\u018a\u1cce\n\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\7"+
		"\u018b\u1cd5\n\u018b\f\u018b\16\u018b\u1cd8\13\u018b\3\u018c\3\u018c\3"+
		"\u018c\3\u018d\3\u018d\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e"+
		"\5\u018e\u1ce5\n\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f"+
		"\3\u018f\5\u018f\u1cee\n\u018f\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\7\u0190\u1cf5\n\u0190\f\u0190\16\u0190\u1cf8\13\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0191\3\u0191\5\u0191\u1cff\n\u0191\3\u0191\3\u0191\3\u0192"+
		"\3\u0192\3\u0192\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0197\3\u0197\3\u0198\3\u0198"+
		"\3\u0199\3\u0199\3\u019a\3\u019a\3\u019b\3\u019b\3\u019b\3\u019c\3\u019c"+
		"\3\u019d\3\u019d\3\u019e\3\u019e\3\u019e\2\3\u027c\u019f\2\4\6\b\n\f\16"+
		"\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bd"+
		"fhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092"+
		"\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa"+
		"\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2"+
		"\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da"+
		"\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2"+
		"\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a"+
		"\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122"+
		"\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a"+
		"\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152"+
		"\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a"+
		"\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182"+
		"\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a"+
		"\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2"+
		"\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca"+
		"\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2"+
		"\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa"+
		"\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212"+
		"\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a"+
		"\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242"+
		"\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a"+
		"\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272"+
		"\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a"+
		"\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2"+
		"\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba"+
		"\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2"+
		"\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea"+
		"\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302"+
		"\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a"+
		"\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332"+
		"\u0334\u0336\u0338\u033a\2h\b\2&&\u0120\u0120\u015f\u015f\u0190\u0190"+
		"\u0206\u0206\u020c\u020c\6\2&&\u013f\u013f\u019e\u019e\u01e3\u01e3\5\2"+
		"&&\u0130\u0130\u014b\u014b\5\2&&\u012c\u012c\u0270\u0270\5\2\u014f\u014f"+
		"\u01ad\u01ad\u01e5\u01e5\4\2\16\16\u00f5\u00f5\5\2((KK\u00ab\u00ab\4\2"+
		"\u014d\u014d\u01b6\u01b6\4\2\u0126\u0126\u0163\u0163\4\2\u0108\u0108\u0171"+
		"\u0171\5\2EEIItt\5\2&&\u0120\u0120\u015f\u015f\4\2\f\f\u00a2\u00a2\4\2"+
		"\7\7//\5\2\u0190\u0190\u0206\u0206\u020c\u020c\4\2\23\23\u0087\u0087\3"+
		"\2\u01f2\u01f3\4\2\b\b,-\4\2\b\b,,\6\2PP\u009e\u009e\u02aa\u02aa\u02c0"+
		"\u02cb\4\2\u0112\u0112\u0147\u0147\4\2\u00ab\u00ab\u01e2\u01e2\4\2\u00af"+
		"\u00af\u0217\u0217\4\2DD\u0085\u0085\4\2ZZ\u01db\u01db\6\2\u014a\u014a"+
		"\u016c\u016c\u019b\u019b\u01ba\u01ba\4\2\u00cb\u00cb\u0174\u0174\7\2`"+
		"`\u0179\u017a\u017c\u017c\u0180\u0188\u01c6\u01c6\6\2\u0176\u0177\u017b"+
		"\u017b\u017d\u017e\u01c7\u01c7\5\2aa\u0175\u0175\u017f\u017f\4\2\u0165"+
		"\u0165\u01f4\u01f4\4\2\u01ee\u01ee\u01f0\u01f0\4\2\u0100\u0100\u01f5\u01f5"+
		"\4\2PP\u01d5\u01d5\4\2//\u0124\u0124\3\3\u02ab\u02ab\5\2\35\35\66\66\u00a6"+
		"\u00a6\5\2{{\u009f\u009f\u0150\u0150\4\2\\\\\u00a9\u00a9\4\2\u010e\u010e"+
		"\u01e6\u01e6\4\2$$\u0219\u0219\4\2jj\u0171\u0171\4\2\u0143\u0143\u01c0"+
		"\u01c0\6\2\u00bc\u00bc\u00be\u00be\u00c1\u00c1\u01fd\u01fd\4\2\u0152\u0152"+
		"\u01e1\u01e1\4\2\u0101\u0101\u01c8\u01c8\4\2==EE\4\2##\u008d\u008d\b\2"+
		"{{\u009f\u009f\u00a4\u00a4\u013b\u013b\u0150\u0150\u0219\u0219\4\2\u0195"+
		"\u0195\u01fa\u01fa\4\2\u0138\u0138\u021b\u021b\4\2{{\u0150\u0150\4\2\u01fa"+
		"\u01fa\u0218\u0218\4\2\u011b\u011b\u01bf\u01bf\b\2\u00cb\u00cb\u0135\u0135"+
		"\u0137\u0137\u0151\u0151\u01c5\u01c5\u01e7\u01e7\4\2)*\67\67\5\2\u0143"+
		"\u0143\u01af\u01af\u02ce\u02ce\4\2\u0169\u0169\u0208\u0208\3\2\u026b\u0275"+
		"\4\2kk\u02b4\u02b4\4\2\u00cb\u00cb\u0199\u0199\4\2\u00c4\u00c5\u00c7\u00c7"+
		"\4\2\u00aa\u00aa\u01e4\u01e4\5\2\r\r))\u0285\u0285\5\2\u00d6\u00d6\u00dc"+
		"\u00dd\u00e2\u00e2\5\2\u00d7\u00d9\u00de\u00e1\u00e3\u00e5\3\2\u0243\u026a"+
		"\3\2\u0276\u0279\3\2\u023a\u0242\5\2\u00c4\u00c8\u00d2\u00d2\u00d5\u00d5"+
		"&\2\u00e2\u00e2\u00f3\u00f5\u00f7\u0106\u0108\u0109\u010b\u010e\u0110"+
		"\u0127\u0129\u0132\u0134\u013f\u0141\u0141\u0144\u0144\u0146\u014b\u014d"+
		"\u014d\u014f\u0150\u0152\u0154\u0156\u0156\u0158\u0158\u015a\u0160\u0162"+
		"\u0168\u016a\u018e\u0190\u0192\u0194\u019a\u019c\u01a5\u01a7\u01b1\u01b3"+
		"\u01b6\u01b8\u01c4\u01c6\u01d3\u01d5\u01e6\u01e8\u01ea\u01ec\u0207\u0209"+
		"\u0209\u020b\u020e\u0210\u0210\u0212\u0213\u0216\u0221\u0270\u0270\u02d0"+
		"\u02d0\4\2\u00c8\u00c8\u0227\u0239\5\2\u00cb\u00cb\u0290\u0291\u02a0\u02a1"+
		"\6\2..\u0284\u0284\u0292\u0293\u02b1\u02b1\3\2\u0290\u0291\3\2\u0294\u0295"+
		"\4\2\13\13\u0296\u0296\4\2rr\u0297\u0297\5\288\u00a5\u00a5\u0210\u0210"+
		"\5\2\u014a\u014a\u016c\u016c\u019c\u019c\b\2&&\u0116\u0116\u0118\u0118"+
		"\u0130\u0130\u014b\u014b\u01c4\u01c4\3\2\u00ed\u00ee\5\2\20\20TT\u00a3"+
		"\u00a3\4\2\u00c9\u00c9\u00cb\u00cb\6\2!!\u00e6\u00e9\u00eb\u00eb\u00f0"+
		"\u00f2\3\2\u02d7\u02db\3\2\u02dc\u02dd\3\2\u02e1\u02e2\7\2\u00d6\u00d6"+
		"\u00da\u00da\u00dc\u00dd\u00df\u00e5\u02e8\u031b\4\2\u00b4\u00b4\u021c"+
		"\u021c\4\2DD\u0320\u0320\4\2\u014a\u014a\u016c\u016c\4\2}}\u01db\u01db"+
		"\4\2\u0324\u0324\u0326\u0326\3\2\u0329\u032a\4\2\r\r))\4\2\u019f\u019f"+
		"\u01a4\u01a4\5\2>>\u0094\u0094\u00a8\u00a8\4\2FFQR\4\2\u0106\u0106\u0156"+
		"\u0156\4\2JJ\u00b0\u00b0\6\2\'\'BB__\u011a\u011a\2\u217d\2\u0346\3\2\2"+
		"\2\4\u0356\3\2\2\2\6\u0380\3\2\2\2\b\u038d\3\2\2\2\n\u039e\3\2\2\2\f\u03a9"+
		"\3\2\2\2\16\u03ae\3\2\2\2\20\u03ba\3\2\2\2\22\u03d5\3\2\2\2\24\u03db\3"+
		"\2\2\2\26\u03dd\3\2\2\2\30\u03e9\3\2\2\2\32\u03f5\3\2\2\2\34\u0413\3\2"+
		"\2\2\36\u0431\3\2\2\2 \u043e\3\2\2\2\"\u0440\3\2\2\2$\u0446\3\2\2\2&\u044c"+
		"\3\2\2\2(\u047f\3\2\2\2*\u0499\3\2\2\2,\u04b5\3\2\2\2.\u04d6\3\2\2\2\60"+
		"\u04d8\3\2\2\2\62\u050c\3\2\2\2\64\u050e\3\2\2\2\66\u0518\3\2\2\28\u0543"+
		"\3\2\2\2:\u060c\3\2\2\2<\u060e\3\2\2\2>\u0618\3\2\2\2@\u0620\3\2\2\2B"+
		"\u0628\3\2\2\2D\u0644\3\2\2\2F\u0710\3\2\2\2H\u0738\3\2\2\2J\u073a\3\2"+
		"\2\2L\u0771\3\2\2\2N\u0773\3\2\2\2P\u07a8\3\2\2\2R\u07ac\3\2\2\2T\u07ae"+
		"\3\2\2\2V\u07c0\3\2\2\2X\u07fd\3\2\2\2Z\u080f\3\2\2\2\\\u0819\3\2\2\2"+
		"^\u081c\3\2\2\2`\u083f\3\2\2\2b\u0848\3\2\2\2d\u086c\3\2\2\2f\u0872\3"+
		"\2\2\2h\u0879\3\2\2\2j\u0882\3\2\2\2l\u0884\3\2\2\2n\u088a\3\2\2\2p\u088d"+
		"\3\2\2\2r\u0890\3\2\2\2t\u0894\3\2\2\2v\u0896\3\2\2\2x\u0898\3\2\2\2z"+
		"\u089c\3\2\2\2|\u08b8\3\2\2\2~\u08cc\3\2\2\2\u0080\u08e0\3\2\2\2\u0082"+
		"\u08e2\3\2\2\2\u0084\u0905\3\2\2\2\u0086\u090e\3\2\2\2\u0088\u0915\3\2"+
		"\2\2\u008a\u092c\3\2\2\2\u008c\u0935\3\2\2\2\u008e\u0944\3\2\2\2\u0090"+
		"\u0a7b\3\2\2\2\u0092\u0a80\3\2\2\2\u0094\u0a87\3\2\2\2\u0096\u0a8b\3\2"+
		"\2\2\u0098\u0a8d\3\2\2\2\u009a\u0aa1\3\2\2\2\u009c\u0ac8\3\2\2\2\u009e"+
		"\u0acf\3\2\2\2\u00a0\u0ad6\3\2\2\2\u00a2\u0add\3\2\2\2\u00a4\u0aed\3\2"+
		"\2\2\u00a6\u0aef\3\2\2\2\u00a8\u0af7\3\2\2\2\u00aa\u0afe\3\2\2\2\u00ac"+
		"\u0b05\3\2\2\2\u00ae\u0b0c\3\2\2\2\u00b0\u0b1f\3\2\2\2\u00b2\u0b29\3\2"+
		"\2\2\u00b4\u0b30\3\2\2\2\u00b6\u0b40\3\2\2\2\u00b8\u0b4a\3\2\2\2\u00ba"+
		"\u0b4e\3\2\2\2\u00bc\u0b54\3\2\2\2\u00be\u0b58\3\2\2\2\u00c0\u0b5c\3\2"+
		"\2\2\u00c2\u0b5e\3\2\2\2\u00c4\u0b94\3\2\2\2\u00c6\u0b96\3\2\2\2\u00c8"+
		"\u0ba2\3\2\2\2\u00ca\u0bb3\3\2\2\2\u00cc\u0bb5\3\2\2\2\u00ce\u0bb9\3\2"+
		"\2\2\u00d0\u0bc2\3\2\2\2\u00d2\u0bc4\3\2\2\2\u00d4\u0bc9\3\2\2\2\u00d6"+
		"\u0bfc\3\2\2\2\u00d8\u0bfe\3\2\2\2\u00da\u0c04\3\2\2\2\u00dc\u0c76\3\2"+
		"\2\2\u00de\u0c7d\3\2\2\2\u00e0\u0c7f\3\2\2\2\u00e2\u0c81\3\2\2\2\u00e4"+
		"\u0c94\3\2\2\2\u00e6\u0c96\3\2\2\2\u00e8\u0ca6\3\2\2\2\u00ea\u0cab\3\2"+
		"\2\2\u00ec\u0cae\3\2\2\2\u00ee\u0cb0\3\2\2\2\u00f0\u0cbd\3\2\2\2\u00f2"+
		"\u0cc1\3\2\2\2\u00f4\u0cf0\3\2\2\2\u00f6\u0d06\3\2\2\2\u00f8\u0d0b\3\2"+
		"\2\2\u00fa\u0d0d\3\2\2\2\u00fc\u0d4c\3\2\2\2\u00fe\u0d4e\3\2\2\2\u0100"+
		"\u0d6d\3\2\2\2\u0102\u0d6f\3\2\2\2\u0104\u0d78\3\2\2\2\u0106\u0d83\3\2"+
		"\2\2\u0108\u0d8f\3\2\2\2\u010a\u0da3\3\2\2\2\u010c\u0dac\3\2\2\2\u010e"+
		"\u0db0\3\2\2\2\u0110\u0dc8\3\2\2\2\u0112\u0dcb\3\2\2\2\u0114\u0de5\3\2"+
		"\2\2\u0116\u0de7\3\2\2\2\u0118\u0dea\3\2\2\2\u011a\u0e33\3\2\2\2\u011c"+
		"\u0e67\3\2\2\2\u011e\u0e73\3\2\2\2\u0120\u0e75\3\2\2\2\u0122\u0e7e\3\2"+
		"\2\2\u0124\u0e9b\3\2\2\2\u0126\u0eab\3\2\2\2\u0128\u0eb3\3\2\2\2\u012a"+
		"\u0eb5\3\2\2\2\u012c\u0ec8\3\2\2\2\u012e\u0eca\3\2\2\2\u0130\u0ece\3\2"+
		"\2\2\u0132\u0edf\3\2\2\2\u0134\u0ef0\3\2\2\2\u0136\u0ef3\3\2\2\2\u0138"+
		"\u0efd\3\2\2\2\u013a\u0f01\3\2\2\2\u013c\u0f0b\3\2\2\2\u013e\u0f1c\3\2"+
		"\2\2\u0140\u0f1e\3\2\2\2\u0142\u0f21\3\2\2\2\u0144\u0f2d\3\2\2\2\u0146"+
		"\u0f36\3\2\2\2\u0148\u0f38\3\2\2\2\u014a\u0f46\3\2\2\2\u014c\u0f51\3\2"+
		"\2\2\u014e\u0f5a\3\2\2\2\u0150\u0f5d\3\2\2\2\u0152\u0f65\3\2\2\2\u0154"+
		"\u0f7e\3\2\2\2\u0156\u0f8a\3\2\2\2\u0158\u0f8d\3\2\2\2\u015a\u0fad\3\2"+
		"\2\2\u015c\u0faf\3\2\2\2\u015e\u0fb1\3\2\2\2\u0160\u0fb3\3\2\2\2\u0162"+
		"\u0fb5\3\2\2\2\u0164\u1006\3\2\2\2\u0166\u1008\3\2\2\2\u0168\u100e\3\2"+
		"\2\2\u016a\u1024\3\2\2\2\u016c\u1032\3\2\2\2\u016e\u103d\3\2\2\2\u0170"+
		"\u103f\3\2\2\2\u0172\u1045\3\2\2\2\u0174\u104f\3\2\2\2\u0176\u1053\3\2"+
		"\2\2\u0178\u105a\3\2\2\2\u017a\u105e\3\2\2\2\u017c\u1064\3\2\2\2\u017e"+
		"\u1069\3\2\2\2\u0180\u106f\3\2\2\2\u0182\u1073\3\2\2\2\u0184\u1079\3\2"+
		"\2\2\u0186\u1086\3\2\2\2\u0188\u1089\3\2\2\2\u018a\u108b\3\2\2\2\u018c"+
		"\u109a\3\2\2\2\u018e\u109f\3\2\2\2\u0190\u10a5\3\2\2\2\u0192\u10be\3\2"+
		"\2\2\u0194\u10c6\3\2\2\2\u0196\u10c9\3\2\2\2\u0198\u10cf\3\2\2\2\u019a"+
		"\u10df\3\2\2\2\u019c\u10ee\3\2\2\2\u019e\u10f4\3\2\2\2\u01a0\u1118\3\2"+
		"\2\2\u01a2\u111e\3\2\2\2\u01a4\u1120\3\2\2\2\u01a6\u112c\3\2\2\2\u01a8"+
		"\u1138\3\2\2\2\u01aa\u113e\3\2\2\2\u01ac\u1157\3\2\2\2\u01ae\u1192\3\2"+
		"\2\2\u01b0\u1194\3\2\2\2\u01b2\u11c0\3\2\2\2\u01b4\u11cd\3\2\2\2\u01b6"+
		"\u11ff\3\2\2\2\u01b8\u1211\3\2\2\2\u01ba\u1243\3\2\2\2\u01bc\u1245\3\2"+
		"\2\2\u01be\u1252\3\2\2\2\u01c0\u126d\3\2\2\2\u01c2\u1277\3\2\2\2\u01c4"+
		"\u1281\3\2\2\2\u01c6\u1283\3\2\2\2\u01c8\u128d\3\2\2\2\u01ca\u1290\3\2"+
		"\2\2\u01cc\u12c8\3\2\2\2\u01ce\u12d7\3\2\2\2\u01d0\u12d9\3\2\2\2\u01d2"+
		"\u12dd\3\2\2\2\u01d4\u12ea\3\2\2\2\u01d6\u12fa\3\2\2\2\u01d8\u1307\3\2"+
		"\2\2\u01da\u1314\3\2\2\2\u01dc\u1331\3\2\2\2\u01de\u1333\3\2\2\2\u01e0"+
		"\u133e\3\2\2\2\u01e2\u1344\3\2\2\2\u01e4\u1389\3\2\2\2\u01e6\u138e\3\2"+
		"\2\2\u01e8\u143f\3\2\2\2\u01ea\u144e\3\2\2\2\u01ec\u1454\3\2\2\2\u01ee"+
		"\u1467\3\2\2\2\u01f0\u1471\3\2\2\2\u01f2\u147f\3\2\2\2\u01f4\u1481\3\2"+
		"\2\2\u01f6\u1484\3\2\2\2\u01f8\u14a1\3\2\2\2\u01fa\u14ad\3\2\2\2\u01fc"+
		"\u14b6\3\2\2\2\u01fe\u14c2\3\2\2\2\u0200\u14c6\3\2\2\2\u0202\u14c8\3\2"+
		"\2\2\u0204\u14fe\3\2\2\2\u0206\u1505\3\2\2\2\u0208\u1507\3\2\2\2\u020a"+
		"\u152c\3\2\2\2\u020c\u1532\3\2\2\2\u020e\u153a\3\2\2\2\u0210\u153d\3\2"+
		"\2\2\u0212\u154a\3\2\2\2\u0214\u154c\3\2\2\2\u0216\u154e\3\2\2\2\u0218"+
		"\u1560\3\2\2\2\u021a\u1570\3\2\2\2\u021c\u1574\3\2\2\2\u021e\u1576\3\2"+
		"\2\2\u0220\u1578\3\2\2\2\u0222\u158f\3\2\2\2\u0224\u1591\3\2\2\2\u0226"+
		"\u1595\3\2\2\2\u0228\u159b\3\2\2\2\u022a\u15a3\3\2\2\2\u022c\u15ab\3\2"+
		"\2\2\u022e\u15c1\3\2\2\2\u0230\u15c3\3\2\2\2\u0232\u1619\3\2\2\2\u0234"+
		"\u161b\3\2\2\2\u0236\u161d\3\2\2\2\u0238\u161f\3\2\2\2\u023a\u1621\3\2"+
		"\2\2\u023c\u1623\3\2\2\2\u023e\u1633\3\2\2\2\u0240\u163c\3\2\2\2\u0242"+
		"\u1728\3\2\2\2\u0244\u17c2\3\2\2\2\u0246\u17e1\3\2\2\2\u0248\u17eb\3\2"+
		"\2\2\u024a\u17ef\3\2\2\2\u024c\u17f1\3\2\2\2\u024e\u17f3\3\2\2\2\u0250"+
		"\u1808\3\2\2\2\u0252\u1812\3\2\2\2\u0254\u1830\3\2\2\2\u0256\u1832\3\2"+
		"\2\2\u0258\u1835\3\2\2\2\u025a\u183c\3\2\2\2\u025c\u183e\3\2\2\2\u025e"+
		"\u1840\3\2\2\2\u0260\u1843\3\2\2\2\u0262\u184c\3\2\2\2\u0264\u1855\3\2"+
		"\2\2\u0266\u185e\3\2\2\2\u0268\u1867\3\2\2\2\u026a\u186b\3\2\2\2\u026c"+
		"\u1878\3\2\2\2\u026e\u187e\3\2\2\2\u0270\u18a2\3\2\2\2\u0272\u18a4\3\2"+
		"\2\2\u0274\u18b2\3\2\2\2\u0276\u18b9\3\2\2\2\u0278\u18bc\3\2\2\2\u027a"+
		"\u18d7\3\2\2\2\u027c\u1953\3\2\2\2\u027e\u19e3\3\2\2\2\u0280\u19e5\3\2"+
		"\2\2\u0282\u19e8\3\2\2\2\u0284\u19ee\3\2\2\2\u0286\u19f5\3\2\2\2\u0288"+
		"\u19ff\3\2\2\2\u028a\u1a07\3\2\2\2\u028c\u1a0e\3\2\2\2\u028e\u1a16\3\2"+
		"\2\2\u0290\u1a1c\3\2\2\2\u0292\u1a22\3\2\2\2\u0294\u1a28\3\2\2\2\u0296"+
		"\u1a2f\3\2\2\2\u0298\u1a36\3\2\2\2\u029a\u1a3c\3\2\2\2\u029c\u1a42\3\2"+
		"\2\2\u029e\u1a48\3\2\2\2\u02a0\u1a4e\3\2\2\2\u02a2\u1a54\3\2\2\2\u02a4"+
		"\u1a5a\3\2\2\2\u02a6\u1a60\3\2\2\2\u02a8\u1a66\3\2\2\2\u02aa\u1a6c\3\2"+
		"\2\2\u02ac\u1a72\3\2\2\2\u02ae\u1a78\3\2\2\2\u02b0\u1a7e\3\2\2\2\u02b2"+
		"\u1a84\3\2\2\2\u02b4\u1a8a\3\2\2\2\u02b6\u1a90\3\2\2\2\u02b8\u1a94\3\2"+
		"\2\2\u02ba\u1a96\3\2\2\2\u02bc\u1a98\3\2\2\2\u02be\u1a9a\3\2\2\2\u02c0"+
		"\u1a9e\3\2\2\2\u02c2\u1aa0\3\2\2\2\u02c4\u1aa3\3\2\2\2\u02c6\u1aa6\3\2"+
		"\2\2\u02c8\u1aae\3\2\2\2\u02ca\u1b1a\3\2\2\2\u02cc\u1b28\3\2\2\2\u02ce"+
		"\u1b2a\3\2\2\2\u02d0\u1b2c\3\2\2\2\u02d2\u1b33\3\2\2\2\u02d4\u1b3e\3\2"+
		"\2\2\u02d6\u1b49\3\2\2\2\u02d8\u1b57\3\2\2\2\u02da\u1b60\3\2\2\2\u02dc"+
		"\u1b67\3\2\2\2\u02de\u1b71\3\2\2\2\u02e0\u1b92\3\2\2\2\u02e2\u1b94\3\2"+
		"\2\2\u02e4\u1bbb\3\2\2\2\u02e6\u1bc0\3\2\2\2\u02e8\u1bc2\3\2\2\2\u02ea"+
		"\u1bc6\3\2\2\2\u02ec\u1bcc\3\2\2\2\u02ee\u1bd2\3\2\2\2\u02f0\u1bda\3\2"+
		"\2\2\u02f2\u1beb\3\2\2\2\u02f4\u1bf6\3\2\2\2\u02f6\u1c04\3\2\2\2\u02f8"+
		"\u1c09\3\2\2\2\u02fa\u1c41\3\2\2\2\u02fc\u1c43\3\2\2\2\u02fe\u1c63\3\2"+
		"\2\2\u0300\u1c65\3\2\2\2\u0302\u1c6b\3\2\2\2\u0304\u1c75\3\2\2\2\u0306"+
		"\u1c7f\3\2\2\2\u0308\u1c9e\3\2\2\2\u030a\u1ca0\3\2\2\2\u030c\u1cbb\3\2"+
		"\2\2\u030e\u1cbe\3\2\2\2\u0310\u1cc1\3\2\2\2\u0312\u1cc7\3\2\2\2\u0314"+
		"\u1ccf\3\2\2\2\u0316\u1cd9\3\2\2\2\u0318\u1cdc\3\2\2\2\u031a\u1ce4\3\2"+
		"\2\2\u031c\u1ced\3\2\2\2\u031e\u1cef\3\2\2\2\u0320\u1cfc\3\2\2\2\u0322"+
		"\u1d02\3\2\2\2\u0324\u1d05\3\2\2\2\u0326\u1d08\3\2\2\2\u0328\u1d0c\3\2"+
		"\2\2\u032a\u1d0f\3\2\2\2\u032c\u1d11\3\2\2\2\u032e\u1d13\3\2\2\2\u0330"+
		"\u1d15\3\2\2\2\u0332\u1d17\3\2\2\2\u0334\u1d19\3\2\2\2\u0336\u1d1c\3\2"+
		"\2\2\u0338\u1d1e\3\2\2\2\u033a\u1d20\3\2\2\2\u033c\u0340\5\4\3\2\u033d"+
		"\u0340\5\u027c\u013f\2\u033e\u0340\7\u0298\2\2\u033f\u033c\3\2\2\2\u033f"+
		"\u033d\3\2\2\2\u033f\u033e\3\2\2\2\u0340\u0342\3\2\2\2\u0341\u0343\7\u02ab"+
		"\2\2\u0342\u0341\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0345\3\2\2\2\u0344"+
		"\u033f\3\2\2\2\u0345\u0348\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347\3\2"+
		"\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2\u0349\u034b\7\u0298\2\2\u034a"+
		"\u0349\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d\7\2"+
		"\2\3\u034d\3\3\2\2\2\u034e\u0357\5\6\4\2\u034f\u0357\5\b\5\2\u0350\u0357"+
		"\5\n\6\2\u0351\u0357\5\f\7\2\u0352\u0357\5\16\b\2\u0353\u0357\5\20\t\2"+
		"\u0354\u0357\5\22\n\2\u0355\u0357\5\24\13\2\u0356\u034e\3\2\2\2\u0356"+
		"\u034f\3\2\2\2\u0356\u0350\3\2\2\2\u0356\u0351\3\2\2\2\u0356\u0352\3\2"+
		"\2\2\u0356\u0353\3\2\2\2\u0356\u0354\3\2\2\2\u0356\u0355\3\2\2\2\u0357"+
		"\5\3\2\2\2\u0358\u0381\5\26\f\2\u0359\u0381\5~@\2\u035a\u0381\5\u009c"+
		"O\2\u035b\u0381\5\30\r\2\u035c\u0381\5\u0080A\2\u035d\u0381\5\u009eP\2"+
		"\u035e\u0381\5\32\16\2\u035f\u0381\5\u0082B\2\u0360\u0381\5\u00a0Q\2\u0361"+
		"\u0381\5*\26\2\u0362\u0381\5\u0084C\2\u0363\u0381\5\u00aaV\2\u0364\u0381"+
		"\5\34\17\2\u0365\u0381\5\u00a2R\2\u0366\u0381\5&\24\2\u0367\u0381\5\u0088"+
		"E\2\u0368\u0381\5\u00a6T\2\u0369\u0381\5(\25\2\u036a\u0381\5\u008aF\2"+
		"\u036b\u0381\5\u00a8U\2\u036c\u0381\5,\27\2\u036d\u0381\5\u008cG\2\u036e"+
		"\u0381\5\u00acW\2\u036f\u0381\5\60\31\2\u0370\u0381\5\u008eH\2\u0371\u0381"+
		"\5\u00aeX\2\u0372\u0381\5R*\2\u0373\u0381\5\u0098M\2\u0374\u0381\5\u00b0"+
		"Y\2\u0375\u0381\5X-\2\u0376\u0381\5\u00b2Z\2\u0377\u0381\5^\60\2\u0378"+
		"\u0381\5\u009aN\2\u0379\u0381\5\u00b4[\2\u037a\u0381\5\u0086D\2\u037b"+
		"\u0381\5\u01b0\u00d9\2\u037c\u0381\5\u01ae\u00d8\2\u037d\u0381\5\u01b2"+
		"\u00da\2\u037e\u0381\5\u00b6\\\2\u037f\u0381\5\u00ba^\2\u0380\u0358\3"+
		"\2\2\2\u0380\u0359\3\2\2\2\u0380\u035a\3\2\2\2\u0380\u035b\3\2\2\2\u0380"+
		"\u035c\3\2\2\2\u0380\u035d\3\2\2\2\u0380\u035e\3\2\2\2\u0380\u035f\3\2"+
		"\2\2\u0380\u0360\3\2\2\2\u0380\u0361\3\2\2\2\u0380\u0362\3\2\2\2\u0380"+
		"\u0363\3\2\2\2\u0380\u0364\3\2\2\2\u0380\u0365\3\2\2\2\u0380\u0366\3\2"+
		"\2\2\u0380\u0367\3\2\2\2\u0380\u0368\3\2\2\2\u0380\u0369\3\2\2\2\u0380"+
		"\u036a\3\2\2\2\u0380\u036b\3\2\2\2\u0380\u036c\3\2\2\2\u0380\u036d\3\2"+
		"\2\2\u0380\u036e\3\2\2\2\u0380\u036f\3\2\2\2\u0380\u0370\3\2\2\2\u0380"+
		"\u0371\3\2\2\2\u0380\u0372\3\2\2\2\u0380\u0373\3\2\2\2\u0380\u0374\3\2"+
		"\2\2\u0380\u0375\3\2\2\2\u0380\u0376\3\2\2\2\u0380\u0377\3\2\2\2\u0380"+
		"\u0378\3\2\2\2\u0380\u0379\3\2\2\2\u0380\u037a\3\2\2\2\u0380\u037b\3\2"+
		"\2\2\u0380\u037c\3\2\2\2\u0380\u037d\3\2\2\2\u0380\u037e\3\2\2\2\u0380"+
		"\u037f\3\2\2\2\u0381\7\3\2\2\2\u0382\u038e\5\u00bc_\2\u0383\u038e\5\u00fa"+
		"~\2\u0384\u038e\5\u00fe\u0080\2\u0385\u038e\5\u0108\u0085\2\u0386\u038e"+
		"\5\u010e\u0088\2\u0387\u038e\5\u0112\u008a\2\u0388\u038e\5\u0116\u008c"+
		"\2\u0389\u038e\5\u0118\u008d\2\u038a\u038e\5\u011a\u008e\2\u038b\u038e"+
		"\5\u011c\u008f\2\u038c\u038e\5\u011e\u0090\2\u038d\u0382\3\2\2\2\u038d"+
		"\u0383\3\2\2\2\u038d\u0384\3\2\2\2\u038d\u0385\3\2\2\2\u038d\u0386\3\2"+
		"\2\2\u038d\u0387\3\2\2\2\u038d\u0388\3\2\2\2\u038d\u0389\3\2\2\2\u038d"+
		"\u038a\3\2\2\2\u038d\u038b\3\2\2\2\u038d\u038c\3\2\2\2\u038e\t\3\2\2\2"+
		"\u038f\u039f\5\u012a\u0096\2\u0390\u039f\5\u012e\u0098\2\u0391\u039f\5"+
		"\u0130\u0099\2\u0392\u039f\5\u0132\u009a\2\u0393\u039f\5\u0134\u009b\2"+
		"\u0394\u039f\5\u0136\u009c\2\u0395\u039f\5\u0138\u009d\2\u0396\u039f\5"+
		"\u013a\u009e\2\u0397\u039f\5\u0140\u00a1\2\u0398\u039f\5\u0170\u00b9\2"+
		"\u0399\u039f\5\u0172\u00ba\2\u039a\u039f\5\u0174\u00bb\2\u039b\u039f\5"+
		"\u0176\u00bc\2\u039c\u039f\5\u0178\u00bd\2\u039d\u039f\5\u017a\u00be\2"+
		"\u039e\u038f\3\2\2\2\u039e\u0390\3\2\2\2\u039e\u0391\3\2\2\2\u039e\u0392"+
		"\3\2\2\2\u039e\u0393\3\2\2\2\u039e\u0394\3\2\2\2\u039e\u0395\3\2\2\2\u039e"+
		"\u0396\3\2\2\2\u039e\u0397\3\2\2\2\u039e\u0398\3\2\2\2\u039e\u0399\3\2"+
		"\2\2\u039e\u039a\3\2\2\2\u039e\u039b\3\2\2\2\u039e\u039c\3\2\2\2\u039e"+
		"\u039d\3\2\2\2\u039f\13\3\2\2\2\u03a0\u03aa\5\u0148\u00a5\2\u03a1\u03aa"+
		"\5\u014a\u00a6\2\u03a2\u03aa\5\u014c\u00a7\2\u03a3\u03aa\5\u014e\u00a8"+
		"\2\u03a4\u03aa\5\u0150\u00a9\2\u03a5\u03aa\5\u0152\u00aa\2\u03a6\u03aa"+
		"\5\u0154\u00ab\2\u03a7\u03aa\5\u0156\u00ac\2\u03a8\u03aa\5\u0158\u00ad"+
		"\2\u03a9\u03a0\3\2\2\2\u03a9\u03a1\3\2\2\2\u03a9\u03a2\3\2\2\2\u03a9\u03a3"+
		"\3\2\2\2\u03a9\u03a4\3\2\2\2\u03a9\u03a5\3\2\2\2\u03a9\u03a6\3\2\2\2\u03a9"+
		"\u03a7\3\2\2\2\u03a9\u03a8\3\2\2\2\u03aa\r\3\2\2\2\u03ab\u03af\5\u017c"+
		"\u00bf\2\u03ac\u03af\5\u017e\u00c0\2\u03ad\u03af\5\u0180\u00c1\2\u03ae"+
		"\u03ab\3\2\2\2\u03ae\u03ac\3\2\2\2\u03ae\u03ad\3\2\2\2\u03af\17\3\2\2"+
		"\2\u03b0\u03bb\5\u0184\u00c3\2\u03b1\u03bb\5\u018a\u00c6\2\u03b2\u03bb"+
		"\5\u0190\u00c9\2\u03b3\u03bb\5\u0196\u00cc\2\u03b4\u03bb\5\u0198\u00cd"+
		"\2\u03b5\u03bb\5\u019a\u00ce\2\u03b6\u03bb\5\u019e\u00d0\2\u03b7\u03bb"+
		"\5\u0194\u00cb\2\u03b8\u03bb\5\u019c\u00cf\2\u03b9\u03bb\5\u01a0\u00d1"+
		"\2\u03ba\u03b0\3\2\2\2\u03ba\u03b1\3\2\2\2\u03ba\u03b2\3\2\2\2\u03ba\u03b3"+
		"\3\2\2\2\u03ba\u03b4\3\2\2\2\u03ba\u03b5\3\2\2\2\u03ba\u03b6\3\2\2\2\u03ba"+
		"\u03b7\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03b9\3\2\2\2\u03bb\21\3\2\2"+
		"\2\u03bc\u03d6\5\u01ae\u00d8\2\u03bd\u03d6\5\u01b0\u00d9\2\u03be\u03d6"+
		"\5\u01b2\u00da\2\u03bf\u03d6\5\u01b4\u00db\2\u03c0\u03d6\5\u01b6\u00dc"+
		"\2\u03c1\u03d6\5\u01b8\u00dd\2\u03c2\u03d6\5\u01ba\u00de\2\u03c3\u03d6"+
		"\5\u01bc\u00df\2\u03c4\u03d6\5\u01d2\u00ea\2\u03c5\u03d6\5\u01d4\u00eb"+
		"\2\u03c6\u03d6\5\u01d6\u00ec\2\u03c7\u03d6\5\u01d8\u00ed\2\u03c8\u03d6"+
		"\5\u01da\u00ee\2\u03c9\u03d6\5\u01de\u00f0\2\u03ca\u03d6\5\u01e0\u00f1"+
		"\2\u03cb\u03d6\5\u01e2\u00f2\2\u03cc\u03d6\5\u01e4\u00f3\2\u03cd\u03d6"+
		"\5\u01e8\u00f5\2\u03ce\u03d6\5\u01f4\u00fb\2\u03cf\u03d6\5\u01f6\u00fc"+
		"\2\u03d0\u03d6\5\u01f8\u00fd\2\u03d1\u03d6\5\u01fa\u00fe\2\u03d2\u03d6"+
		"\5\u01fc\u00ff\2\u03d3\u03d6\5\u01fe\u0100\2\u03d4\u03d6\5\u0200\u0101"+
		"\2\u03d5\u03bc\3\2\2\2\u03d5\u03bd\3\2\2\2\u03d5\u03be\3\2\2\2\u03d5\u03bf"+
		"\3\2\2\2\u03d5\u03c0\3\2\2\2\u03d5\u03c1\3\2\2\2\u03d5\u03c2\3\2\2\2\u03d5"+
		"\u03c3\3\2\2\2\u03d5\u03c4\3\2\2\2\u03d5\u03c5\3\2\2\2\u03d5\u03c6\3\2"+
		"\2\2\u03d5\u03c7\3\2\2\2\u03d5\u03c8\3\2\2\2\u03d5\u03c9\3\2\2\2\u03d5"+
		"\u03ca\3\2\2\2\u03d5\u03cb\3\2\2\2\u03d5\u03cc\3\2\2\2\u03d5\u03cd\3\2"+
		"\2\2\u03d5\u03ce\3\2\2\2\u03d5\u03cf\3\2\2\2\u03d5\u03d0\3\2\2\2\u03d5"+
		"\u03d1\3\2\2\2\u03d5\u03d2\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d4\3\2"+
		"\2\2\u03d6\23\3\2\2\2\u03d7\u03dc\5\u020a\u0106\2\u03d8\u03dc\5\u020c"+
		"\u0107\2\u03d9\u03dc\5\u020e\u0108\2\u03da\u03dc\5\u0210\u0109\2\u03db"+
		"\u03d7\3\2\2\2\u03db\u03d8\3\2\2\2\u03db\u03d9\3\2\2\2\u03db\u03da\3\2"+
		"\2\2\u03dc\25\3\2\2\2\u03dd\u03de\7\37\2\2\u03de\u03e0\7#\2\2\u03df\u03e1"+
		"\5\u0326\u0194\2\u03e0\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2\3"+
		"\2\2\2\u03e2\u03e6\5\u0252\u012a\2\u03e3\u03e5\5b\62\2\u03e4\u03e3\3\2"+
		"\2\2\u03e5\u03e8\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7"+
		"\27\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e9\u03ea\7\37\2\2\u03ea\u03ec\7\u008d"+
		"\2\2\u03eb\u03ed\5\u0326\u0194\2\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2"+
		"\2\u03ed\u03ee\3\2\2\2\u03ee\u03f2\5\u0252\u012a\2\u03ef\u03f1\5b\62\2"+
		"\u03f0\u03ef\3\2\2\2\u03f1\u03f4\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3"+
		"\3\2\2\2\u03f3\31\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f5\u03f7\7\37\2\2\u03f6"+
		"\u03f8\5Z.\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9\3\2\2"+
		"\2\u03f9\u03fb\7\u013b\2\2\u03fa\u03fc\5\u0326\u0194\2\u03fb\u03fa\3\2"+
		"\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03fe\5\u0252\u012a"+
		"\2\u03fe\u03ff\7n\2\2\u03ff\u0400\7\u01de\2\2\u0400\u0407\5d\63\2\u0401"+
		"\u0402\7n\2\2\u0402\u0404\7\u0117\2\2\u0403\u0405\7i\2\2\u0404\u0403\3"+
		"\2\2\2\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0408\7\u01b9\2\2"+
		"\u0407\u0401\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2\2\u0409\u040b"+
		"\5h\65\2\u040a\u0409\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040e\3\2\2\2\u040c"+
		"\u040d\7\u0114\2\2\u040d\u040f\5\u027c\u013f\2\u040e\u040c\3\2\2\2\u040e"+
		"\u040f\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\7\u012d\2\2\u0411\u0412\5\4\3\2"+
		"\u0412\33\3\2\2\2\u0413\u0415\7\37\2\2\u0414\u0416\5\u032c\u0197\2\u0415"+
		"\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0418\3\2\2\2\u0417\u0419\5\u032e"+
		"\u0198\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041a\3\2\2\2\u041a"+
		"\u041b\7F\2\2\u041b\u041d\5\u0252\u012a\2\u041c\u041e\5\u0334\u019b\2"+
		"\u041d\u041c\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0420"+
		"\7n\2\2\u0420\u0421\5\u00d4k\2\u0421\u0422\7\u02a6\2\2\u0422\u0427\5\36"+
		"\20\2\u0423\u0424\7\u02aa\2\2\u0424\u0426\5\36\20\2\u0425\u0423\3\2\2"+
		"\2\u0426\u0429\3\2\2\2\u0427\u0425\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u042a"+
		"\3\2\2\2\u0429\u0427\3\2\2\2\u042a\u042e\7\u02a7\2\2\u042b\u042d\5 \21"+
		"\2\u042c\u042b\3\2\2\2\u042d\u0430\3\2\2\2\u042e\u042c\3\2\2\2\u042e\u042f"+
		"\3\2\2\2\u042f\35\3\2\2\2\u0430\u042e\3\2\2\2\u0431\u0436\5\u027c\u013f"+
		"\2\u0432\u0433\7\u02a6\2\2\u0433\u0434\5\u027c\u013f\2\u0434\u0435\7\u02a7"+
		"\2\2\u0435\u0437\3\2\2\2\u0436\u0432\3\2\2\2\u0436\u0437\3\2\2\2\u0437"+
		"\u0439\3\2\2\2\u0438\u043a\5\u032a\u0196\2\u0439\u0438\3\2\2\2\u0439\u043a"+
		"\3\2\2\2\u043a\37\3\2\2\2\u043b\u043f\5j\66\2\u043c\u043f\5\"\22\2\u043d"+
		"\u043f\5$\23\2\u043e\u043b\3\2\2\2\u043e\u043c\3\2\2\2\u043e\u043d\3\2"+
		"\2\2\u043f!\3\2\2\2\u0440\u0442\7\u00f8\2\2\u0441\u0443\7\u0299\2\2\u0442"+
		"\u0441\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445\t\2"+
		"\2\2\u0445#\3\2\2\2\u0446\u0448\7\\\2\2\u0447\u0449\7\u0299\2\2\u0448"+
		"\u0447\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044b\t\3"+
		"\2\2\u044b%\3\2\2\2\u044c\u044d\7\37\2\2\u044d\u044e\7\u0172\2\2\u044e"+
		"\u044f\7@\2\2\u044f\u0450\5\u0252\u012a\2\u0450\u0451\7\7\2\2\u0451\u0452"+
		"\7\u020d\2\2\u0452\u0458\5\u027c\u013f\2\u0453\u0455\7\u015e\2\2\u0454"+
		"\u0456\7\u0299\2\2\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457"+
		"\3\2\2\2\u0457\u0459\5\u027c\u013f\2\u0458\u0453\3\2\2\2\u0458\u0459\3"+
		"\2\2\2\u0459\u045f\3\2\2\2\u045a\u045c\7\u020e\2\2\u045b\u045d\7\u0299"+
		"\2\2\u045c\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045e\3\2\2\2\u045e"+
		"\u0460\5\u027c\u013f\2\u045f\u045a\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0466"+
		"\3\2\2\2\u0461\u0463\7\u01c3\2\2\u0462\u0464\7\u0299\2\2\u0463\u0462\3"+
		"\2\2\2\u0463\u0464\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0467\5\u027c\u013f"+
		"\2\u0466\u0461\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u046d\3\2\2\2\u0468\u046a"+
		"\7\u019d\2\2\u0469\u046b\7\u0299\2\2\u046a\u0469\3\2\2\2\u046a\u046b\3"+
		"\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\5\u0252\u012a\2\u046d\u0468\3\2"+
		"\2\2\u046d\u046e\3\2\2\2\u046e\u0470\3\2\2\2\u046f\u0471\7\u021a\2\2\u0470"+
		"\u046f\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0477\3\2\2\2\u0472\u0474\7\u0114"+
		"\2\2\u0473\u0475\7\u0299\2\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2\u0475"+
		"\u0476\3\2\2\2\u0476\u0478\5\u027c\u013f\2\u0477\u0472\3\2\2\2\u0477\u0478"+
		"\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047b\7\u0135\2\2\u047a\u047c\7\u0299"+
		"\2\2\u047b\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d\3\2\2\2\u047d"+
		"\u047e\5\u0214\u010b\2\u047e\'\3\2\2\2\u047f\u0481\7\37\2\2\u0480\u0482"+
		"\5Z.\2\u0481\u0480\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0483\3\2\2\2\u0483"+
		"\u0484\7{\2\2\u0484\u0485\5\u0252\u012a\2\u0485\u0487\7\u02a6\2\2\u0486"+
		"\u0488\5z>\2\u0487\u0486\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u048d\3\2\2"+
		"\2\u0489\u048a\7\u02aa\2\2\u048a\u048c\5z>\2\u048b\u0489\3\2\2\2\u048c"+
		"\u048f\3\2\2\2\u048d\u048b\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u0490\3\2"+
		"\2\2\u048f\u048d\3\2\2\2\u0490\u0494\7\u02a7\2\2\u0491\u0493\5|?\2\u0492"+
		"\u0491\3\2\2\2\u0493\u0496\3\2\2\2\u0494\u0492\3\2\2\2\u0494\u0495\3\2"+
		"\2\2\u0495\u0497\3\2\2\2\u0496\u0494\3\2\2\2\u0497\u0498\5\4\3\2\u0498"+
		")\3\2\2\2\u0499\u049b\7\37\2\2\u049a\u049c\5Z.\2\u049b\u049a\3\2\2\2\u049b"+
		"\u049c\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049e\7\u0150\2\2\u049e\u049f"+
		"\5\u0252\u012a\2\u049f\u04a1\7\u02a6\2\2\u04a0\u04a2\5z>\2\u04a1\u04a0"+
		"\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a7\3\2\2\2\u04a3\u04a4\7\u02aa\2"+
		"\2\u04a4\u04a6\5z>\2\u04a5\u04a3\3\2\2\2\u04a6\u04a9\3\2\2\2\u04a7\u04a5"+
		"\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04aa\3\2\2\2\u04a9\u04a7\3\2\2\2\u04aa"+
		"\u04ab\7\u02a7\2\2\u04ab\u04ac\7\u01d6\2\2\u04ac\u04b0\5\u0240\u0121\2"+
		"\u04ad\u04af\5|?\2\u04ae\u04ad\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0\u04ae"+
		"\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b3\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b3"+
		"\u04b4\5\4\3\2\u04b4+\3\2\2\2\u04b5\u04b6\7\37\2\2\u04b6\u04b7\7\u01e0"+
		"\2\2\u04b7\u04b8\5\u0252\u012a\2\u04b8\u04b9\7<\2\2\u04b9\u04ba\7\u0122"+
		"\2\2\u04ba\u04bb\7\u021e\2\2\u04bb\u04bc\5\u0252\u012a\2\u04bc\u04bd\7"+
		"\u01a8\2\2\u04bd\u04be\7\u02a6\2\2\u04be\u04c3\5.\30\2\u04bf\u04c0\7\u02aa"+
		"\2\2\u04c0\u04c2\5.\30\2\u04c1\u04bf\3\2\2\2\u04c2\u04c5\3\2\2\2\u04c3"+
		"\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c6\3\2\2\2\u04c5\u04c3\3\2"+
		"\2\2\u04c6\u04c7\7\u02a7\2\2\u04c7-\3\2\2\2\u04c8\u04c9\7\u0158\2\2\u04c9"+
		"\u04d7\5\u027c\u013f\2\u04ca\u04cb\7#\2\2\u04cb\u04d7\5\u027c\u013f\2"+
		"\u04cc\u04cd\7\u0213\2\2\u04cd\u04d7\5\u027c\u013f\2\u04ce\u04cf\7\u01b0"+
		"\2\2\u04cf\u04d7\5\u027c\u013f\2\u04d0\u04d1\7\u01e9\2\2\u04d1\u04d7\5"+
		"\u027c\u013f\2\u04d2\u04d3\7\u01a9\2\2\u04d3\u04d7\5\u027c\u013f\2\u04d4"+
		"\u04d5\7\u01b5\2\2\u04d5\u04d7\5\u027c\u013f\2\u04d6\u04c8\3\2\2\2\u04d6"+
		"\u04ca\3\2\2\2\u04d6\u04cc\3\2\2\2\u04d6\u04ce\3\2\2\2\u04d6\u04d0\3\2"+
		"\2\2\u04d6\u04d2\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d7/\3\2\2\2\u04d8\u04da"+
		"\7\37\2\2\u04d9\u04db\7\u0205\2\2\u04da\u04d9\3\2\2\2\u04da\u04db\3\2"+
		"\2\2\u04db\u04dc\3\2\2\2\u04dc\u04de\7\u009f\2\2\u04dd\u04df\5\u0326\u0194"+
		"\2\u04de\u04dd\3\2\2\2\u04de\u04df\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04ef"+
		"\5\u0252\u012a\2\u04e1\u04e3\7\u02a6\2\2\u04e2\u04e1\3\2\2\2\u04e2\u04e3"+
		"\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e9\5\62\32\2\u04e5\u04e6\7\u02aa"+
		"\2\2\u04e6\u04e8\5\62\32\2\u04e7\u04e5\3\2\2\2\u04e8\u04eb\3\2\2\2\u04e9"+
		"\u04e7\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ed\3\2\2\2\u04eb\u04e9\3\2"+
		"\2\2\u04ec\u04ee\7\u02a7\2\2\u04ed\u04ec\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee"+
		"\u04f0\3\2\2\2\u04ef\u04e2\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04fb\3\2"+
		"\2\2\u04f1\u04f8\5D#\2\u04f2\u04f4\7\u02aa\2\2\u04f3\u04f2\3\2\2\2\u04f3"+
		"\u04f4\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f7\5D#\2\u04f6\u04f3\3\2\2"+
		"\2\u04f7\u04fa\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fc"+
		"\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fb\u04f1\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc"+
		"\u04fe\3\2\2\2\u04fd\u04ff\5F$\2\u04fe\u04fd\3\2\2\2\u04fe\u04ff\3\2\2"+
		"\2\u04ff\u0501\3\2\2\2\u0500\u0502\5\u0330\u0199\2\u0501\u0500\3\2\2\2"+
		"\u0501\u0502\3\2\2\2\u0502\u0507\3\2\2\2\u0503\u0505\7\f\2\2\u0504\u0503"+
		"\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0508\5\u00be`"+
		"\2\u0507\u0504\3\2\2\2\u0507\u0508\3\2\2\2\u0508\61\3\2\2\2\u0509\u050d"+
		"\5\64\33\2\u050a\u050d\5\66\34\2\u050b\u050d\5:\36\2\u050c\u0509\3\2\2"+
		"\2\u050c\u050a\3\2\2\2\u050c\u050b\3\2\2\2\u050d\63\3\2\2\2\u050e\u0510"+
		"\5\u0252\u012a\2\u050f\u0511\5\u0240\u0121\2\u0510\u050f\3\2\2\2\u0510"+
		"\u0511\3\2\2\2\u0511\u0515\3\2\2\2\u0512\u0514\58\35\2\u0513\u0512\3\2"+
		"\2\2\u0514\u0517\3\2\2\2\u0515\u0513\3\2\2\2\u0515\u0516\3\2\2\2\u0516"+
		"\65\3\2\2\2\u0517\u0515\3\2\2\2\u0518\u0519\7W\2\2\u0519\u051a\5\u0252"+
		"\u012a\2\u051a\67\3\2\2\2\u051b\u0544\5\u021e\u0110\2\u051c\u0544\5\u0220"+
		"\u0111\2\u051d\u0544\5\u0280\u0141\2\u051e\u0544\7\u00fe\2\2\u051f\u0521"+
		"\7z\2\2\u0520\u051f\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0522\3\2\2\2\u0522"+
		"\u0544\7Q\2\2\u0523\u0525\7\u00a8\2\2\u0524\u0526\7Q\2\2\u0525\u0524\3"+
		"\2\2\2\u0525\u0526\3\2\2\2\u0526\u0544\3\2\2\2\u0527\u0528\7\u0114\2\2"+
		"\u0528\u0544\5\u027c\u013f\2\u0529\u052a\7\u0113\2\2\u052a\u0544\t\4\2"+
		"\2\u052b\u052c\7\u01fc\2\2\u052c\u0544\t\5\2\2\u052d\u052e\7\u0080\2\2"+
		"\u052e\u052f\5\u0252\u012a\2\u052f\u0530\7\u02a6\2\2\u0530\u0535\5<\37"+
		"\2\u0531\u0532\7\u02aa\2\2\u0532\u0534\5<\37\2\u0533\u0531\3\2\2\2\u0534"+
		"\u0537\3\2\2\2\u0535\u0533\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0538\3\2"+
		"\2\2\u0537\u0535\3\2\2\2\u0538\u053b\7\u02a7\2\2\u0539\u053a\7b\2\2\u053a"+
		"\u053c\5> \2\u053b\u0539\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u0540\3\2\2"+
		"\2\u053d\u053f\5@!\2\u053e\u053d\3\2\2\2\u053f\u0542\3\2\2\2\u0540\u053e"+
		"\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0544\3\2\2\2\u0542\u0540\3\2\2\2\u0543"+
		"\u051b\3\2\2\2\u0543\u051c\3\2\2\2\u0543\u051d\3\2\2\2\u0543\u051e\3\2"+
		"\2\2\u0543\u0520\3\2\2\2\u0543\u0523\3\2\2\2\u0543\u0527\3\2\2\2\u0543"+
		"\u0529\3\2\2\2\u0543\u052b\3\2\2\2\u0543\u052d\3\2\2\2\u05449\3\2\2\2"+
		"\u0545\u0547\7\34\2\2\u0546\u0548\5\u0252\u012a\2\u0547\u0546\3\2\2\2"+
		"\u0547\u0548\3\2\2\2\u0548\u054a\3\2\2\2\u0549\u0545\3\2\2\2\u0549\u054a"+
		"\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\7z\2\2\u054c\u054e\7Q\2\2\u054d"+
		"\u054f\5\u0334\u019b\2\u054e\u054d\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550"+
		"\3\2\2\2\u0550\u0551\7\u02a6\2\2\u0551\u0556\5<\37\2\u0552\u0553\7\u02aa"+
		"\2\2\u0553\u0555\5<\37\2\u0554\u0552\3\2\2\2\u0555\u0558\3\2\2\2\u0556"+
		"\u0554\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0559\3\2\2\2\u0558\u0556\3\2"+
		"\2\2\u0559\u055d\7\u02a7\2\2\u055a\u055c\5j\66\2\u055b\u055a\3\2\2\2\u055c"+
		"\u055f\3\2\2\2\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u060d\3\2"+
		"\2\2\u055f\u055d\3\2\2\2\u0560\u0562\7F\2\2\u0561\u0563\5\u0252\u012a"+
		"\2\u0562\u0561\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2\u0564\u0566"+
		"\5\u0334\u019b\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u0567\3"+
		"\2\2\2\u0567\u0568\7\u02a6\2\2\u0568\u056d\5<\37\2\u0569\u056a\7\u02aa"+
		"\2\2\u056a\u056c\5<\37\2\u056b\u0569\3\2\2\2\u056c\u056f\3\2\2\2\u056d"+
		"\u056b\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u0570\3\2\2\2\u056f\u056d\3\2"+
		"\2\2\u0570\u0574\7\u02a7\2\2\u0571\u0573\5j\66\2\u0572\u0571\3\2\2\2\u0573"+
		"\u0576\3\2\2\2\u0574\u0572\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u060d\3\2"+
		"\2\2\u0576\u0574\3\2\2\2\u0577\u0579\7Q\2\2\u0578\u057a\5\u0252\u012a"+
		"\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057c\3\2\2\2\u057b\u057d"+
		"\5\u0334\u019b\2\u057c\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e\3"+
		"\2\2\2\u057e\u057f\7\u02a6\2\2\u057f\u0584\5<\37\2\u0580\u0581\7\u02aa"+
		"\2\2\u0581\u0583\5<\37\2\u0582\u0580\3\2\2\2\u0583\u0586\3\2\2\2\u0584"+
		"\u0582\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0587\3\2\2\2\u0586\u0584\3\2"+
		"\2\2\u0587\u058b\7\u02a7\2\2\u0588\u058a\5j\66\2\u0589\u0588\3\2\2\2\u058a"+
		"\u058d\3\2\2\2\u058b\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u060d\3\2"+
		"\2\2\u058d\u058b\3\2\2\2\u058e\u0590\7\34\2\2\u058f\u0591\5\u0252\u012a"+
		"\2\u0590\u058f\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0593\3\2\2\2\u0592\u058e"+
		"\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0596\7\u00a8\2"+
		"\2\u0595\u0597\5\u0332\u019a\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2\2\2"+
		"\u0597\u0599\3\2\2\2\u0598\u059a\5\u0252\u012a\2\u0599\u0598\3\2\2\2\u0599"+
		"\u059a\3\2\2\2\u059a\u059c\3\2\2\2\u059b\u059d\5\u0334\u019b\2\u059c\u059b"+
		"\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u059f\7\u02a6\2"+
		"\2\u059f\u05a4\5<\37\2\u05a0\u05a1\7\u02aa\2\2\u05a1\u05a3\5<\37\2\u05a2"+
		"\u05a0\3\2\2\2\u05a3\u05a6\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a4\u05a5\3\2"+
		"\2\2\u05a5\u05a7\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a7\u05ab\7\u02a7\2\2\u05a8"+
		"\u05aa\5j\66\2\u05a9\u05a8\3\2\2\2\u05aa\u05ad\3\2\2\2\u05ab\u05a9\3\2"+
		"\2\2\u05ab\u05ac\3\2\2\2\u05ac\u060d\3\2\2\2\u05ad\u05ab\3\2\2\2\u05ae"+
		"\u05b0\7>\2\2\u05af\u05b1\5\u0332\u019a\2\u05b0\u05af\3\2\2\2\u05b0\u05b1"+
		"\3\2\2\2\u05b1\u05b3\3\2\2\2\u05b2\u05b4\5\u0252\u012a\2\u05b3\u05b2\3"+
		"\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05b6\7\u02a6\2\2"+
		"\u05b6\u05bb\5<\37\2\u05b7\u05b8\7\u02aa\2\2\u05b8\u05ba\5<\37\2\u05b9"+
		"\u05b7\3\2\2\2\u05ba\u05bd\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bb\u05bc\3\2"+
		"\2\2\u05bc\u05be\3\2\2\2\u05bd\u05bb\3\2\2\2\u05be\u05c2\7\u02a7\2\2\u05bf"+
		"\u05c1\5j\66\2\u05c0\u05bf\3\2\2\2\u05c1\u05c4\3\2\2\2\u05c2\u05c0\3\2"+
		"\2\2\u05c2\u05c3\3\2\2\2\u05c3\u060d\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c5"+
		"\u05c7\7\u0094\2\2\u05c6\u05c8\5\u0332\u019a\2\u05c7\u05c6\3\2\2\2\u05c7"+
		"\u05c8\3\2\2\2\u05c8\u05ca\3\2\2\2\u05c9\u05cb\5\u0252\u012a\2\u05ca\u05c9"+
		"\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05cd\7\u02a6\2"+
		"\2\u05cd\u05d2\5<\37\2\u05ce\u05cf\7\u02aa\2\2\u05cf\u05d1\5<\37\2\u05d0"+
		"\u05ce\3\2\2\2\u05d1\u05d4\3\2\2\2\u05d2\u05d0\3\2\2\2\u05d2\u05d3\3\2"+
		"\2\2\u05d3\u05d5\3\2\2\2\u05d4\u05d2\3\2\2\2\u05d5\u05d9\7\u02a7\2\2\u05d6"+
		"\u05d8\5j\66\2\u05d7\u05d6\3\2\2\2\u05d8\u05db\3\2\2\2\u05d9\u05d7\3\2"+
		"\2\2\u05d9\u05da\3\2\2\2\u05da\u060d\3\2\2\2\u05db\u05d9\3\2\2\2\u05dc"+
		"\u05de\7\34\2\2\u05dd\u05df\5\u0252\u012a\2\u05de\u05dd\3\2\2\2\u05de"+
		"\u05df\3\2\2\2\u05df\u05e1\3\2\2\2\u05e0\u05dc\3\2\2\2\u05e0\u05e1\3\2"+
		"\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e3\7<\2\2\u05e3\u05e5\7Q\2\2\u05e4\u05e6"+
		"\5\u0252\u012a\2\u05e5\u05e4\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05e7\3"+
		"\2\2\2\u05e7\u05e8\7\u02a6\2\2\u05e8\u05ed\5<\37\2\u05e9\u05ea\7\u02aa"+
		"\2\2\u05ea\u05ec\5<\37\2\u05eb\u05e9\3\2\2\2\u05ec\u05ef\3\2\2\2\u05ed"+
		"\u05eb\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f0\3\2\2\2\u05ef\u05ed\3\2"+
		"\2\2\u05f0\u05f1\7\u02a7\2\2\u05f1\u05f2\7\u0080\2\2\u05f2\u05f3\5\u0252"+
		"\u012a\2\u05f3\u05f4\7\u02a6\2\2\u05f4\u05f9\5<\37\2\u05f5\u05f6\7\u02aa"+
		"\2\2\u05f6\u05f8\5<\37\2\u05f7\u05f5\3\2\2\2\u05f8\u05fb\3\2\2\2\u05f9"+
		"\u05f7\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fc\3\2\2\2\u05fb\u05f9\3\2"+
		"\2\2\u05fc\u05ff\7\u02a7\2\2\u05fd\u05fe\7b\2\2\u05fe\u0600\5> \2\u05ff"+
		"\u05fd\3\2\2\2\u05ff\u0600\3\2\2\2\u0600\u0604\3\2\2\2\u0601\u0603\5@"+
		"!\2\u0602\u0601\3\2\2\2\u0603\u0606\3\2\2\2\u0604\u0602\3\2\2\2\u0604"+
		"\u0605\3\2\2\2\u0605\u060d\3\2\2\2\u0606\u0604\3\2\2\2\u0607\u0608\7\30"+
		"\2\2\u0608\u0609\7\u02a6\2\2\u0609\u060a\5\u027c\u013f\2\u060a\u060b\7"+
		"\u02a7\2\2\u060b\u060d\3\2\2\2\u060c\u0549\3\2\2\2\u060c\u0560\3\2\2\2"+
		"\u060c\u0577\3\2\2\2\u060c\u0592\3\2\2\2\u060c\u05ae\3\2\2\2\u060c\u05c5"+
		"\3\2\2\2\u060c\u05e0\3\2\2\2\u060c\u0607\3\2\2\2\u060d;\3\2\2\2\u060e"+
		"\u0613\5\u027c\u013f\2\u060f\u0610\7\u02a6\2\2\u0610\u0611\5\u027c\u013f"+
		"\2\u0611\u0612\7\u02a7\2\2\u0612\u0614\3\2\2\2\u0613\u060f\3\2\2\2\u0613"+
		"\u0614\3\2\2\2\u0614\u0616\3\2\2\2\u0615\u0617\5\u032a\u0196\2\u0616\u0615"+
		"\3\2\2\2\u0616\u0617\3\2\2\2\u0617=\3\2\2\2\u0618\u0619\t\6\2\2\u0619"+
		"?\3\2\2\2\u061a\u061b\7n\2\2\u061b\u061c\7(\2\2\u061c\u0621\5B\"\2\u061d"+
		"\u061e\7n\2\2\u061e\u061f\7\u00ab\2\2\u061f\u0621\5B\"\2\u0620\u061a\3"+
		"\2\2\2\u0620\u061d\3\2\2\2\u0621A\3\2\2\2\u0622\u0629\7\u0087\2\2\u0623"+
		"\u0629\7\23\2\2\u0624\u0625\7\u0090\2\2\u0625\u0629\7k\2\2\u0626\u0627"+
		"\7\u019c\2\2\u0627\u0629\7\u00f4\2\2\u0628\u0622\3\2\2\2\u0628\u0623\3"+
		"\2\2\2\u0628\u0624\3\2\2\2\u0628\u0626\3\2\2\2\u0629C\3\2\2\2\u062a\u0645"+
		"\5\u0282\u0142\2\u062b\u0645\5\u0284\u0143\2\u062c\u0645\5\u0286\u0144"+
		"\2\u062d\u0645\5\u0288\u0145\2\u062e\u0645\5\u028a\u0146\2\u062f\u0645"+
		"\5\u028c\u0147\2\u0630\u0645\5\u028e\u0148\2\u0631\u0645\5\u0290\u0149"+
		"\2\u0632\u0645\5\u0292\u014a\2\u0633\u0645\5\u0294\u014b\2\u0634\u0645"+
		"\5\u0296\u014c\2\u0635\u0645\5\u0298\u014d\2\u0636\u0645\5\u029a\u014e"+
		"\2\u0637\u0645\5\u029c\u014f\2\u0638\u0645\5\u029e\u0150\2\u0639\u0645"+
		"\5\u02a0\u0151\2\u063a\u0645\5\u02a2\u0152\2\u063b\u0645\5\u02a4\u0153"+
		"\2\u063c\u0645\5\u02a6\u0154\2\u063d\u0645\5\u02a8\u0155\2\u063e\u0645"+
		"\5\u02aa\u0156\2\u063f\u0645\5\u02ac\u0157\2\u0640\u0645\5\u02ae\u0158"+
		"\2\u0641\u0645\5\u02b0\u0159\2\u0642\u0645\5\u02b2\u015a\2\u0643\u0645"+
		"\5\u02b4\u015b\2\u0644\u062a\3\2\2\2\u0644\u062b\3\2\2\2\u0644\u062c\3"+
		"\2\2\2\u0644\u062d\3\2\2\2\u0644\u062e\3\2\2\2\u0644\u062f\3\2\2\2\u0644"+
		"\u0630\3\2\2\2\u0644\u0631\3\2\2\2\u0644\u0632\3\2\2\2\u0644\u0633\3\2"+
		"\2\2\u0644\u0634\3\2\2\2\u0644\u0635\3\2\2\2\u0644\u0636\3\2\2\2\u0644"+
		"\u0637\3\2\2\2\u0644\u0638\3\2\2\2\u0644\u0639\3\2\2\2\u0644\u063a\3\2"+
		"\2\2\u0644\u063b\3\2\2\2\u0644\u063c\3\2\2\2\u0644\u063d\3\2\2\2\u0644"+
		"\u063e\3\2\2\2\u0644\u063f\3\2\2\2\u0644\u0640\3\2\2\2\u0644\u0641\3\2"+
		"\2\2\u0644\u0642\3\2\2\2\u0644\u0643\3\2\2\2\u0645E\3\2\2\2\u0646\u0647"+
		"\7w\2\2\u0647\u0649\7\21\2\2\u0648\u064a\7Y\2\2\u0649\u0648\3\2\2\2\u0649"+
		"\u064a\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064c\7\u0156\2\2\u064c\u064d"+
		"\7\u02a6\2\2\u064d\u064e\5\u027c\u013f\2\u064e\u0651\7\u02a7\2\2\u064f"+
		"\u0650\7\u01af\2\2\u0650\u0652\5\u027c\u013f\2\u0651\u064f\3\2\2\2\u0651"+
		"\u0652\3\2\2\2\u0652\u0654\3\2\2\2\u0653\u0655\5H%\2\u0654\u0653\3\2\2"+
		"\2\u0654\u0655\3\2\2\2\u0655\u0661\3\2\2\2\u0656\u0657\7\u02a6\2\2\u0657"+
		"\u065c\5J&\2\u0658\u0659\7\u02aa\2\2\u0659\u065b\5J&\2\u065a\u0658\3\2"+
		"\2\2\u065b\u065e\3\2\2\2\u065c\u065a\3\2\2\2\u065c\u065d\3\2\2\2\u065d"+
		"\u065f\3\2\2\2\u065e\u065c\3\2\2\2\u065f\u0660\7\u02a7\2\2\u0660\u0662"+
		"\3\2\2\2\u0661\u0656\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0711\3\2\2\2\u0663"+
		"\u0664\7w\2\2\u0664\u0666\7\21\2\2\u0665\u0667\7Y\2\2\u0666\u0665\3\2"+
		"\2\2\u0666\u0667\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u066c\7Q\2\2\u0669"+
		"\u066a\7\u00f8\2\2\u066a\u066b\7\u0299\2\2\u066b\u066d\5\u027c\u013f\2"+
		"\u066c\u0669\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u066f"+
		"\7\u02a6\2\2\u066f\u0674\5\u027c\u013f\2\u0670\u0671\7\u02aa\2\2\u0671"+
		"\u0673\5\u027c\u013f\2\u0672\u0670\3\2\2\2\u0673\u0676\3\2\2\2\u0674\u0672"+
		"\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0677\3\2\2\2\u0676\u0674\3\2\2\2\u0677"+
		"\u067a\7\u02a7\2\2\u0678\u0679\7\u01af\2\2\u0679\u067b\5\u027c\u013f\2"+
		"\u067a\u0678\3\2\2\2\u067a\u067b\3\2\2\2\u067b\u067d\3\2\2\2\u067c\u067e"+
		"\5H%\2\u067d\u067c\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u068a\3\2\2\2\u067f"+
		"\u0680\7\u02a6\2\2\u0680\u0685\5J&\2\u0681\u0682\7\u02aa\2\2\u0682\u0684"+
		"\5J&\2\u0683\u0681\3\2\2\2\u0684\u0687\3\2\2\2\u0685\u0683\3\2\2\2\u0685"+
		"\u0686\3\2\2\2\u0686\u0688\3\2\2\2\u0687\u0685\3\2\2\2\u0688\u0689\7\u02a7"+
		"\2\2\u0689\u068b\3\2\2\2\u068a\u067f\3\2\2\2\u068a\u068b\3\2\2\2\u068b"+
		"\u0711\3\2\2\2\u068c\u068d\7w\2\2\u068d\u068f\7\21\2\2\u068e\u0690\7Y"+
		"\2\2\u068f\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0691\3\2\2\2\u0691"+
		"\u0692\7}\2\2\u0692\u0693\7\u02a6\2\2\u0693\u0694\5\u027c\u013f\2\u0694"+
		"\u0697\7\u02a7\2\2\u0695\u0696\7\u01af\2\2\u0696\u0698\5\u027c\u013f\2"+
		"\u0697\u0695\3\2\2\2\u0697\u0698\3\2\2\2\u0698\u069a\3\2\2\2\u0699\u069b"+
		"\5H%\2\u069a\u0699\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u06a7\3\2\2\2\u069c"+
		"\u069d\7\u02a6\2\2\u069d\u06a2\5J&\2\u069e\u069f\7\u02aa\2\2\u069f\u06a1"+
		"\5J&\2\u06a0\u069e\3\2\2\2\u06a1\u06a4\3\2\2\2\u06a2\u06a0\3\2\2\2\u06a2"+
		"\u06a3\3\2\2\2\u06a3\u06a5\3\2\2\2\u06a4\u06a2\3\2\2\2\u06a5\u06a6\7\u02a7"+
		"\2\2\u06a6\u06a8\3\2\2\2\u06a7\u069c\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8"+
		"\u0711\3\2\2\2\u06a9\u06aa\7w\2\2\u06aa\u06ac\7\21\2\2\u06ab\u06ad\7Y"+
		"\2\2\u06ac\u06ab\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae"+
		"\u06af\7}\2\2\u06af\u06b0\7\u0112\2\2\u06b0\u06b1\7\u02a6\2\2\u06b1\u06b6"+
		"\5\u027c\u013f\2\u06b2\u06b3\7\u02aa\2\2\u06b3\u06b5\5\u027c\u013f\2\u06b4"+
		"\u06b2\3\2\2\2\u06b5\u06b8\3\2\2\2\u06b6\u06b4\3\2\2\2\u06b6\u06b7\3\2"+
		"\2\2\u06b7\u06b9\3\2\2\2\u06b8\u06b6\3\2\2\2\u06b9\u06bc\7\u02a7\2\2\u06ba"+
		"\u06bb\7\u01af\2\2\u06bb\u06bd\5\u027c\u013f\2\u06bc\u06ba\3\2\2\2\u06bc"+
		"\u06bd\3\2\2\2\u06bd\u06bf\3\2\2\2\u06be\u06c0\5H%\2\u06bf\u06be\3\2\2"+
		"\2\u06bf\u06c0\3\2\2\2\u06c0\u06cc\3\2\2\2\u06c1\u06c2\7\u02a6\2\2\u06c2"+
		"\u06c7\5J&\2\u06c3\u06c4\7\u02aa\2\2\u06c4\u06c6\5J&\2\u06c5\u06c3\3\2"+
		"\2\2\u06c6\u06c9\3\2\2\2\u06c7\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8"+
		"\u06ca\3\2\2\2\u06c9\u06c7\3\2\2\2\u06ca\u06cb\7\u02a7\2\2\u06cb\u06cd"+
		"\3\2\2\2\u06cc\u06c1\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u0711\3\2\2\2\u06ce"+
		"\u06cf\7w\2\2\u06cf\u06d1\7\21\2\2\u06d0\u06d2\7Y\2\2\u06d1\u06d0\3\2"+
		"\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d4\7\u0170\2\2\u06d4"+
		"\u06d5\7\u02a6\2\2\u06d5\u06d6\5\u027c\u013f\2\u06d6\u06d9\7\u02a7\2\2"+
		"\u06d7\u06d8\7\u01af\2\2\u06d8\u06da\5\u027c\u013f\2\u06d9\u06d7\3\2\2"+
		"\2\u06d9\u06da\3\2\2\2\u06da\u06dc\3\2\2\2\u06db\u06dd\5H%\2\u06dc\u06db"+
		"\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06e9\3\2\2\2\u06de\u06df\7\u02a6\2"+
		"\2\u06df\u06e4\5J&\2\u06e0\u06e1\7\u02aa\2\2\u06e1\u06e3\5J&\2\u06e2\u06e0"+
		"\3\2\2\2\u06e3\u06e6\3\2\2\2\u06e4\u06e2\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5"+
		"\u06e7\3\2\2\2\u06e6\u06e4\3\2\2\2\u06e7\u06e8\7\u02a7\2\2\u06e8\u06ea"+
		"\3\2\2\2\u06e9\u06de\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u0711\3\2\2\2\u06eb"+
		"\u06ec\7w\2\2\u06ec\u06ee\7\21\2\2\u06ed\u06ef\7Y\2\2\u06ee\u06ed\3\2"+
		"\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\7\u0170\2\2\u06f1"+
		"\u06f2\7\u0112\2\2\u06f2\u06f3\7\u02a6\2\2\u06f3\u06f8\5\u027c\u013f\2"+
		"\u06f4\u06f5\7\u02aa\2\2\u06f5\u06f7\5\u027c\u013f\2\u06f6\u06f4\3\2\2"+
		"\2\u06f7\u06fa\3\2\2\2\u06f8\u06f6\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06fb"+
		"\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fb\u06fe\7\u02a7\2\2\u06fc\u06fd\7\u01af"+
		"\2\2\u06fd\u06ff\5\u027c\u013f\2\u06fe\u06fc\3\2\2\2\u06fe\u06ff\3\2\2"+
		"\2\u06ff\u0701\3\2\2\2\u0700\u0702\5H%\2\u0701\u0700\3\2\2\2\u0701\u0702"+
		"\3\2\2\2\u0702\u070e\3\2\2\2\u0703\u0704\7\u02a6\2\2\u0704\u0709\5J&\2"+
		"\u0705\u0706\7\u02aa\2\2\u0706\u0708\5J&\2\u0707\u0705\3\2\2\2\u0708\u070b"+
		"\3\2\2\2\u0709\u0707\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u070c\3\2\2\2\u070b"+
		"\u0709\3\2\2\2\u070c\u070d\7\u02a7\2\2\u070d\u070f\3\2\2\2\u070e\u0703"+
		"\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0711\3\2\2\2\u0710\u0646\3\2\2\2\u0710"+
		"\u0663\3\2\2\2\u0710\u068c\3\2\2\2\u0710\u06a9\3\2\2\2\u0710\u06ce\3\2"+
		"\2\2\u0710\u06eb\3\2\2\2\u0711G\3\2\2\2\u0712\u0713\7\u01ff\2\2\u0713"+
		"\u0715\7\21\2\2\u0714\u0716\7Y\2\2\u0715\u0714\3\2\2\2\u0715\u0716\3\2"+
		"\2\2\u0716\u0717\3\2\2\2\u0717\u0718\7\u0156\2\2\u0718\u0719\7\u02a6\2"+
		"\2\u0719\u071a\5\u027c\u013f\2\u071a\u071d\7\u02a7\2\2\u071b\u071c\7\u0200"+
		"\2\2\u071c\u071e\5\u027c\u013f\2\u071d\u071b\3\2\2\2\u071d\u071e\3\2\2"+
		"\2\u071e\u0739\3\2\2\2\u071f\u0720\7\u01ff\2\2\u0720\u0722\7\21\2\2\u0721"+
		"\u0723\7Y\2\2\u0722\u0721\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0724\3\2"+
		"\2\2\u0724\u0728\7Q\2\2\u0725\u0726\7\u00f8\2\2\u0726\u0727\7\u0299\2"+
		"\2\u0727\u0729\5\u027c\u013f\2\u0728\u0725\3\2\2\2\u0728\u0729\3\2\2\2"+
		"\u0729\u072a\3\2\2\2\u072a\u072b\7\u02a6\2\2\u072b\u0730\5\u027c\u013f"+
		"\2\u072c\u072d\7\u02aa\2\2\u072d\u072f\5\u027c\u013f\2\u072e\u072c\3\2"+
		"\2\2\u072f\u0732\3\2\2\2\u0730\u072e\3\2\2\2\u0730\u0731\3\2\2\2\u0731"+
		"\u0733\3\2\2\2\u0732\u0730\3\2\2\2\u0733\u0736\7\u02a7\2\2\u0734\u0735"+
		"\7\u0200\2\2\u0735\u0737\5\u027c\u013f\2\u0736\u0734\3\2\2\2\u0736\u0737"+
		"\3\2\2\2\u0737\u0739\3\2\2\2\u0738\u0712\3\2\2\2\u0738\u071f\3\2\2\2\u0739"+
		"I\3\2\2\2\u073a\u073b\7w\2\2\u073b\u073d\5\u0252\u012a\2\u073c\u073e\5"+
		"L\'\2\u073d\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u0742\3\2\2\2\u073f"+
		"\u0741\5P)\2\u0740\u073f\3\2\2\2\u0741\u0744\3\2\2\2\u0742\u0740\3\2\2"+
		"\2\u0742\u0743\3\2\2\2\u0743\u0750\3\2\2\2\u0744\u0742\3\2\2\2\u0745\u0746"+
		"\7\u02a6\2\2\u0746\u074b\5N(\2\u0747\u0748\7\u02aa\2\2\u0748\u074a\5N"+
		"(\2\u0749\u0747\3\2\2\2\u074a\u074d\3\2\2\2\u074b\u0749\3\2\2\2\u074b"+
		"\u074c\3\2\2\2\u074c\u074e\3\2\2\2\u074d\u074b\3\2\2\2\u074e\u074f\7\u02a7"+
		"\2\2\u074f\u0751\3\2\2\2\u0750\u0745\3\2\2\2\u0750\u0751\3\2\2\2\u0751"+
		"K\3\2\2\2\u0752\u0753\7\u00af\2\2\u0753\u0754\7\u016e\2\2\u0754\u0755"+
		"\7\u0207\2\2\u0755\u0756\7\u02a6\2\2\u0756\u075b\5\u027c\u013f\2\u0757"+
		"\u0758\7\u02aa\2\2\u0758\u075a\5\u027c\u013f\2\u0759\u0757\3\2\2\2\u075a"+
		"\u075d\3\2\2\2\u075b\u0759\3\2\2\2\u075b\u075c\3\2\2\2\u075c\u075e\3\2"+
		"\2\2\u075d\u075b\3\2\2\2\u075e\u075f\7\u02a7\2\2\u075f\u0772\3\2\2\2\u0760"+
		"\u0761\7\u00af\2\2\u0761\u0762\7\u016e\2\2\u0762\u0763\7\u0207\2\2\u0763"+
		"\u0772\7c\2\2\u0764\u0765\7\u00af\2\2\u0765\u0766\7E\2\2\u0766\u0767\7"+
		"\u02a6\2\2\u0767\u076c\5\u027c\u013f\2\u0768\u0769\7\u02aa\2\2\u0769\u076b"+
		"\5\u027c\u013f\2\u076a\u0768\3\2\2\2\u076b\u076e\3\2\2\2\u076c\u076a\3"+
		"\2\2\2\u076c\u076d\3\2\2\2\u076d\u076f\3\2\2\2\u076e\u076c\3\2\2\2\u076f"+
		"\u0770\7\u02a7\2\2\u0770\u0772\3\2\2\2\u0771\u0752\3\2\2\2\u0771\u0760"+
		"\3\2\2\2\u0771\u0764\3\2\2\2\u0772M\3\2\2\2\u0773\u0774\7\u01ff\2\2\u0774"+
		"\u0778\5\u0252\u012a\2\u0775\u0777\5P)\2\u0776\u0775\3\2\2\2\u0777\u077a"+
		"\3\2\2\2\u0778\u0776\3\2\2\2\u0778\u0779\3\2\2\2\u0779O\3\2\2\2\u077a"+
		"\u0778\3\2\2\2\u077b\u077d\7\u01fc\2\2\u077c\u077b\3\2\2\2\u077c\u077d"+
		"\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u0780\7\u0135\2\2\u077f\u0781\7\u0299"+
		"\2\2\u0780\u077f\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0782\3\2\2\2\u0782"+
		"\u07a9\5\u0214\u010b\2\u0783\u0785\7\u0114\2\2\u0784\u0786\7\u0299\2\2"+
		"\u0785\u0784\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u07a9"+
		"\5\u027c\u013f\2\u0788\u0789\7\u0122\2\2\u0789\u078b\7\u0129\2\2\u078a"+
		"\u078c\7\u0299\2\2\u078b\u078a\3\2\2\2\u078b\u078c\3\2\2\2\u078c\u078d"+
		"\3\2\2\2\u078d\u07a9\5\u027c\u013f\2\u078e\u078f\7F\2\2\u078f\u0791\7"+
		"\u0129\2\2\u0790\u0792\7\u0299\2\2\u0791\u0790\3\2\2\2\u0791\u0792\3\2"+
		"\2\2\u0792\u0793\3\2\2\2\u0793\u07a9\5\u027c\u013f\2\u0794\u0796\7\u018b"+
		"\2\2\u0795\u0797\7\u0299\2\2\u0796\u0795\3\2\2\2\u0796\u0797\3\2\2\2\u0797"+
		"\u0798\3\2\2\2\u0798\u07a9\5\u027c\u013f\2\u0799\u079b\7\u0192\2\2\u079a"+
		"\u079c\7\u0299\2\2\u079b\u079a\3\2\2\2\u079b\u079c\3\2\2\2\u079c\u079d"+
		"\3\2\2\2\u079d\u07a9\5\u027c\u013f\2\u079e\u07a0\7\u0204\2\2\u079f\u07a1"+
		"\7\u0299\2\2\u07a0\u079f\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2"+
		"\2\u07a2\u07a9\5\u0252\u012a\2\u07a3\u07a5\7\u019d\2\2\u07a4\u07a6\7\u0299"+
		"\2\2\u07a5\u07a4\3\2\2\2\u07a5\u07a6\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7"+
		"\u07a9\5\u0252\u012a\2\u07a8\u077c\3\2\2\2\u07a8\u0783\3\2\2\2\u07a8\u0788"+
		"\3\2\2\2\u07a8\u078e\3\2\2\2\u07a8\u0794\3\2\2\2\u07a8\u0799\3\2\2\2\u07a8"+
		"\u079e\3\2\2\2\u07a8\u07a3\3\2\2\2\u07a9Q\3\2\2\2\u07aa\u07ad\5T+\2\u07ab"+
		"\u07ad\5V,\2\u07ac\u07aa\3\2\2\2\u07ac\u07ab\3\2\2\2\u07adS\3\2\2\2\u07ae"+
		"\u07af\7\37\2\2\u07af\u07b0\7\u0204\2\2\u07b0\u07b1\5\u0252\u012a\2\u07b1"+
		"\u07b2\7\7\2\2\u07b2\u07b3\7\u0123\2\2\u07b3\u07b7\5\u027c\u013f\2\u07b4"+
		"\u07b5\7\u0148\2\2\u07b5\u07b6\7\u0299\2\2\u07b6\u07b8\5\u027c\u013f\2"+
		"\u07b7\u07b4\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07be\3\2\2\2\u07b9\u07bb"+
		"\7\u0135\2\2\u07ba\u07bc\7\u0299\2\2\u07bb\u07ba\3\2\2\2\u07bb\u07bc\3"+
		"\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bf\5\u0214\u010b\2\u07be\u07b9\3\2"+
		"\2\2\u07be\u07bf\3\2\2\2\u07bfU\3\2\2\2\u07c0\u07c1\7\37\2\2\u07c1\u07c2"+
		"\7\u0204\2\2\u07c2\u07c3\5\u0252\u012a\2\u07c3\u07c4\7\7\2\2\u07c4\u07c5"+
		"\7\u0123\2\2\u07c5\u07c6\5\u027c\u013f\2\u07c6\u07c7\7\u00ad\2\2\u07c7"+
		"\u07c8\7\u0172\2\2\u07c8\u07c9\7@\2\2\u07c9\u07cf\5\u0252\u012a\2\u07ca"+
		"\u07cc\7\u0144\2\2\u07cb\u07cd\7\u0299\2\2\u07cc\u07cb\3\2\2\2\u07cc\u07cd"+
		"\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d0\5\u027c\u013f\2\u07cf\u07ca\3"+
		"\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d6\3\2\2\2\u07d1\u07d3\7\u015e\2\2"+
		"\u07d2\u07d4\7\u0299\2\2\u07d3\u07d2\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4"+
		"\u07d5\3\2\2\2\u07d5\u07d7\5\u027c\u013f\2\u07d6\u07d1\3\2\2\2\u07d6\u07d7"+
		"\3\2\2\2\u07d7\u07dd\3\2\2\2\u07d8\u07da\7\u00fd\2\2\u07d9\u07db\7\u0299"+
		"\2\2\u07da\u07d9\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc"+
		"\u07de\5\u027c\u013f\2\u07dd\u07d8\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07e4"+
		"\3\2\2\2\u07df\u07e1\7\u018c\2\2\u07e0\u07e2\7\u0299\2\2\u07e1\u07e0\3"+
		"\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e5\5\u027c\u013f"+
		"\2\u07e4\u07df\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5\u07eb\3\2\2\2\u07e6\u07e8"+
		"\7\u019d\2\2\u07e7\u07e9\7\u0299\2\2\u07e8\u07e7\3\2\2\2\u07e8\u07e9\3"+
		"\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec\5\u0252\u012a\2\u07eb\u07e6\3\2"+
		"\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07ee\3\2\2\2\u07ed\u07ef\7\u021a\2\2\u07ee"+
		"\u07ed\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u07f5\3\2\2\2\u07f0\u07f2\7\u0114"+
		"\2\2\u07f1\u07f3\7\u0299\2\2\u07f2\u07f1\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3"+
		"\u07f4\3\2\2\2\u07f4\u07f6\5\u027c\u013f\2\u07f5\u07f0\3\2\2\2\u07f5\u07f6"+
		"\3\2\2\2\u07f6\u07f7\3\2\2\2\u07f7\u07f9\7\u0135\2\2\u07f8\u07fa\7\u0299"+
		"\2\2\u07f9\u07f8\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb"+
		"\u07fc\5\u0214\u010b\2\u07fcW\3\2\2\2\u07fd\u07ff\7\37\2\2\u07fe\u0800"+
		"\5Z.\2\u07ff\u07fe\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0801\3\2\2\2\u0801"+
		"\u0802\7\u00a4\2\2\u0802\u0803\5\u0252\u012a\2\u0803\u0804\t\7\2\2\u0804"+
		"\u0805\t\b\2\2\u0805\u0806\7n\2\2\u0806\u0807\5\u0252\u012a\2\u0807\u0808"+
		"\7:\2\2\u0808\u0809\7\60\2\2\u0809\u080b\7\u01da\2\2\u080a\u080c\5\\/"+
		"\2\u080b\u080a\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080e"+
		"\5\4\3\2\u080eY\3\2\2\2\u080f\u0810\7\u0126\2\2\u0810\u0817\7\u0299\2"+
		"\2\u0811\u0814\7!\2\2\u0812\u0813\7\u02a6\2\2\u0813\u0815\7\u02a7\2\2"+
		"\u0814\u0812\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0818\3\2\2\2\u0816\u0818"+
		"\5\u0252\u012a\2\u0817\u0811\3\2\2\2\u0817\u0816\3\2\2\2\u0818[\3\2\2"+
		"\2\u0819\u081a\t\t\2\2\u081a\u081b\5\u0252\u012a\2\u081b]\3\2\2\2\u081c"+
		"\u081e\7\37\2\2\u081d\u081f\5\u0322\u0192\2\u081e\u081d\3\2\2\2\u081e"+
		"\u081f\3\2\2\2\u081f\u0821\3\2\2\2\u0820\u0822\5\"\22\2\u0821\u0820\3"+
		"\2\2\2\u0821\u0822\3\2\2\2\u0822\u0824\3\2\2\2\u0823\u0825\5Z.\2\u0824"+
		"\u0823\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u0829\3\2\2\2\u0826\u0827\7\u0095"+
		"\2\2\u0827\u0828\7\u01df\2\2\u0828\u082a\t\n\2\2\u0829\u0826\3\2\2\2\u0829"+
		"\u082a\3\2\2\2\u082a\u082b\3\2\2\2\u082b\u082c\7\u0219\2\2\u082c\u0838"+
		"\5\u0252\u012a\2\u082d\u082e\7\u02a6\2\2\u082e\u0833\5\64\33\2\u082f\u0830"+
		"\7\u02aa\2\2\u0830\u0832\5\64\33\2\u0831\u082f\3\2\2\2\u0832\u0835\3\2"+
		"\2\2\u0833\u0831\3\2\2\2\u0833\u0834\3\2\2\2\u0834\u0836\3\2\2\2\u0835"+
		"\u0833\3\2\2\2\u0836\u0837\7\u02a7\2\2\u0837\u0839\3\2\2\2\u0838\u082d"+
		"\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u083b\7\f\2\2\u083b"+
		"\u083d\5\u00be`\2\u083c\u083e\5`\61\2\u083d\u083c\3\2\2\2\u083d\u083e"+
		"\3\2\2\2\u083e_\3\2\2\2\u083f\u0841\7\u00b4\2\2\u0840\u0842\t\13\2\2\u0841"+
		"\u0840\3\2\2\2\u0841\u0842\3\2\2\2\u0842\u0843\3\2\2\2\u0843\u0844\7\30"+
		"\2\2\u0844\u0845\7p\2\2\u0845a\3\2\2\2\u0846\u0849\5\u0286\u0144\2\u0847"+
		"\u0849\5\u028c\u0147\2\u0848\u0846\3\2\2\2\u0848\u0847\3\2\2\2\u0849c"+
		"\3\2\2\2\u084a\u084b\7\u00fa\2\2\u084b\u084f\5f\64\2\u084c\u084e\5\u027c"+
		"\u013f\2\u084d\u084c\3\2\2\2\u084e\u0851\3\2\2\2\u084f\u084d\3\2\2\2\u084f"+
		"\u0850\3\2\2\2\u0850\u086d\3\2\2\2\u0851\u084f\3\2\2\2\u0852\u0855\7\u013d"+
		"\2\2\u0853\u0856\5\u027c\u013f\2\u0854\u0856\5\u027c\u013f\2\u0855\u0853"+
		"\3\2\2\2\u0855\u0854\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0860\5\u0256\u012c"+
		"\2\u0858\u0859\7\u01f6\2\2\u0859\u085d\5f\64\2\u085a\u085c\5\u027c\u013f"+
		"\2\u085b\u085a\3\2\2\2\u085c\u085f\3\2\2\2\u085d\u085b\3\2\2\2\u085d\u085e"+
		"\3\2\2\2\u085e\u0861\3\2\2\2\u085f\u085d\3\2\2\2\u0860\u0858\3\2\2\2\u0860"+
		"\u0861\3\2\2\2\u0861\u086a\3\2\2\2\u0862\u0863\7\u0134\2\2\u0863\u0867"+
		"\5f\64\2\u0864\u0866\5\u027c\u013f\2\u0865\u0864\3\2\2\2\u0866\u0869\3"+
		"\2\2\2\u0867\u0865\3\2\2\2\u0867\u0868\3\2\2\2\u0868\u086b\3\2\2\2\u0869"+
		"\u0867\3\2\2\2\u086a\u0862\3\2\2\2\u086a\u086b\3\2\2\2\u086b\u086d\3\2"+
		"\2\2\u086c\u084a\3\2\2\2\u086c\u0852\3\2\2\2\u086de\3\2\2\2\u086e\u0873"+
		"\7\u00e8\2\2\u086f\u0873\5\u027c\u013f\2\u0870\u0873\5\u027c\u013f\2\u0871"+
		"\u0873\5\u027c\u013f\2\u0872\u086e\3\2\2\2\u0872\u086f\3\2\2\2\u0872\u0870"+
		"\3\2\2\2\u0872\u0871\3\2\2\2\u0873g\3\2\2\2\u0874\u087a\7\u0131\2\2\u0875"+
		"\u087a\7\u012a\2\2\u0876\u0877\7\u012a\2\2\u0877\u0878\7n\2\2\u0878\u087a"+
		"\7\u01e6\2\2\u0879\u0874\3\2\2\2\u0879\u0875\3\2\2\2\u0879\u0876\3\2\2"+
		"\2\u087ai\3\2\2\2\u087b\u0883\5l\67\2\u087c\u0883\5n8\2\u087d\u0883\5"+
		"p9\2\u087e\u0883\5r:\2\u087f\u0883\5t;\2\u0880\u0883\5v<\2\u0881\u0883"+
		"\5x=\2\u0882\u087b\3\2\2\2\u0882\u087c\3\2\2\2\u0882\u087d\3\2\2\2\u0882"+
		"\u087e\3\2\2\2\u0882\u087f\3\2\2\2\u0882\u0880\3\2\2\2\u0882\u0881\3\2"+
		"\2\2\u0883k\3\2\2\2\u0884\u0886\7\u016a\2\2\u0885\u0887\7\u0299\2\2\u0886"+
		"\u0885\3\2\2\2\u0886\u0887\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u0889\5\u027c"+
		"\u013f\2\u0889m\3\2\2\2\u088a\u088b\7\u00ae\2\2\u088b\u088c\7\u0106\2"+
		"\2\u088co\3\2\2\2\u088d\u088e\7\u00ae\2\2\u088e\u088f\7\u0156\2\2\u088f"+
		"q\3\2\2\2\u0890\u0891\7\u00b4\2\2\u0891\u0892\7\u01ac\2\2\u0892\u0893"+
		"\5\u0252\u012a\2\u0893s\3\2\2\2\u0894\u0895\7\u00b0\2\2\u0895u\3\2\2\2"+
		"\u0896\u0897\7J\2\2\u0897w\3\2\2\2\u0898\u0899\7\u0114\2\2\u0899\u089a"+
		"\5\u027c\u013f\2\u089ay\3\2\2\2\u089b\u089d\t\f\2\2\u089c\u089b\3\2\2"+
		"\2\u089c\u089d\3\2\2\2\u089d\u089e\3\2\2\2\u089e\u089f\5\u0252\u012a\2"+
		"\u089f\u08a0\5\u0240\u0121\2\u08a0{\3\2\2\2\u08a1\u08a2\7\u0114\2\2\u08a2"+
		"\u08b9\5\u027c\u013f\2\u08a3\u08a4\7\u016b\2\2\u08a4\u08b9\7\u0095\2\2"+
		"\u08a5\u08a7\7i\2\2\u08a6\u08a5\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8"+
		"\3\2\2\2\u08a8\u08b9\7+\2\2\u08a9\u08aa\7\u011d\2\2\u08aa\u08b4\7\u0095"+
		"\2\2\u08ab\u08ac\7\u019c\2\2\u08ac\u08b4\7\u0095\2\2\u08ad\u08ae\7\177"+
		"\2\2\u08ae\u08af\7\u0095\2\2\u08af\u08b4\7\u0122\2\2\u08b0\u08b1\7d\2"+
		"\2\u08b1\u08b2\7\u0095\2\2\u08b2\u08b4\7\u0122\2\2\u08b3\u08a9\3\2\2\2"+
		"\u08b3\u08ab\3\2\2\2\u08b3\u08ad\3\2\2\2\u08b3\u08b0\3\2\2\2\u08b4\u08b9"+
		"\3\2\2\2\u08b5\u08b6\7\u0095\2\2\u08b6\u08b7\7\u01df\2\2\u08b7\u08b9\t"+
		"\n\2\2\u08b8\u08a1\3\2\2\2\u08b8\u08a3\3\2\2\2\u08b8\u08a6\3\2\2\2\u08b8"+
		"\u08b3\3\2\2\2\u08b8\u08b5\3\2\2\2\u08b9}\3\2\2\2\u08ba\u08bb\7\t\2\2"+
		"\u08bb\u08bd\7#\2\2\u08bc\u08be\5\u0252\u012a\2\u08bd\u08bc\3\2\2\2\u08bd"+
		"\u08be\3\2\2\2\u08be\u08c0\3\2\2\2\u08bf\u08c1\5b\62\2\u08c0\u08bf\3\2"+
		"\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3"+
		"\u08cd\3\2\2\2\u08c4\u08c5\7\t\2\2\u08c5\u08c6\7#\2\2\u08c6\u08c7\5\u0252"+
		"\u012a\2\u08c7\u08c8\7\u0212\2\2\u08c8\u08c9\7\u0122\2\2\u08c9\u08ca\7"+
		"\u0129\2\2\u08ca\u08cb\7\u0197\2\2\u08cb\u08cd\3\2\2\2\u08cc\u08ba\3\2"+
		"\2\2\u08cc\u08c4\3\2\2\2\u08cd\177\3\2\2\2\u08ce\u08cf\7\t\2\2\u08cf\u08d1"+
		"\7\u008d\2\2\u08d0\u08d2\5\u0252\u012a\2\u08d1\u08d0\3\2\2\2\u08d1\u08d2"+
		"\3\2\2\2\u08d2\u08d4\3\2\2\2\u08d3\u08d5\5b\62\2\u08d4\u08d3\3\2\2\2\u08d5"+
		"\u08d6\3\2\2\2\u08d6\u08d4\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u08e1\3\2"+
		"\2\2\u08d8\u08d9\7\t\2\2\u08d9\u08da\7\u008d\2\2\u08da\u08db\5\u0252\u012a"+
		"\2\u08db\u08dc\7\u0212\2\2\u08dc\u08dd\7\u0122\2\2\u08dd\u08de\7\u0129"+
		"\2\2\u08de\u08df\7\u0197\2\2\u08df\u08e1\3\2\2\2\u08e0\u08ce\3\2\2\2\u08e0"+
		"\u08d8\3\2\2\2\u08e1\u0081\3\2\2\2\u08e2\u08e4\7\t\2\2\u08e3\u08e5\5Z"+
		".\2\u08e4\u08e3\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6"+
		"\u08e7\7\u013b\2\2\u08e7\u08eb\5\u0252\u012a\2\u08e8\u08e9\7n\2\2\u08e9"+
		"\u08ea\7\u01de\2\2\u08ea\u08ec\5d\63\2\u08eb\u08e8\3\2\2\2\u08eb\u08ec"+
		"\3\2\2\2\u08ec\u08f3\3\2\2\2\u08ed\u08ee\7n\2\2\u08ee\u08f0\7\u0117\2"+
		"\2\u08ef\u08f1\7i\2\2\u08f0\u08ef\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08f2"+
		"\3\2\2\2\u08f2\u08f4\7\u01b9\2\2\u08f3\u08ed\3\2\2\2\u08f3\u08f4\3\2\2"+
		"\2\u08f4\u08f8\3\2\2\2\u08f5\u08f6\7\u0083\2\2\u08f6\u08f7\7\u00a2\2\2"+
		"\u08f7\u08f9\5\u0252\u012a\2\u08f8\u08f5\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9"+
		"\u08fb\3\2\2\2\u08fa\u08fc\5h\65\2\u08fb\u08fa\3\2\2\2\u08fb\u08fc\3\2"+
		"\2\2\u08fc\u08ff\3\2\2\2\u08fd\u08fe\7\u0114\2\2\u08fe\u0900\5\u027c\u013f"+
		"\2\u08ff\u08fd\3\2\2\2\u08ff\u0900\3\2\2\2\u0900\u0903\3\2\2\2\u0901\u0902"+
		"\7\u012d\2\2\u0902\u0904\5\4\3\2\u0903\u0901\3\2\2\2\u0903\u0904\3\2\2"+
		"\2\u0904\u0083\3\2\2\2\u0905\u0906\7\t\2\2\u0906\u0907\7\u0150\2\2\u0907"+
		"\u090b\5\u0252\u012a\2\u0908\u090a\5|?\2\u0909\u0908\3\2\2\2\u090a\u090d"+
		"\3\2\2\2\u090b\u0909\3\2\2\2\u090b\u090c\3\2\2\2\u090c\u0085\3\2\2\2\u090d"+
		"\u090b\3\2\2\2\u090e\u090f\7\t\2\2\u090f\u0910\7\u0162\2\2\u0910\u0911"+
		"\7\u01d9\2\2\u0911\u0912\7\u026f\2\2\u0912\u0913\7\u0174\2\2\u0913\u0914"+
		"\7Q\2\2\u0914\u0087\3\2\2\2\u0915\u0916\7\t\2\2\u0916\u0917\7\u0172\2"+
		"\2\u0917\u0918\7@\2\2\u0918\u0919\5\u0252\u012a\2\u0919\u091a\7\7\2\2"+
		"\u091a\u091b\7\u020d\2\2\u091b\u0921\5\u027c\u013f\2\u091c\u091e\7\u015e"+
		"\2\2\u091d\u091f\7\u0299\2\2\u091e\u091d\3\2\2\2\u091e\u091f\3\2\2\2\u091f"+
		"\u0920\3\2\2\2\u0920\u0922\5\u027c\u013f\2\u0921\u091c\3\2\2\2\u0921\u0922"+
		"\3\2\2\2\u0922\u0924\3\2\2\2\u0923\u0925\7\u021a\2\2\u0924\u0923\3\2\2"+
		"\2\u0924\u0925\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u0928\7\u0135\2\2\u0927"+
		"\u0929\7\u0299\2\2\u0928\u0927\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u092a"+
		"\3\2\2\2\u092a\u092b\5\u0214\u010b\2\u092b\u0089\3\2\2\2\u092c\u092d\7"+
		"\t\2\2\u092d\u092e\7{\2\2\u092e\u0932\5\u0252\u012a\2\u092f\u0931\5|?"+
		"\2\u0930\u092f\3\2\2\2\u0931\u0934\3\2\2\2\u0932\u0930\3\2\2\2\u0932\u0933"+
		"\3\2\2\2\u0933\u008b\3\2\2\2\u0934\u0932\3\2\2\2\u0935\u0936\7\t\2\2\u0936"+
		"\u0937\7\u01e0\2\2\u0937\u0938\5\u0252\u012a\2\u0938\u0939\7\u01a8\2\2"+
		"\u0939\u093a\7\u02a6\2\2\u093a\u093f\5.\30\2\u093b\u093c\7\u02aa\2\2\u093c"+
		"\u093e\5.\30\2\u093d\u093b\3\2\2\2\u093e\u0941\3\2\2\2\u093f\u093d\3\2"+
		"\2\2\u093f\u0940\3\2\2\2\u0940\u0942\3\2\2\2\u0941\u093f\3\2\2\2\u0942"+
		"\u0943\7\u02a7\2\2\u0943\u008d\3\2\2\2\u0944\u0946\7\t\2\2\u0945\u0947"+
		"\5\u032c\u0197\2\u0946\u0945\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0949\3"+
		"\2\2\2\u0948\u094a\7D\2\2\u0949\u0948\3\2\2\2\u0949\u094a\3\2\2\2\u094a"+
		"\u094b\3\2\2\2\u094b\u094c\7\u009f\2\2\u094c\u094d\5\u0252\u012a\2\u094d"+
		"\u0952\5\u0090I\2\u094e\u094f\7\u02aa\2\2\u094f\u0951\5\u0090I\2\u0950"+
		"\u094e\3\2\2\2\u0951\u0954\3\2\2\2\u0952\u0950\3\2\2\2\u0952\u0953\3\2"+
		"\2\2\u0953\u0956\3\2\2\2\u0954\u0952\3\2\2\2\u0955\u0957\5F$\2\u0956\u0955"+
		"\3\2\2\2\u0956\u0957\3\2\2\2\u0957\u008f\3\2\2\2\u0958\u0a7c\5D#\2\u0959"+
		"\u095b\7\7\2\2\u095a\u095c\7\32\2\2\u095b\u095a\3\2\2\2\u095b\u095c\3"+
		"\2\2\2\u095c\u095d\3\2\2\2\u095d\u0961\5\64\33\2\u095e\u0962\7\u014a\2"+
		"\2\u095f\u0960\7\u00f5\2\2\u0960\u0962\5\u0252\u012a\2\u0961\u095e\3\2"+
		"\2\2\u0961\u095f\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0a7c\3\2\2\2\u0963"+
		"\u0965\7\7\2\2\u0964\u0966\7\32\2\2\u0965\u0964\3\2\2\2\u0965\u0966\3"+
		"\2\2\2\u0966\u0967\3\2\2\2\u0967\u0968\7\u02a6\2\2\u0968\u096d\5\64\33"+
		"\2\u0969\u096a\7\u02aa\2\2\u096a\u096c\5\64\33\2\u096b\u0969\3\2\2\2\u096c"+
		"\u096f\3\2\2\2\u096d\u096b\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u0970\3\2"+
		"\2\2\u096f\u096d\3\2\2\2\u0970\u0971\7\u02a7\2\2\u0971\u0a7c\3\2\2\2\u0972"+
		"\u0973\7\7\2\2\u0973\u0a7c\5:\36\2\u0974\u0976\7\u00f8\2\2\u0975\u0977"+
		"\7\u0299\2\2\u0976\u0975\3\2\2\2\u0976\u0977\3\2\2\2\u0977\u0978\3\2\2"+
		"\2\u0978\u0a7c\t\r\2\2\u0979\u097b\7\t\2\2\u097a\u097c\7\32\2\2\u097b"+
		"\u097a\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u097d\3\2\2\2\u097d\u097e\5\u0252"+
		"\u012a\2\u097e\u097f\5\u0094K\2\u097f\u0a7c\3\2\2\2\u0980\u0981\7\t\2"+
		"\2\u0981\u0982\7F\2\2\u0982\u0983\5\u0252\u012a\2\u0983\u0984\5\u0338"+
		"\u019d\2\u0984\u0a7c\3\2\2\2\u0985\u0987\7\26\2\2\u0986\u0988\7\32\2\2"+
		"\u0987\u0986\3\2\2\2\u0987\u0988\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u098a"+
		"\5\u0252\u012a\2\u098a\u098c\5\64\33\2\u098b\u098d\3\2\2\2\u098c\u098b"+
		"\3\2\2\2\u098c\u098d\3\2\2\2\u098d\u0a7c\3\2\2\2\u098e\u0990\7&\2\2\u098f"+
		"\u098e\3\2\2\2\u098f\u0990\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u0992\7\27"+
		"\2\2\u0992\u0993\7\u0090\2\2\u0993\u0994\7\u0299\2\2\u0994\u0998\5\u027c"+
		"\u013f\2\u0995\u0996\7\31\2\2\u0996\u0997\7\u0299\2\2\u0997\u0999\5\u027c"+
		"\u013f\2\u0998\u0995\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u0a7c\3\2\2\2\u099a"+
		"\u099b\7\36\2\2\u099b\u099c\7\u00a2\2\2\u099c\u099d\7\27\2\2\u099d\u099e"+
		"\7\u0090\2\2\u099e\u09a1\5\u027c\u013f\2\u099f\u09a0\7\31\2\2\u09a0\u09a2"+
		"\5\u027c\u013f\2\u09a1\u099f\3\2\2\2\u09a1\u09a2\3\2\2\2\u09a2\u0a7c\3"+
		"\2\2\2\u09a3\u09a4\7\u012a\2\2\u09a4\u0a7c\7R\2\2\u09a5\u09a6\7\u0131"+
		"\2\2\u09a6\u0a7c\7R\2\2\u09a7\u09a8\7\u012b\2\2\u09a8\u0a7c\7\u0204\2"+
		"\2\u09a9\u09aa\7\u015c\2\2\u09aa\u0a7c\7\u0204\2\2\u09ab\u09ad\7/\2\2"+
		"\u09ac\u09ae\7\32\2\2\u09ad\u09ac\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u09af"+
		"\3\2\2\2\u09af\u0a7c\5\u0252\u012a\2\u09b0\u09b1\7/\2\2\u09b1\u09b2\7"+
		"F\2\2\u09b2\u0a7c\5\u0252\u012a\2\u09b3\u09b4\7/\2\2\u09b4\u09b5\7Q\2"+
		"\2\u09b5\u0a7c\5\u0252\u012a\2\u09b6\u09b7\7/\2\2\u09b7\u09b8\7z\2\2\u09b8"+
		"\u0a7c\7Q\2\2\u09b9\u09ba\7/\2\2\u09ba\u09bb\7<\2\2\u09bb\u09bc\7Q\2\2"+
		"\u09bc\u0a7c\5\u0252\u012a\2\u09bd\u0a7c\7;\2\2\u09be\u09c0\7\\\2\2\u09bf"+
		"\u09c1\7\u0299\2\2\u09c0\u09bf\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u09c2"+
		"\3\2\2\2\u09c2\u0a7c\t\3\2\2\u09c3\u09c5\7\u0194\2\2\u09c4\u09c6\7\32"+
		"\2\2\u09c5\u09c4\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09c7\3\2\2\2\u09c7"+
		"\u09cb\5\64\33\2\u09c8\u09cc\7\u014a\2\2\u09c9\u09ca\7\u00f5\2\2\u09ca"+
		"\u09cc\5\u0252\u012a\2\u09cb\u09c8\3\2\2\2\u09cb\u09c9\3\2\2\2\u09cb\u09cc"+
		"\3\2\2\2\u09cc\u0a7c\3\2\2\2\u09cd\u09ce\7s\2\2\u09ce\u09cf\7\21\2\2\u09cf"+
		"\u09d4\5\u027c\u013f\2\u09d0\u09d1\7\u02aa\2\2\u09d1\u09d3\5\u027c\u013f"+
		"\2\u09d2\u09d0\3\2\2\2\u09d3\u09d6\3\2\2\2\u09d4\u09d2\3\2\2\2\u09d4\u09d5"+
		"\3\2\2\2\u09d5\u0a7c\3\2\2\2\u09d6\u09d4\3\2\2\2\u09d7\u09d8\7\u0083\2"+
		"\2\u09d8\u09d9\7\32\2\2\u09d9\u09da\5\u0252\u012a\2\u09da\u09db\7\u00a2"+
		"\2\2\u09db\u09dc\5\u0252\u012a\2\u09dc\u0a7c\3\2\2\2\u09dd\u09de\7\u0083"+
		"\2\2\u09de\u09df\7F\2\2\u09df\u09e0\5\u0252\u012a\2\u09e0\u09e1\7\u00a2"+
		"\2\2\u09e1\u09e2\5\u0252\u012a\2\u09e2\u0a7c\3\2\2\2\u09e3\u09e4\7\u0083"+
		"\2\2\u09e4\u09e5\7Q\2\2\u09e5\u09e6\5\u0252\u012a\2\u09e6\u09e7\7\u00a2"+
		"\2\2\u09e7\u09e8\5\u0252\u012a\2\u09e8\u0a7c\3\2\2\2\u09e9\u09eb\7\u0083"+
		"\2\2\u09ea\u09ec\t\16\2\2\u09eb\u09ea\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec"+
		"\u09ed\3\2\2\2\u09ed\u0a7c\5\u0252\u012a\2\u09ee\u09ef\7\u021c\2\2\u09ef"+
		"\u0a7c\7\u0216\2\2\u09f0\u09f1\7\u00b4\2\2\u09f1\u0a7c\7\u0216\2\2\u09f2"+
		"\u09f3\7\7\2\2\u09f3\u09f4\7w\2\2\u09f4\u0a7c\5J&\2\u09f5\u09f6\7/\2\2"+
		"\u09f6\u09f7\7w\2\2\u09f7\u09fc\5\u027c\u013f\2\u09f8\u09f9\7\u02aa\2"+
		"\2\u09f9\u09fb\5\u027c\u013f\2\u09fa\u09f8\3\2\2\2\u09fb\u09fe\3\2\2\2"+
		"\u09fc\u09fa\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u0a7c\3\2\2\2\u09fe\u09fc"+
		"\3\2\2\2\u09ff\u0a00\7\u012b\2\2\u0a00\u0a01\7w\2\2\u0a01\u0a06\5\u0096"+
		"L\2\u0a02\u0a03\7\u02aa\2\2\u0a03\u0a05\5\u0096L\2\u0a04\u0a02\3\2\2\2"+
		"\u0a05\u0a08\3\2\2\2\u0a06\u0a04\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07\u0a09"+
		"\3\2\2\2\u0a08\u0a06\3\2\2\2\u0a09\u0a0a\7\u0204\2\2\u0a0a\u0a7c\3\2\2"+
		"\2\u0a0b\u0a0c\7\u015c\2\2\u0a0c\u0a0d\7w\2\2\u0a0d\u0a12\5\u0096L\2\u0a0e"+
		"\u0a0f\7\u02aa\2\2\u0a0f\u0a11\5\u0096L\2\u0a10\u0a0e\3\2\2\2\u0a11\u0a14"+
		"\3\2\2\2\u0a12\u0a10\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a15\3\2\2\2\u0a14"+
		"\u0a12\3\2\2\2\u0a15\u0a16\7\u0204\2\2\u0a16\u0a7c\3\2\2\2\u0a17\u0a18"+
		"\7\u020b\2\2\u0a18\u0a19\7w\2\2\u0a19\u0a1e\5\u0096L\2\u0a1a\u0a1b\7\u02aa"+
		"\2\2\u0a1b\u0a1d\5\u0096L\2\u0a1c\u0a1a\3\2\2\2\u0a1d\u0a20\3\2\2\2\u0a1e"+
		"\u0a1c\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a7c\3\2\2\2\u0a20\u0a1e\3\2"+
		"\2\2\u0a21\u0a22\7\u0110\2\2\u0a22\u0a23\7w\2\2\u0a23\u0a7c\5\u027c\u013f"+
		"\2\u0a24\u0a25\7\u01ca\2\2\u0a25\u0a26\7w\2\2\u0a26\u0a2b\5\u027c\u013f"+
		"\2\u0a27\u0a28\7\u02aa\2\2\u0a28\u0a2a\5\u027c\u013f\2\u0a29\u0a27\3\2"+
		"\2\2\u0a2a\u0a2d\3\2\2\2\u0a2b\u0a29\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c"+
		"\u0a2e\3\2\2\2\u0a2d\u0a2b\3\2\2\2\u0a2e\u0a2f\7M\2\2\u0a2f\u0a30\7\u02a6"+
		"\2\2\u0a30\u0a35\5J&\2\u0a31\u0a32\7\u02aa\2\2\u0a32\u0a34\5J&\2\u0a33"+
		"\u0a31\3\2\2\2\u0a34\u0a37\3\2\2\2\u0a35\u0a33\3\2\2\2\u0a35\u0a36\3\2"+
		"\2\2\u0a36\u0a38\3\2\2\2\u0a37\u0a35\3\2\2\2\u0a38\u0a39\7\u02a7\2\2\u0a39"+
		"\u0a7c\3\2\2\2\u0a3a\u0a3b\7\u013e\2\2\u0a3b\u0a3c\7w\2\2\u0a3c\u0a3d"+
		"\5\u0252\u012a\2\u0a3d\u0a3e\7\u00b4\2\2\u0a3e\u0a3f\7\u009f\2\2\u0a3f"+
		"\u0a43\5\u0252\u012a\2\u0a40\u0a41\5\u0336\u019c\2\u0a41\u0a42\7\u0216"+
		"\2\2\u0a42\u0a44\3\2\2\2\u0a43\u0a40\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44"+
		"\u0a7c\3\2\2\2\u0a45\u0a46\7\n\2\2\u0a46\u0a47\7w\2\2\u0a47\u0a4c\5\u0096"+
		"L\2\u0a48\u0a49\7\u02aa\2\2\u0a49\u0a4b\5\u0096L\2\u0a4a\u0a48\3\2\2\2"+
		"\u0a4b\u0a4e\3\2\2\2\u0a4c\u0a4a\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a7c"+
		"\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4f\u0a50\7\30\2\2\u0a50\u0a51\7w\2\2\u0a51"+
		"\u0a56\5\u0096L\2\u0a52\u0a53\7\u02aa\2\2\u0a53\u0a55\5\u0096L\2\u0a54"+
		"\u0a52\3\2\2\2\u0a55\u0a58\3\2\2\2\u0a56\u0a54\3\2\2\2\u0a56\u0a57\3\2"+
		"\2\2\u0a57\u0a7c\3\2\2\2\u0a58\u0a56\3\2\2\2\u0a59\u0a5a\7o\2\2\u0a5a"+
		"\u0a5b\7w\2\2\u0a5b\u0a60\5\u0096L\2\u0a5c\u0a5d\7\u02aa\2\2\u0a5d\u0a5f"+
		"\5\u0096L\2\u0a5e\u0a5c\3\2\2\2\u0a5f\u0a62\3\2\2\2\u0a60\u0a5e\3\2\2"+
		"\2\u0a60\u0a61\3\2\2\2\u0a61\u0a7c\3\2\2\2\u0a62\u0a60\3\2\2\2\u0a63\u0a64"+
		"\7\u01c1\2\2\u0a64\u0a65\7w\2\2\u0a65\u0a6a\5\u0096L\2\u0a66\u0a67\7\u02aa"+
		"\2\2\u0a67\u0a69\5\u0096L\2\u0a68\u0a66\3\2\2\2\u0a69\u0a6c\3\2\2\2\u0a6a"+
		"\u0a68\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a7c\3\2\2\2\u0a6c\u0a6a\3\2"+
		"\2\2\u0a6d\u0a6e\7\u01cb\2\2\u0a6e\u0a6f\7w\2\2\u0a6f\u0a74\5\u0096L\2"+
		"\u0a70\u0a71\7\u02aa\2\2\u0a71\u0a73\5\u0096L\2\u0a72\u0a70\3\2\2\2\u0a73"+
		"\u0a76\3\2\2\2\u0a74\u0a72\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a7c\3\2"+
		"\2\2\u0a76\u0a74\3\2\2\2\u0a77\u0a78\7\u01c9\2\2\u0a78\u0a7c\7\u01ae\2"+
		"\2\u0a79\u0a7a\7\u0212\2\2\u0a7a\u0a7c\7\u01ae\2\2\u0a7b\u0958\3\2\2\2"+
		"\u0a7b\u0959\3\2\2\2\u0a7b\u0963\3\2\2\2\u0a7b\u0972\3\2\2\2\u0a7b\u0974"+
		"\3\2\2\2\u0a7b\u0979\3\2\2\2\u0a7b\u0980\3\2\2\2\u0a7b\u0985\3\2\2\2\u0a7b"+
		"\u098f\3\2\2\2\u0a7b\u099a\3\2\2\2\u0a7b\u09a3\3\2\2\2\u0a7b\u09a5\3\2"+
		"\2\2\u0a7b\u09a7\3\2\2\2\u0a7b\u09a9\3\2\2\2\u0a7b\u09ab\3\2\2\2\u0a7b"+
		"\u09b0\3\2\2\2\u0a7b\u09b3\3\2\2\2\u0a7b\u09b6\3\2\2\2\u0a7b\u09b9\3\2"+
		"\2\2\u0a7b\u09bd\3\2\2\2\u0a7b\u09be\3\2\2\2\u0a7b\u09c3\3\2\2\2\u0a7b"+
		"\u09cd\3\2\2\2\u0a7b\u09d7\3\2\2\2\u0a7b\u09dd\3\2\2\2\u0a7b\u09e3\3\2"+
		"\2\2\u0a7b\u09e9\3\2\2\2\u0a7b\u09ee\3\2\2\2\u0a7b\u09f0\3\2\2\2\u0a7b"+
		"\u09f2\3\2\2\2\u0a7b\u09f5\3\2\2\2\u0a7b\u09ff\3\2\2\2\u0a7b\u0a0b\3\2"+
		"\2\2\u0a7b\u0a17\3\2\2\2\u0a7b\u0a21\3\2\2\2\u0a7b\u0a24\3\2\2\2\u0a7b"+
		"\u0a3a\3\2\2\2\u0a7b\u0a45\3\2\2\2\u0a7b\u0a4f\3\2\2\2\u0a7b\u0a59\3\2"+
		"\2\2\u0a7b\u0a63\3\2\2\2\u0a7b\u0a6d\3\2\2\2\u0a7b\u0a77\3\2\2\2\u0a7b"+
		"\u0a79\3\2\2\2\u0a7c\u0091\3\2\2\2\u0a7d\u0a81\7\u014a\2\2\u0a7e\u0a7f"+
		"\7\u00f5\2\2\u0a7f\u0a81\5\u0252\u012a\2\u0a80\u0a7d\3\2\2\2\u0a80\u0a7e"+
		"\3\2\2\2\u0a81\u0093\3\2\2\2\u0a82\u0a83\7\u0090\2\2\u0a83\u0a84\7&\2"+
		"\2\u0a84\u0a88\5\u027c\u013f\2\u0a85\u0a86\7/\2\2\u0a86\u0a88\7&\2\2\u0a87"+
		"\u0a82\3\2\2\2\u0a87\u0a85\3\2\2\2\u0a88\u0095\3\2\2\2\u0a89\u0a8c\5\u02ba"+
		"\u015e\2\u0a8a\u0a8c\5\u027c\u013f\2\u0a8b\u0a89\3\2\2\2\u0a8b\u0a8a\3"+
		"\2\2\2\u0a8c\u0097\3\2\2\2\u0a8d\u0a8e\7\t\2\2\u0a8e\u0a8f\7\u0204\2\2"+
		"\u0a8f\u0a90\5\u0252\u012a\2\u0a90\u0a91\t\17\2\2\u0a91\u0a92\7\u0123"+
		"\2\2\u0a92\u0a96\5\u027c\u013f\2\u0a93\u0a94\7\u015e\2\2\u0a94\u0a95\7"+
		"\u0299\2\2\u0a95\u0a97\5\u027c\u013f\2\u0a96\u0a93\3\2\2\2\u0a96\u0a97"+
		"\3\2\2\2\u0a97\u0a99\3\2\2\2\u0a98\u0a9a\7\u021a\2\2\u0a99\u0a98\3\2\2"+
		"\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u0a9d\7\u0135\2\2\u0a9c"+
		"\u0a9e\7\u0299\2\2\u0a9d\u0a9c\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9f"+
		"\3\2\2\2\u0a9f\u0aa0\5\u0214\u010b\2\u0aa0\u0099\3\2\2\2\u0aa1\u0aa5\7"+
		"\t\2\2\u0aa2\u0aa3\7\u00f8\2\2\u0aa3\u0aa4\7\u0299\2\2\u0aa4\u0aa6\t\20"+
		"\2\2\u0aa5\u0aa2\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa8\3\2\2\2\u0aa7"+
		"\u0aa9\5Z.\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0aad\3\2\2"+
		"\2\u0aaa\u0aab\7\u0095\2\2\u0aab\u0aac\7\u01df\2\2\u0aac\u0aae\t\n\2\2"+
		"\u0aad\u0aaa\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab0"+
		"\7\u0219\2\2\u0ab0\u0abc\5\u0252\u012a\2\u0ab1\u0ab2\7\u02a6\2\2\u0ab2"+
		"\u0ab7\5\u027c\u013f\2\u0ab3\u0ab4\7\u02aa\2\2\u0ab4\u0ab6\5\u027c\u013f"+
		"\2\u0ab5\u0ab3\3\2\2\2\u0ab6\u0ab9\3\2\2\2\u0ab7\u0ab5\3\2\2\2\u0ab7\u0ab8"+
		"\3\2\2\2\u0ab8\u0aba\3\2\2\2\u0ab9\u0ab7\3\2\2\2\u0aba\u0abb\7\u02a7\2"+
		"\2\u0abb\u0abd\3\2\2\2\u0abc\u0ab1\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe"+
		"\3\2\2\2\u0abe\u0abf\7\f\2\2\u0abf\u0ac6\5\u00bc_\2\u0ac0\u0ac2\7\u00b4"+
		"\2\2\u0ac1\u0ac3\t\13\2\2\u0ac2\u0ac1\3\2\2\2\u0ac2\u0ac3\3\2\2\2\u0ac3"+
		"\u0ac4\3\2\2\2\u0ac4\u0ac5\7\30\2\2\u0ac5\u0ac7\7p\2\2\u0ac6\u0ac0\3\2"+
		"\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7\u009b\3\2\2\2\u0ac8\u0ac9\7/\2\2\u0ac9"+
		"\u0acb\7#\2\2\u0aca\u0acc\5\u0324\u0193\2\u0acb\u0aca\3\2\2\2\u0acb\u0acc"+
		"\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u0ace\5\u0252\u012a\2\u0ace\u009d\3"+
		"\2\2\2\u0acf\u0ad0\7/\2\2\u0ad0\u0ad2\7\u008d\2\2\u0ad1\u0ad3\5\u0324"+
		"\u0193\2\u0ad2\u0ad1\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3\u0ad4\3\2\2\2\u0ad4"+
		"\u0ad5\5\u0252\u012a\2\u0ad5\u009f\3\2\2\2\u0ad6\u0ad7\7/\2\2\u0ad7\u0ad9"+
		"\7\u013b\2\2\u0ad8\u0ada\5\u0324\u0193\2\u0ad9\u0ad8\3\2\2\2\u0ad9\u0ada"+
		"\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0adc\5\u0252\u012a\2\u0adc\u00a1\3"+
		"\2\2\2\u0add\u0ade\7/\2\2\u0ade\u0ae0\7F\2\2\u0adf\u0ae1\5\u032c\u0197"+
		"\2\u0ae0\u0adf\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0ae3"+
		"\5\u0252\u012a\2\u0ae3\u0ae4\7n\2\2\u0ae4\u0ae8\5\u0252\u012a\2\u0ae5"+
		"\u0ae7\5\u00a4S\2\u0ae6\u0ae5\3\2\2\2\u0ae7\u0aea\3\2\2\2\u0ae8\u0ae6"+
		"\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u00a3\3\2\2\2\u0aea\u0ae8\3\2\2\2\u0aeb"+
		"\u0aee\5\"\22\2\u0aec\u0aee\5$\23\2\u0aed\u0aeb\3\2\2\2\u0aed\u0aec\3"+
		"\2\2\2\u0aee\u00a5\3\2\2\2\u0aef\u0af0\7/\2\2\u0af0\u0af1\7\u0172\2\2"+
		"\u0af1\u0af2\7@\2\2\u0af2\u0af3\5\u0252\u012a\2\u0af3\u0af4\7\u0135\2"+
		"\2\u0af4\u0af5\7\u0299\2\2\u0af5\u0af6\5\u0214\u010b\2\u0af6\u00a7\3\2"+
		"\2\2\u0af7\u0af8\7/\2\2\u0af8\u0afa\7{\2\2\u0af9\u0afb\5\u0324\u0193\2"+
		"\u0afa\u0af9\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0afc\3\2\2\2\u0afc\u0afd"+
		"\5\u0252\u012a\2\u0afd\u00a9\3\2\2\2\u0afe\u0aff\7/\2\2\u0aff\u0b01\7"+
		"\u0150\2\2\u0b00\u0b02\5\u0324\u0193\2\u0b01\u0b00\3\2\2\2\u0b01\u0b02"+
		"\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b04\5\u0252\u012a\2\u0b04\u00ab\3"+
		"\2\2\2\u0b05\u0b06\7/\2\2\u0b06\u0b08\7\u01e0\2\2\u0b07\u0b09\5\u0324"+
		"\u0193\2\u0b08\u0b07\3\2\2\2\u0b08\u0b09\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a"+
		"\u0b0b\5\u0252\u012a\2\u0b0b\u00ad\3\2\2\2\u0b0c\u0b0e\7/\2\2\u0b0d\u0b0f"+
		"\7\u0205\2\2\u0b0e\u0b0d\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b10\3\2\2"+
		"\2\u0b10\u0b12\7\u009f\2\2\u0b11\u0b13\5\u0324\u0193\2\u0b12\u0b11\3\2"+
		"\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b14\3\2\2\2\u0b14\u0b19\5\u0252\u012a"+
		"\2\u0b15\u0b16\7\u02aa\2\2\u0b16\u0b18\5\u0252\u012a\2\u0b17\u0b15\3\2"+
		"\2\2\u0b18\u0b1b\3\2\2\2\u0b19\u0b17\3\2\2\2\u0b19\u0b1a\3\2\2\2\u0b1a"+
		"\u0b1d\3\2\2\2\u0b1b\u0b19\3\2\2\2\u0b1c\u0b1e\t\21\2\2\u0b1d\u0b1c\3"+
		"\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u00af\3\2\2\2\u0b1f\u0b20\7/\2\2\u0b20"+
		"\u0b21\7\u0204\2\2\u0b21\u0b27\5\u0252\u012a\2\u0b22\u0b24\7\u0135\2\2"+
		"\u0b23\u0b25\7\u0299\2\2\u0b24\u0b23\3\2\2\2\u0b24\u0b25\3\2\2\2\u0b25"+
		"\u0b26\3\2\2\2\u0b26\u0b28\5\u0214\u010b\2\u0b27\u0b22\3\2\2\2\u0b27\u0b28"+
		"\3\2\2\2\u0b28\u00b1\3\2\2\2\u0b29\u0b2a\7/\2\2\u0b2a\u0b2c\7\u00a4\2"+
		"\2\u0b2b\u0b2d\5\u0324\u0193\2\u0b2c\u0b2b\3\2\2\2\u0b2c\u0b2d\3\2\2\2"+
		"\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f\5\u0252\u012a\2\u0b2f\u00b3\3\2\2\2\u0b30"+
		"\u0b31\7/\2\2\u0b31\u0b33\7\u0219\2\2\u0b32\u0b34\5\u0324\u0193\2\u0b33"+
		"\u0b32\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35\u0b3a\5\u0252"+
		"\u012a\2\u0b36\u0b37\7\u02aa\2\2\u0b37\u0b39\5\u0252\u012a\2\u0b38\u0b36"+
		"\3\2\2\2\u0b39\u0b3c\3\2\2\2\u0b3a\u0b38\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b"+
		"\u0b3e\3\2\2\2\u0b3c\u0b3a\3\2\2\2\u0b3d\u0b3f\t\21\2\2\u0b3e\u0b3d\3"+
		"\2\2\2\u0b3e\u0b3f\3\2\2\2\u0b3f\u00b5\3\2\2\2\u0b40\u0b41\7\u0083\2\2"+
		"\u0b41\u0b42\7\u009f\2\2\u0b42\u0b47\5\u00b8]\2\u0b43\u0b44\7\u02aa\2"+
		"\2\u0b44\u0b46\5\u00b8]\2\u0b45\u0b43\3\2\2\2\u0b46\u0b49\3\2\2\2\u0b47"+
		"\u0b45\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48\u00b7\3\2\2\2\u0b49\u0b47\3\2"+
		"\2\2\u0b4a\u0b4b\5\u0252\u012a\2\u0b4b\u0b4c\7\u00a2\2\2\u0b4c\u0b4d\5"+
		"\u0252\u012a\2\u0b4d\u00b9\3\2\2\2\u0b4e\u0b50\7\u020b\2\2\u0b4f\u0b51"+
		"\7\u009f\2\2\u0b50\u0b4f\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b52\3\2\2"+
		"\2\u0b52\u0b53\5\u0252\u012a\2\u0b53\u00bb\3\2\2\2\u0b54\u0b55\5\u00be"+
		"`\2\u0b55\u00bd\3\2\2\2\u0b56\u0b59\5\u00c0a\2\u0b57\u0b59\5\u00c8e\2"+
		"\u0b58\u0b56\3\2\2\2\u0b58\u0b57\3\2\2\2\u0b59\u00bf\3\2\2\2\u0b5a\u0b5d"+
		"\5\u00c2b\2\u0b5b\u0b5d\5\u00c6d\2\u0b5c\u0b5a\3\2\2\2\u0b5c\u0b5b\3\2"+
		"\2\2\u0b5d\u00c1\3\2\2\2\u0b5e\u0b60\7\u008f\2\2\u0b5f\u0b61\5\u00caf"+
		"\2\u0b60\u0b5f\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61\u0b63\3\2\2\2\u0b62\u0b64"+
		"\7B\2\2\u0b63\u0b62\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64\u0b66\3\2\2\2\u0b65"+
		"\u0b67\7\u009e\2\2\u0b66\u0b65\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0b69"+
		"\3\2\2\2\u0b68\u0b6a\7\u009b\2\2\u0b69\u0b68\3\2\2\2\u0b69\u0b6a\3\2\2"+
		"\2\u0b6a\u0b6c\3\2\2\2\u0b6b\u0b6d\7\u0099\2\2\u0b6c\u0b6b\3\2\2\2\u0b6c"+
		"\u0b6d\3\2\2\2\u0b6d\u0b6f\3\2\2\2\u0b6e\u0b70\7\u01f1\2\2\u0b6f\u0b6e"+
		"\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b72\3\2\2\2\u0b71\u0b73\5\u00c4c"+
		"\2\u0b72\u0b71\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b75\3\2\2\2\u0b74\u0b76"+
		"\7\u009a\2\2\u0b75\u0b74\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0b77\3\2\2"+
		"\2\u0b77\u0b7c\5\u00ceh\2\u0b78\u0b79\7\u02aa\2\2\u0b79\u0b7b\5\u00ce"+
		"h\2\u0b7a\u0b78\3\2\2\2\u0b7b\u0b7e\3\2\2\2\u0b7c\u0b7a\3\2\2\2\u0b7c"+
		"\u0b7d\3\2\2\2\u0b7d\u0b80\3\2\2\2\u0b7e\u0b7c\3\2\2\2\u0b7f\u0b81\5\u00d2"+
		"j\2\u0b80\u0b7f\3\2\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b83\3\2\2\2\u0b82"+
		"\u0b84\5\u00e6t\2\u0b83\u0b82\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b86"+
		"\3\2\2\2\u0b85\u0b87\5\u00e8u\2\u0b86\u0b85\3\2\2\2\u0b86\u0b87\3\2\2"+
		"\2\u0b87\u0b89\3\2\2\2\u0b88\u0b8a\5\u00eex\2\u0b89\u0b88\3\2\2\2\u0b89"+
		"\u0b8a\3\2\2\2\u0b8a\u0b8c\3\2\2\2\u0b8b\u0b8d\5\u00f2z\2\u0b8c\u0b8b"+
		"\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d\u0b8f\3\2\2\2\u0b8e\u0b90\5\u00f4{"+
		"\2\u0b8f\u0b8e\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b92\3\2\2\2\u0b91\u0b93"+
		"\5\u00f6|\2\u0b92\u0b91\3\2\2\2\u0b92\u0b93\3\2\2\2\u0b93\u00c3\3\2\2"+
		"\2\u0b94\u0b95\t\22\2\2\u0b95\u00c5\3\2\2\2\u0b96\u0b97\7\u02a6\2\2\u0b97"+
		"\u0b98\5\u00be`\2\u0b98\u0b9a\7\u02a7\2\2\u0b99\u0b9b\5\u00eex\2\u0b9a"+
		"\u0b99\3\2\2\2\u0b9a\u0b9b\3\2\2\2\u0b9b\u0b9d\3\2\2\2\u0b9c\u0b9e\5\u00f2"+
		"z\2\u0b9d\u0b9c\3\2\2\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0ba0\3\2\2\2\u0b9f"+
		"\u0ba1\5\u00f6|\2\u0ba0\u0b9f\3\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u00c7"+
		"\3\2\2\2\u0ba2\u0ba6\5\u00c0a\2\u0ba3\u0ba4\5\u00ccg\2\u0ba4\u0ba5\5\u00c0"+
		"a\2\u0ba5\u0ba7\3\2\2\2\u0ba6\u0ba3\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8"+
		"\u0ba6\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9\u0bab\3\2\2\2\u0baa\u0bac\5\u00ee"+
		"x\2\u0bab\u0baa\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bae\3\2\2\2\u0bad"+
		"\u0baf\5\u00f2z\2\u0bae\u0bad\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf\u0bb1"+
		"\3\2\2\2\u0bb0\u0bb2\5\u00f6|\2\u0bb1\u0bb0\3\2\2\2\u0bb1\u0bb2\3\2\2"+
		"\2\u0bb2\u00c9\3\2\2\2\u0bb3\u0bb4\t\23\2\2\u0bb4\u00cb\3\2\2\2\u0bb5"+
		"\u0bb7\7\u00a7\2\2\u0bb6\u0bb8\t\24\2\2\u0bb7\u0bb6\3\2\2\2\u0bb7\u0bb8"+
		"\3\2\2\2\u0bb8\u00cd\3\2\2\2\u0bb9\u0bbe\5\u027c\u013f\2\u0bba\u0bbc\7"+
		"\f\2\2\u0bbb\u0bba\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd"+
		"\u0bbf\5\u00d0i\2\u0bbe\u0bbb\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u00cf"+
		"\3\2\2\2\u0bc0\u0bc3\5\u0252\u012a\2\u0bc1\u0bc3\5\u0254\u012b\2\u0bc2"+
		"\u0bc0\3\2\2\2\u0bc2\u0bc1\3\2\2\2\u0bc3\u00d1\3\2\2\2\u0bc4\u0bc5\7="+
		"\2\2\u0bc5\u0bc6\5\u00d4k\2\u0bc6\u00d3\3\2\2\2\u0bc7\u0bca\5\u00d6l\2"+
		"\u0bc8\u0bca\5\u00d8m\2\u0bc9\u0bc7\3\2\2\2\u0bc9\u0bc8\3\2\2\2\u0bca"+
		"\u00d5\3\2\2\2\u0bcb\u0bcd\5\u0252\u012a\2\u0bcc\u0bce\5\u00dan\2\u0bcd"+
		"\u0bcc\3\2\2\2\u0bcd\u0bce\3\2\2\2\u0bce\u0bdd\3\2\2\2\u0bcf\u0bd1\7\f"+
		"\2\2\u0bd0\u0bcf\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2"+
		"\u0bdb\5\u0252\u012a\2\u0bd3\u0bd8\5\u00dco\2\u0bd4\u0bd5\7\u02aa\2\2"+
		"\u0bd5\u0bd7\5\u00dco\2\u0bd6\u0bd4\3\2\2\2\u0bd7\u0bda\3\2\2\2\u0bd8"+
		"\u0bd6\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0bdc\3\2\2\2\u0bda\u0bd8\3\2"+
		"\2\2\u0bdb\u0bd3\3\2\2\2\u0bdb\u0bdc\3\2\2\2\u0bdc\u0bde\3\2\2\2\u0bdd"+
		"\u0bd0\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde\u0bfd\3\2\2\2\u0bdf\u0be0\7\u02a6"+
		"\2\2\u0be0\u0be1\5\u00be`\2\u0be1\u0be3\7\u02a7\2\2\u0be2\u0be4\7\f\2"+
		"\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4\u0be5\3\2\2\2\u0be5\u0bf1"+
		"\5\u0252\u012a\2\u0be6\u0be7\7\u02a6\2\2\u0be7\u0bec\5\u027c\u013f\2\u0be8"+
		"\u0be9\7\u02aa\2\2\u0be9\u0beb\5\u027c\u013f\2\u0bea\u0be8\3\2\2\2\u0beb"+
		"\u0bee\3\2\2\2\u0bec\u0bea\3\2\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0bef\3\2"+
		"\2\2\u0bee\u0bec\3\2\2\2\u0bef\u0bf0\7\u02a7\2\2\u0bf0\u0bf2\3\2\2\2\u0bf1"+
		"\u0be6\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u0bfd\3\2\2\2\u0bf3\u0bf4\7\u02a8"+
		"\2\2\u0bf4\u0bf5\7\u01a1\2\2\u0bf5\u0bf6\5\u00d4k\2\u0bf6\u0bf7\7\u02a9"+
		"\2\2\u0bf7\u0bfd\3\2\2\2\u0bf8\u0bf9\7\u02a6\2\2\u0bf9\u0bfa\5\u00d4k"+
		"\2\u0bfa\u0bfb\7\u02a7\2\2\u0bfb\u0bfd\3\2\2\2\u0bfc\u0bcb\3\2\2\2\u0bfc"+
		"\u0bdf\3\2\2\2\u0bfc\u0bf3\3\2\2\2\u0bfc\u0bf8\3\2\2\2\u0bfd\u00d7\3\2"+
		"\2\2\u0bfe\u0c00\5\u00d6l\2\u0bff\u0c01\5\u00e2r\2\u0c00\u0bff\3\2\2\2"+
		"\u0c01\u0c02\3\2\2\2\u0c02\u0c00\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u00d9"+
		"\3\2\2\2\u0c04\u0c05\7w\2\2\u0c05\u0c06\7\u02a6\2\2\u0c06\u0c0b\5\u027c"+
		"\u013f\2\u0c07\u0c08\7\u02aa\2\2\u0c08\u0c0a\5\u027c\u013f\2\u0c09\u0c07"+
		"\3\2\2\2\u0c0a\u0c0d\3\2\2\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c"+
		"\u0c0e\3\2\2\2\u0c0d\u0c0b\3\2\2\2\u0c0e\u0c0f\7\u02a7\2\2\u0c0f\u00db"+
		"\3\2\2\2\u0c10\u0c11\7\u00ad\2\2\u0c11\u0c14\7F\2\2\u0c12\u0c13\7:\2\2"+
		"\u0c13\u0c15\5\u00dep\2\u0c14\u0c12\3\2\2\2\u0c14\u0c15\3\2\2\2\u0c15"+
		"\u0c16\3\2\2\2\u0c16\u0c17\7\u02a6\2\2\u0c17\u0c1c\5\u027c\u013f\2\u0c18"+
		"\u0c19\7\u02aa\2\2\u0c19\u0c1b\5\u027c\u013f\2\u0c1a\u0c18\3\2\2\2\u0c1b"+
		"\u0c1e\3\2\2\2\u0c1c\u0c1a\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1f\3\2"+
		"\2\2\u0c1e\u0c1c\3\2\2\2\u0c1f\u0c20\7\u02a7\2\2\u0c20\u0c77\3\2\2\2\u0c21"+
		"\u0c22\7\u00ad\2\2\u0c22\u0c25\7Q\2\2\u0c23\u0c24\7:\2\2\u0c24\u0c26\5"+
		"\u00dep\2\u0c25\u0c23\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c27\3\2\2\2"+
		"\u0c27\u0c28\7\u02a6\2\2\u0c28\u0c2d\5\u027c\u013f\2\u0c29\u0c2a\7\u02aa"+
		"\2\2\u0c2a\u0c2c\5\u027c\u013f\2\u0c2b\u0c29\3\2\2\2\u0c2c\u0c2f\3\2\2"+
		"\2\u0c2d\u0c2b\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u0c30\3\2\2\2\u0c2f\u0c2d"+
		"\3\2\2\2\u0c30\u0c31\7\u02a7\2\2\u0c31\u0c77\3\2\2\2\u0c32\u0c33\7D\2"+
		"\2\u0c33\u0c36\7F\2\2\u0c34\u0c35\7:\2\2\u0c35\u0c37\5\u00dep\2\u0c36"+
		"\u0c34\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38\u0c39\7\u02a6"+
		"\2\2\u0c39\u0c3e\5\u027c\u013f\2\u0c3a\u0c3b\7\u02aa\2\2\u0c3b\u0c3d\5"+
		"\u027c\u013f\2\u0c3c\u0c3a\3\2\2\2\u0c3d\u0c40\3\2\2\2\u0c3e\u0c3c\3\2"+
		"\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c41\3\2\2\2\u0c40\u0c3e\3\2\2\2\u0c41"+
		"\u0c42\7\u02a7\2\2\u0c42\u0c77\3\2\2\2\u0c43\u0c44\7D\2\2\u0c44\u0c47"+
		"\7Q\2\2\u0c45\u0c46\7:\2\2\u0c46\u0c48\5\u00dep\2\u0c47\u0c45\3\2\2\2"+
		"\u0c47\u0c48\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49\u0c4a\7\u02a6\2\2\u0c4a"+
		"\u0c4f\5\u027c\u013f\2\u0c4b\u0c4c\7\u02aa\2\2\u0c4c\u0c4e\5\u027c\u013f"+
		"\2\u0c4d\u0c4b\3\2\2\2\u0c4e\u0c51\3\2\2\2\u0c4f\u0c4d\3\2\2\2\u0c4f\u0c50"+
		"\3\2\2\2\u0c50\u0c52\3\2\2\2\u0c51\u0c4f\3\2\2\2\u0c52\u0c53\7\u02a7\2"+
		"\2\u0c53\u0c77\3\2\2\2\u0c54\u0c55\7;\2\2\u0c55\u0c58\7F\2\2\u0c56\u0c57"+
		"\7:\2\2\u0c57\u0c59\5\u00dep\2\u0c58\u0c56\3\2\2\2\u0c58\u0c59\3\2\2\2"+
		"\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5b\7\u02a6\2\2\u0c5b\u0c60\5\u027c\u013f"+
		"\2\u0c5c\u0c5d\7\u02aa\2\2\u0c5d\u0c5f\5\u027c\u013f\2\u0c5e\u0c5c\3\2"+
		"\2\2\u0c5f\u0c62\3\2\2\2\u0c60\u0c5e\3\2\2\2\u0c60\u0c61\3\2\2\2\u0c61"+
		"\u0c63\3\2\2\2\u0c62\u0c60\3\2\2\2\u0c63\u0c64\7\u02a7\2\2\u0c64\u0c77"+
		"\3\2\2\2\u0c65\u0c66\7;\2\2\u0c66\u0c69\7Q\2\2\u0c67\u0c68\7:\2\2\u0c68"+
		"\u0c6a\5\u00dep\2\u0c69\u0c67\3\2\2\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c6b"+
		"\3\2\2\2\u0c6b\u0c6c\7\u02a6\2\2\u0c6c\u0c71\5\u027c\u013f\2\u0c6d\u0c6e"+
		"\7\u02aa\2\2\u0c6e\u0c70\5\u027c\u013f\2\u0c6f\u0c6d\3\2\2\2\u0c70\u0c73"+
		"\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72\u0c74\3\2\2\2\u0c73"+
		"\u0c71\3\2\2\2\u0c74\u0c75\7\u02a7\2\2\u0c75\u0c77\3\2\2\2\u0c76\u0c10"+
		"\3\2\2\2\u0c76\u0c21\3\2\2\2\u0c76\u0c32\3\2\2\2\u0c76\u0c43\3\2\2\2\u0c76"+
		"\u0c54\3\2\2\2\u0c76\u0c65\3\2\2\2\u0c77\u00dd\3\2\2\2\u0c78\u0c7e\7P"+
		"\2\2\u0c79\u0c7a\7s\2\2\u0c7a\u0c7e\7\21\2\2\u0c7b\u0c7c\7@\2\2\u0c7c"+
		"\u0c7e\7\21\2\2\u0c7d\u0c78\3\2\2\2\u0c7d\u0c79\3\2\2\2\u0c7d\u0c7b\3"+
		"\2\2\2\u0c7e\u00df\3\2\2\2\u0c7f\u0c80\t\25\2\2\u0c80\u00e1\3\2\2\2\u0c81"+
		"\u0c82\5\u00e0q\2\u0c82\u0c84\5\u00d6l\2\u0c83\u0c85\5\u00e4s\2\u0c84"+
		"\u0c83\3\2\2\2\u0c84\u0c85\3\2\2\2\u0c85\u00e3\3\2\2\2\u0c86\u0c87\7n"+
		"\2\2\u0c87\u0c95\5\u027c\u013f\2\u0c88\u0c89\7\u00ae\2\2\u0c89\u0c8a\7"+
		"\u02a6\2\2\u0c8a\u0c8f\5\u027c\u013f\2\u0c8b\u0c8c\7\u02aa\2\2\u0c8c\u0c8e"+
		"\5\u027c\u013f\2\u0c8d\u0c8b\3\2\2\2\u0c8e\u0c91\3\2\2\2\u0c8f\u0c8d\3"+
		"\2\2\2\u0c8f\u0c90\3\2\2\2\u0c90\u0c92\3\2\2\2\u0c91\u0c8f\3\2\2\2\u0c92"+
		"\u0c93\7\u02a7\2\2\u0c93\u0c95\3\2\2\2\u0c94\u0c86\3\2\2\2\u0c94\u0c88"+
		"\3\2\2\2\u0c95\u00e5\3\2\2\2\u0c96\u0c97\7\u00b2\2\2\u0c97\u0c98\5\u027c"+
		"\u013f\2\u0c98\u00e7\3\2\2\2\u0c99\u0c9a\7@\2\2\u0c9a\u0c9b\7\21\2\2\u0c9b"+
		"\u0ca0\5\u00ecw\2\u0c9c\u0c9d\7\u02aa\2\2\u0c9d\u0c9f\5\u00ecw\2\u0c9e"+
		"\u0c9c\3\2\2\2\u0c9f\u0ca2\3\2\2\2\u0ca0\u0c9e\3\2\2\2\u0ca0\u0ca1\3\2"+
		"\2\2\u0ca1\u0ca4\3\2\2\2\u0ca2\u0ca0\3\2\2\2\u0ca3\u0ca5\5\u0328\u0195"+
		"\2\u0ca4\u0ca3\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca7\3\2\2\2\u0ca6\u0c99"+
		"\3\2\2\2\u0ca6\u0ca7\3\2\2\2\u0ca7\u0ca9\3\2\2\2\u0ca8\u0caa\5\u00eav"+
		"\2\u0ca9\u0ca8\3\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa\u00e9\3\2\2\2\u0cab\u0cac"+
		"\7A\2\2\u0cac\u0cad\5\u027c\u013f\2\u0cad\u00eb\3\2\2\2\u0cae\u0caf\5"+
		"\u027c\u013f\2\u0caf\u00ed\3\2\2\2\u0cb0\u0cb1\7s\2\2\u0cb1\u0cb2\7\21"+
		"\2\2\u0cb2\u0cb7\5\u00f0y\2\u0cb3\u0cb4\7\u02aa\2\2\u0cb4\u0cb6\5\u00f0"+
		"y\2\u0cb5\u0cb3\3\2\2\2\u0cb6\u0cb9\3\2\2\2\u0cb7\u0cb5\3\2\2\2\u0cb7"+
		"\u0cb8\3\2\2\2\u0cb8\u0cbb\3\2\2\2\u0cb9\u0cb7\3\2\2\2\u0cba\u0cbc\5\u0328"+
		"\u0195\2\u0cbb\u0cba\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc\u00ef\3\2\2\2\u0cbd"+
		"\u0cbf\5\u027c\u013f\2\u0cbe\u0cc0\5\u032a\u0196\2\u0cbf\u0cbe\3\2\2\2"+
		"\u0cbf\u0cc0\3\2\2\2\u0cc0\u00f1\3\2\2\2\u0cc1\u0ccc\7X\2\2\u0cc2\u0cc3"+
		"\5\u027c\u013f\2\u0cc3\u0cc4\7\u02aa\2\2\u0cc4\u0cc6\3\2\2\2\u0cc5\u0cc2"+
		"\3\2\2\2\u0cc5\u0cc6\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7\u0ccd\5\u027c\u013f"+
		"\2\u0cc8\u0cc9\5\u027c\u013f\2\u0cc9\u0cca\7\u01a0\2\2\u0cca\u0ccb\5\u027c"+
		"\u013f\2\u0ccb\u0ccd\3\2\2\2\u0ccc\u0cc5\3\2\2\2\u0ccc\u0cc8\3\2\2\2\u0ccd"+
		"\u00f3\3\2\2\2\u0cce\u0ccf\7M\2\2\u0ccf\u0cd4\5\u027c\u013f\2\u0cd0\u0cd1"+
		"\7\u02aa\2\2\u0cd1\u0cd3\5\u027c\u013f\2\u0cd2\u0cd0\3\2\2\2\u0cd3\u0cd6"+
		"\3\2\2\2\u0cd4\u0cd2\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cf1\3\2\2\2\u0cd6"+
		"\u0cd4\3\2\2\2\u0cd7\u0cd8\7M\2\2\u0cd8\u0cd9\7\u012e\2\2\u0cd9\u0cf1"+
		"\5\u027c\u013f\2\u0cda\u0cdb\7M\2\2\u0cdb\u0cdc\7v\2\2\u0cdc\u0cde\5\u027c"+
		"\u013f\2\u0cdd\u0cdf\5\u0286\u0144\2\u0cde\u0cdd\3\2\2\2\u0cde\u0cdf\3"+
		"\2\2\2\u0cdf\u0ce6\3\2\2\2\u0ce0\u0ce2\t\26\2\2\u0ce1\u0ce3\5\u0126\u0094"+
		"\2\u0ce2\u0ce1\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce4\u0ce5"+
		"\3\2\2\2\u0ce5\u0ce7\3\2\2\2\u0ce6\u0ce0\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7"+
		"\u0cee\3\2\2\2\u0ce8\u0cea\7Z\2\2\u0ce9\u0ceb\5\u0128\u0095\2\u0cea\u0ce9"+
		"\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0cea\3\2\2\2\u0cec\u0ced\3\2\2\2\u0ced"+
		"\u0cef\3\2\2\2\u0cee\u0ce8\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef\u0cf1\3\2"+
		"\2\2\u0cf0\u0cce\3\2\2\2\u0cf0\u0cd7\3\2\2\2\u0cf0\u0cda\3\2\2\2\u0cf1"+
		"\u00f5\3\2\2\2\u0cf2\u0cf3\7:\2\2\u0cf3\u0cfd\t\27\2\2\u0cf4\u0cf5\7l"+
		"\2\2\u0cf5\u0cfa\5\u027c\u013f\2\u0cf6\u0cf7\7\u02aa\2\2\u0cf7\u0cf9\5"+
		"\u027c\u013f\2\u0cf8\u0cf6\3\2\2\2\u0cf9\u0cfc\3\2\2\2\u0cfa\u0cf8\3\2"+
		"\2\2\u0cfa\u0cfb\3\2\2\2\u0cfb\u0cfe\3\2\2\2\u0cfc\u0cfa\3\2\2\2\u0cfd"+
		"\u0cf4\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe\u0d00\3\2\2\2\u0cff\u0d01\5\u00f8"+
		"}\2\u0d00\u0cff\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0d07\3\2\2\2\u0d02"+
		"\u0d03\7\\\2\2\u0d03\u0d04\7E\2\2\u0d04\u0d05\7\u01e2\2\2\u0d05\u0d07"+
		"\7\u0193\2\2\u0d06\u0cf2\3\2\2\2\u0d06\u0d02\3\2\2\2\u0d07\u00f7\3\2\2"+
		"\2\u0d08\u0d09\7\u0093\2\2\u0d09\u0d0c\7]\2\2\u0d0a\u0d0c\7h\2\2\u0d0b"+
		"\u0d08\3\2\2\2\u0d0b\u0d0a\3\2\2\2\u0d0c\u00f9\3\2\2\2\u0d0d\u0d0f\7\u008f"+
		"\2\2\u0d0e\u0d10\5\u00caf\2\u0d0f\u0d0e\3\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10"+
		"\u0d12\3\2\2\2\u0d11\u0d13\7B\2\2\u0d12\u0d11\3\2\2\2\u0d12\u0d13\3\2"+
		"\2\2\u0d13\u0d15\3\2\2\2\u0d14\u0d16\7\u009e\2\2\u0d15\u0d14\3\2\2\2\u0d15"+
		"\u0d16\3\2\2\2\u0d16\u0d18\3\2\2\2\u0d17\u0d19\7\u009b\2\2\u0d18\u0d17"+
		"\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1b\3\2\2\2\u0d1a\u0d1c\7\u0099\2"+
		"\2\u0d1b\u0d1a\3\2\2\2\u0d1b\u0d1c\3\2\2\2\u0d1c\u0d1e\3\2\2\2\u0d1d\u0d1f"+
		"\7\u01f1\2\2\u0d1e\u0d1d\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f\u0d21\3\2\2"+
		"\2\u0d20\u0d22\5\u00c4c\2\u0d21\u0d20\3\2\2\2\u0d21\u0d22\3\2\2\2\u0d22"+
		"\u0d24\3\2\2\2\u0d23\u0d25\7\u009a\2\2\u0d24\u0d23\3\2\2\2\u0d24\u0d25"+
		"\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d2b\5\u00ceh\2\u0d27\u0d28\7\u02aa"+
		"\2\2\u0d28\u0d2a\5\u00ceh\2\u0d29\u0d27\3\2\2\2\u0d2a\u0d2d\3\2\2\2\u0d2b"+
		"\u0d29\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2e\3\2\2\2\u0d2d\u0d2b\3\2"+
		"\2\2\u0d2e\u0d2f\7M\2\2\u0d2f\u0d34\5\u00fc\177\2\u0d30\u0d31\7\u02aa"+
		"\2\2\u0d31\u0d33\5\u00fc\177\2\u0d32\u0d30\3\2\2\2\u0d33\u0d36\3\2\2\2"+
		"\u0d34\u0d32\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d38\3\2\2\2\u0d36\u0d34"+
		"\3\2\2\2\u0d37\u0d39\5\u00d2j\2\u0d38\u0d37\3\2\2\2\u0d38\u0d39\3\2\2"+
		"\2\u0d39\u0d3b\3\2\2\2\u0d3a\u0d3c\5\u00e6t\2\u0d3b\u0d3a\3\2\2\2\u0d3b"+
		"\u0d3c\3\2\2\2\u0d3c\u0d3e\3\2\2\2\u0d3d\u0d3f\5\u00e8u\2\u0d3e\u0d3d"+
		"\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u0d41\3\2\2\2\u0d40\u0d42\5\u00eex"+
		"\2\u0d41\u0d40\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d44\3\2\2\2\u0d43\u0d45"+
		"\5\u00f2z\2\u0d44\u0d43\3\2\2\2\u0d44\u0d45\3\2\2\2\u0d45\u0d47\3\2\2"+
		"\2\u0d46\u0d48\5\u00f4{\2\u0d47\u0d46\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48"+
		"\u0d4a\3\2\2\2\u0d49\u0d4b\5\u00f6|\2\u0d4a\u0d49\3\2\2\2\u0d4a\u0d4b"+
		"\3\2\2\2\u0d4b\u00fb\3\2\2\2\u0d4c\u0d4d\5\u027c\u013f\2\u0d4d\u00fd\3"+
		"\2\2\2\u0d4e\u0d50\7K\2\2\u0d4f\u0d51\5\u033a\u019e\2\u0d50\u0d4f\3\2"+
		"\2\2\u0d50\u0d51\3\2\2\2\u0d51\u0d53\3\2\2\2\u0d52\u0d54\7D\2\2\u0d53"+
		"\u0d52\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d56\3\2\2\2\u0d55\u0d57\7M"+
		"\2\2\u0d56\u0d55\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u0d58\3\2\2\2\u0d58"+
		"\u0d64\5\u00d4k\2\u0d59\u0d5a\7\u02a6\2\2\u0d5a\u0d5f\5\u027c\u013f\2"+
		"\u0d5b\u0d5c\7\u02aa\2\2\u0d5c\u0d5e\5\u027c\u013f\2\u0d5d\u0d5b\3\2\2"+
		"\2\u0d5e\u0d61\3\2\2\2\u0d5f\u0d5d\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d62"+
		"\3\2\2\2\u0d61\u0d5f\3\2\2\2\u0d62\u0d63\7\u02a7\2\2\u0d63\u0d65\3\2\2"+
		"\2\u0d64\u0d59\3\2\2\2\u0d64\u0d65\3\2\2\2\u0d65\u0d66\3\2\2\2\u0d66\u0d68"+
		"\5\u0100\u0081\2\u0d67\u0d69\5\u0106\u0084\2\u0d68\u0d67\3\2\2\2\u0d68"+
		"\u0d69\3\2\2\2\u0d69\u00ff\3\2\2\2\u0d6a\u0d6e\5\u0102\u0082\2\u0d6b\u0d6e"+
		"\5\u010a\u0086\2\u0d6c\u0d6e\5\u00be`\2\u0d6d\u0d6a\3\2\2\2\u0d6d\u0d6b"+
		"\3\2\2\2\u0d6d\u0d6c\3\2\2\2\u0d6e\u0101\3\2\2\2\u0d6f\u0d70\t\30\2\2"+
		"\u0d70\u0d75\5\u0104\u0083\2\u0d71\u0d72\7\u02aa\2\2\u0d72\u0d74\5\u0104"+
		"\u0083\2\u0d73\u0d71\3\2\2\2\u0d74\u0d77\3\2\2\2\u0d75\u0d73\3\2\2\2\u0d75"+
		"\u0d76\3\2\2\2\u0d76\u0103\3\2\2\2\u0d77\u0d75\3\2\2\2\u0d78\u0d79\7\u02a6"+
		"\2\2\u0d79\u0d7e\5\u027c\u013f\2\u0d7a\u0d7b\7\u02aa\2\2\u0d7b\u0d7d\5"+
		"\u027c\u013f\2\u0d7c\u0d7a\3\2\2\2\u0d7d\u0d80\3\2\2\2\u0d7e\u0d7c\3\2"+
		"\2\2\u0d7e\u0d7f\3\2\2\2\u0d7f\u0d81\3\2\2\2\u0d80\u0d7e\3\2\2\2\u0d81"+
		"\u0d82\7\u02a7\2\2\u0d82\u0105\3\2\2\2\u0d83\u0d84\7n\2\2\u0d84\u0d85"+
		"\7\u012f\2\2\u0d85\u0d86\7Q\2\2\u0d86\u0d87\7\u00ab\2\2\u0d87\u0d8c\5"+
		"\u02b6\u015c\2\u0d88\u0d89\7\u02aa\2\2\u0d89\u0d8b\5\u02b6\u015c\2\u0d8a"+
		"\u0d88\3\2\2\2\u0d8b\u0d8e\3\2\2\2\u0d8c\u0d8a\3\2\2\2\u0d8c\u0d8d\3\2"+
		"\2\2\u0d8d\u0107\3\2\2\2\u0d8e\u0d8c\3\2\2\2\u0d8f\u0d91\7\u00ab\2\2\u0d90"+
		"\u0d92\7_\2\2\u0d91\u0d90\3\2\2\2\u0d91\u0d92\3\2\2\2\u0d92\u0d94\3\2"+
		"\2\2\u0d93\u0d95\7D\2\2\u0d94\u0d93\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95"+
		"\u0d96\3\2\2\2\u0d96\u0d98\5\u00d4k\2\u0d97\u0d99\5\u010a\u0086\2\u0d98"+
		"\u0d97\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9b\3\2\2\2\u0d9a\u0d9c\5\u00e6"+
		"t\2\u0d9b\u0d9a\3\2\2\2\u0d9b\u0d9c\3\2\2\2\u0d9c\u0d9e\3\2\2\2\u0d9d"+
		"\u0d9f\5\u00eex\2\u0d9e\u0d9d\3\2\2\2\u0d9e\u0d9f\3\2\2\2\u0d9f\u0da1"+
		"\3\2\2\2\u0da0\u0da2\5\u00f2z\2\u0da1\u0da0\3\2\2\2\u0da1\u0da2\3\2\2"+
		"\2\u0da2\u0109\3\2\2\2\u0da3\u0da4\7\u0090\2\2\u0da4\u0da9\5\u010c\u0087"+
		"\2\u0da5\u0da6\7\u02aa\2\2\u0da6\u0da8\5\u010c\u0087\2\u0da7\u0da5\3\2"+
		"\2\2\u0da8\u0dab\3\2\2\2\u0da9\u0da7\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa"+
		"\u010b\3\2\2\2\u0dab\u0da9\3\2\2\2\u0dac\u0dad\5\u027c\u013f\2\u0dad\u0dae"+
		"\7\u0299\2\2\u0dae\u0daf\5\u027c\u013f\2\u0daf\u010d\3\2\2\2\u0db0\u0db2"+
		"\7(\2\2\u0db1\u0db3\7_\2\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3\3\2\2\2\u0db3"+
		"\u0db5\3\2\2\2\u0db4\u0db6\7\u01c0\2\2\u0db5\u0db4\3\2\2\2\u0db5\u0db6"+
		"\3\2\2\2\u0db6\u0db8\3\2\2\2\u0db7\u0db9\7D\2\2\u0db8\u0db7\3\2\2\2\u0db8"+
		"\u0db9\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0dbb\7=\2\2\u0dbb\u0dbd\5\u00d4"+
		"k\2\u0dbc\u0dbe\5\u0110\u0089\2\u0dbd\u0dbc\3\2\2\2\u0dbd\u0dbe\3\2\2"+
		"\2\u0dbe\u0dc0\3\2\2\2\u0dbf\u0dc1\5\u00e6t\2\u0dc0\u0dbf\3\2\2\2\u0dc0"+
		"\u0dc1\3\2\2\2\u0dc1\u0dc3\3\2\2\2\u0dc2\u0dc4\5\u00eex\2\u0dc3\u0dc2"+
		"\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dc6\3\2\2\2\u0dc5\u0dc7\5\u00f2z"+
		"\2\u0dc6\u0dc5\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u010f\3\2\2\2\u0dc8\u0dc9"+
		"\7\u00ae\2\2\u0dc9\u0dca\5\u00d4k\2\u0dca\u0111\3\2\2\2\u0dcb\u0dcd\7"+
		"\u0085\2\2\u0dcc\u0dce\5\u033a\u019e\2\u0dcd\u0dcc\3\2\2\2\u0dcd\u0dce"+
		"\3\2\2\2\u0dce\u0dd0\3\2\2\2\u0dcf\u0dd1\7M\2\2\u0dd0\u0dcf\3\2\2\2\u0dd0"+
		"\u0dd1\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2\u0dde\5\u00d4k\2\u0dd3\u0dd4"+
		"\7\u02a6\2\2\u0dd4\u0dd9\5\u027c\u013f\2\u0dd5\u0dd6\7\u02aa\2\2\u0dd6"+
		"\u0dd8\5\u027c\u013f\2\u0dd7\u0dd5\3\2\2\2\u0dd8\u0ddb\3\2\2\2\u0dd9\u0dd7"+
		"\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddc\3\2\2\2\u0ddb\u0dd9\3\2\2\2\u0ddc"+
		"\u0ddd\7\u02a7\2\2\u0ddd\u0ddf\3\2\2\2\u0dde\u0dd3\3\2\2\2\u0dde\u0ddf"+
		"\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de1\5\u0114\u008b\2\u0de1\u0113\3"+
		"\2\2\2\u0de2\u0de6\5\u0102\u0082\2\u0de3\u0de6\5\u010a\u0086\2\u0de4\u0de6"+
		"\5\u00be`\2\u0de5\u0de2\3\2\2\2\u0de5\u0de3\3\2\2\2\u0de5\u0de4\3\2\2"+
		"\2\u0de6\u0115\3\2\2\2\u0de7\u0de8\7\22\2\2\u0de8\u0de9\5\u027c\u013f"+
		"\2\u0de9\u0117\3\2\2\2\u0dea\u0deb\7[\2\2\u0deb\u0ded\7\u0122\2\2\u0dec"+
		"\u0dee\5\u033a\u019e\2\u0ded\u0dec\3\2\2\2\u0ded\u0dee\3\2\2\2\u0dee\u0df0"+
		"\3\2\2\2\u0def\u0df1\7\u0171\2\2\u0df0\u0def\3\2\2\2\u0df0\u0df1\3\2\2"+
		"\2\u0df1\u0df2\3\2\2\2\u0df2\u0df3\7G\2\2\u0df3\u0df5\5\u027c\u013f\2"+
		"\u0df4\u0df6\t\31\2\2\u0df5\u0df4\3\2\2\2\u0df5\u0df6\3\2\2\2\u0df6\u0df7"+
		"\3\2\2\2\u0df7\u0df8\7M\2\2\u0df8\u0df9\7\u009f\2\2\u0df9\u0e06\5\u0252"+
		"\u012a\2\u0dfa\u0dfb\7w\2\2\u0dfb\u0dfc\7\u02a6\2\2\u0dfc\u0e01\5\u027c"+
		"\u013f\2\u0dfd\u0dfe\7\u02aa\2\2\u0dfe\u0e00\5\u027c\u013f\2\u0dff\u0dfd"+
		"\3\2\2\2\u0e00\u0e03\3\2\2\2\u0e01\u0dff\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02"+
		"\u0e04\3\2\2\2\u0e03\u0e01\3\2\2\2\u0e04\u0e05\7\u02a7\2\2\u0e05\u0e07"+
		"\3\2\2\2\u0e06\u0dfa\3\2\2\2\u0e06\u0e07\3\2\2\2\u0e07\u0e0b\3\2\2\2\u0e08"+
		"\u0e09\7\27\2\2\u0e09\u0e0a\7\u0090\2\2\u0e0a\u0e0c\5\u027c\u013f\2\u0e0b"+
		"\u0e08\3\2\2\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0e13\3\2\2\2\u0e0d\u0e0f\t\26"+
		"\2\2\u0e0e\u0e10\5\u0126\u0094\2\u0e0f\u0e0e\3\2\2\2\u0e10\u0e11\3\2\2"+
		"\2\u0e11\u0e0f\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e14\3\2\2\2\u0e13\u0e0d"+
		"\3\2\2\2\u0e13\u0e14\3\2\2\2\u0e14\u0e1b\3\2\2\2\u0e15\u0e17\7Z\2\2\u0e16"+
		"\u0e18\5\u0128\u0095\2\u0e17\u0e16\3\2\2\2\u0e18\u0e19\3\2\2\2\u0e19\u0e17"+
		"\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a\u0e1c\3\2\2\2\u0e1b\u0e15\3\2\2\2\u0e1b"+
		"\u0e1c\3\2\2\2\u0e1c\u0e21\3\2\2\2\u0e1d\u0e1e\7D\2\2\u0e1e\u0e1f\5\u027c"+
		"\u013f\2\u0e1f\u0e20\t\32\2\2\u0e20\u0e22\3\2\2\2\u0e21\u0e1d\3\2\2\2"+
		"\u0e21\u0e22\3\2\2\2\u0e22\u0e2e\3\2\2\2\u0e23\u0e24\7\u02a6\2\2\u0e24"+
		"\u0e29\5\u027c\u013f\2\u0e25\u0e26\7\u02aa\2\2\u0e26\u0e28\5\u027c\u013f"+
		"\2\u0e27\u0e25\3\2\2\2\u0e28\u0e2b\3\2\2\2\u0e29\u0e27\3\2\2\2\u0e29\u0e2a"+
		"\3\2\2\2\u0e2a\u0e2c\3\2\2\2\u0e2b\u0e29\3\2\2\2\u0e2c\u0e2d\7\u02a7\2"+
		"\2\u0e2d\u0e2f\3\2\2\2\u0e2e\u0e23\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0e31"+
		"\3\2\2\2\u0e30\u0e32\5\u010a\u0086\2\u0e31\u0e30\3\2\2\2\u0e31\u0e32\3"+
		"\2\2\2\u0e32\u0119\3\2\2\2\u0e33\u0e34\7[\2\2\u0e34\u0e36\7\u0221\2\2"+
		"\u0e35\u0e37\5\u033a\u019e\2\u0e36\u0e35\3\2\2\2\u0e36\u0e37\3\2\2\2\u0e37"+
		"\u0e39\3\2\2\2\u0e38\u0e3a\7\u0171\2\2\u0e39\u0e38\3\2\2\2\u0e39\u0e3a"+
		"\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b\u0e3c\7G\2\2\u0e3c\u0e3e\5\u027c\u013f"+
		"\2\u0e3d\u0e3f\t\31\2\2\u0e3e\u0e3d\3\2\2\2\u0e3e\u0e3f\3\2\2\2\u0e3f"+
		"\u0e40\3\2\2\2\u0e40\u0e41\7M\2\2\u0e41\u0e42\7\u009f\2\2\u0e42\u0e46"+
		"\5\u0252\u012a\2\u0e43\u0e44\7\27\2\2\u0e44\u0e45\7\u0090\2\2\u0e45\u0e47"+
		"\5\u027c\u013f\2\u0e46\u0e43\3\2\2\2\u0e46\u0e47\3\2\2\2\u0e47\u0e4f\3"+
		"\2\2\2\u0e48\u0e49\7\u01db\2\2\u0e49\u0e4a\7\u015a\2\2\u0e4a\u0e4b\7\21"+
		"\2\2\u0e4b\u0e4c\7\u029a\2\2\u0e4c\u0e4d\5\u027c\u013f\2\u0e4d\u0e4e\7"+
		"\u029b\2\2\u0e4e\u0e50\3\2\2\2\u0e4f\u0e48\3\2\2\2\u0e4f\u0e50\3\2\2\2"+
		"\u0e50\u0e55\3\2\2\2\u0e51\u0e52\7D\2\2\u0e52\u0e53\5\u027c\u013f\2\u0e53"+
		"\u0e54\t\32\2\2\u0e54\u0e56\3\2\2\2\u0e55\u0e51\3\2\2\2\u0e55\u0e56\3"+
		"\2\2\2\u0e56\u0e62\3\2\2\2\u0e57\u0e58\7\u02a6\2\2\u0e58\u0e5d\5\u027c"+
		"\u013f\2\u0e59\u0e5a\7\u02aa\2\2\u0e5a\u0e5c\5\u027c\u013f\2\u0e5b\u0e59"+
		"\3\2\2\2\u0e5c\u0e5f\3\2\2\2\u0e5d\u0e5b\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e"+
		"\u0e60\3\2\2\2\u0e5f\u0e5d\3\2\2\2\u0e60\u0e61\7\u02a7\2\2\u0e61\u0e63"+
		"\3\2\2\2\u0e62\u0e57\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e65\3\2\2\2\u0e64"+
		"\u0e66\5\u010a\u0086\2\u0e65\u0e64\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66\u011b"+
		"\3\2\2\2\u0e67\u0e68\7\u012d\2\2\u0e68\u0e6d\5\u027c\u013f\2\u0e69\u0e6a"+
		"\7\u02aa\2\2\u0e6a\u0e6c\5\u027c\u013f\2\u0e6b\u0e69\3\2\2\2\u0e6c\u0e6f"+
		"\3\2\2\2\u0e6d\u0e6b\3\2\2\2\u0e6d\u0e6e\3\2\2\2\u0e6e\u011d\3\2\2\2\u0e6f"+
		"\u0e6d\3\2\2\2\u0e70\u0e74\5\u0120\u0091\2\u0e71\u0e74\5\u0122\u0092\2"+
		"\u0e72\u0e74\5\u0124\u0093\2\u0e73\u0e70\3\2\2\2\u0e73\u0e71\3\2\2\2\u0e73"+
		"\u0e72\3\2\2\2\u0e74\u011f\3\2\2\2\u0e75\u0e76\7\u0155\2\2\u0e76\u0e77"+
		"\5\u0252\u012a\2\u0e77\u0e7c\7\u01a6\2\2\u0e78\u0e7a\7\f\2\2\u0e79\u0e78"+
		"\3\2\2\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0e7d\5\u0252\u012a"+
		"\2\u0e7c\u0e79\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0121\3\2\2\2\u0e7e\u0e7f"+
		"\7\u0155\2\2\u0e7f\u0e80\5\u0252\u012a\2\u0e80\u0e82\7~\2\2\u0e81\u0e83"+
		"\5\u0252\u012a\2\u0e82\u0e81\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e90\3"+
		"\2\2\2\u0e84\u0e85\5\u027e\u0140\2\u0e85\u0e86\7\u02a6\2\2\u0e86\u0e8b"+
		"\5\u027c\u013f\2\u0e87\u0e88\7\u02aa\2\2\u0e88\u0e8a\5\u027c\u013f\2\u0e89"+
		"\u0e87\3\2\2\2\u0e8a\u0e8d\3\2\2\2\u0e8b\u0e89\3\2\2\2\u0e8b\u0e8c\3\2"+
		"\2\2\u0e8c\u0e8e\3\2\2\2\u0e8d\u0e8b\3\2\2\2\u0e8e\u0e8f\7\u02a7\2\2\u0e8f"+
		"\u0e91\3\2\2\2\u0e90\u0e84\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u0e93\3\2"+
		"\2\2\u0e92\u0e94\t\33\2\2\u0e93\u0e92\3\2\2\2\u0e93\u0e94\3\2\2\2\u0e94"+
		"\u0e96\3\2\2\2\u0e95\u0e97\5\u00e6t\2\u0e96\u0e95\3\2\2\2\u0e96\u0e97"+
		"\3\2\2\2\u0e97\u0e99\3\2\2\2\u0e98\u0e9a\5\u00f2z\2\u0e99\u0e98\3\2\2"+
		"\2\u0e99\u0e9a\3\2\2\2\u0e9a\u0123\3\2\2\2\u0e9b\u0e9c\7\u0155\2\2\u0e9c"+
		"\u0e9d\5\u0252\u012a\2\u0e9d\u0e9e\7\u010f\2\2\u0e9e\u0125\3\2\2\2\u0e9f"+
		"\u0ea0\7\u00a0\2\2\u0ea0\u0ea1\7\21\2\2\u0ea1\u0eac\5\u027c\u013f\2\u0ea2"+
		"\u0ea4\7q\2\2\u0ea3\u0ea2\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4\u0ea5\3\2"+
		"\2\2\u0ea5\u0ea6\7\63\2\2\u0ea6\u0ea7\7\21\2\2\u0ea7\u0eac\5\u027c\u013f"+
		"\2\u0ea8\u0ea9\7\64\2\2\u0ea9\u0eaa\7\21\2\2\u0eaa\u0eac\5\u027c\u013f"+
		"\2\u0eab\u0e9f\3\2\2\2\u0eab\u0ea3\3\2\2\2\u0eab\u0ea8\3\2\2\2\u0eac\u0127"+
		"\3\2\2\2\u0ead\u0eae\7\u009d\2\2\u0eae\u0eaf\7\21\2\2\u0eaf\u0eb4\5\u027c"+
		"\u013f\2\u0eb0\u0eb1\7\u00a0\2\2\u0eb1\u0eb2\7\21\2\2\u0eb2\u0eb4\5\u027c"+
		"\u013f\2\u0eb3\u0ead\3\2\2\2\u0eb3\u0eb0\3\2\2\2\u0eb4\u0129\3\2\2\2\u0eb5"+
		"\u0eb6\7\u01f5\2\2\u0eb6\u0ebf\7\u0209\2\2\u0eb7\u0ebc\5\u012c\u0097\2"+
		"\u0eb8\u0eb9\7\u02aa\2\2\u0eb9\u0ebb\5\u012c\u0097\2\u0eba\u0eb8\3\2\2"+
		"\2\u0ebb\u0ebe\3\2\2\2\u0ebc\u0eba\3\2\2\2\u0ebc\u0ebd\3\2\2\2\u0ebd\u0ec0"+
		"\3\2\2\2\u0ebe\u0ebc\3\2\2\2\u0ebf\u0eb7\3\2\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0"+
		"\u012b\3\2\2\2\u0ec1\u0ec2\7\u00b4\2\2\u0ec2\u0ec3\7\u011c\2\2\u0ec3\u0ec9"+
		"\7\u01e8\2\2\u0ec4\u0ec5\7~\2\2\u0ec5\u0ec9\7\u00b5\2\2\u0ec6\u0ec7\7"+
		"~\2\2\u0ec7\u0ec9\7\u01a5\2\2\u0ec8\u0ec1\3\2\2\2\u0ec8\u0ec4\3\2\2\2"+
		"\u0ec8\u0ec6\3\2\2\2\u0ec9\u012d\3\2\2\2\u0eca\u0ecc\7\u0100\2\2\u0ecb"+
		"\u0ecd\7\u021d\2\2\u0ecc\u0ecb\3\2\2\2\u0ecc\u0ecd\3\2\2\2\u0ecd\u012f"+
		"\3\2\2\2\u0ece\u0ed0\7\u0115\2\2\u0ecf\u0ed1\7\u021d\2\2\u0ed0\u0ecf\3"+
		"\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed7\3\2\2\2\u0ed2\u0ed4\7\13\2\2\u0ed3"+
		"\u0ed5\7\u019c\2\2\u0ed4\u0ed3\3\2\2\2\u0ed4\u0ed5\3\2\2\2\u0ed5\u0ed6"+
		"\3\2\2\2\u0ed6\u0ed8\7\u0109\2\2\u0ed7\u0ed2\3\2\2\2\u0ed7\u0ed8\3\2\2"+
		"\2\u0ed8\u0edd\3\2\2\2\u0ed9\u0edb\7\u019c\2\2\u0eda\u0ed9\3\2\2\2\u0eda"+
		"\u0edb\3\2\2\2\u0edb\u0edc\3\2\2\2\u0edc\u0ede\7\u0082\2\2\u0edd\u0eda"+
		"\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0131\3\2\2\2\u0edf\u0ee1\7\u01d7\2"+
		"\2\u0ee0\u0ee2\7\u021d\2\2\u0ee1\u0ee0\3\2\2\2\u0ee1\u0ee2\3\2\2\2\u0ee2"+
		"\u0ee8\3\2\2\2\u0ee3\u0ee5\7\13\2\2\u0ee4\u0ee6\7\u019c\2\2\u0ee5\u0ee4"+
		"\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7\u0ee9\7\u0109\2"+
		"\2\u0ee8\u0ee3\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0eee\3\2\2\2\u0eea\u0eec"+
		"\7\u019c\2\2\u0eeb\u0eea\3\2\2\2\u0eeb\u0eec\3\2\2\2\u0eec\u0eed\3\2\2"+
		"\2\u0eed\u0eef\7\u0082\2\2\u0eee\u0eeb\3\2\2\2\u0eee\u0eef\3\2\2\2\u0eef"+
		"\u0133\3\2\2\2\u0ef0\u0ef1\7\u01dd\2\2\u0ef1\u0ef2\5\u0252\u012a\2\u0ef2"+
		"\u0135\3\2\2\2\u0ef3\u0ef5\7\u01d7\2\2\u0ef4\u0ef6\7\u021d\2\2\u0ef5\u0ef4"+
		"\3\2\2\2\u0ef5\u0ef6\3\2\2\2\u0ef6\u0ef7\3\2\2\2\u0ef7\u0ef9\7\u00a2\2"+
		"\2\u0ef8\u0efa\7\u01dd\2\2\u0ef9\u0ef8\3\2\2\2\u0ef9\u0efa\3\2\2\2\u0efa"+
		"\u0efb\3\2\2\2\u0efb\u0efc\5\u0252\u012a\2\u0efc\u0137\3\2\2\2\u0efd\u0efe"+
		"\7\u0082\2\2\u0efe\u0eff\7\u01dd\2\2\u0eff\u0f00\5\u0252\u012a\2\u0f00"+
		"\u0139\3\2\2\2\u0f01\u0f02\7\\\2\2\u0f02\u0f03\7\u023a\2\2\u0f03\u0f08"+
		"\5\u013c\u009f\2\u0f04\u0f05\7\u02aa\2\2\u0f05\u0f07\5\u013c\u009f\2\u0f06"+
		"\u0f04\3\2\2\2\u0f07\u0f0a\3\2\2\2\u0f08\u0f06\3\2\2\2\u0f08\u0f09\3\2"+
		"\2\2\u0f09\u013b\3\2\2\2\u0f0a\u0f08\3\2\2\2\u0f0b\u0f10\5\u0252\u012a"+
		"\2\u0f0c\u0f0e\7\f\2\2\u0f0d\u0f0c\3\2\2\2\u0f0d\u0f0e\3\2\2\2\u0f0e\u0f0f"+
		"\3\2\2\2\u0f0f\u0f11\5\u0252\u012a\2\u0f10\u0f0d\3\2\2\2\u0f10\u0f11\3"+
		"\2\2\2\u0f11\u0f12\3\2\2\2\u0f12\u0f13\5\u013e\u00a0\2\u0f13\u013d\3\2"+
		"\2\2\u0f14\u0f16\7~\2\2\u0f15\u0f17\7\u0171\2\2\u0f16\u0f15\3\2\2\2\u0f16"+
		"\u0f17\3\2\2\2\u0f17\u0f1d\3\2\2\2\u0f18\u0f1a\7_\2\2\u0f19\u0f18\3\2"+
		"\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1b\3\2\2\2\u0f1b\u0f1d\7\u00b5\2\2\u0f1c"+
		"\u0f14\3\2\2\2\u0f1c\u0f19\3\2\2\2\u0f1d\u013f\3\2\2\2\u0f1e\u0f1f\7\u00a9"+
		"\2\2\u0f1f\u0f20\7\u023a\2\2\u0f20\u0141\3\2\2\2\u0f21\u0f22\7\u0090\2"+
		"\2\u0f22\u0f23\7\u00fc\2\2\u0f23\u0f24\7\u0299\2\2\u0f24\u0f25\5\u027c"+
		"\u013f\2\u0f25\u0143\3\2\2\2\u0f26\u0f27\7\u0167\2\2\u0f27\u0f28\7\u016f"+
		"\2\2\u0f28\u0f2e\5\u0146\u00a4\2\u0f29\u0f2a\7~\2\2\u0f2a\u0f2e\7\u00b5"+
		"\2\2\u0f2b\u0f2c\7~\2\2\u0f2c\u0f2e\7\u01a5\2\2\u0f2d\u0f26\3\2\2\2\u0f2d"+
		"\u0f29\3\2\2\2\u0f2d\u0f2b\3\2\2\2\u0f2e\u0145\3\2\2\2\u0f2f\u0f30\7\u0276"+
		"\2\2\u0f30\u0f37\7~\2\2\u0f31\u0f32\7~\2\2\u0f32\u0f37\7\u0277\2\2\u0f33"+
		"\u0f34\7~\2\2\u0f34\u0f37\7\u0278\2\2\u0f35\u0f37\7\u0279\2\2\u0f36\u0f2f"+
		"\3\2\2\2\u0f36\u0f31\3\2\2\2\u0f36\u0f33\3\2\2\2\u0f36\u0f35\3\2\2\2\u0f37"+
		"\u0147\3\2\2\2\u0f38\u0f39\7\26\2\2\u0f39\u0f3a\7\u0174\2\2\u0f3a\u0f3b"+
		"\7\u00a2\2\2\u0f3b\u0f40\5\u015a\u00ae\2\u0f3c\u0f3d\7\u02aa\2\2\u0f3d"+
		"\u0f3f\5\u015a\u00ae\2\u0f3e\u0f3c\3\2\2\2\u0f3f\u0f42\3\2\2\2\u0f40\u0f3e"+
		"\3\2\2\2\u0f40\u0f41\3\2\2\2\u0f41\u0f44\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f43"+
		"\u0f45\5\u0162\u00b2\2\u0f44\u0f43\3\2\2\2\u0f44\u0f45\3\2\2\2\u0f45\u0149"+
		"\3\2\2\2\u0f46\u0f47\7\26\2\2\u0f47\u0f48\7\u01d3\2\2\u0f48\u0f49\7\u0149"+
		"\2\2\u0f49\u0f4e\5\u0164\u00b3\2\u0f4a\u0f4b\7\u02aa\2\2\u0f4b\u0f4d\5"+
		"\u0164\u00b3\2\u0f4c\u0f4a\3\2\2\2\u0f4d\u0f50\3\2\2\2\u0f4e\u0f4c\3\2"+
		"\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u014b\3\2\2\2\u0f50\u0f4e\3\2\2\2\u0f51"+
		"\u0f52\7|\2\2\u0f52\u0f53\t\34\2\2\u0f53\u0f58\7\u0173\2\2\u0f54\u0f55"+
		"\7\u00a2\2\2\u0f55\u0f59\5\u027c\u013f\2\u0f56\u0f57\7\16\2\2\u0f57\u0f59"+
		"\5\u027c\u013f\2\u0f58\u0f54\3\2\2\2\u0f58\u0f56\3\2\2\2\u0f59\u014d\3"+
		"\2\2\2\u0f5a\u0f5b\7\u01d4\2\2\u0f5b\u0f5c\7\u0174\2\2\u0f5c\u014f\3\2"+
		"\2\2\u0f5d\u0f5e\7\u01d4\2\2\u0f5e\u0f60\7\u01e6\2\2\u0f5f\u0f61\7\b\2"+
		"\2\u0f60\u0f5f\3\2\2\2\u0f60\u0f61\3\2\2\2\u0f61\u0f63\3\2\2\2\u0f62\u0f64"+
		"\5\u0162\u00b2\2\u0f63\u0f62\3\2\2\2\u0f63\u0f64\3\2\2\2\u0f64\u0151\3"+
		"\2\2\2\u0f65\u0f66\7\u01f5\2\2\u0f66\u0f6f\7\u01e6\2\2\u0f67\u0f6c\5\u0168"+
		"\u00b5\2\u0f68\u0f69\7\u02aa\2\2\u0f69\u0f6b\5\u0168\u00b5\2\u0f6a\u0f68"+
		"\3\2\2\2\u0f6b\u0f6e\3\2\2\2\u0f6c\u0f6a\3\2\2\2\u0f6c\u0f6d\3\2\2\2\u0f6d"+
		"\u0f70\3\2\2\2\u0f6e\u0f6c\3\2\2\2\u0f6f\u0f67\3\2\2\2\u0f6f\u0f70\3\2"+
		"\2\2\u0f70\u0f73\3\2\2\2\u0f71\u0f72\7\u0211\2\2\u0f72\u0f74\5\u016a\u00b6"+
		"\2\u0f73\u0f71\3\2\2\2\u0f73\u0f74\3\2\2\2\u0f74\u0f78\3\2\2\2\u0f75\u0f77"+
		"\5\u016c\u00b7\2\u0f76\u0f75\3\2\2\2\u0f77\u0f7a\3\2\2\2\u0f78\u0f76\3"+
		"\2\2\2\u0f78\u0f79\3\2\2\2\u0f79\u0f7c\3\2\2\2\u0f7a\u0f78\3\2\2\2\u0f7b"+
		"\u0f7d\5\u0162\u00b2\2\u0f7c\u0f7b\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u0153"+
		"\3\2\2\2\u0f7e\u0f7f\7\u01fb\2\2\u0f7f\u0f88\7\u01e6\2\2\u0f80\u0f85\5"+
		"\u0168\u00b5\2\u0f81\u0f82\7\u02aa\2\2\u0f82\u0f84\5\u0168\u00b5\2\u0f83"+
		"\u0f81\3\2\2\2\u0f84\u0f87\3\2\2\2\u0f85\u0f83\3\2\2\2\u0f85\u0f86\3\2"+
		"\2\2\u0f86\u0f89\3\2\2\2\u0f87\u0f85\3\2\2\2\u0f88\u0f80\3\2\2\2\u0f88"+
		"\u0f89\3\2\2\2\u0f89\u0155\3\2\2\2\u0f8a\u0f8b\7\u01f5\2\2\u0f8b\u0f8c"+
		"\7\u0154\2\2\u0f8c\u0157\3\2\2\2\u0f8d\u0f8e\7\u01fb\2\2\u0f8e\u0f8f\7"+
		"\u0154\2\2\u0f8f\u0159\3\2\2\2\u0f90\u0f91\5\u015c\u00af\2\u0f91\u0f92"+
		"\7\u0299\2\2\u0f92\u0f93\5\u027c\u013f\2\u0f93\u0fae\3\2\2\2\u0f94\u0f95"+
		"\5\u015e\u00b0\2\u0f95\u0f96\7\u0299\2\2\u0f96\u0f97\5\u027c\u013f\2\u0f97"+
		"\u0fae\3\2\2\2\u0f98\u0f99\5\u0160\u00b1\2\u0f99\u0f9a\7\u0299\2\2\u0f9a"+
		"\u0f9b\5\u027c\u013f\2\u0f9b\u0fae\3\2\2\2\u0f9c\u0f9d\7\u0178\2\2\u0f9d"+
		"\u0f9e\7\u0299\2\2\u0f9e\u0fae\5\u027c\u013f\2\u0f9f\u0fa0\7\u015b\2\2"+
		"\u0fa0\u0fa1\7\u0299\2\2\u0fa1\u0faa\7\u02a6\2\2\u0fa2\u0fa7\5\u0252\u012a"+
		"\2\u0fa3\u0fa4\7\u02aa\2\2\u0fa4\u0fa6\5\u0252\u012a\2\u0fa5\u0fa3\3\2"+
		"\2\2\u0fa6\u0fa9\3\2\2\2\u0fa7\u0fa5\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8"+
		"\u0fab\3\2\2\2\u0fa9\u0fa7\3\2\2\2\u0faa\u0fa2\3\2\2\2\u0faa\u0fab\3\2"+
		"\2\2\u0fab\u0fac\3\2\2\2\u0fac\u0fae\7\u02a7\2\2\u0fad\u0f90\3\2\2\2\u0fad"+
		"\u0f94\3\2\2\2\u0fad\u0f98\3\2\2\2\u0fad\u0f9c\3\2\2\2\u0fad\u0f9f\3\2"+
		"\2\2\u0fae\u015b\3\2\2\2\u0faf\u0fb0\t\35\2\2\u0fb0\u015d\3\2\2\2\u0fb1"+
		"\u0fb2\t\36\2\2\u0fb2\u015f\3\2\2\2\u0fb3\u0fb4\t\37\2\2\u0fb4\u0161\3"+
		"\2\2\2\u0fb5\u0fb6\7:\2\2\u0fb6\u0fb7\7\u010b\2\2\u0fb7\u0fb8\5\u027c"+
		"\u013f\2\u0fb8\u0163\3\2\2\2\u0fb9\u0fba\7\u01cc\2\2\u0fba\u0fbb\7\u0299"+
		"\2\2\u0fbb\u0fbc\7\u02a6\2\2\u0fbc\u0fc1\5\u027c\u013f\2\u0fbd\u0fbe\7"+
		"\u02aa\2\2\u0fbe\u0fc0\5\u027c\u013f\2\u0fbf\u0fbd\3\2\2\2\u0fc0\u0fc3"+
		"\3\2\2\2\u0fc1\u0fbf\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fc4\3\2\2\2\u0fc3"+
		"\u0fc1\3\2\2\2\u0fc4\u0fc5\7\u02a7\2\2\u0fc5\u1007\3\2\2\2\u0fc6\u0fc7"+
		"\7\u01ce\2\2\u0fc7\u0fc8\7\u0299\2\2\u0fc8\u0fc9\7\u02a6\2\2\u0fc9\u0fce"+
		"\5\u027c\u013f\2\u0fca\u0fcb\7\u02aa\2\2\u0fcb\u0fcd\5\u027c\u013f\2\u0fcc"+
		"\u0fca\3\2\2\2\u0fcd\u0fd0\3\2\2\2\u0fce\u0fcc\3\2\2\2\u0fce\u0fcf\3\2"+
		"\2\2\u0fcf\u0fd1\3\2\2\2\u0fd0\u0fce\3\2\2\2\u0fd1\u0fd2\7\u02a7\2\2\u0fd2"+
		"\u1007\3\2\2\2\u0fd3\u0fd4\7\u01cd\2\2\u0fd4\u0fd5";
	private static final String _serializedATNSegment2 =
		"\7\u0299\2\2\u0fd5\u0fd6\7\u02a6\2\2\u0fd6\u0fdb\5\u027c\u013f\2\u0fd7"+
		"\u0fd8\7\u02aa\2\2\u0fd8\u0fda\5\u027c\u013f\2\u0fd9\u0fd7\3\2\2\2\u0fda"+
		"\u0fdd\3\2\2\2\u0fdb\u0fd9\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc\u0fde\3\2"+
		"\2\2\u0fdd\u0fdb\3\2\2\2\u0fde\u0fdf\7\u02a7\2\2\u0fdf\u1007\3\2\2\2\u0fe0"+
		"\u0fe1\7\u01cf\2\2\u0fe1\u0fe2\7\u0299\2\2\u0fe2\u0fe3\7\u02a6\2\2\u0fe3"+
		"\u0fe8\5\u027c\u013f\2\u0fe4\u0fe5\7\u02aa\2\2\u0fe5\u0fe7\5\u027c\u013f"+
		"\2\u0fe6\u0fe4\3\2\2\2\u0fe7\u0fea\3\2\2\2\u0fe8\u0fe6\3\2\2\2\u0fe8\u0fe9"+
		"\3\2\2\2\u0fe9\u0feb\3\2\2\2\u0fea\u0fe8\3\2\2\2\u0feb\u0fec\7\u02a7\2"+
		"\2\u0fec\u1007\3\2\2\2\u0fed\u0fee\7\u01d1\2\2\u0fee\u0fef\7\u0299\2\2"+
		"\u0fef\u0ff0\7\u02a6\2\2\u0ff0\u0ff1\5\u022a\u0116\2\u0ff1\u0ff2\7\u02a7"+
		"\2\2\u0ff2\u1007\3\2\2\2\u0ff3\u0ff4\7\u01d2\2\2\u0ff4\u0ff5\7\u0299\2"+
		"\2\u0ff5\u0ff6\7\u02a6\2\2\u0ff6\u0ff7\5\u022a\u0116\2\u0ff7\u0ff8\7\u02a7"+
		"\2\2\u0ff8\u1007\3\2\2\2\u0ff9\u0ffa\7\u01d0\2\2\u0ffa\u0ffb\7\u0299\2"+
		"\2\u0ffb\u0ffc\7\u02a6\2\2\u0ffc\u1001\5\u0166\u00b4\2\u0ffd\u0ffe\7\u02aa"+
		"\2\2\u0ffe\u1000\5\u0166\u00b4\2\u0fff\u0ffd\3\2\2\2\u1000\u1003\3\2\2"+
		"\2\u1001\u0fff\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u1004\3\2\2\2\u1003\u1001"+
		"\3\2\2\2\u1004\u1005\7\u02a7\2\2\u1005\u1007\3\2\2\2\u1006\u0fb9\3\2\2"+
		"\2\u1006\u0fc6\3\2\2\2\u1006\u0fd3\3\2\2\2\u1006\u0fe0\3\2\2\2\u1006\u0fed"+
		"\3\2\2\2\u1006\u0ff3\3\2\2\2\u1006\u0ff9\3\2\2\2\u1007\u0165\3\2\2\2\u1008"+
		"\u1009\7\u02a6\2\2\u1009\u100a\5\u0252\u012a\2\u100a\u100b\7\u02aa\2\2"+
		"\u100b\u100c\5\u0252\u012a\2\u100c\u100d\7\u02a7\2\2\u100d\u0167\3\2\2"+
		"\2\u100e\u100f\t \2\2\u100f\u0169\3\2\2\2\u1010\u1011\t!\2\2\u1011\u1012"+
		"\7\u0299\2\2\u1012\u1025\5\u016e\u00b8\2\u1013\u1014\7\u017a\2\2\u1014"+
		"\u1015\7\u0299\2\2\u1015\u1016\5\u027c\u013f\2\u1016\u1017\7\u02aa\2\2"+
		"\u1017\u1018\7\u017b\2\2\u1018\u1019\7\u0299\2\2\u1019\u101a\5\u027c\u013f"+
		"\2\u101a\u1025\3\2\2\2\u101b\u101c\7\u01c6\2\2\u101c\u101d\7\u0299\2\2"+
		"\u101d\u101e\5\u027c\u013f\2\u101e\u101f\7\u02aa\2\2\u101f\u1020\7\u01c7"+
		"\2\2\u1020\u1021\7\u0299\2\2\u1021\u1022\5\u027c\u013f\2\u1022\u1025\3"+
		"\2\2\2\u1023\u1025\7\u01ef\2\2\u1024\u1010\3\2\2\2\u1024\u1013\3\2\2\2"+
		"\u1024\u101b\3\2\2\2\u1024\u1023\3\2\2\2\u1025\u016b\3\2\2\2\u1026\u1027"+
		"\7\u0213\2\2\u1027\u1028\7\u0299\2\2\u1028\u1033\5\u027c\u013f\2\u1029"+
		"\u102a\7\u01b0\2\2\u102a\u102b\7\u0299\2\2\u102b\u1033\5\u027c\u013f\2"+
		"\u102c\u102d\7\u0125\2\2\u102d\u102e\7\u0299\2\2\u102e\u1033\5\u027c\u013f"+
		"\2\u102f\u1030\7\u01b3\2\2\u1030\u1031\7\u0299\2\2\u1031\u1033\5\u027c"+
		"\u013f\2\u1032\u1026\3\2\2\2\u1032\u1029\3\2\2\2\u1032\u102c\3\2\2\2\u1032"+
		"\u102f\3\2\2\2\u1033\u016d\3\2\2\2\u1034\u1039\5\u0216\u010c\2\u1035\u1036"+
		"\7\u02aa\2\2\u1036\u1038\5\u0216\u010c\2\u1037\u1035\3\2\2\2\u1038\u103b"+
		"\3\2\2\2\u1039\u1037\3\2\2\2\u1039\u103a\3\2\2\2\u103a\u103e\3\2\2\2\u103b"+
		"\u1039\3\2\2\2\u103c\u103e\5\u027c\u013f\2\u103d\u1034\3\2\2\2\u103d\u103c"+
		"\3\2\2\2\u103e\u016f\3\2\2\2\u103f\u1040\7\u0220\2\2\u1040\u1041\t\"\2"+
		"\2\u1041\u1043\5\u0218\u010d\2\u1042\u1044\t#\2\2\u1043\u1042\3\2\2\2"+
		"\u1043\u1044\3\2\2\2\u1044\u0171\3\2\2\2\u1045\u1046\7\u0220\2\2\u1046"+
		"\u1047\7\u0133\2\2\u1047\u104d\5\u0218\u010d\2\u1048\u104b\7\u0201\2\2"+
		"\u1049\u104a\7:\2\2\u104a\u104c\7\u0191\2\2\u104b\u1049\3\2\2\2\u104b"+
		"\u104c\3\2\2\2\u104c\u104e\3\2\2\2\u104d\u1048\3\2\2\2\u104d\u104e\3\2"+
		"\2\2\u104e\u0173\3\2\2\2\u104f\u1050\7\u0220\2\2\u1050\u1051\7\u01b8\2"+
		"\2\u1051\u1052\5\u0218\u010d\2\u1052\u0175\3\2\2\2\u1053\u1054\7\u0220"+
		"\2\2\u1054\u1055\7\u0115\2\2\u1055\u1058\5\u0218\u010d\2\u1056\u1057\7"+
		"\u01a3\2\2\u1057\u1059\7\u01b1\2\2\u1058\u1056\3\2\2\2\u1058\u1059\3\2"+
		"\2\2\u1059\u0177\3\2\2\2\u105a\u105b\7\u0220\2\2\u105b\u105c\7\u01d7\2"+
		"\2\u105c\u105d\5\u0218\u010d\2\u105d\u0179\3\2\2\2\u105e\u105f\7\u0220"+
		"\2\2\u105f\u1062\7\u01c2\2\2\u1060\u1061\7\36\2\2\u1061\u1063\5\u0218"+
		"\u010d\2\u1062\u1060\3\2\2\2\u1062\u1063\3\2\2\2\u1063\u017b\3\2\2\2\u1064"+
		"\u1065\7\u01b8\2\2\u1065\u1066\5\u0252\u012a\2\u1066\u1067\7=\2\2\u1067"+
		"\u1068\5\u027c\u013f\2\u1068\u017d\3\2\2\2\u1069\u106a\7\u023c\2\2\u106a"+
		"\u106d\5\u0252\u012a\2\u106b\u106c\7\u00ae\2\2\u106c\u106e\5\u022c\u0117"+
		"\2\u106d\u106b\3\2\2\2\u106d\u106e\3\2\2\2\u106e\u017f\3\2\2\2\u106f\u1070"+
		"\t$\2\2\u1070\u1071\7\u01b8\2\2\u1071\u1072\5\u0252\u012a\2\u1072\u0181"+
		"\3\2\2\2\u1073\u1074\5\4\3\2\u1074\u1075\t%\2\2\u1075\u0183\3\2\2\2\u1076"+
		"\u1077\5\u0252\u012a\2\u1077\u1078\7\u02b0\2\2\u1078\u107a\3\2\2\2\u1079"+
		"\u1076\3\2\2\2\u1079\u107a\3\2\2\2\u107a\u107b\3\2\2\2\u107b\u107f\7\u0100"+
		"\2\2\u107c\u107e\5\u0186\u00c4\2\u107d\u107c\3\2\2\2\u107e\u1081\3\2\2"+
		"\2\u107f\u107d\3\2\2\2\u107f\u1080\3\2\2\2\u1080\u1082\3\2\2\2\u1081\u107f"+
		"\3\2\2\2\u1082\u1084\7\u0133\2\2\u1083\u1085\5\u0252\u012a\2\u1084\u1083"+
		"\3\2\2\2\u1084\u1085\3\2\2\2\u1085\u0185\3\2\2\2\u1086\u1087\5\u0188\u00c5"+
		"\2\u1087\u1088\t%\2\2\u1088\u0187\3\2\2\2\u1089\u108a\5\4\3\2\u108a\u0189"+
		"\3\2\2\2\u108b\u108d\7\24\2\2\u108c\u108e\5\u027c\u013f\2\u108d\u108c"+
		"\3\2\2\2\u108d\u108e\3\2\2\2\u108e\u1090\3\2\2\2\u108f\u1091\5\u018c\u00c7"+
		"\2\u1090\u108f\3\2\2\2\u1091\u1092\3\2\2\2\u1092\u1090\3\2\2\2\u1092\u1093"+
		"\3\2\2\2\u1093\u1095\3\2\2\2\u1094\u1096\5\u018e\u00c8\2\u1095\u1094\3"+
		"\2\2\2\u1095\u1096\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u1098\7\u0133\2\2"+
		"\u1098\u1099\7\24\2\2\u1099\u018b\3\2\2\2\u109a\u109b\7\u00b1\2\2\u109b"+
		"\u109c\5\u027c\u013f\2\u109c\u109d\7\u00a1\2\2\u109d\u109e\5\u0182\u00c2"+
		"\2\u109e\u018d\3\2\2\2\u109f\u10a1\7\61\2\2\u10a0\u10a2\5\u0182\u00c2"+
		"\2\u10a1\u10a0\3\2\2\2\u10a2\u10a3\3\2\2\2\u10a3\u10a1\3\2\2\2\u10a3\u10a4"+
		"\3\2\2\2\u10a4\u018f\3\2\2\2\u10a5\u10a6\7C\2\2\u10a6\u10a7\5\u027c\u013f"+
		"\2\u10a7\u10a9\7\u00a1\2\2\u10a8\u10aa\5\u0182\u00c2\2\u10a9\u10a8\3\2"+
		"\2\2\u10aa\u10ab\3\2\2\2\u10ab\u10a9\3\2\2\2\u10ab\u10ac\3\2\2\2\u10ac"+
		"\u10b0\3\2\2\2\u10ad\u10af\5\u0192\u00ca\2\u10ae\u10ad\3\2\2\2\u10af\u10b2"+
		"\3\2\2\2\u10b0\u10ae\3\2\2\2\u10b0\u10b1\3\2\2\2\u10b1\u10b9\3\2\2\2\u10b2"+
		"\u10b0\3\2\2\2\u10b3\u10b5\7\61\2\2\u10b4\u10b6\5\u0182\u00c2\2\u10b5"+
		"\u10b4\3\2\2\2\u10b6\u10b7\3\2\2\2\u10b7\u10b5\3\2\2\2\u10b7\u10b8\3\2"+
		"\2\2\u10b8\u10ba\3\2\2\2\u10b9\u10b3\3\2\2\2\u10b9\u10ba\3\2\2\2\u10ba"+
		"\u10bb\3\2\2\2\u10bb\u10bc\7\u0133\2\2\u10bc\u10bd\7C\2\2\u10bd\u0191"+
		"\3\2\2\2\u10be\u10bf\7\62\2\2\u10bf\u10c0\5\u027c\u013f\2\u10c0\u10c2"+
		"\7\u00a1\2\2\u10c1\u10c3\5\u0182\u00c2\2\u10c2\u10c1\3\2\2\2\u10c3\u10c4"+
		"\3\2\2\2\u10c4\u10c2\3\2\2\2\u10c4\u10c5\3\2\2\2\u10c5\u0193\3\2\2\2\u10c6"+
		"\u10c7\7O\2\2\u10c7\u10c8\5\u0252\u012a\2\u10c8\u0195\3\2\2\2\u10c9\u10ca"+
		"\7U\2\2\u10ca\u10cb\5\u0252\u012a\2\u10cb\u0197\3\2\2\2\u10cc\u10cd\5"+
		"\u0252\u012a\2\u10cd\u10ce\7\u02b0\2\2\u10ce\u10d0\3\2\2\2\u10cf\u10cc"+
		"\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d3\7^\2\2\u10d2"+
		"\u10d4\5\u0186\u00c4\2\u10d3\u10d2\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u10d3"+
		"\3\2\2\2\u10d5\u10d6\3\2\2\2\u10d6\u10d7\3\2\2\2\u10d7\u10d8\7\u0133\2"+
		"\2\u10d8\u10da\7^\2\2\u10d9\u10db\5\u0252\u012a\2\u10da\u10d9\3\2\2\2"+
		"\u10da\u10db\3\2\2\2\u10db\u0199\3\2\2\2\u10dc\u10dd\5\u0252\u012a\2\u10dd"+
		"\u10de\7\u02b0\2\2\u10de\u10e0\3\2\2\2\u10df\u10dc\3\2\2\2\u10df\u10e0"+
		"\3\2\2\2\u10e0\u10e1\3\2\2\2\u10e1\u10e3\7\u0084\2\2\u10e2\u10e4\5\u0186"+
		"\u00c4\2\u10e3\u10e2\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u10e3\3\2\2\2\u10e5"+
		"\u10e6\3\2\2\2\u10e6\u10e7\3\2\2\2\u10e7\u10e8\7\u0211\2\2\u10e8\u10e9"+
		"\5\u027c\u013f\2\u10e9\u10ea\7\u0133\2\2\u10ea\u10ec\7\u0084\2\2\u10eb"+
		"\u10ed\5\u0252\u012a\2\u10ec\u10eb\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u019b"+
		"\3\2\2\2\u10ee\u10ef\7\u0088\2\2\u10ef\u10f0\5\u027c\u013f\2\u10f0\u019d"+
		"\3\2\2\2\u10f1\u10f2\5\u0252\u012a\2\u10f2\u10f3\7\u02b0\2\2\u10f3\u10f5"+
		"\3\2\2\2\u10f4\u10f1\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5\u10f6\3\2\2\2\u10f6"+
		"\u10f7\7\u00b3\2\2\u10f7\u10f8\5\u027c\u013f\2\u10f8\u10fa\7\u012d\2\2"+
		"\u10f9\u10fb\5\u0186\u00c4\2\u10fa\u10f9\3\2\2\2\u10fb\u10fc\3\2\2\2\u10fc"+
		"\u10fa\3\2\2\2\u10fc\u10fd\3\2\2\2\u10fd\u10fe\3\2\2\2\u10fe\u10ff\7\u0133"+
		"\2\2\u10ff\u1101\7\u00b3\2\2\u1100\u1102\5\u0252\u012a\2\u1101\u1100\3"+
		"\2\2\2\u1101\u1102\3\2\2\2\u1102\u019f\3\2\2\2\u1103\u1104\7\u010f\2\2"+
		"\u1104\u1119\5\u0252\u012a\2\u1105\u110a\79\2\2\u1106\u1108\7\u019b\2"+
		"\2\u1107\u1106\3\2\2\2\u1107\u1108\3\2\2\2\u1108\u1109\3\2\2\2\u1109\u110b"+
		"\7=\2\2\u110a\u1107\3\2\2\2\u110a\u110b\3\2\2\2\u110b\u110c\3\2\2\2\u110c"+
		"\u110d\5\u0252\u012a\2\u110d\u110e\7M\2\2\u110e\u1113\5\u027c\u013f\2"+
		"\u110f\u1110\7\u02aa\2\2\u1110\u1112\5\u027c\u013f\2\u1111\u110f\3\2\2"+
		"\2\u1112\u1115\3\2\2\2\u1113\u1111\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1119"+
		"\3\2\2\2\u1115\u1113\3\2\2\2\u1116\u1117\7\u01a6\2\2\u1117\u1119\5\u0252"+
		"\u012a\2\u1118\u1103\3\2\2\2\u1118\u1105\3\2\2\2\u1118\u1116\3\2\2\2\u1119"+
		"\u01a1\3\2\2\2\u111a\u111f\5\u01a4\u00d3\2\u111b\u111f\5\u01a6\u00d4\2"+
		"\u111c\u111f\5\u01a8\u00d5\2\u111d\u111f\5\u01aa\u00d6\2\u111e\u111a\3"+
		"\2\2\2\u111e\u111b\3\2\2\2\u111e\u111c\3\2\2\2\u111e\u111d\3\2\2\2\u111f"+
		"\u01a3\3\2\2\2\u1120\u1121\7%\2\2\u1121\u1126\5\u027c\u013f\2\u1122\u1123"+
		"\7\u02aa\2\2\u1123\u1125\5\u027c\u013f\2\u1124\u1122\3\2\2\2\u1125\u1128"+
		"\3\2\2\2\u1126\u1124\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u1129\3\2\2\2\u1128"+
		"\u1126\3\2\2\2\u1129\u112a\5\u0240\u0121\2\u112a\u112b\5\u0280\u0141\2"+
		"\u112b\u01a5\3\2\2\2\u112c\u112d\7%\2\2\u112d\u112e\5\u0252\u012a\2\u112e"+
		"\u112f\7\33\2\2\u112f\u1136\7:\2\2\u1130\u1137\5\u027c\u013f\2\u1131\u1133"+
		"\7\u0097\2\2\u1132\u1134\7\u0217\2\2\u1133\u1132\3\2\2\2\u1133\u1134\3"+
		"\2\2\2\u1134\u1135\3\2\2\2\u1135\u1137\5\u027c\u013f\2\u1136\u1130\3\2"+
		"\2\2\u1136\u1131\3\2\2\2\u1137\u01a7\3\2\2\2\u1138\u1139\7%\2\2\u1139"+
		"\u113a\5\u0252\u012a\2\u113a\u113b\7\"\2\2\u113b\u113c\7:\2\2\u113c\u113d"+
		"\5\u00bc_\2\u113d\u01a9\3\2\2\2\u113e\u113f\7%\2\2\u113f\u1140\t&\2\2"+
		"\u1140\u1141\7\u0155\2\2\u1141\u1142\7:\2\2\u1142\u1147\5\u01ac\u00d7"+
		"\2\u1143\u1144\7\u02aa\2\2\u1144\u1146\5\u01ac\u00d7\2\u1145\u1143\3\2"+
		"\2\2\u1146\u1149\3\2\2\2\u1147\u1145\3\2\2\2\u1147\u1148\3\2\2\2\u1148"+
		"\u114a\3\2\2\2\u1149\u1147\3\2\2\2\u114a\u114b\5\4\3\2\u114b\u01ab\3\2"+
		"\2\2\u114c\u1158\5\u027c\u013f\2\u114d\u114f\7\u0097\2\2\u114e\u1150\7"+
		"\u0217\2\2\u114f\u114e\3\2\2\2\u114f\u1150\3\2\2\2\u1150\u1151\3\2\2\2"+
		"\u1151\u1158\5\u027c\u013f\2\u1152\u1158\5\u0252\u012a\2\u1153\u1158\7"+
		"\u0098\2\2\u1154\u1155\7i\2\2\u1155\u1158\7\u014e\2\2\u1156\u1158\7\u0096"+
		"\2\2\u1157\u114c\3\2\2\2\u1157\u114d\3\2\2\2\u1157\u1152\3\2\2\2\u1157"+
		"\u1153\3\2\2\2\u1157\u1154\3\2\2\2\u1157\u1156\3\2\2\2\u1158\u01ad\3\2"+
		"\2\2\u1159\u115a\7\t\2\2\u115a\u115c\7\u0213\2\2\u115b\u115d\5\u0324\u0193"+
		"\2\u115c\u115b\3\2\2\2\u115c\u115d\3\2\2\2\u115d\u115e\3\2\2\2\u115e\u1163"+
		"\5\u01be\u00e0\2\u115f\u1160\7\u02aa\2\2\u1160\u1162\5\u01be\u00e0\2\u1161"+
		"\u115f\3\2\2\2\u1162\u1165\3\2\2\2\u1163\u1161\3\2\2\2\u1163\u1164\3\2"+
		"\2\2\u1164\u1193\3\2\2\2\u1165\u1163\3\2\2\2\u1166\u1167\7\t\2\2\u1167"+
		"\u1169\7\u0213\2\2\u1168\u116a\5\u0324\u0193\2\u1169\u1168\3\2\2\2\u1169"+
		"\u116a\3\2\2\2\u116a\u116b\3\2\2\2\u116b\u1170\5\u01c0\u00e1\2\u116c\u116d"+
		"\7\u02aa\2\2\u116d\u116f\5\u01c0\u00e1\2\u116e\u116c\3\2\2\2\u116f\u1172"+
		"\3\2\2\2\u1170\u116e\3\2\2\2\u1170\u1171\3\2\2\2\u1171\u1181\3\2\2\2\u1172"+
		"\u1170\3\2\2\2\u1173\u117f\7\u0086\2\2\u1174\u1180\7\u019e\2\2\u1175\u117c"+
		"\5\u01c2\u00e2\2\u1176\u1178\7\13\2\2\u1177\u1176\3\2\2\2\u1177\u1178"+
		"\3\2\2\2\u1178\u1179\3\2\2\2\u1179\u117b\5\u01c2\u00e2\2\u117a\u1177\3"+
		"\2\2\2\u117b\u117e\3\2\2\2\u117c\u117a\3\2\2\2\u117c\u117d\3\2\2\2\u117d"+
		"\u1180\3\2\2\2\u117e\u117c\3\2\2\2\u117f\u1174\3\2\2\2\u117f\u1175\3\2"+
		"\2\2\u1180\u1182\3\2\2\2\u1181\u1173\3\2\2\2\u1181\u1182\3\2\2\2\u1182"+
		"\u1189\3\2\2\2\u1183\u1185\7\u00b4\2\2\u1184\u1186\5\u01c4\u00e3\2\u1185"+
		"\u1184\3\2\2\2\u1186\u1187\3\2\2\2\u1187\u1185\3\2\2\2\u1187\u1188\3\2"+
		"\2\2\u1188\u118a\3\2\2\2\u1189\u1183\3\2\2\2\u1189\u118a\3\2\2\2\u118a"+
		"\u118f\3\2\2\2\u118b\u118e\5\u01c6\u00e4\2\u118c\u118e\5\u01c8\u00e5\2"+
		"\u118d\u118b\3\2\2\2\u118d\u118c\3\2\2\2\u118e\u1191\3\2\2\2\u118f\u118d"+
		"\3\2\2\2\u118f\u1190\3\2\2\2\u1190\u1193\3\2\2\2\u1191\u118f\3\2\2\2\u1192"+
		"\u1159\3\2\2\2\u1192\u1166\3\2\2\2\u1193\u01af\3\2\2\2\u1194\u1195\7\37"+
		"\2\2\u1195\u1197\7\u0213\2\2\u1196\u1198\5\u0326\u0194\2\u1197\u1196\3"+
		"\2\2\2\u1197\u1198\3\2\2\2\u1198\u1199\3\2\2\2\u1199\u119e\5\u01c0\u00e1"+
		"\2\u119a\u119b\7\u02aa\2\2\u119b\u119d\5\u01c0\u00e1\2\u119c\u119a\3\2"+
		"\2\2\u119d\u11a0\3\2\2\2\u119e\u119c\3\2\2\2\u119e\u119f\3\2\2\2\u119f"+
		"\u11af\3\2\2\2\u11a0\u119e\3\2\2\2\u11a1\u11ad\7\u0086\2\2\u11a2\u11ae"+
		"\7\u019e\2\2\u11a3\u11aa\5\u01c2\u00e2\2\u11a4\u11a6\7\13\2\2\u11a5\u11a4"+
		"\3\2\2\2\u11a5\u11a6\3\2\2\2\u11a6\u11a7\3\2\2\2\u11a7\u11a9\5\u01c2\u00e2"+
		"\2\u11a8\u11a5\3\2\2\2\u11a9\u11ac\3\2\2\2\u11aa\u11a8\3\2\2\2\u11aa\u11ab"+
		"\3\2\2\2\u11ab\u11ae\3\2\2\2\u11ac\u11aa\3\2\2\2\u11ad\u11a2\3\2\2\2\u11ad"+
		"\u11a3\3\2\2\2\u11ae\u11b0\3\2\2\2\u11af\u11a1\3\2\2\2\u11af\u11b0\3\2"+
		"\2\2\u11b0\u11b7\3\2\2\2\u11b1\u11b3\7\u00b4\2\2\u11b2\u11b4\5\u01c4\u00e3"+
		"\2\u11b3\u11b2\3\2\2\2\u11b4\u11b5\3\2\2\2\u11b5\u11b3\3\2\2\2\u11b5\u11b6"+
		"\3\2\2\2\u11b6\u11b8\3\2\2\2\u11b7\u11b1\3\2\2\2\u11b7\u11b8\3\2\2\2\u11b8"+
		"\u11bd\3\2\2\2\u11b9\u11bc\5\u01c6\u00e4\2\u11ba\u11bc\5\u01c8\u00e5\2"+
		"\u11bb\u11b9\3\2\2\2\u11bb\u11ba\3\2\2\2\u11bc\u11bf\3\2\2\2\u11bd\u11bb"+
		"\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u01b1\3\2\2\2\u11bf\u11bd\3\2\2\2\u11c0"+
		"\u11c1\7/\2\2\u11c1\u11c3\7\u0213\2\2\u11c2\u11c4\5\u0324\u0193\2\u11c3"+
		"\u11c2\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4\u11c5\3\2\2\2\u11c5\u11ca\5\u0252"+
		"\u012a\2\u11c6\u11c7\7\u02aa\2\2\u11c7\u11c9\5\u0252\u012a\2\u11c8\u11c6"+
		"\3\2\2\2\u11c9\u11cc\3\2\2\2\u11ca\u11c8\3\2\2\2\u11ca\u11cb\3\2\2\2\u11cb"+
		"\u01b3\3\2\2\2\u11cc\u11ca\3\2\2\2\u11cd\u11ce\7?\2\2\u11ce\u11d3\5\u01ca"+
		"\u00e6\2\u11cf\u11d0\7\u02aa\2\2\u11d0\u11d2\5\u01ca\u00e6\2\u11d1\u11cf"+
		"\3\2\2\2\u11d2\u11d5\3\2\2\2\u11d3\u11d1\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4"+
		"\u11d6\3\2\2\2\u11d5\u11d3\3\2\2\2\u11d6\u11d8\7n\2\2\u11d7\u11d9\t\'"+
		"\2\2\u11d8\u11d7\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11da\3\2\2\2\u11da"+
		"\u11db\5\u01ce\u00e8\2\u11db\u11dc\7\u00a2\2\2\u11dc\u11e1\5\u01c0\u00e1"+
		"\2\u11dd\u11de\7\u02aa\2\2\u11de\u11e0\5\u01c0\u00e1\2\u11df\u11dd\3\2"+
		"\2\2\u11e0\u11e3\3\2\2\2\u11e1\u11df\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2"+
		"\u11f2\3\2\2\2\u11e3\u11e1\3\2\2\2\u11e4\u11f0\7\u0086\2\2\u11e5\u11f1"+
		"\7\u019e\2\2\u11e6\u11ed\5\u01c2\u00e2\2\u11e7\u11e9\7\13\2\2\u11e8\u11e7"+
		"\3\2\2\2\u11e8\u11e9\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u11ec\5\u01c2\u00e2"+
		"\2\u11eb\u11e8\3\2\2\2\u11ec\u11ef\3\2\2\2\u11ed\u11eb\3\2\2\2\u11ed\u11ee"+
		"\3\2\2\2\u11ee\u11f1\3\2\2\2\u11ef\u11ed\3\2\2\2\u11f0\u11e5\3\2\2\2\u11f0"+
		"\u11e6\3\2\2\2\u11f1\u11f3\3\2\2\2\u11f2\u11e4\3\2\2\2\u11f2\u11f3\3\2"+
		"\2\2\u11f3\u11fd\3\2\2\2\u11f4\u11fa\7\u00b4\2\2\u11f5\u11f6\7?\2\2\u11f6"+
		"\u11f9\7p\2\2\u11f7\u11f9\5\u01c4\u00e3\2\u11f8\u11f5\3\2\2\2\u11f8\u11f7"+
		"\3\2\2\2\u11f9\u11fc\3\2\2\2\u11fa\u11f8\3\2\2\2\u11fa\u11fb\3\2\2\2\u11fb"+
		"\u11fe\3\2\2\2\u11fc\u11fa\3\2\2\2\u11fd\u11f4\3\2\2\2\u11fd\u11fe\3\2"+
		"\2\2\u11fe\u01b5\3\2\2\2\u11ff\u1200\7?\2\2\u1200\u1201\7\u01be\2\2\u1201"+
		"\u1202\7n\2\2\u1202\u1203\5\u0252\u012a\2\u1203\u1204\7\u00a2\2\2\u1204"+
		"\u1209\5\u0252\u012a\2\u1205\u1206\7\u02aa\2\2\u1206\u1208\5\u0252\u012a"+
		"\2\u1207\u1205\3\2\2\2\u1208\u120b\3\2\2\2\u1209\u1207\3\2\2\2\u1209\u120a"+
		"\3\2\2\2\u120a\u120f\3\2\2\2\u120b\u1209\3\2\2\2\u120c\u120d\7\u00b4\2"+
		"\2\u120d\u120e\7?\2\2\u120e\u1210\7p\2\2\u120f\u120c\3\2\2\2\u120f\u1210"+
		"\3\2\2\2\u1210\u01b7\3\2\2\2\u1211\u1212\7\u0083\2\2\u1212\u1213\7\u0213"+
		"\2\2\u1213\u1218\5\u01d0\u00e9\2\u1214\u1215\7\u02aa\2\2\u1215\u1217\5"+
		"\u01d0\u00e9\2\u1216\u1214\3\2\2\2\u1217\u121a\3\2\2\2\u1218\u1216\3\2"+
		"\2\2\u1218\u1219\3\2\2\2\u1219\u01b9\3\2\2\2\u121a\u1218\3\2\2\2\u121b"+
		"\u121c\7\u0089\2\2\u121c\u1221\5\u01ca\u00e6\2\u121d\u121e\7\u02aa\2\2"+
		"\u121e\u1220\5\u01ca\u00e6\2\u121f\u121d\3\2\2\2\u1220\u1223\3\2\2\2\u1221"+
		"\u121f\3\2\2\2\u1221\u1222\3\2\2\2\u1222\u1224\3\2\2\2\u1223\u1221\3\2"+
		"\2\2\u1224\u1226\7n\2\2\u1225\u1227\t\'\2\2\u1226\u1225\3\2\2\2\u1226"+
		"\u1227\3\2\2\2\u1227\u1228\3\2\2\2\u1228\u1229\5\u01ce\u00e8\2\u1229\u122a"+
		"\7=\2\2\u122a\u122f\5\u0252\u012a\2\u122b\u122c\7\u02aa\2\2\u122c\u122e"+
		"\5\u0252\u012a\2\u122d\u122b\3\2\2\2\u122e\u1231\3\2\2\2\u122f\u122d\3"+
		"\2\2\2\u122f\u1230\3\2\2\2\u1230\u1244\3\2\2\2\u1231\u122f\3\2\2\2\u1232"+
		"\u1233\7\u0089\2\2\u1233\u1235\7\b\2\2\u1234\u1236\7\u0242\2\2\u1235\u1234"+
		"\3\2\2\2\u1235\u1236\3\2\2\2\u1236\u1237\3\2\2\2\u1237\u1238\7\u02aa\2"+
		"\2\u1238\u1239\7?\2\2\u1239\u123a\7p\2\2\u123a\u123b\7=\2\2\u123b\u1240"+
		"\5\u0252\u012a\2\u123c\u123d\7\u02aa\2\2\u123d\u123f\5\u0252\u012a\2\u123e"+
		"\u123c\3\2\2\2\u123f\u1242\3\2\2\2\u1240\u123e\3\2\2\2\u1240\u1241\3\2"+
		"\2\2\u1241\u1244\3\2\2\2\u1242\u1240\3\2\2\2\u1243\u121b\3\2\2\2\u1243"+
		"\u1232\3\2\2\2\u1244\u01bb\3\2\2\2\u1245\u1246\7\u0089\2\2\u1246\u1247"+
		"\7\u01be\2\2\u1247\u1248\7n\2\2\u1248\u1249\5\u0252\u012a\2\u1249\u124a"+
		"\7=\2\2\u124a\u124f\5\u0252\u012a\2\u124b\u124c\7\u02aa\2\2\u124c\u124e"+
		"\5\u0252\u012a\2\u124d\u124b\3\2\2\2\u124e\u1251\3\2\2\2\u124f\u124d\3"+
		"\2\2\2\u124f\u1250\3\2\2\2\u1250\u01bd\3\2\2\2\u1251\u124f\3\2\2\2\u1252"+
		"\u1253\5\u0252\u012a\2\u1253\u1254\5\u01c6\u00e4\2\u1254\u01bf\3\2\2\2"+
		"\u1255\u1256\5\u0252\u012a\2\u1256\u1257\7\u015a\2\2\u1257\u1258\7\21"+
		"\2\2\u1258\u1259\7\u01b0\2\2\u1259\u125a\5\u027c\u013f\2\u125a\u126e\3"+
		"\2\2\2\u125b\u125c\5\u0252\u012a\2\u125c\u125f\7\u015a\2\2\u125d\u125e"+
		"\7\u00b4\2\2\u125e\u1260\5\u021c\u010f\2\u125f\u125d\3\2\2\2\u125f\u1260"+
		"\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u1262\7\21\2\2\u1262\u1263\5\u027c"+
		"\u013f\2\u1263\u126e\3\2\2\2\u1264\u1265\5\u0252\u012a\2\u1265\u1266\7"+
		"\u015a\2\2\u1266\u1267\7\u00b4\2\2\u1267\u126a\5\u021c\u010f\2\u1268\u1269"+
		"\7\f\2\2\u1269\u126b\5\u027c\u013f\2\u126a\u1268\3\2\2\2\u126a\u126b\3"+
		"\2\2\2\u126b\u126e\3\2\2\2\u126c\u126e\5\u0252\u012a\2\u126d\u1255\3\2"+
		"\2\2\u126d\u125b\3\2\2\2\u126d\u1264\3\2\2\2\u126d\u126c\3\2\2\2\u126e"+
		"\u01c1\3\2\2\2\u126f\u1278\7\u009c\2\2\u1270\u1278\7\u021f\2\2\u1271\u1272"+
		"\7\u010d\2\2\u1272\u1278\5\u027c\u013f\2\u1273\u1274\7\u0168\2\2\u1274"+
		"\u1278\5\u027c\u013f\2\u1275\u1276\7\u01fe\2\2\u1276\u1278\5\u027c\u013f"+
		"\2\u1277\u126f\3\2\2\2\u1277\u1270\3\2\2\2\u1277\u1271\3\2\2\2\u1277\u1273"+
		"\3\2\2\2\u1277\u1275\3\2\2\2\u1278\u01c3\3\2\2\2\u1279\u127a\7\u018a\2"+
		"\2\u127a\u1282\5\u027c\u013f\2\u127b\u127c\7\u018d\2\2\u127c\u1282\5\u027c"+
		"\u013f\2\u127d\u127e\7\u0189\2\2\u127e\u1282\5\u027c\u013f\2\u127f\u1280"+
		"\7\u018e\2\2\u1280\u1282\5\u027c\u013f\2\u1281\u1279\3\2\2\2\u1281\u127b"+
		"\3\2\2\2\u1281\u127d\3\2\2\2\u1281\u127f\3\2\2\2\u1282\u01c5\3\2\2\2\u1283"+
		"\u1284\7\u01b0\2\2\u1284\u128b\7\u0141\2\2\u1285\u128c\7&\2\2\u1286\u128c"+
		"\7\u019a\2\2\u1287\u1288\7L\2\2\u1288\u1289\5\u027c\u013f\2\u1289\u128a"+
		"\7\u0234\2\2\u128a\u128c\3\2\2\2\u128b\u1285\3\2\2\2\u128b\u1286\3\2\2"+
		"\2\u128b\u1287\3\2\2\2\u128b\u128c\3\2\2\2\u128c\u01c7\3\2\2\2\u128d\u128e"+
		"\7\u00f3\2\2\u128e\u128f\t(\2\2\u128f\u01c9\3\2\2\2\u1290\u129c\5\u01cc"+
		"\u00e7\2\u1291\u1292\7\u02a6\2\2\u1292\u1297\5\u027c\u013f\2\u1293\u1294"+
		"\7\u02aa\2\2\u1294\u1296\5\u027c\u013f\2\u1295\u1293\3\2\2\2\u1296\u1299"+
		"\3\2\2\2\u1297\u1295\3\2\2\2\u1297\u1298\3\2\2\2\u1298\u129a\3\2\2\2\u1299"+
		"\u1297\3\2\2\2\u129a\u129b\7\u02a7\2\2\u129b\u129d\3\2\2\2\u129c\u1291"+
		"\3\2\2\2\u129c\u129d\3\2\2\2\u129d\u01cb\3\2\2\2\u129e\u12a0\7\b\2\2\u129f"+
		"\u12a1\7\u0242\2\2\u12a0\u129f\3\2\2\2\u12a0\u12a1\3\2\2\2\u12a1\u12c9"+
		"\3\2\2\2\u12a2\u12a4\7\t\2\2\u12a3\u12a5\7\u023b\2\2\u12a4\u12a3\3\2\2"+
		"\2\u12a4\u12a5\3\2\2\2\u12a5\u12c9\3\2\2\2\u12a6\u12ad\7\37\2\2\u12a7"+
		"\u12a8\7\u0205\2\2\u12a8\u12ae\7\u023a\2\2\u12a9\u12ae\7\u023b\2\2\u12aa"+
		"\u12ae\7\u0219\2\2\u12ab\u12ae\7\u0213\2\2\u12ac\u12ae\7\u0204\2\2\u12ad"+
		"\u12a7\3\2\2\2\u12ad\u12a9\3\2\2\2\u12ad\u12aa\3\2\2\2\u12ad\u12ab\3\2"+
		"\2\2\u12ad\u12ac\3\2\2\2\u12ad\u12ae\3\2\2\2\u12ae\u12c9\3\2\2\2\u12af"+
		"\u12c9\7(\2\2\u12b0\u12c9\7/\2\2\u12b1\u12c9\7\u013b\2\2\u12b2\u12c9\7"+
		"\u023c\2\2\u12b3\u12c9\7\u023d\2\2\u12b4\u12b5\7?\2\2\u12b5\u12c9\7p\2"+
		"\2\u12b6\u12c9\7F\2\2\u12b7\u12c9\7K\2\2\u12b8\u12b9\7\\\2\2\u12b9\u12c9"+
		"\7\u023a\2\2\u12ba\u12c9\7\u023e\2\2\u12bb\u12c9\7\u01be\2\2\u12bc\u12c9"+
		"\7\u0080\2\2\u12bd\u12c9\7\u023f\2\2\u12be\u12bf\7\u01d3\2\2\u12bf\u12c9"+
		"\t)\2\2\u12c0\u12c9\7\u008f\2\2\u12c1\u12c2\7\u0092\2\2\u12c2\u12c9\t"+
		"*\2\2\u12c3\u12c9\7\u0240\2\2\u12c4\u12c9\7\u0241\2\2\u12c5\u12c9\7\u00a4"+
		"\2\2\u12c6\u12c9\7\u00ab\2\2\u12c7\u12c9\7\u00ac\2\2\u12c8\u129e\3\2\2"+
		"\2\u12c8\u12a2\3\2\2\2\u12c8\u12a6\3\2\2\2\u12c8\u12af\3\2\2\2\u12c8\u12b0"+
		"\3\2\2\2\u12c8\u12b1\3\2\2\2\u12c8\u12b2\3\2\2\2\u12c8\u12b3\3\2\2\2\u12c8"+
		"\u12b4\3\2\2\2\u12c8\u12b6\3\2\2\2\u12c8\u12b7\3\2\2\2\u12c8\u12b8\3\2"+
		"\2\2\u12c8\u12ba\3\2\2\2\u12c8\u12bb\3\2\2\2\u12c8\u12bc\3\2\2\2\u12c8"+
		"\u12bd\3\2\2\2\u12c8\u12be\3\2\2\2\u12c8\u12c0\3\2\2\2\u12c8\u12c1\3\2"+
		"\2\2\u12c8\u12c3\3\2\2\2\u12c8\u12c4\3\2\2\2\u12c8\u12c5\3\2\2\2\u12c8"+
		"\u12c6\3\2\2\2\u12c8\u12c7\3\2\2\2\u12c9\u01cd\3\2\2\2\u12ca\u12d8\7\u0292"+
		"\2\2\u12cb\u12cc\7\u0292\2\2\u12cc\u12cd\7\u02a5\2\2\u12cd\u12d8\7\u0292"+
		"\2\2\u12ce\u12cf\5\u0252\u012a\2\u12cf\u12d0\7\u02a5\2\2\u12d0\u12d1\7"+
		"\u0292\2\2\u12d1\u12d8\3\2\2\2\u12d2\u12d3\5\u0252\u012a\2\u12d3\u12d4"+
		"\7\u02a5\2\2\u12d4\u12d5\5\u0252\u012a\2\u12d5\u12d8\3\2\2\2\u12d6\u12d8"+
		"\5\u0252\u012a\2\u12d7\u12ca\3\2\2\2\u12d7\u12cb\3\2\2\2\u12d7\u12ce\3"+
		"\2\2\2\u12d7\u12d2\3\2\2\2\u12d7\u12d6\3\2\2\2\u12d8\u01cf\3\2\2\2\u12d9"+
		"\u12da\5\u0252\u012a\2\u12da\u12db\7\u00a2\2\2\u12db\u12dc\5\u0252\u012a"+
		"\2\u12dc\u01d1\3\2\2\2\u12dd\u12df\7\n\2\2\u12de\u12e0\t+\2\2\u12df\u12de"+
		"\3\2\2\2\u12df\u12e0\3\2\2\2\u12e0\u12e1\3\2\2\2\u12e1\u12e2\7\u009f\2"+
		"\2\u12e2\u12e7\5\u027c\u013f\2\u12e3\u12e4\7\u02aa\2\2\u12e4\u12e6\5\u027c"+
		"\u013f\2\u12e5\u12e3\3\2\2\2\u12e6\u12e9\3\2\2\2\u12e7\u12e5\3\2\2\2\u12e7"+
		"\u12e8\3\2\2\2\u12e8\u01d3\3\2\2\2\u12e9\u12e7\3\2\2\2\u12ea\u12eb\7\30"+
		"\2\2\u12eb\u12ec\7\u009f\2\2\u12ec\u12f1\5\u027c\u013f\2\u12ed\u12ee\7"+
		"\u02aa\2\2\u12ee\u12f0\5\u027c\u013f\2\u12ef\u12ed\3\2\2\2\u12f0\u12f3"+
		"\3\2\2\2\u12f1\u12ef\3\2\2\2\u12f1\u12f2\3\2\2\2\u12f2\u12f7\3\2\2\2\u12f3"+
		"\u12f1\3\2\2\2\u12f4\u12f6\5\u01dc\u00ef\2\u12f5\u12f4\3\2\2\2\u12f6\u12f9"+
		"\3\2\2\2\u12f7\u12f5\3\2\2\2\u12f7\u12f8\3\2\2\2\u12f8\u01d5\3\2\2\2\u12f9"+
		"\u12f7\3\2\2\2\u12fa\u12fb\7\u010c\2\2\u12fb\u12fc\7\u009f\2\2\u12fc\u1301"+
		"\5\u027c\u013f\2\u12fd\u12fe\7\u02aa\2\2\u12fe\u1300\5\u027c\u013f\2\u12ff"+
		"\u12fd\3\2\2\2\u1300\u1303\3\2\2\2\u1301\u12ff\3\2\2\2\u1301\u1302\3\2"+
		"\2\2\u1302\u1305\3\2\2\2\u1303\u1301\3\2\2\2\u1304\u1306\t,\2\2\u1305"+
		"\u1304\3\2\2\2\u1305\u1306\3\2\2\2\u1306\u01d7\3\2\2\2\u1307\u1309\7o"+
		"\2\2\u1308\u130a\t+\2\2\u1309\u1308\3\2\2\2\u1309\u130a\3\2\2\2\u130a"+
		"\u130b\3\2\2\2\u130b\u130c\7\u009f\2\2\u130c\u1311\5\u027c\u013f\2\u130d"+
		"\u130e\7\u02aa\2\2\u130e\u1310\5\u027c\u013f\2\u130f\u130d\3\2\2\2\u1310"+
		"\u1313\3\2\2\2\u1311\u130f\3\2\2\2\u1311\u1312\3\2\2\2\u1312\u01d9\3\2"+
		"\2\2\u1313\u1311\3\2\2\2\u1314\u1316\7\u01cb\2\2\u1315\u1317\t+\2\2\u1316"+
		"\u1315\3\2\2\2\u1316\u1317\3\2\2\2\u1317\u1318\3\2\2\2\u1318\u1319\7\u009f"+
		"\2\2\u1319\u131e\5\u027c\u013f\2\u131a\u131b\7\u02aa\2\2\u131b\u131d\5"+
		"\u027c\u013f\2\u131c\u131a\3\2\2\2\u131d\u1320\3\2\2\2\u131e\u131c\3\2"+
		"\2\2\u131e\u131f\3\2\2\2\u131f\u1322\3\2\2\2\u1320\u131e\3\2\2\2\u1321"+
		"\u1323\7\u01c0\2\2\u1322\u1321\3\2\2\2\u1322\u1323\3\2\2\2\u1323\u1325"+
		"\3\2\2\2\u1324\u1326\7\u0143\2\2\u1325\u1324\3\2\2\2\u1325\u1326\3\2\2"+
		"\2\u1326\u1328\3\2\2\2\u1327\u1329\7\u0214\2\2\u1328\u1327\3\2\2\2\u1328"+
		"\u1329\3\2\2\2\u1329\u01db\3\2\2\2\u132a\u132b\7:\2\2\u132b\u1332\7\u0212"+
		"\2\2\u132c\u1332\7\u01c0\2\2\u132d\u1332\7\u0145\2\2\u132e\u1332\7\u018f"+
		"\2\2\u132f\u1332\7\u0143\2\2\u1330\u1332\7\u010a\2\2\u1331\u132a\3\2\2"+
		"\2\u1331\u132c\3\2\2\2\u1331\u132d\3\2\2\2\u1331\u132e\3\2\2\2\u1331\u132f"+
		"\3\2\2\2\u1331\u1330\3\2\2\2\u1332\u01dd\3\2\2\2\u1333\u1335\7\37\2\2"+
		"\u1334\u1336\7\u00f7\2\2\u1335\u1334\3\2\2\2\u1335\u1336\3\2\2\2\u1336"+
		"\u1337\3\2\2\2\u1337\u1338\7\u0150\2\2\u1338\u1339\5\u0252\u012a\2\u1339"+
		"\u133a\7\u01d6\2\2\u133a\u133b\t-\2\2\u133b\u133c\7\u01eb\2\2\u133c\u133d"+
		"\5\u027c\u013f\2\u133d\u01df\3\2\2\2\u133e\u133f\7\u0161\2\2\u133f\u1340"+
		"\7\u01b2\2\2\u1340\u1341\5\u0252\u012a\2\u1341\u1342\7\u01eb\2\2\u1342"+
		"\u1343\5\u027c\u013f\2\u1343\u01e1\3\2\2\2\u1344\u1345\7\u020f\2\2\u1345"+
		"\u1346\7\u01b2\2\2\u1346\u1347\5\u0252\u012a\2\u1347\u01e3\3\2\2\2\u1348"+
		"\u1349\7\u0090\2\2\u1349\u134a\7&\2\2\u134a\u134b\7\u008a\2\2\u134b\u1350"+
		"\5\u01e6\u00f4\2\u134c\u134d\7\u02aa\2\2\u134d\u134f\5\u01e6\u00f4\2\u134e"+
		"\u134c\3\2\2\2\u134f\u1352\3\2\2\2\u1350\u134e\3\2\2\2\u1350\u1351\3\2"+
		"\2\2\u1351\u1353\3\2\2\2\u1352\u1350\3\2\2\2\u1353\u1354\7\u00a2\2\2\u1354"+
		"\u1359\5\u027c\u013f\2\u1355\u1356\7\u02aa\2\2\u1356\u1358\5\u027c\u013f"+
		"\2\u1357\u1355\3\2\2\2\u1358\u135b\3\2\2\2\u1359\u1357\3\2\2\2\u1359\u135a"+
		"\3\2\2\2\u135a\u138a\3\2\2\2\u135b\u1359\3\2\2\2\u135c\u135d\7\u0090\2"+
		"\2\u135d\u1360\7\u01b0\2\2\u135e\u135f\7:\2\2\u135f\u1361\5\u027c\u013f"+
		"\2\u1360\u135e\3\2\2\2\u1360\u1361\3\2\2\2\u1361\u1362\3\2\2\2\u1362\u1363"+
		"\7\u0299\2\2\u1363\u1366\5\u027c\u013f\2\u1364\u1365\7\u0085\2\2\u1365"+
		"\u1367\5\u027c\u013f\2\u1366\u1364\3\2\2\2\u1366\u1367\3\2\2\2\u1367\u138a"+
		"\3\2\2\2\u1368\u1369\7\u0090\2\2\u1369\u136e\5\u02b6\u015c\2\u136a\u136b"+
		"\7\u02aa\2\2\u136b\u136d\5\u02b6\u015c\2\u136c\u136a\3\2\2\2\u136d\u1370"+
		"\3\2\2\2\u136e\u136c\3\2\2\2\u136e\u136f\3\2\2\2\u136f\u138a\3\2\2\2\u1370"+
		"\u136e\3\2\2\2\u1371\u1372\7\u0090\2\2\u1372\u1373\7\27\2\2\u1373\u1374"+
		"\7\u0090\2\2\u1374\u138a\5\u027c\u013f\2\u1375\u1376\7\u0090\2\2\u1376"+
		"\u1377\7\u0282\2\2\u1377\u138a\5\u027c\u013f\2\u1378\u1379\7\u0090\2\2"+
		"\u1379\u137a\7\u0198\2\2\u137a\u138a\5\u027c\u013f\2\u137b\u137d\7\u0090"+
		"\2\2\u137c\u137e\t.\2\2\u137d\u137c\3\2\2\2\u137d\u137e\3\2\2\2\u137e"+
		"\u137f\3\2\2\2\u137f\u1380\7\u0209\2\2\u1380\u1385\5\u0144\u00a3\2\u1381"+
		"\u1382\7\u02aa\2\2\u1382\u1384\5\u0144\u00a3\2\u1383\u1381\3\2\2\2\u1384"+
		"\u1387\3\2\2\2\u1385\u1383\3\2\2\2\u1385\u1386\3\2\2\2\u1386\u138a\3\2"+
		"\2\2\u1387\u1385\3\2\2\2\u1388\u138a\5\u0142\u00a2\2\u1389\u1348\3\2\2"+
		"\2\u1389\u135c\3\2\2\2\u1389\u1368\3\2\2\2\u1389\u1371\3\2\2\2\u1389\u1375"+
		"\3\2\2\2\u1389\u1378\3\2\2\2\u1389\u137b\3\2\2\2\u1389\u1388\3\2\2\2\u138a"+
		"\u01e5\3\2\2\2\u138b\u138f\5\u02ba\u015e\2\u138c\u138f\5\u02bc\u015f\2"+
		"\u138d\u138f\5\u027c\u013f\2\u138e\u138b\3\2\2\2\u138e\u138c\3\2\2\2\u138e"+
		"\u138d\3\2\2\2\u138f\u01e7\3\2\2\2\u1390\u1391\7\u0092\2\2\u1391\u1392"+
		"\t\34\2\2\u1392\u1440\7\u0173\2\2\u1393\u1394\7\u0092\2\2\u1394\u1395"+
		"\t/\2\2\u1395\u1398\7\u013c\2\2\u1396\u1397\7E\2\2\u1397\u1399\5\u027c"+
		"\u013f\2\u1398\u1396\3\2\2\2\u1398\u1399\3\2\2\2\u1399\u139c\3\2\2\2\u139a"+
		"\u139b\7=\2\2\u139b\u139d\5\u027c\u013f\2\u139c\u139a\3\2\2\2\u139c\u139d"+
		"\3\2\2\2\u139d\u13a5\3\2\2\2\u139e\u13a2\7X\2\2\u139f\u13a0\5\u027c\u013f"+
		"\2\u13a0\u13a1\7\u02aa\2\2\u13a1\u13a3\3\2\2\2\u13a2\u139f\3\2\2\2\u13a2"+
		"\u13a3\3\2\2\2\u13a3\u13a4\3\2\2\2\u13a4\u13a6\5\u027c\u013f\2\u13a5\u139e"+
		"\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u1440\3\2\2\2\u13a7\u13a8\7\u0092\2"+
		"\2\u13a8\u13aa\5\u01ea\u00f6\2\u13a9\u13ab\5\u01ec\u00f7\2\u13aa\u13a9"+
		"\3\2\2\2\u13aa\u13ab\3\2\2\2\u13ab\u1440\3\2\2\2\u13ac\u13ae\7\u0092\2"+
		"\2\u13ad\u13af\7\u014f\2\2\u13ae\u13ad\3\2\2\2\u13ae\u13af\3\2\2\2\u13af"+
		"\u13b0\3\2\2\2\u13b0\u13b1\t\26\2\2\u13b1\u13b2\t\60\2\2\u13b2\u13b5\5"+
		"\u0252\u012a\2\u13b3\u13b4\t\60\2\2\u13b4\u13b6\5\u0252\u012a\2\u13b5"+
		"\u13b3\3\2\2\2\u13b5\u13b6\3\2\2\2\u13b6\u13b8\3\2\2\2\u13b7\u13b9\5\u01ec"+
		"\u00f7\2\u13b8\u13b7\3\2\2\2\u13b8\u13b9\3\2\2\2\u13b9\u1440\3\2\2\2\u13ba"+
		"\u13bb\7\u0092\2\2\u13bb\u13bc\7\37\2\2\u13bc\u13be\t\61\2\2\u13bd\u13bf"+
		"\5\u0326\u0194\2\u13be\u13bd\3\2\2\2\u13be\u13bf\3\2\2\2\u13bf\u13c0\3"+
		"\2\2\2\u13c0\u1440\5\u0252\u012a\2\u13c1\u13c2\7\u0092\2\2\u13c2\u13c3"+
		"\7\37\2\2\u13c3\u13c4\t\62\2\2\u13c4\u1440\5\u0252\u012a\2\u13c5\u13c6"+
		"\7\u0092\2\2\u13c6\u13c7\7\37\2\2\u13c7\u13c8\7\u0213\2\2\u13c8\u1440"+
		"\5\u0252\u012a\2\u13c9\u13ca\7\u0092\2\2\u13ca\u13cb\7\u0135\2\2\u13cb"+
		"\u13cc\5\u0214\u010b\2\u13cc\u13cd\t\63\2\2\u13cd\u1440\3\2\2\2\u13ce"+
		"\u13cf\7\u0092\2\2\u13cf\u1440\5\u01ee\u00f8\2\u13d0\u13d1\7\u0092\2\2"+
		"\u13d1\u13d2\t\64\2\2\u13d2\u13d6\7X\2\2\u13d3\u13d4\5\u027c\u013f\2\u13d4"+
		"\u13d5\7\u02aa\2\2\u13d5\u13d7\3\2\2\2\u13d6\u13d3\3\2\2\2\u13d6\u13d7"+
		"\3\2\2\2\u13d7\u13d8\3\2\2\2\u13d8\u1440\5\u027c\u013f\2\u13d9\u13da\7"+
		"\u0092\2\2\u13da\u13db\7\u00da\2\2\u13db\u13dc\7\u02a6\2\2\u13dc\u13dd"+
		"\7\u0292\2\2\u13dd\u13de\7\u02a7\2\2\u13de\u1440\t\64\2\2\u13df\u13e0"+
		"\7\u0092\2\2\u13e0\u13e3\5\u01f0\u00f9\2\u13e1\u13e2\t\60\2\2\u13e2\u13e4"+
		"\5\u0252\u012a\2\u13e3\u13e1\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4\u13e6\3"+
		"\2\2\2\u13e5\u13e7\5\u01ec\u00f7\2\u13e6\u13e5\3\2\2\2\u13e6\u13e7\3\2"+
		"\2\2\u13e7\u1440\3\2\2\2\u13e8\u13e9\7\u0092\2\2\u13e9\u13ea\t\65\2\2"+
		"\u13ea\u13eb\7\u0111\2\2\u13eb\u1440\5\u0252\u012a\2\u13ec\u13ed\7\u0092"+
		"\2\2\u13ed\u13f0\7\u0153\2\2\u13ee\u13ef\7:\2\2\u13ef\u13f1\5\u0252\u012a"+
		"\2\u13f0\u13ee\3\2\2\2\u13f0\u13f1\3\2\2\2\u13f1\u1440\3\2\2\2\u13f2\u13f3"+
		"\7\u0092\2\2\u13f3\u13f4\7F\2\2\u13f4\u13f5\t\60\2\2\u13f5\u13f8\5\u0252"+
		"\u012a\2\u13f6\u13f7\t\60\2\2\u13f7\u13f9\5\u0252\u012a\2\u13f8\u13f6"+
		"\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9\u13fc\3\2\2\2\u13fa\u13fb\7\u00b2\2"+
		"\2\u13fb\u13fd\5\u027c\u013f\2\u13fc\u13fa\3\2\2\2\u13fc\u13fd\3\2\2\2"+
		"\u13fd\u1440\3\2\2\2\u13fe\u13ff\7\u0092\2\2\u13ff\u1400\7Q\2\2\u1400"+
		"\u1401\t\60\2\2\u1401\u1404\5\u0252\u012a\2\u1402\u1403\t\60\2\2\u1403"+
		"\u1405\5\u0252\u012a\2\u1404\u1402\3\2\2\2\u1404\u1405\3\2\2\2\u1405\u1408"+
		"\3\2\2\2\u1406\u1407\7\u00b2\2\2\u1407\u1409\5\u027c\u013f\2\u1408\u1406"+
		"\3\2\2\2\u1408\u1409\3\2\2\2\u1409\u1440\3\2\2\2\u140a\u140b\7\u0092\2"+
		"\2\u140b\u140c\7R\2\2\u140c\u140d\t\60\2\2\u140d\u1410\5\u0252\u012a\2"+
		"\u140e\u140f\t\60\2\2\u140f\u1411\5\u0252\u012a\2\u1410\u140e\3\2\2\2"+
		"\u1410\u1411\3\2\2\2\u1411\u1414\3\2\2\2\u1412\u1413\7\u00b2\2\2\u1413"+
		"\u1415\5\u027c\u013f\2\u1414\u1412\3\2\2\2\u1414\u1415\3\2\2\2\u1415\u1440"+
		"\3\2\2\2\u1416\u1417\7\u0092\2\2\u1417\u1418\7\u01a6\2\2\u1418\u141b\7"+
		"\u023a\2\2\u1419\u141a\t\60\2\2\u141a\u141c\5\u0252\u012a\2\u141b\u1419"+
		"\3\2\2\2\u141b\u141c\3\2\2\2\u141c\u141e\3\2\2\2\u141d\u141f\5\u01ec\u00f7"+
		"\2\u141e\u141d\3\2\2\2\u141e\u141f\3\2\2\2\u141f\u1440\3\2\2\2\u1420\u1421"+
		"\7\u0092\2\2\u1421\u1422\7\u01bc\2\2\u1422\u1427\5\u01f2\u00fa\2\u1423"+
		"\u1424\7\u02aa\2\2\u1424\u1426\5\u01f2\u00fa\2\u1425\u1423\3\2\2\2\u1426"+
		"\u1429\3\2\2\2\u1427\u1425\3\2\2\2\u1427\u1428\3\2\2\2\u1428\u142d\3\2"+
		"\2\2\u1429\u1427\3\2\2\2\u142a\u142b\7:\2\2\u142b\u142c\7\u01bf\2\2\u142c"+
		"\u142e\5\u027c\u013f\2\u142d\u142a\3\2\2\2\u142d\u142e\3\2\2\2\u142e\u142f"+
		"\3\2\2\2\u142f\u1433\7X\2\2\u1430\u1431\5\u027c\u013f\2\u1431\u1432\7"+
		"\u02aa\2\2\u1432\u1434\3\2\2\2\u1433\u1430\3\2\2\2\u1433\u1434\3\2\2\2"+
		"\u1434\u1435\3\2\2\2\u1435\u1436\5\u027c\u013f\2\u1436\u1440\3\2\2\2\u1437"+
		"\u1438\7\u0092\2\2\u1438\u1439\7\u01e6\2\2\u1439\u143d\7\u01fa\2\2\u143a"+
		"\u143b\7:\2\2\u143b\u143c\7\u010b\2\2\u143c\u143e\5\u027c\u013f\2\u143d"+
		"\u143a\3\2\2\2\u143d\u143e\3\2\2\2\u143e\u1440\3\2\2\2\u143f\u1390\3\2"+
		"\2\2\u143f\u1393\3\2\2\2\u143f\u13a7\3\2\2\2\u143f\u13ac\3\2\2\2\u143f"+
		"\u13ba\3\2\2\2\u143f\u13c1\3\2\2\2\u143f\u13c5\3\2\2\2\u143f\u13c9\3\2"+
		"\2\2\u143f\u13ce\3\2\2\2\u143f\u13d0\3\2\2\2\u143f\u13d9\3\2\2\2\u143f"+
		"\u13df\3\2\2\2\u143f\u13e8\3\2\2\2\u143f\u13ec\3\2\2\2\u143f\u13f2\3\2"+
		"\2\2\u143f\u13fe\3\2\2\2\u143f\u140a\3\2\2\2\u143f\u1416\3\2\2\2\u143f"+
		"\u1420\3\2\2\2\u143f\u1437\3\2\2\2\u1440\u01e9\3\2\2\2\u1441\u1442\7\27"+
		"\2\2\u1442\u144f\7\u0090\2\2\u1443\u144f\7\u02cd\2\2\u1444\u144f\7$\2"+
		"\2\u1445\u144f\7\u008e\2\2\u1446\u1447\7\u0150\2\2\u1447\u144f\7\u01fa"+
		"\2\2\u1448\u1449\7{\2\2\u1449\u144f\7\u01fa\2\2\u144a\u144c\t.\2\2\u144b"+
		"\u144a\3\2\2\2\u144b\u144c\3\2\2\2\u144c\u144d\3\2\2\2\u144d\u144f\t\66"+
		"\2\2\u144e\u1441\3\2\2\2\u144e\u1443\3\2\2\2\u144e\u1444\3\2\2\2\u144e"+
		"\u1445\3\2\2\2\u144e\u1446\3\2\2\2\u144e\u1448\3\2\2\2\u144e\u144b\3\2"+
		"\2\2\u144f\u01eb\3\2\2\2\u1450\u1451\7W\2\2\u1451\u1455\5\u027c\u013f"+
		"\2\u1452\u1453\7\u00b2\2\2\u1453\u1455\5\u027c\u013f\2\u1454\u1450\3\2"+
		"\2\2\u1454\u1452\3\2\2\2\u1455\u01ed\3\2\2\2\u1456\u1458\7\u01fc\2\2\u1457"+
		"\u1456\3\2\2\2\u1457\u1458\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u1468\7\u0136"+
		"\2\2\u145a\u145b\7\u0174\2\2\u145b\u1468\7\u01fa\2\2\u145c\u1468\7\u01b4"+
		"\2\2\u145d\u1468\7\u0242\2\2\u145e\u1460\7\u014f\2\2\u145f\u145e\3\2\2"+
		"\2\u145f\u1460\3\2\2\2\u1460\u1461\3\2\2\2\u1461\u1468\7\u01bb\2\2\u1462"+
		"\u1468\7\u01bd\2\2\u1463\u1464\7\u01e6\2\2\u1464\u1468\7\u0159\2\2\u1465"+
		"\u1468\7\u00fb\2\2\u1466\u1468\7\u011f\2\2\u1467\u1457\3\2\2\2\u1467\u145a"+
		"\3\2\2\2\u1467\u145c\3\2\2\2\u1467\u145d\3\2\2\2\u1467\u145f\3\2\2\2\u1467"+
		"\u1462\3\2\2\2\u1467\u1463\3\2\2\2\u1467\u1465\3\2\2\2\u1467\u1466\3\2"+
		"\2\2\u1468\u01ef\3\2\2\2\u1469\u1472\7\u013c\2\2\u146a\u146b\7\u009f\2"+
		"\2\u146b\u1472\7\u01fa\2\2\u146c\u146e\7\u014f\2\2\u146d\u146c\3\2\2\2"+
		"\u146d\u146e\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u1472\7\u023a\2\2\u1470"+
		"\u1472\7\u020a\2\2\u1471\u1469\3\2\2\2\u1471\u146a\3\2\2\2\u1471\u146d"+
		"\3\2\2\2\u1471\u1470\3\2\2\2\u1472\u01f1\3\2\2\2\u1473\u1480\7\b\2\2\u1474"+
		"\u1475\7\u0103\2\2\u1475\u1480\7\u0164\2\2\u1476\u1477\7\u011e\2\2\u1477"+
		"\u1480\7\u0203\2\2\u1478\u1480\7\u0121\2\2\u1479\u1480\7\u0166\2\2\u147a"+
		"\u1480\7\u0270\2\2\u147b\u147c\7\u01ab\2\2\u147c\u1480\7\u0146\2\2\u147d"+
		"\u1480\7\u01ed\2\2\u147e\u1480\7\u0202\2\2\u147f\u1473\3\2\2\2\u147f\u1474"+
		"\3\2\2\2\u147f\u1476\3\2\2\2\u147f\u1478\3\2\2\2\u147f\u1479\3\2\2\2\u147f"+
		"\u147a\3\2\2\2\u147f\u147b\3\2\2\2\u147f\u147d\3\2\2\2\u147f\u147e\3\2"+
		"\2\2\u1480\u01f3\3\2\2\2\u1481\u1482\7\u0101\2\2\u1482\u1483\5\u027c\u013f"+
		"\2\u1483\u01f5\3\2\2\2\u1484\u1485\7\u0107\2\2\u1485\u1486\7F\2\2\u1486"+
		"\u148b\5\u0202\u0102\2\u1487\u1488\7\u02aa\2\2\u1488\u148a\5\u0202\u0102"+
		"\2\u1489\u1487\3\2\2\2\u148a\u148d\3\2\2\2\u148b\u1489\3\2\2\2\u148b\u148c"+
		"\3\2\2\2\u148c\u149c\3\2\2\2\u148d\u148b\3\2\2\2\u148e\u148f\7w\2\2\u148f"+
		"\u1499\7\u02a6\2\2\u1490\u1495\5\u027c\u013f\2\u1491\u1492\7\u02aa\2\2"+
		"\u1492\u1494\5\u027c\u013f\2\u1493\u1491\3\2\2\2\u1494\u1497\3\2\2\2\u1495"+
		"\u1493\3\2\2\2\u1495\u1496\3\2\2\2\u1496\u149a\3\2\2\2\u1497\u1495\3\2"+
		"\2\2\u1498\u149a\7\b\2\2\u1499\u1490\3\2\2\2\u1499\u1498\3\2\2\2\u149a"+
		"\u149b\3\2\2\2\u149b\u149d\7\u02a7\2\2\u149c\u148e\3\2\2\2\u149c\u149d"+
		"\3\2\2\2\u149d\u149e\3\2\2\2\u149e\u149f\7E\2\2\u149f\u14a0\5\u0252\u012a"+
		"\2\u14a0\u01f7\3\2\2\2\u14a1\u14a3\7\u014c\2\2\u14a2\u14a4\t+\2\2\u14a3"+
		"\u14a2\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u14a5\3\2\2\2\u14a5\u14aa\5\u0204"+
		"\u0103\2\u14a6\u14a7\7\u02aa\2\2\u14a7\u14a9\5\u0204\u0103\2\u14a8\u14a6"+
		"\3\2\2\2\u14a9\u14ac\3\2\2\2\u14aa\u14a8\3\2\2\2\u14aa\u14ab\3\2\2\2\u14ab"+
		"\u01f9\3\2\2\2\u14ac\u14aa\3\2\2\2\u14ad\u14af\7S\2\2\u14ae\u14b0\t\67"+
		"\2\2\u14af\u14ae\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0\u14b2\3\2\2\2\u14b1"+
		"\u14b3\5\u027c\u013f\2\u14b2\u14b1\3\2\2\2\u14b3\u14b4\3\2\2\2\u14b4\u14b2"+
		"\3\2\2\2\u14b4\u14b5\3\2\2\2\u14b5\u01fb\3\2\2\2\u14b6\u14b7\7[\2\2\u14b7"+
		"\u14b8\7F\2\2\u14b8\u14b9\7M\2\2\u14b9\u14ba\7\u0107\2\2\u14ba\u14bf\5"+
		"\u0208\u0105\2\u14bb\u14bc\7\u02aa\2\2\u14bc\u14be\5\u0208\u0105\2\u14bd"+
		"\u14bb\3\2\2\2\u14be\u14c1\3\2\2\2\u14bf\u14bd\3\2\2\2\u14bf\u14c0\3\2"+
		"\2\2\u14c0\u01fd\3\2\2\2\u14c1\u14bf\3\2\2\2\u14c2\u14c3\7\u01d4\2\2\u14c3"+
		"\u14c4\7\u01bf\2\2\u14c4\u14c5\7\u0107\2\2\u14c5\u01ff\3\2\2\2\u14c6\u14c7"+
		"\7\u0240\2\2\u14c7\u0201\3\2\2\2\u14c8\u14d7\5\u0252\u012a\2\u14c9\u14cb"+
		"\5\u0332\u019a\2\u14ca\u14c9\3\2\2\2\u14ca\u14cb\3\2\2\2\u14cb\u14cc\3"+
		"\2\2\2\u14cc\u14cd\7\u02a6\2\2\u14cd\u14d2\5\u027c\u013f\2\u14ce\u14cf"+
		"\7\u02aa\2\2\u14cf\u14d1\5\u027c\u013f\2\u14d0\u14ce\3\2\2\2\u14d1\u14d4"+
		"\3\2\2\2\u14d2\u14d0\3\2\2\2\u14d2\u14d3\3\2\2\2\u14d3\u14d5\3\2\2\2\u14d4"+
		"\u14d2\3\2\2\2\u14d5\u14d6\7\u02a7\2\2\u14d6\u14d8\3\2\2\2\u14d7\u14ca"+
		"\3\2\2\2\u14d7\u14d8\3\2\2\2\u14d8\u0203\3\2\2\2\u14d9\u14ec\7\u0128\2"+
		"\2\u14da\u14ec\7\u0159\2\2\u14db\u14dd\t8\2\2\u14dc\u14db\3\2\2\2\u14dc"+
		"\u14dd\3\2\2\2\u14dd\u14de\3\2\2\2\u14de\u14ec\7\u0173\2\2\u14df\u14ec"+
		"\7\u01a7\2\2\u14e0\u14ec\7\u0242\2\2\u14e1\u14e2\7\u01bf\2\2\u14e2\u14ec"+
		"\7\u0107\2\2\u14e3\u14ec\7\u01fa\2\2\u14e4\u14ec\7\u0215\2\2\u14e5\u14e9"+
		"\7\u023a\2\2\u14e6\u14e7\7\u00b4\2\2\u14e7\u14e8\7~\2\2\u14e8\u14ea\7"+
		"\\\2\2\u14e9\u14e6\3\2\2\2\u14e9\u14ea\3\2\2\2\u14ea\u14ec\3\2\2\2\u14eb"+
		"\u14d9\3\2\2\2\u14eb\u14da\3\2\2\2\u14eb\u14dc\3\2\2\2\u14eb\u14df\3\2"+
		"\2\2\u14eb\u14e0\3\2\2\2\u14eb\u14e1\3\2\2\2\u14eb\u14e3\3\2\2\2\u14eb"+
		"\u14e4\3\2\2\2\u14eb\u14e5\3\2\2\2\u14ec\u14ff\3\2\2\2\u14ed\u14ee\7\u01c5"+
		"\2\2\u14ee\u14f0\7\u0173\2\2\u14ef\u14f1\5\u0162\u00b2\2\u14f0\u14ef\3"+
		"\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u14ff\3\2\2\2\u14f2\u14f3\7\u023a\2\2"+
		"\u14f3\u14f8\5\u027c\u013f\2\u14f4\u14f5\7\u02aa\2\2\u14f5\u14f7\5\u027c"+
		"\u013f\2\u14f6\u14f4\3\2\2\2\u14f7\u14fa\3\2\2\2\u14f8\u14f6\3\2\2\2\u14f8"+
		"\u14f9\3\2\2\2\u14f9\u14fc\3\2\2\2\u14fa\u14f8\3\2\2\2\u14fb\u14fd\5\u0206"+
		"\u0104\2\u14fc\u14fb\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u14ff\3\2\2\2\u14fe"+
		"\u14eb\3\2\2\2\u14fe\u14ed\3\2\2\2\u14fe\u14f2\3\2\2\2\u14ff\u0205\3\2"+
		"\2\2\u1500\u1501\7\u00b4\2\2\u1501\u1502\7~\2\2\u1502\u1506\7\\\2\2\u1503"+
		"\u1504\7:\2\2\u1504\u1506\7\u0142\2\2\u1505\u1500\3\2\2\2\u1505\u1503"+
		"\3\2\2\2\u1506\u0207\3\2\2\2\u1507\u1516\5\u0252\u012a\2\u1508\u1509\7"+
		"w\2\2\u1509\u1513\7\u02a6\2\2\u150a\u150f\5\u027c\u013f\2\u150b\u150c"+
		"\7\u02aa\2\2\u150c\u150e\5\u027c\u013f\2\u150d\u150b\3\2\2\2\u150e\u1511"+
		"\3\2\2\2\u150f\u150d\3\2\2\2\u150f\u1510\3\2\2\2\u1510\u1514\3\2\2\2\u1511"+
		"\u150f\3\2\2\2\u1512\u1514\7\b\2\2\u1513\u150a\3\2\2\2\u1513\u1512\3\2"+
		"\2\2\u1514\u1515\3\2\2\2\u1515\u1517\7\u02a7\2\2\u1516\u1508\3\2\2\2\u1516"+
		"\u1517\3\2\2\2\u1517\u1526\3\2\2\2\u1518\u151a\5\u0332\u019a\2\u1519\u1518"+
		"\3\2\2\2\u1519\u151a\3\2\2\2\u151a\u151b\3\2\2\2\u151b\u151c\7\u02a6\2"+
		"\2\u151c\u1521\5\u027c\u013f\2\u151d\u151e\7\u02aa\2\2\u151e\u1520\5\u027c"+
		"\u013f\2\u151f\u151d\3\2\2\2\u1520\u1523\3\2\2\2\u1521\u151f\3\2\2\2\u1521"+
		"\u1522\3\2\2\2\u1522\u1524\3\2\2\2\u1523\u1521\3\2\2\2\u1524\u1525\7\u02a7"+
		"\2\2\u1525\u1527\3\2\2\2\u1526\u1519\3\2\2\2\u1526\u1527\3\2\2\2\u1527"+
		"\u152a\3\2\2\2\u1528\u1529\7D\2\2\u1529\u152b\7\u016d\2\2\u152a\u1528"+
		"\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u0209\3\2\2\2\u152c\u152d\t9\2\2\u152d"+
		"\u1530\5\u0252\u012a\2\u152e\u1531\5\u0252\u012a\2\u152f\u1531\5\u027c"+
		"\u013f\2\u1530\u152e\3\2\2\2\u1530\u152f\3\2\2\2\u1530\u1531\3\2\2\2\u1531"+
		"\u020b\3\2\2\2\u1532\u1536\t9\2\2\u1533\u1534\t:\2\2\u1534\u1535\7\u0299"+
		"\2\2\u1535\u1537\t;\2\2\u1536\u1533\3\2\2\2\u1536\u1537\3\2\2\2\u1537"+
		"\u1538\3\2\2\2\u1538\u1539\5\u0212\u010a\2\u1539\u020d\3\2\2\2\u153a\u153b"+
		"\7\u0157\2\2\u153b\u153c\5\u027c\u013f\2\u153c\u020f\3\2\2\2\u153d\u153e"+
		"\7\u00ad\2\2\u153e\u153f\5\u0252\u012a\2\u153f\u0211\3\2\2\2\u1540\u1546"+
		"\5\u00bc_\2\u1541\u1546\5\u010e\u0088\2\u1542\u1546\5\u00fe\u0080\2\u1543"+
		"\u1546\5\u0112\u008a\2\u1544\u1546\5\u0108\u0085\2\u1545\u1540\3\2\2\2"+
		"\u1545\u1541\3\2\2\2\u1545\u1542\3\2\2\2\u1545\u1543\3\2\2\2\u1545\u1544"+
		"\3\2\2\2\u1546\u154b\3\2\2\2\u1547\u1548\7:\2\2\u1548\u1549\7\u011b\2"+
		"\2\u1549\u154b\5\u0252\u012a\2\u154a\u1545\3\2\2\2\u154a\u1547\3\2\2\2"+
		"\u154b\u0213\3\2\2\2\u154c\u154d\t<\2\2\u154d\u0215\3\2\2\2\u154e\u154f"+
		"\5\u027c\u013f\2\u154f\u1550\7\u0291\2\2\u1550\u1551\5\u027c\u013f\2\u1551"+
		"\u1552\7\u0291\2\2\u1552\u1553\5\u027c\u013f\2\u1553\u1554\7\u0291\2\2"+
		"\u1554\u1555\5\u027c\u013f\2\u1555\u1556\7\u0291\2\2\u1556\u155c\5\u027c"+
		"\u013f\2\u1557\u1558\7\u02b0\2\2\u1558\u1559\5\u027c\u013f\2\u1559\u155a"+
		"\7\u0291\2\2\u155a\u155b\5\u027c\u013f\2\u155b\u155d\3\2\2\2\u155c\u1557"+
		"\3\2\2\2\u155d\u155e\3\2\2\2\u155e\u155c\3\2\2\2\u155e\u155f\3\2\2\2\u155f"+
		"\u0217\3\2\2\2\u1560\u1567\5\u021a\u010e\2\u1561\u1562\7\u02aa\2\2\u1562"+
		"\u1565\5\u021a\u010e\2\u1563\u1564\7\u02aa\2\2\u1564\u1566\5\u027c\u013f"+
		"\2\u1565\u1563\3\2\2\2\u1565\u1566\3\2\2\2\u1566\u1568\3\2\2\2\u1567\u1561"+
		"\3\2\2\2\u1567\u1568\3\2\2\2\u1568\u0219\3\2\2\2\u1569\u1571\5\u027c\u013f"+
		"\2\u156a\u1571\7\u02be\2\2\u156b\u156d\7\u02bd\2\2\u156c\u156b\3\2\2\2"+
		"\u156d\u156e\3\2\2\2\u156e\u156c\3\2\2\2\u156e\u156f\3\2\2\2\u156f\u1571"+
		"\3\2\2\2\u1570\u1569\3\2\2\2\u1570\u156a\3\2\2\2\u1570\u156c\3\2\2\2\u1571"+
		"\u021b\3\2\2\2\u1572\u1575\5\u0252\u012a\2\u1573\u1575\5\u027c\u013f\2"+
		"\u1574\u1572\3\2\2\2\u1574\u1573\3\2\2\2\u1575\u021d\3\2\2\2\u1576\u1577"+
		"\t=\2\2\u1577\u021f\3\2\2\2\u1578\u1579\7i\2\2\u1579\u157a\5\u021e\u0110"+
		"\2\u157a\u0221\3\2\2\2\u157b\u157d\t>\2\2\u157c\u157e\5\u0224\u0113\2"+
		"\u157d\u157c\3\2\2\2\u157d\u157e\3\2\2\2\u157e\u1590\3\2\2\2\u157f\u1581"+
		"\7\u00c9\2\2\u1580\u1582\5\u0224\u0113\2\u1581\u1580\3\2\2\2\u1581\u1582"+
		"\3\2\2\2\u1582\u1584\3\2\2\2\u1583\u1585\5\u0286\u0144\2\u1584\u1583\3"+
		"\2\2\2\u1584\u1585\3\2\2\2\u1585\u1590\3\2\2\2\u1586\u1590\t?\2\2\u1587"+
		"\u1589\7\u00c1\2\2\u1588\u158a\5\u0226\u0114\2\u1589\u1588\3\2\2\2\u1589"+
		"\u158a\3\2\2\2\u158a\u1590\3\2\2\2\u158b\u158d\t@\2\2\u158c\u158e\7\u00bc"+
		"\2\2\u158d\u158c\3\2\2\2\u158d\u158e\3\2\2\2\u158e\u1590\3\2\2\2\u158f"+
		"\u157b\3\2\2\2\u158f\u157f\3\2\2\2\u158f\u1586\3\2\2\2\u158f\u1587\3\2"+
		"\2\2\u158f\u158b\3\2\2\2\u1590\u0223\3\2\2\2\u1591\u1592\7\u02a6\2\2\u1592"+
		"\u1593\5\u027c\u013f\2\u1593\u1594\7\u02a7\2\2\u1594\u0225\3\2\2\2\u1595"+
		"\u1596\7\u02a6\2\2\u1596\u1597\5\u027c\u013f\2\u1597\u1598\7\u02aa\2\2"+
		"\u1598\u1599\5\u027c\u013f\2\u1599\u159a\7\u02a7\2\2\u159a\u0227\3\2\2"+
		"\2\u159b\u159c\7\u02a6\2\2\u159c\u159f\5\u027c\u013f\2\u159d\u159e\7\u02aa"+
		"\2\2\u159e\u15a0\5\u027c\u013f\2\u159f\u159d\3\2\2\2\u159f\u15a0\3\2\2"+
		"\2\u15a0\u15a1\3\2\2\2\u15a1\u15a2\7\u02a7\2\2\u15a2\u0229\3\2\2\2\u15a3"+
		"\u15a8\5\u027c\u013f\2\u15a4\u15a5\7\u02aa\2\2\u15a5\u15a7\5\u027c\u013f"+
		"\2\u15a6\u15a4\3\2\2\2\u15a7\u15aa\3\2\2\2\u15a8\u15a6\3\2\2\2\u15a8\u15a9"+
		"\3\2\2\2\u15a9\u022b\3\2\2\2\u15aa\u15a8\3\2\2\2\u15ab\u15b0\7\u02cf\2"+
		"\2\u15ac\u15ad\7\u02aa\2\2\u15ad\u15af\7\u02cf\2\2\u15ae\u15ac\3\2\2\2"+
		"\u15af\u15b2\3\2\2\2\u15b0\u15ae\3\2\2\2\u15b0\u15b1\3\2\2\2\u15b1\u022d"+
		"\3\2\2\2\u15b2\u15b0\3\2\2\2\u15b3\u15b4\7\u016f\2\2\u15b4\u15b9\5\u0230"+
		"\u0119\2\u15b5\u15b6\7\u02aa\2\2\u15b6\u15b8\5\u0230\u0119\2\u15b7\u15b5"+
		"\3\2\2\2\u15b8\u15bb\3\2\2\2\u15b9\u15b7\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba"+
		"\u15c2\3\2\2\2\u15bb\u15b9\3\2\2\2\u15bc\u15bd\7\u016f\2\2\u15bd\u15be"+
		"\5\u027c\u013f\2\u15be\u15bf\7\u0291\2\2\u15bf\u15c0\5\u027c\u013f\2\u15c0"+
		"\u15c2\3\2\2\2\u15c1\u15b3\3\2\2\2\u15c1\u15bc\3\2\2\2\u15c2\u022f\3\2"+
		"\2\2\u15c3\u15c5\5\u027c\u013f\2\u15c4\u15c6\tA\2\2\u15c5\u15c4\3\2\2"+
		"\2\u15c5\u15c6\3\2\2\2\u15c6\u0231\3\2\2\2\u15c7\u15c8\tB\2\2\u15c8\u15ca"+
		"\7\u02a6\2\2\u15c9\u15cb\t\24\2\2\u15ca\u15c9\3\2\2\2\u15ca\u15cb\3\2"+
		"\2\2\u15cb\u15cc\3\2\2\2\u15cc\u15d1\5\u027c\u013f\2\u15cd\u15ce\7\u02aa"+
		"\2\2\u15ce\u15d0\5\u027c\u013f\2\u15cf\u15cd\3\2\2\2\u15d0\u15d3\3\2\2"+
		"\2\u15d1\u15cf\3\2\2\2\u15d1\u15d2\3\2\2\2\u15d2\u15d4\3\2\2\2\u15d3\u15d1"+
		"\3\2\2\2\u15d4\u15d5\7\u02a7\2\2\u15d5\u161a\3\2\2\2\u15d6\u15d7\7\u00da"+
		"\2\2\u15d7\u15e4\7\u02a6\2\2\u15d8\u15e5\7\u0292\2\2\u15d9\u15db\7\b\2"+
		"\2\u15da\u15d9\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u15dc\3\2\2\2\u15dc\u15e1"+
		"\5\u027c\u013f\2\u15dd\u15de\7\u02aa\2\2\u15de\u15e0\5\u027c\u013f\2\u15df"+
		"\u15dd\3\2\2\2\u15e0\u15e3\3\2\2\2\u15e1\u15df\3\2\2\2\u15e1\u15e2\3\2"+
		"\2\2\u15e2\u15e5\3\2\2\2\u15e3\u15e1\3\2\2\2\u15e4\u15d8\3\2\2\2\u15e4"+
		"\u15da\3\2\2\2\u15e5\u15e6\3\2\2\2\u15e6\u161a\7\u02a7\2\2\u15e7\u15e8"+
		"\7\u00da\2\2\u15e8\u15e9\7\u02a6\2\2\u15e9\u15ea\7,\2\2\u15ea\u15ef\5"+
		"\u027c\u013f\2\u15eb\u15ec\7\u02aa\2\2\u15ec\u15ee\5\u027c\u013f\2\u15ed"+
		"\u15eb\3\2\2\2\u15ee\u15f1\3\2\2\2\u15ef\u15ed\3\2\2\2\u15ef\u15f0\3\2"+
		"\2\2\u15f0\u15f2\3\2\2\2\u15f1\u15ef\3\2\2\2\u15f2\u15f3\7\u02a7\2\2\u15f3"+
		"\u161a\3\2\2\2\u15f4\u15f5\tC\2\2\u15f5\u15f7\7\u02a6\2\2\u15f6\u15f8"+
		"\7\b\2\2\u15f7\u15f6\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8\u15f9\3\2\2\2\u15f9"+
		"\u15fe\5\u027c\u013f\2\u15fa\u15fb\7\u02aa\2\2\u15fb\u15fd\5\u027c\u013f"+
		"\2\u15fc\u15fa\3\2\2\2\u15fd\u1600\3\2\2\2\u15fe\u15fc\3\2\2\2\u15fe\u15ff"+
		"\3\2\2\2\u15ff\u1601\3\2\2\2\u1600\u15fe\3\2\2\2\u1601\u1602\7\u02a7\2"+
		"\2\u1602\u161a\3\2\2\2\u1603\u1604\7\u00db\2\2\u1604\u1606\7\u02a6\2\2"+
		"\u1605\u1607\7,\2\2\u1606\u1605\3\2\2\2\u1606\u1607\3\2\2\2\u1607\u1608"+
		"\3\2\2\2\u1608\u160d\5\u027c\u013f\2\u1609\u160a\7\u02aa\2\2\u160a\u160c"+
		"\5\u027c\u013f\2\u160b\u1609\3\2\2\2\u160c\u160f\3\2\2\2\u160d\u160b\3"+
		"\2\2\2\u160d\u160e\3\2\2\2\u160e\u1611\3\2\2\2\u160f\u160d\3\2\2\2\u1610"+
		"\u1612\5\u00eex\2\u1611\u1610\3\2\2\2\u1611\u1612\3\2\2\2\u1612\u1615"+
		"\3\2\2\2\u1613\u1614\7\u0091\2\2\u1614\u1616\5\u027c\u013f\2\u1615\u1613"+
		"\3\2\2\2\u1615\u1616\3\2\2\2\u1616\u1617\3\2\2\2\u1617\u1618\7\u02a7\2"+
		"\2\u1618\u161a\3\2\2\2\u1619\u15c7\3\2\2\2\u1619\u15d6\3\2\2\2\u1619\u15e7"+
		"\3\2\2\2\u1619\u15f4\3\2\2\2\u1619\u1603\3\2\2\2\u161a\u0233\3\2\2\2\u161b"+
		"\u161c\tD\2\2\u161c\u0235\3\2\2\2\u161d\u161e\tE\2\2\u161e\u0237\3\2\2"+
		"\2\u161f\u1620\tF\2\2\u1620\u0239\3\2\2\2\u1621\u1622\tG\2\2\u1622\u023b"+
		"\3\2\2\2\u1623\u1624\tH\2\2\u1624\u023d\3\2\2\2\u1625\u1634\5\u0234\u011b"+
		"\2\u1626\u1634\5\u0236\u011c\2\u1627\u1634\5\u0214\u010b\2\u1628\u1634"+
		"\5\u0238\u011d\2\u1629\u1634\5\u023a\u011e\2\u162a\u1634\5\u023c\u011f"+
		"\2\u162b\u1634\7K\2\2\u162c\u1634\7V\2\2\u162d\u1634\7\u0284\2\2\u162e"+
		"\u1634\7\u0085\2\2\u162f\u1634\7\u0285\2\2\u1630\u1634\7\u008b\2\2\u1631"+
		"\u1634\7\u00ed\2\2\u1632\u1634\7\u00ee\2\2\u1633\u1625\3\2\2\2\u1633\u1626"+
		"\3\2\2\2\u1633\u1627\3\2\2\2\u1633\u1628\3\2\2\2\u1633\u1629\3\2\2\2\u1633"+
		"\u162a\3\2\2\2\u1633\u162b\3\2\2\2\u1633\u162c\3\2\2\2\u1633\u162d\3\2"+
		"\2\2\u1633\u162e\3\2\2\2\u1633\u162f\3\2\2\2\u1633\u1630\3\2\2\2\u1633"+
		"\u1631\3\2\2\2\u1633\u1632\3\2\2\2\u1634\u023f\3\2\2\2\u1635\u163d\5\u0244"+
		"\u0123\2\u1636\u163d\5\u0242\u0122\2\u1637\u163d\5\u0246\u0124\2\u1638"+
		"\u163d\5\u0248\u0125\2\u1639\u163d\5\u024a\u0126\2\u163a\u163d\5\u024c"+
		"\u0127\2\u163b\u163d\5\u024e\u0128\2\u163c\u1635\3\2\2\2\u163c\u1636\3"+
		"\2\2\2\u163c\u1637\3\2\2\2\u163c\u1638\3\2\2\2\u163c\u1639\3\2\2\2\u163c"+
		"\u163a\3\2\2\2\u163c\u163b\3\2\2\2\u163d\u0241\3\2\2\2\u163e\u1643\7\u0102"+
		"\2\2\u163f\u1640\7\u02a6\2\2\u1640\u1641\5\u027c\u013f\2\u1641\u1642\7"+
		"\u02a7\2\2\u1642\u1644\3\2\2\2\u1643\u163f\3\2\2\2\u1643\u1644\3\2\2\2"+
		"\u1644\u1729\3\2\2\2\u1645\u164a\7\u00b8\2\2\u1646\u1647\7\u02a6\2\2\u1647"+
		"\u1648\5\u027c\u013f\2\u1648\u1649\7\u02a7\2\2\u1649\u164b\3\2\2\2\u164a"+
		"\u1646\3\2\2\2\u164a\u164b\3\2\2\2\u164b\u164d\3\2\2\2\u164c\u164e\7\u00aa"+
		"\2\2\u164d\u164c\3\2\2\2\u164d\u164e\3\2\2\2\u164e\u1650\3\2\2\2\u164f"+
		"\u1651\7\u00b7\2\2\u1650\u164f\3\2\2\2\u1650\u1651\3\2\2\2\u1651\u1729"+
		"\3\2\2\2\u1652\u1657\7\u00b9\2\2\u1653\u1654\7\u02a6\2\2\u1654\u1655\5"+
		"\u027c\u013f\2\u1655\u1656\7\u02a7\2\2\u1656\u1658\3\2\2\2\u1657\u1653"+
		"\3\2\2\2\u1657\u1658\3\2\2\2\u1658\u165a\3\2\2\2\u1659\u165b\7\u00aa\2"+
		"\2\u165a\u1659\3\2\2\2\u165a\u165b\3\2\2\2\u165b\u165d\3\2\2\2\u165c\u165e"+
		"\7\u00b7\2\2\u165d\u165c\3\2\2\2\u165d\u165e\3\2\2\2\u165e\u1729\3\2\2"+
		"\2\u165f\u1664\7\u00ba\2\2\u1660\u1661\7\u02a6\2\2\u1661\u1662\5\u027c"+
		"\u013f\2\u1662\u1663\7\u02a7\2\2\u1663\u1665\3\2\2\2\u1664\u1660\3\2\2"+
		"\2\u1664\u1665\3\2\2\2\u1665\u1667\3\2\2\2\u1666\u1668\7\u00aa\2\2\u1667"+
		"\u1666\3\2\2\2\u1667\u1668\3\2\2\2\u1668\u166a\3\2\2\2\u1669\u166b\7\u00b7"+
		"\2\2\u166a\u1669\3\2\2\2\u166a\u166b\3\2\2\2\u166b\u1729\3\2\2\2\u166c"+
		"\u1671\7\u00bb\2\2\u166d\u166e\7\u02a6\2\2\u166e\u166f\5\u027c\u013f\2"+
		"\u166f\u1670\7\u02a7\2\2\u1670\u1672\3\2\2\2\u1671\u166d\3\2\2\2\u1671"+
		"\u1672\3\2\2\2\u1672\u1674\3\2\2\2\u1673\u1675\7\u00aa\2\2\u1674\u1673"+
		"\3\2\2\2\u1674\u1675\3\2\2\2\u1675\u1677\3\2\2\2\u1676\u1678\7\u00b7\2"+
		"\2\u1677\u1676\3\2\2\2\u1677\u1678\3\2\2\2\u1678\u1729\3\2\2\2\u1679\u167e"+
		"\7\u00bc\2\2\u167a\u167b\7\u02a6\2\2\u167b\u167c\5\u027c\u013f\2\u167c"+
		"\u167d\7\u02a7\2\2\u167d\u167f\3\2\2\2\u167e\u167a\3\2\2\2\u167e\u167f"+
		"\3\2\2\2\u167f\u1681\3\2\2\2\u1680\u1682\7\u00aa\2\2\u1681\u1680\3\2\2"+
		"\2\u1681\u1682\3\2\2\2\u1682\u1684\3\2\2\2\u1683\u1685\7\u00b7\2\2\u1684"+
		"\u1683\3\2\2\2\u1684\u1685\3\2\2\2\u1685\u1729\3\2\2\2\u1686\u168b\7\u00bd"+
		"\2\2\u1687\u1688\7\u02a6\2\2\u1688\u1689\5\u027c\u013f\2\u1689\u168a\7"+
		"\u02a7\2\2\u168a\u168c\3\2\2\2\u168b\u1687\3\2\2\2\u168b\u168c\3\2\2\2"+
		"\u168c\u168e\3\2\2\2\u168d\u168f\7\u00aa\2\2\u168e\u168d\3\2\2\2\u168e"+
		"\u168f\3\2\2\2\u168f\u1691\3\2\2\2\u1690\u1692\7\u00b7\2\2\u1691\u1690"+
		"\3\2\2\2\u1691\u1692\3\2\2\2\u1692\u1729\3\2\2\2\u1693\u169c\7\u00c1\2"+
		"\2\u1694\u1695\7\u02a6\2\2\u1695\u1698\5\u027c\u013f\2\u1696\u1697\7\u02aa"+
		"\2\2\u1697\u1699\5\u027c\u013f\2\u1698\u1696\3\2\2\2\u1698\u1699\3\2\2"+
		"\2\u1699\u169a\3\2\2\2\u169a\u169b\7\u02a7\2\2\u169b\u169d\3\2\2\2\u169c"+
		"\u1694\3\2\2\2\u169c\u169d\3\2\2\2\u169d\u169f\3\2\2\2\u169e\u16a0\7\u00aa"+
		"\2\2\u169f\u169e\3\2\2\2\u169f\u16a0\3\2\2\2\u16a0\u16a2\3\2\2\2\u16a1"+
		"\u16a3\7\u00b7\2\2\u16a2\u16a1\3\2\2\2\u16a2\u16a3\3\2\2\2\u16a3\u1729"+
		"\3\2\2\2\u16a4\u16ad\7\u00c2\2\2\u16a5\u16a6\7\u02a6\2\2\u16a6\u16a9\5"+
		"\u027c\u013f\2\u16a7\u16a8\7\u02aa\2\2\u16a8\u16aa\5\u027c\u013f\2\u16a9"+
		"\u16a7\3\2\2\2\u16a9\u16aa\3\2\2\2\u16aa\u16ab\3\2\2\2\u16ab\u16ac\7\u02a7"+
		"\2\2\u16ac\u16ae\3\2\2\2\u16ad\u16a5\3\2\2\2\u16ad\u16ae\3\2\2\2\u16ae"+
		"\u16b0\3\2\2\2\u16af\u16b1\7\u00aa\2\2\u16b0\u16af\3\2\2\2\u16b0\u16b1"+
		"\3\2\2\2\u16b1\u16b3\3\2\2\2\u16b2\u16b4\7\u00b7\2\2\u16b3\u16b2\3\2\2"+
		"\2\u16b3\u16b4\3\2\2\2\u16b4\u1729\3\2\2\2\u16b5\u16be\7\u00c3\2\2\u16b6"+
		"\u16b7\7\u02a6\2\2\u16b7\u16ba\5\u027c\u013f\2\u16b8\u16b9\7\u02aa\2\2"+
		"\u16b9\u16bb\5\u027c\u013f\2\u16ba\u16b8\3\2\2\2\u16ba\u16bb\3\2\2\2\u16bb"+
		"\u16bc\3\2\2\2\u16bc\u16bd\7\u02a7\2\2\u16bd\u16bf\3\2\2\2\u16be\u16b6"+
		"\3\2\2\2\u16be\u16bf\3\2\2\2\u16bf\u16c1\3\2\2\2\u16c0\u16c2\7\u00aa\2"+
		"\2\u16c1\u16c0\3\2\2\2\u16c1\u16c2\3\2\2\2\u16c2\u16c4\3\2\2\2\u16c3\u16c5"+
		"\7\u00b7\2\2\u16c4\u16c3\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5\u1729\3\2\2"+
		"\2\u16c6\u16cf\7\u014b\2\2\u16c7\u16c8\7\u02a6\2\2\u16c8\u16cb\5\u027c"+
		"\u013f\2\u16c9\u16ca\7\u02aa\2\2\u16ca\u16cc\5\u027c\u013f\2\u16cb\u16c9"+
		"\3\2\2\2\u16cb\u16cc\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16ce\7\u02a7\2"+
		"\2\u16ce\u16d0\3\2\2\2\u16cf\u16c7\3\2\2\2\u16cf\u16d0\3\2\2\2\u16d0\u16d2"+
		"\3\2\2\2\u16d1\u16d3\7\u00aa\2\2\u16d2\u16d1\3\2\2\2\u16d2\u16d3\3\2\2"+
		"\2\u16d3\u16d5\3\2\2\2\u16d4\u16d6\7\u00b7\2\2\u16d5\u16d4\3\2\2\2\u16d5"+
		"\u16d6\3\2\2\2\u16d6\u1729\3\2\2\2\u16d7\u16e3\7\u00c0\2\2\u16d8\u16d9"+
		"\7\u02a6\2\2\u16d9\u16de\5\u027c\u013f\2\u16da\u16db\7\u02aa\2\2\u16db"+
		"\u16dd\5\u027c\u013f\2\u16dc\u16da\3\2\2\2\u16dd\u16e0\3\2\2\2\u16de\u16dc"+
		"\3\2\2\2\u16de\u16df\3\2\2\2\u16df\u16e1\3\2\2\2\u16e0\u16de\3\2\2\2\u16e1"+
		"\u16e2\7\u02a7\2\2\u16e2\u16e4\3\2\2\2\u16e3\u16d8\3\2\2\2\u16e3\u16e4"+
		"\3\2\2\2\u16e4\u16e6\3\2\2\2\u16e5\u16e7\7\u00aa\2\2\u16e6\u16e5\3\2\2"+
		"\2\u16e6\u16e7\3\2\2\2\u16e7\u16e9\3\2\2\2\u16e8\u16ea\7\u00b7\2\2\u16e9"+
		"\u16e8\3\2\2\2\u16e9\u16ea\3\2\2\2\u16ea\u1729\3\2\2\2\u16eb\u16f7\7\u00bf"+
		"\2\2\u16ec\u16ed\7\u02a6\2\2\u16ed\u16f2\5\u027c\u013f\2\u16ee\u16ef\7"+
		"\u02aa\2\2\u16ef\u16f1\5\u027c\u013f\2\u16f0\u16ee\3\2\2\2\u16f1\u16f4"+
		"\3\2\2\2\u16f2\u16f0\3\2\2\2\u16f2\u16f3\3\2\2\2\u16f3\u16f5\3\2\2\2\u16f4"+
		"\u16f2\3\2\2\2\u16f5\u16f6\7\u02a7\2\2\u16f6\u16f8\3\2\2\2\u16f7\u16ec"+
		"\3\2\2\2\u16f7\u16f8\3\2\2\2\u16f8\u16fa\3\2\2\2\u16f9\u16fb\7\u00aa\2"+
		"\2\u16fa\u16f9\3\2\2\2\u16fa\u16fb\3\2\2\2\u16fb\u16fd\3\2\2\2\u16fc\u16fe"+
		"\7\u00b7\2\2\u16fd\u16fc\3\2\2\2\u16fd\u16fe\3\2\2\2\u16fe\u1729\3\2\2"+
		"\2\u16ff\u1700\7\u00bf\2\2\u1700\u170c\7\u01b7\2\2\u1701\u1702\7\u02a6"+
		"\2\2\u1702\u1707\5\u027c\u013f\2\u1703\u1704\7\u02aa\2\2\u1704\u1706\5"+
		"\u027c\u013f\2\u1705\u1703\3\2\2\2\u1706\u1709\3\2\2\2\u1707\u1705\3\2"+
		"\2\2\u1707\u1708\3\2\2\2\u1708\u170a\3\2\2\2\u1709\u1707\3\2\2\2\u170a"+
		"\u170b\7\u02a7\2\2\u170b\u170d\3\2\2\2\u170c\u1701\3\2\2\2\u170c\u170d"+
		"\3\2\2\2\u170d\u170f\3\2\2\2\u170e\u1710\7\u00aa\2\2\u170f\u170e\3\2\2"+
		"\2\u170f\u1710\3\2\2\2\u1710\u1712\3\2\2\2\u1711\u1713\7\u00b7\2\2\u1712"+
		"\u1711\3\2\2\2\u1712\u1713\3\2\2\2\u1713\u1729\3\2\2\2\u1714\u1720\7\u00be"+
		"\2\2\u1715\u1716\7\u02a6\2\2\u1716\u171b\5\u027c\u013f\2\u1717\u1718\7"+
		"\u02aa\2\2\u1718\u171a\5\u027c\u013f\2\u1719\u1717\3\2\2\2\u171a\u171d"+
		"\3\2\2\2\u171b\u1719\3\2\2\2\u171b\u171c\3\2\2\2\u171c\u171e\3\2\2\2\u171d"+
		"\u171b\3\2\2\2\u171e\u171f\7\u02a7\2\2\u171f\u1721\3\2\2\2\u1720\u1715"+
		"\3\2\2\2\u1720\u1721\3\2\2\2\u1721\u1723\3\2\2\2\u1722\u1724\7\u00aa\2"+
		"\2\u1723\u1722\3\2\2\2\u1723\u1724\3\2\2\2\u1724\u1726\3\2\2\2\u1725\u1727"+
		"\7\u00b7\2\2\u1726\u1725\3\2\2\2\u1726\u1727\3\2\2\2\u1727\u1729\3\2\2"+
		"\2\u1728\u163e\3\2\2\2\u1728\u1645\3\2\2\2\u1728\u1652\3\2\2\2\u1728\u165f"+
		"\3\2\2\2\u1728\u166c\3\2\2\2\u1728\u1679\3\2\2\2\u1728\u1686\3\2\2\2\u1728"+
		"\u1693\3\2\2\2\u1728\u16a4\3\2\2\2\u1728\u16b5\3\2\2\2\u1728\u16c6\3\2"+
		"\2\2\u1728\u16d7\3\2\2\2\u1728\u16eb\3\2\2\2\u1728\u16ff\3\2\2\2\u1728"+
		"\u1714\3\2\2\2\u1729\u0243\3\2\2\2\u172a\u172f\7\u00c9\2\2\u172b\u172c"+
		"\7\u02a6\2\2\u172c\u172d\5\u027c\u013f\2\u172d\u172e\7\u02a7\2\2\u172e"+
		"\u1730\3\2\2\2\u172f\u172b\3\2\2\2\u172f\u1730\3\2\2\2\u1730\u1732\3\2"+
		"\2\2\u1731\u1733\5\u0286\u0144\2\u1732\u1731\3\2\2\2\u1732\u1733\3\2\2"+
		"\2\u1733\u1735\3\2\2\2\u1734\u1736\5\u028c\u0147\2\u1735\u1734\3\2\2\2"+
		"\u1735\u1736\3\2\2\2\u1736\u17c3\3\2\2\2\u1737\u1738\7e\2\2\u1738\u173d"+
		"\7\u00c9\2\2\u1739\u173a\7\u02a6\2\2\u173a\u173b\5\u027c\u013f\2\u173b"+
		"\u173c\7\u02a7\2\2\u173c\u173e\3\2\2\2\u173d\u1739\3\2\2\2\u173d\u173e"+
		"\3\2\2\2\u173e\u1740\3\2\2\2\u173f\u1741\5\u0286\u0144\2\u1740\u173f\3"+
		"\2\2\2\u1740\u1741\3\2\2\2\u1741\u1743\3\2\2\2\u1742\u1744\5\u028c\u0147"+
		"\2\u1743\u1742\3\2\2\2\u1743\u1744\3\2\2\2\u1744\u17c3\3\2\2\2\u1745\u174a"+
		"\7\u00ca\2\2\u1746\u1747\7\u02a6\2\2\u1747\u1748\5\u027c\u013f\2\u1748"+
		"\u1749\7\u02a7\2\2\u1749\u174b\3\2\2\2\u174a\u1746\3\2\2\2\u174a\u174b"+
		"\3\2\2\2\u174b\u174d\3\2\2\2\u174c\u174e\5\u0286\u0144\2\u174d\u174c\3"+
		"\2\2\2\u174d\u174e\3\2\2\2\u174e\u1750\3\2\2\2\u174f\u1751\5\u028c\u0147"+
		"\2\u1750\u174f\3\2\2\2\u1750\u1751\3\2\2\2\u1751\u17c3\3\2\2\2\u1752\u1753"+
		"\7e\2\2\u1753\u1758\7\u00ca\2\2\u1754\u1755\7\u02a6\2\2\u1755\u1756\5"+
		"\u027c\u013f\2\u1756\u1757\7\u02a7\2\2\u1757\u1759\3\2\2\2\u1758\u1754"+
		"\3\2\2\2\u1758\u1759\3\2\2\2\u1759\u175b\3\2\2\2\u175a\u175c\5\u0286\u0144"+
		"\2\u175b\u175a\3\2\2\2\u175b\u175c\3\2\2\2\u175c\u175e\3\2\2\2\u175d\u175f"+
		"\5\u028c\u0147\2\u175e\u175d\3\2\2\2\u175e\u175f\3\2\2\2\u175f\u17c3\3"+
		"\2\2\2\u1760\u1765\7\u00cb\2\2\u1761\u1762\7\u02a6\2\2\u1762\u1763\5\u027c"+
		"\u013f\2\u1763\u1764\7\u02a7\2\2\u1764\u1766\3\2\2\2\u1765\u1761\3\2\2"+
		"\2\u1765\u1766\3\2\2\2\u1766\u17c3\3\2\2\2\u1767\u176c\7\u00cc\2\2\u1768"+
		"\u1769\7\u02a6\2\2\u1769\u176a\5\u027c\u013f\2\u176a\u176b\7\u02a7\2\2"+
		"\u176b\u176d\3\2\2\2\u176c\u1768\3\2\2\2\u176c\u176d\3\2\2\2\u176d\u17c3"+
		"\3\2\2\2\u176e\u17c3\7\u00cd\2\2\u176f\u1771\7\u00d1\2\2\u1770\u1772\5"+
		"\u0286\u0144\2\u1771\u1770\3\2\2\2\u1771\u1772\3\2\2\2\u1772\u1774\3\2"+
		"\2\2\u1773\u1775\5\u028c\u0147\2\u1774\u1773\3\2\2\2\u1774\u1775\3\2\2"+
		"\2\u1775\u17c3\3\2\2\2\u1776\u177b\7\u00ce\2\2\u1777\u1778\7\u02a6\2\2"+
		"\u1778\u1779\5\u027c\u013f\2\u1779\u177a\7\u02a7\2\2\u177a\u177c\3\2\2"+
		"\2\u177b\u1777\3\2\2\2\u177b\u177c\3\2\2\2\u177c\u17c3\3\2\2\2\u177d\u1782"+
		"\7\u00d2\2\2\u177e\u177f\7\u02a6\2\2\u177f\u1780\5\u027c\u013f\2\u1780"+
		"\u1781\7\u02a7\2\2\u1781\u1783\3\2\2\2\u1782\u177e\3\2\2\2\u1782\u1783"+
		"\3\2\2\2\u1783\u1785\3\2\2\2\u1784\u1786\5\u0286\u0144\2\u1785\u1784\3"+
		"\2\2\2\u1785\u1786\3\2\2\2\u1786\u1788\3\2\2\2\u1787\u1789\5\u028c\u0147"+
		"\2\u1788\u1787\3\2\2\2\u1788\u1789\3\2\2\2\u1789\u17c3\3\2\2\2\u178a\u17c3"+
		"\7\u00cf\2\2\u178b\u178d\7\u00d3\2\2\u178c\u178e\5\u0286\u0144\2\u178d"+
		"\u178c\3\2\2\2\u178d\u178e\3\2\2\2\u178e\u1790\3\2\2\2\u178f\u1791\5\u028c"+
		"\u0147\2\u1790\u178f\3\2\2\2\u1790\u1791\3\2\2\2\u1791\u17c3\3\2\2\2\u1792"+
		"\u17c3\7\u00d0\2\2\u1793\u1795\7\u00d4\2\2\u1794\u1796\5\u0286\u0144\2"+
		"\u1795\u1794\3\2\2\2\u1795\u1796\3\2\2\2\u1796\u1798\3\2\2\2\u1797\u1799"+
		"\5\u028c\u0147\2\u1798\u1797\3\2\2\2\u1798\u1799\3\2\2\2\u1799\u17c3\3"+
		"\2\2\2\u179a\u17a6\7\u00d5\2\2\u179b\u179c\7\u02a6\2\2\u179c\u17a1\5\u027c"+
		"\u013f\2\u179d\u179e\7\u02aa\2\2\u179e\u17a0\5\u027c\u013f\2\u179f\u179d"+
		"\3\2\2\2\u17a0\u17a3\3\2\2\2\u17a1\u179f\3\2\2\2\u17a1\u17a2\3\2\2\2\u17a2"+
		"\u17a4\3\2\2\2\u17a3\u17a1\3\2\2\2\u17a4\u17a5\7\u02a7\2\2\u17a5\u17a7"+
		"\3\2\2\2\u17a6\u179b\3\2\2\2\u17a6\u17a7\3\2\2\2\u17a7\u17a9\3\2\2\2\u17a8"+
		"\u17aa\5\u0286\u0144\2\u17a9\u17a8\3\2\2\2\u17a9\u17aa\3\2\2\2\u17aa\u17ac"+
		"\3\2\2\2\u17ab\u17ad\5\u028c\u0147\2\u17ac\u17ab\3\2\2\2\u17ac\u17ad\3"+
		"\2\2\2\u17ad\u17c3\3\2\2\2\u17ae\u17ba\7\u0090\2\2\u17af\u17b0\7\u02a6"+
		"\2\2\u17b0\u17b5\5\u027c\u013f\2\u17b1\u17b2\7\u02aa\2\2\u17b2\u17b4\5"+
		"\u027c\u013f\2\u17b3\u17b1\3\2\2\2\u17b4\u17b7\3\2\2\2\u17b5\u17b3\3\2"+
		"\2\2\u17b5\u17b6\3\2\2\2\u17b6\u17b8\3\2\2\2\u17b7\u17b5\3\2\2\2\u17b8"+
		"\u17b9\7\u02a7\2\2\u17b9\u17bb\3\2\2\2\u17ba\u17af\3\2\2\2\u17ba\u17bb"+
		"\3\2\2\2\u17bb\u17bd\3\2\2\2\u17bc\u17be\5\u0286\u0144\2\u17bd\u17bc\3"+
		"\2\2\2\u17bd\u17be\3\2\2\2\u17be\u17c0\3\2\2\2\u17bf\u17c1\5\u028c\u0147"+
		"\2\u17c0\u17bf\3\2\2\2\u17c0\u17c1\3\2\2\2\u17c1\u17c3\3\2\2\2\u17c2\u172a"+
		"\3\2\2\2\u17c2\u1737\3\2\2\2\u17c2\u1745\3\2\2\2\u17c2\u1752\3\2\2\2\u17c2"+
		"\u1760\3\2\2\2\u17c2\u1767\3\2\2\2\u17c2\u176e\3\2\2\2\u17c2\u176f\3\2"+
		"\2\2\u17c2\u1776\3\2\2\2\u17c2\u177d\3\2\2\2\u17c2\u178a\3\2\2\2\u17c2"+
		"\u178b\3\2\2\2\u17c2\u1792\3\2\2\2\u17c2\u1793\3\2\2\2\u17c2\u179a\3\2"+
		"\2\2\u17c2\u17ae\3\2\2\2\u17c3\u0245\3\2\2\2\u17c4\u17e2\7\u00c4\2\2\u17c5"+
		"\u17ca\7\u00c7\2\2\u17c6\u17c7\7\u02a6\2\2\u17c7\u17c8\5\u027c\u013f\2"+
		"\u17c8\u17c9\7\u02a7\2\2\u17c9\u17cb\3\2\2\2\u17ca\u17c6\3\2\2\2\u17ca"+
		"\u17cb\3\2\2\2\u17cb\u17e2\3\2\2\2\u17cc\u17d1\7\u00c6\2\2\u17cd\u17ce"+
		"\7\u02a6\2\2\u17ce\u17cf\5\u027c\u013f\2\u17cf\u17d0\7\u02a7\2\2\u17d0"+
		"\u17d2\3\2\2\2\u17d1\u17cd\3\2\2\2\u17d1\u17d2\3\2\2\2\u17d2\u17e2\3\2"+
		"\2\2\u17d3\u17d8\7\u00c5\2\2\u17d4\u17d5\7\u02a6\2\2\u17d5\u17d6\5\u027c"+
		"\u013f\2\u17d6\u17d7\7\u02a7\2\2\u17d7\u17d9\3\2\2\2\u17d8\u17d4\3\2\2"+
		"\2\u17d8\u17d9\3\2\2\2\u17d9\u17e2\3\2\2\2\u17da\u17df\7\u00c8\2\2\u17db"+
		"\u17dc\7\u02a6\2\2\u17dc\u17dd\5\u027c\u013f\2\u17dd\u17de\7\u02a7\2\2"+
		"\u17de\u17e0\3\2\2\2\u17df\u17db\3\2\2\2\u17df\u17e0\3\2\2\2\u17e0\u17e2"+
		"\3\2\2\2\u17e1\u17c4\3\2\2\2\u17e1\u17c5\3\2\2\2\u17e1\u17cc\3\2\2\2\u17e1"+
		"\u17d3\3\2\2\2\u17e1\u17da\3\2\2\2\u17e2\u0247\3\2\2\2\u17e3\u17ec\7\u027a"+
		"\2\2\u17e4\u17ec\7\u0280\2\2\u17e5\u17ec\7\u027c\2\2\u17e6\u17ec\7\u0281"+
		"\2\2\u17e7\u17ec\7\u027e\2\2\u17e8\u17ec\7\u027d\2\2\u17e9\u17ec\7\u027f"+
		"\2\2\u17ea\u17ec\7\u027b\2\2\u17eb\u17e3\3\2\2\2\u17eb\u17e4\3\2\2\2\u17eb"+
		"\u17e5\3\2\2\2\u17eb\u17e6\3\2\2\2\u17eb\u17e7\3\2\2\2\u17eb\u17e8\3\2"+
		"\2\2\u17eb\u17e9\3\2\2\2\u17eb\u17ea\3\2\2\2\u17ec\u0249\3\2\2\2\u17ed"+
		"\u17f0\7\u0104\2\2\u17ee\u17f0\7\u0105\2\2\u17ef\u17ed\3\2\2\2\u17ef\u17ee"+
		"\3\2\2\2\u17f0\u024b\3\2\2\2\u17f1\u17f2\7\u0169\2\2\u17f2\u024d\3\2\2"+
		"\2\u17f3\u1800\5\u0252\u012a\2\u17f4\u17f6\7\u02a6\2\2\u17f5\u17f7\5\u027c"+
		"\u013f\2\u17f6\u17f5\3\2\2\2\u17f6\u17f7\3\2\2\2\u17f7\u17fc\3\2\2\2\u17f8"+
		"\u17f9\7\u02aa\2\2\u17f9\u17fb\5\u027c\u013f\2\u17fa\u17f8\3\2\2\2\u17fb"+
		"\u17fe\3\2\2\2\u17fc\u17fa\3\2\2\2\u17fc\u17fd\3\2\2\2\u17fd\u17ff\3\2"+
		"\2\2\u17fe\u17fc\3\2\2\2\u17ff\u1801\7\u02a7\2\2\u1800\u17f4\3\2\2\2\u1800"+
		"\u1801\3\2\2\2\u1801\u024f\3\2\2\2\u1802\u1809\7\u0292\2\2\u1803\u1809"+
		"\7\u02b5\2\2\u1804\u1809\5\u023e\u0120\2\u1805\u1809\7\u02b7\2\2\u1806"+
		"\u1809\7\u02b3\2\2\u1807\u1809\7\u02b6\2\2\u1808\u1802\3\2\2\2\u1808\u1803"+
		"\3\2\2\2\u1808\u1804\3\2\2\2\u1808\u1805\3\2\2\2\u1808\u1806\3\2\2\2\u1808"+
		"\u1807\3\2\2\2\u1809\u0251\3\2\2\2\u180a\u1813\5\u0250\u0129\2\u180b\u180e"+
		"\5\u0250\u0129\2\u180c\u180d\7\u02a5\2\2\u180d\u180f\5\u0250\u0129\2\u180e"+
		"\u180c\3\2\2\2\u180f\u1810\3\2\2\2\u1810\u180e\3\2\2\2\u1810\u1811\3\2"+
		"\2\2\u1811\u1813\3\2\2\2\u1812\u180a\3\2\2\2\u1812\u180b\3\2\2\2\u1813"+
		"\u0253\3\2\2\2\u1814\u1831\7\u02b9\2\2\u1815\u1831\7\u02b8\2\2\u1816\u1831"+
		"\7\u02b6\2\2\u1817\u1818\7\u02ba\2\2\u1818\u1831\7\u02b8\2\2\u1819\u181b"+
		"\7\u0291\2\2\u181a\u1819\3\2\2\2\u181a\u181b\3\2\2\2\u181b\u181c\3\2\2"+
		"\2\u181c\u1831\7\u02bb\2\2\u181d\u181f\7\u0291\2\2\u181e\u181d\3\2\2\2"+
		"\u181e\u181f\3\2\2\2\u181f\u1820\3\2\2\2\u1820\u1831\7\u02bc\2\2\u1821"+
		"\u1822\7\u00c4\2\2\u1822\u1831\5\u027c\u013f\2\u1823\u1824\7\u00c5\2\2"+
		"\u1824\u1831\5\u027c\u013f\2\u1825\u1826\7\u00c6\2\2\u1826\u1831\5\u027c"+
		"\u013f\2\u1827\u1828\7L\2\2\u1828\u1829\5\u027c\u013f\2\u1829\u182a\5"+
		"\u0256\u012c\2\u182a\u1831\3\2\2\2\u182b\u1831\7\u02bd\2\2\u182c\u1831"+
		"\7\u02be\2\2\u182d\u1831\78\2\2\u182e\u1831\7\u00a5\2\2\u182f\u1831\7"+
		"k\2\2\u1830\u1814\3\2\2\2\u1830\u1815\3\2\2\2\u1830\u1816\3\2\2\2\u1830"+
		"\u1817\3\2\2\2\u1830\u181a\3\2\2\2\u1830\u181e\3\2\2\2\u1830\u1821\3\2"+
		"\2\2\u1830\u1823\3\2\2\2\u1830\u1825\3\2\2\2\u1830\u1827\3\2\2\2\u1830"+
		"\u182b\3\2\2\2\u1830\u182c\3\2\2\2\u1830\u182d\3\2\2\2\u1830\u182e\3\2"+
		"\2\2\u1830\u182f\3\2\2\2\u1831\u0255\3\2\2\2\u1832\u1833\tI\2\2\u1833"+
		"\u0257\3\2\2\2\u1834\u1836\7\u02a6\2\2\u1835\u1834\3\2\2\2\u1835\u1836"+
		"\3\2\2\2\u1836\u1837\3\2\2\2\u1837\u1838\5\u025a\u012e\2\u1838\u183a\5"+
		"\u027c\u013f\2\u1839\u183b\7\u02a7\2\2\u183a\u1839\3\2\2\2\u183a\u183b"+
		"\3\2\2\2\u183b\u0259\3\2\2\2\u183c\u183d\tJ\2\2\u183d\u025b\3\2\2\2\u183e"+
		"\u183f\7\u02b2\2\2\u183f\u025d\3\2\2\2\u1840\u1841\7\u02ac\2\2\u1841\u1842"+
		"\5\u0250\u0129\2\u1842\u025f\3\2\2\2\u1843\u1844\7\u02ac\2\2\u1844\u1845"+
		"\7\u02ac\2\2\u1845\u1846\5\u0250\u0129\2\u1846\u0261\3\2\2\2\u1847\u1848"+
		"\7\u02ac\2\2\u1848\u1849\7\u02ac\2\2\u1849\u184a\7\u0152\2\2\u184a\u184d"+
		"\7\u02a5\2\2\u184b\u184d\7\u0152\2\2\u184c\u1847\3\2\2\2\u184c\u184b\3"+
		"\2\2\2\u184d\u184e\3\2\2\2\u184e\u184f\5\u0250\u0129\2\u184f\u0263\3\2"+
		"\2\2\u1850\u1851\7\u02ac\2\2\u1851\u1852\7\u02ac\2\2\u1852\u1853\7\u01e1"+
		"\2\2\u1853\u1856\7\u02a5\2\2\u1854\u1856\7\u01e1\2\2\u1855\u1850\3\2\2"+
		"\2\u1855\u1854\3\2\2\2\u1856\u1857\3\2\2\2\u1857\u1858\5\u0250\u0129\2"+
		"\u1858\u0265\3\2\2\2\u1859\u185a\7\u02ac\2\2\u185a\u185b\7\u02ac\2\2\u185b"+
		"\u185c\7x\2\2\u185c\u185f\7\u02a5\2\2\u185d\u185f\7x\2\2\u185e\u1859\3"+
		"\2\2\2\u185e\u185d\3\2\2\2\u185f\u1860\3\2\2\2\u1860\u1861\5\u0250\u0129"+
		"\2\u1861\u0267\3\2\2\2\u1862\u1863\7\u02ac\2\2\u1863\u1864\7\u02ac\2\2"+
		"\u1864\u1865\7y\2\2\u1865\u1868\7\u02a5\2\2\u1866\u1868\7y\2\2\u1867\u1862"+
		"\3\2\2\2\u1867\u1866\3\2\2\2\u1868\u1869\3\2\2\2\u1869\u186a\5\u0250\u0129"+
		"\2\u186a\u0269\3\2\2\2\u186b\u186c\7\u01da\2\2\u186c\u186d\7\u02a6\2\2"+
		"\u186d\u1872\5\u027c\u013f\2\u186e\u186f\7\u02aa\2\2\u186f\u1871\5\u027c"+
		"\u013f\2\u1870\u186e\3\2\2\2\u1871\u1874\3\2\2\2\u1872\u1870\3\2\2\2\u1872"+
		"\u1873\3\2\2\2\u1873\u1875\3\2\2\2\u1874\u1872\3\2\2\2\u1875\u1876\7\u02a7"+
		"\2\2\u1876\u026b\3\2\2\2\u1877\u1879\7\u02a6\2\2\u1878\u1877\3\2\2\2\u1878"+
		"\u1879\3\2\2\2\u1879\u187a\3\2\2\2\u187a\u187c\5\u00be`\2\u187b\u187d"+
		"\7\u02a7\2\2\u187c\u187b\3\2\2\2\u187c\u187d\3\2\2\2\u187d\u026d\3\2\2"+
		"\2\u187e\u187f\7b\2\2\u187f\u1880\7\u02a6\2\2\u1880\u1885\5\u027c\u013f"+
		"\2\u1881\u1882\7\u02aa\2\2\u1882\u1884\5\u027c\u013f\2\u1883\u1881\3\2"+
		"\2\2\u1884\u1887\3\2\2\2\u1885\u1883\3\2\2\2\u1885\u1886\3\2\2\2\u1886"+
		"\u1888\3\2\2\2\u1887\u1885\3\2\2\2\u1888\u1889\7\u02a7\2\2\u1889\u188a"+
		"\7\u00f6\2\2\u188a\u188b\7\u02a6\2\2\u188b\u188d\5\u027c\u013f\2\u188c"+
		"\u188e\5\u0270\u0139\2\u188d\u188c\3\2\2\2\u188d\u188e\3\2\2\2\u188e\u188f"+
		"\3\2\2\2\u188f\u1890\7\u02a7\2\2\u1890\u026f\3\2\2\2\u1891\u1892\7E\2"+
		"\2\u1892\u1893\7f\2\2\u1893\u1894\7\u016b\2\2\u1894\u18a3\7\u0193\2\2"+
		"\u1895\u1896\7E\2\2\u1896\u1897\7f\2\2\u1897\u1898\7\u016b\2\2\u1898\u1899"+
		"\7\u0193\2\2\u1899\u189a\7\u00b4\2\2\u189a\u189b\7\u01bf\2\2\u189b\u18a3"+
		"\7\u0140\2\2\u189c\u189d\7E\2\2\u189d\u189e\7\u0105\2\2\u189e\u18a3\7"+
		"\u0193\2\2\u189f\u18a0\7\u00b4\2\2\u18a0\u18a1\7\u01bf\2\2\u18a1\u18a3"+
		"\7\u0140\2\2\u18a2\u1891\3\2\2\2\u18a2\u1895\3\2\2\2\u18a2\u189c\3\2\2"+
		"\2\u18a2\u189f\3\2\2\2\u18a3\u0271\3\2\2\2\u18a4\u18a6\7\24\2\2\u18a5"+
		"\u18a7\5\u027c\u013f\2\u18a6\u18a5\3\2\2\2\u18a6\u18a7\3\2\2\2\u18a7\u18a9"+
		"\3\2\2\2\u18a8\u18aa\5\u0274\u013b\2\u18a9\u18a8\3\2\2\2\u18aa\u18ab\3"+
		"\2\2\2\u18ab\u18a9\3\2\2\2\u18ab\u18ac\3\2\2\2\u18ac\u18ae\3\2\2\2\u18ad"+
		"\u18af\5\u0276\u013c\2\u18ae\u18ad\3\2\2\2\u18ae\u18af\3\2\2\2\u18af\u18b0"+
		"\3\2\2\2\u18b0\u18b1\7\u0133\2\2\u18b1\u0273\3\2\2\2\u18b2\u18b4\7\u00b1"+
		"\2\2\u18b3\u18b5\5\u027c\u013f\2\u18b4\u18b3\3\2\2\2\u18b4\u18b5\3\2\2"+
		"\2\u18b5\u18b6\3\2\2\2\u18b6\u18b7\7\u00a1\2\2\u18b7\u18b8\5\u027c\u013f"+
		"\2\u18b8\u0275\3\2\2\2\u18b9\u18ba\7\61\2\2\u18ba\u18bb\5\u027c\u013f"+
		"\2\u18bb\u0277\3\2\2\2\u18bc\u18bd\7\u02a6\2\2\u18bd\u18c2\5\u027c\u013f"+
		"\2\u18be\u18bf\7\u02aa\2\2\u18bf\u18c1\5\u027c\u013f\2\u18c0\u18be\3\2"+
		"\2\2\u18c1\u18c4\3\2\2\2\u18c2\u18c0\3\2\2\2\u18c2\u18c3\3\2\2\2\u18c3"+
		"\u18c5\3\2\2\2\u18c4\u18c2\3\2\2\2\u18c5\u18c6\7\u02a7\2\2\u18c6\u0279"+
		"\3\2\2\2\u18c7\u18d8\5\u025c\u012f\2\u18c8\u18d8\5\u025e\u0130\2\u18c9"+
		"\u18d8\5\u0260\u0131\2\u18ca\u18d8\5\u0262\u0132\2\u18cb\u18d8\5\u0264"+
		"\u0133\2\u18cc\u18d8\5\u0266\u0134\2\u18cd\u18d8\5\u0268\u0135\2\u18ce"+
		"\u18d8\5\u02cc\u0167\2\u18cf\u18d8\5\u0254\u012b\2\u18d0\u18d8\5\u0258"+
		"\u012d\2\u18d1\u18d8\5\u0252\u012a\2\u18d2\u18d8\5\u026a\u0136\2\u18d3"+
		"\u18d8\5\u026e\u0138\2\u18d4\u18d8\5\u0272\u013a\2\u18d5\u18d8\5\u026c"+
		"\u0137\2\u18d6\u18d8\5\u0278\u013d\2\u18d7\u18c7\3\2\2\2\u18d7\u18c8\3"+
		"\2\2\2\u18d7\u18c9\3\2\2\2\u18d7\u18ca\3\2\2\2\u18d7\u18cb\3\2\2\2\u18d7"+
		"\u18cc\3\2\2\2\u18d7\u18cd\3\2\2\2\u18d7\u18ce\3\2\2\2\u18d7\u18cf\3\2"+
		"\2\2\u18d7\u18d0\3\2\2\2\u18d7\u18d1\3\2\2\2\u18d7\u18d2\3\2\2\2\u18d7"+
		"\u18d3\3\2\2\2\u18d7\u18d4\3\2\2\2\u18d7\u18d5\3\2\2\2\u18d7\u18d6\3\2"+
		"\2\2\u18d8\u027b\3\2\2\2\u18d9\u18da\b\u013f\1\2\u18da\u18db\7\"\2\2\u18db"+
		"\u18dc\7\u02a6\2\2\u18dc\u18dd\5\u00be`\2\u18dd\u18de\7\u02a7\2\2\u18de"+
		"\u1954\3\2\2\2\u18df\u18e0\7\u00f9\2\2\u18e0\u18e1\7\u02a6\2\2\u18e1\u18e2"+
		"\5\u027c\u013f\2\u18e2\u18e3\7\u02a7\2\2\u18e3\u1954\3\2\2\2\u18e4\u18e5"+
		"\7\b\2\2\u18e5\u18e6\7\u02a6\2\2\u18e6\u18e7\5\u027c\u013f\2\u18e7\u18e8"+
		"\7\u02a7\2\2\u18e8\u1954\3\2\2\2\u18e9\u18ea\7\u01ea\2\2\u18ea\u18eb\7"+
		"\u02a6\2\2\u18eb\u18ec\5\u027c\u013f\2\u18ec\u18ed\7\u02a7\2\2\u18ed\u1954"+
		"\3\2\2\2\u18ee\u18ef\7g\2\2\u18ef\u18f0\7\u02a5\2\2\u18f0\u1954\5\u0252"+
		"\u012a\2\u18f1\u18f2\7m\2\2\u18f2\u18f3\7\u02a5\2\2\u18f3\u1954\5\u0252"+
		"\u012a\2\u18f4\u1901\5\u02ce\u0168\2\u18f5\u18fe\7\u02a6\2\2\u18f6\u18fb"+
		"\5\u027c\u013f\2\u18f7\u18f8\7\u02aa\2\2\u18f8\u18fa\5\u027c\u013f\2\u18f9"+
		"\u18f7\3\2\2\2\u18fa\u18fd\3\2\2\2\u18fb\u18f9\3\2\2\2\u18fb\u18fc\3\2"+
		"\2\2\u18fc\u18ff\3\2\2\2\u18fd\u18fb\3\2\2\2\u18fe\u18f6\3\2\2\2\u18fe"+
		"\u18ff\3\2\2\2\u18ff\u1900\3\2\2\2\u1900\u1902\7\u02a7\2\2\u1901\u18f5"+
		"\3\2\2\2\u1901\u1902\3\2\2\2\u1902\u1954\3\2\2\2\u1903\u1904\7\u02a6\2"+
		"\2\u1904\u1905\5\u027c\u013f\2\u1905\u1906\7\u02a4\2\2\u1906\u1907\5\u027c"+
		"\u013f\2\u1907\u1908\7\u02a7\2\2\u1908\u1954\3\2\2\2\u1909\u190a\7\u02a6"+
		"\2\2\u190a\u190b\5\u027c\u013f\2\u190b\u190c\tK\2\2\u190c\u190d\5\u027c"+
		"\u013f\2\u190d\u190e\7\u02a7\2\2\u190e\u1954\3\2\2\2\u190f\u1910\7\u02a6"+
		"\2\2\u1910\u1911\5\u027c\u013f\2\u1911\u1912\tL\2\2\u1912\u1913\5\u027c"+
		"\u013f\2\u1913\u1914\7\u02a7\2\2\u1914\u1954\3\2\2\2\u1915\u1916\7\u02a6"+
		"\2\2\u1916\u1917\5\u027c\u013f\2\u1917\u1918\tL\2\2\u1918\u1919\5\u027c"+
		"\u013f\2\u1919\u191a\7\u02a7\2\2\u191a\u1954\3\2\2\2\u191b\u191c\7\u02a6"+
		"\2\2\u191c\u191d\5\u027c\u013f\2\u191d\u191e\tM\2\2\u191e\u191f\5\u027c"+
		"\u013f\2\u191f\u1920\7\u02a7\2\2\u1920\u1954\3\2\2\2\u1921\u1922\7\u02a6"+
		"\2\2\u1922\u1923\5\u027c\u013f\2\u1923\u1924\7\u02a3\2\2\u1924\u1925\5"+
		"\u027c\u013f\2\u1925\u1926\7\u02a7\2\2\u1926\u1954\3\2\2\2\u1927\u1928"+
		"\7\u02a6\2\2\u1928\u1929\5\u027c\u013f\2\u1929\u192a\7\u02a2\2\2\u192a"+
		"\u192b\5\u027c\u013f\2\u192b\u192c\7\u02a7\2\2\u192c\u1954\3\2\2\2\u192d"+
		"\u192e\7\u02a6\2\2\u192e\u192f\5\u027c\u013f\2\u192f\u1930\5\u027e\u0140"+
		"\2\u1930\u1931\5\u027c\u013f\2\u1931\u1932\7\u02a7\2\2\u1932\u1954\3\2"+
		"\2\2\u1933\u1954\5\u02c0\u0161\2\u1934\u1954\5\u027a\u013e\2\u1935\u1936"+
		"\7\u02a6\2\2\u1936\u1937\5\u027c\u013f\2\u1937\u1938\7\31\2\2\u1938\u1939"+
		"\5\u027c\u013f\2\u1939\u193a\7\u02a7\2\2\u193a\u1954\3\2\2\2\u193b\u193c"+
		"\7\u02a6\2\2\u193c\u193d\5\u027c\u013f\2\u193d\u193e\tN\2\2\u193e\u193f"+
		"\5\u027c\u013f\2\u193f\u1940\7\u02a7\2\2\u1940\u1954\3\2\2\2\u1941\u1942"+
		"\7\u02a6\2\2\u1942\u1943\5\u027c\u013f\2\u1943\u1944\7\u00b6\2\2\u1944"+
		"\u1945\5\u027c\u013f\2\u1945\u1946\7\u02a7\2\2\u1946\u1954\3\2\2\2\u1947"+
		"\u1948\7\u02a6\2\2\u1948\u1949\5\u027c\u013f\2\u1949\u194a\tO\2\2\u194a"+
		"\u194b\5\u027c\u013f\2\u194b\u194c\7\u02a7\2\2\u194c\u1954\3\2\2\2\u194d"+
		"\u194e\7\u02a6\2\2\u194e\u194f\5\u027c\u013f\2\u194f\u1950\7\u0287\2\2"+
		"\u1950\u1951\5\u027c\u013f\2\u1951\u1952\7\u02a7\2\2\u1952\u1954\3\2\2"+
		"\2\u1953\u18d9\3\2\2\2\u1953\u18df\3\2\2\2\u1953\u18e4\3\2\2\2\u1953\u18e9"+
		"\3\2\2\2\u1953\u18ee\3\2\2\2\u1953\u18f1\3\2\2\2\u1953\u18f4\3\2\2\2\u1953"+
		"\u1903\3\2\2\2\u1953\u1909\3\2\2\2\u1953\u190f\3\2\2\2\u1953\u1915\3\2"+
		"\2\2\u1953\u191b\3\2\2\2\u1953\u1921\3\2\2\2\u1953\u1927\3\2\2\2\u1953"+
		"\u192d\3\2\2\2\u1953\u1933\3\2\2\2\u1953\u1934\3\2\2\2\u1953\u1935\3\2"+
		"\2\2\u1953\u193b\3\2\2\2\u1953\u1941\3\2\2\2\u1953\u1947\3\2\2\2\u1953"+
		"\u194d\3\2\2\2\u1954\u19d1\3\2\2\2\u1955\u1956\f\'\2\2\u1956\u1957\7\u00a2"+
		"\2\2\u1957\u19d0\5\u027c\u013f(\u1958\u1959\f\36\2\2\u1959\u195a\7\u02a4"+
		"\2\2\u195a\u19d0\5\u027c\u013f\37\u195b\u195c\f\35\2\2\u195c\u195d\tK"+
		"\2\2\u195d\u19d0\5\u027c\u013f\36\u195e\u195f\f\34\2\2\u195f\u1960\tL"+
		"\2\2\u1960\u19d0\5\u027c\u013f\35\u1961\u1962\f\33\2\2\u1962\u1963\tM"+
		"\2\2\u1963\u19d0\5\u027c\u013f\34\u1964\u1965\f\32\2\2\u1965\u1966\7\u02a3"+
		"\2\2\u1966\u19d0\5\u027c\u013f\33\u1967\u1968\f\31\2\2\u1968\u1969\7\u02a2"+
		"\2\2\u1969\u19d0\5\u027c\u013f\32\u196a\u196b\f\30\2\2\u196b\u196c\5\u027e"+
		"\u0140\2\u196c\u196d\5\u027c\u013f\31\u196d\u19d0\3\2\2\2\u196e\u196f"+
		"\f\25\2\2\u196f\u1970\7\u01ec\2\2\u1970\u1971\7W\2\2\u1971\u19d0\5\u027c"+
		"\u013f\26\u1972\u1974\f\23\2\2\u1973\u1975\7i\2\2\u1974\u1973\3\2\2\2"+
		"\u1974\u1975\3\2\2\2\u1975\u1976\3\2\2\2\u1976\u1977\7\u008c\2\2\u1977"+
		"\u19d0\5\u027c\u013f\24\u1978\u197a\f\22\2\2\u1979\u197b\7i\2\2\u197a"+
		"\u1979\3\2\2\2\u197a\u197b\3\2\2\2\u197b\u197c\3\2\2\2\u197c\u197d\7\u0081"+
		"\2\2\u197d\u19d0\5\u027c\u013f\23\u197e\u1980\f\20\2\2\u197f\u1981\7i"+
		"\2\2\u1980\u197f\3\2\2\2\u1980\u1981\3\2\2\2\u1981\u1982\3\2\2\2\u1982"+
		"\u1983\7\17\2\2\u1983\u1984\5\u027c\u013f\2\u1984\u1985\7\13\2\2\u1985"+
		"\u1986\5\u027c\u013f\21\u1986\u19d0\3\2\2\2\u1987\u1988\f\13\2\2\u1988"+
		"\u1989\7\31\2\2\u1989\u19d0\5\u027c\u013f\f\u198a\u198b\f\6\2\2\u198b"+
		"\u198c\tN\2\2\u198c\u19d0\5\u027c\u013f\7\u198d\u198e\f\5\2\2\u198e\u198f"+
		"\7\u00b6\2\2\u198f\u19d0\5\u027c\u013f\6\u1990\u1991\f\4\2\2\u1991\u1992"+
		"\tO\2\2\u1992\u19d0\5\u027c\u013f\5\u1993\u1994\f\3\2\2\u1994\u1995\7"+
		"\u0287\2\2\u1995\u19d0\5\u027c\u013f\4\u1996\u1997\f(\2\2\u1997\u19a3"+
		"\7\u02a6\2\2\u1998\u199a\5\u00caf\2\u1999\u1998\3\2\2\2\u1999\u199a\3"+
		"\2\2\2\u199a\u199b\3\2\2\2\u199b\u19a0\5\u027c\u013f\2\u199c\u199d\7\u02aa"+
		"\2\2\u199d\u199f\5\u027c\u013f\2\u199e\u199c\3\2\2\2\u199f\u19a2\3\2\2"+
		"\2\u19a0\u199e\3\2\2\2\u19a0\u19a1\3\2\2\2\u19a1\u19a4\3\2\2\2\u19a2\u19a0"+
		"\3\2\2\2\u19a3\u1999\3\2\2\2\u19a3\u19a4\3\2\2\2\u19a4\u19a5\3\2\2\2\u19a5"+
		"\u19d0\7\u02a7\2\2\u19a6\u19a7\f\27\2\2\u19a7\u19a9\7N\2\2\u19a8\u19aa"+
		"\7i\2\2\u19a9\u19a8\3\2\2\2\u19a9\u19aa\3\2\2\2\u19aa\u19ab\3\2\2\2\u19ab"+
		"\u19d0\tP\2\2\u19ac\u19ae\f\26\2\2\u19ad\u19af\7i\2\2\u19ae\u19ad\3\2"+
		"\2\2\u19ae\u19af\3\2\2\2\u19af\u19b0\3\2\2\2\u19b0\u19b1\7E\2\2\u19b1"+
		"\u19b2\7\u02a6\2\2\u19b2\u19b7\5\u027c\u013f\2\u19b3\u19b4\7\u02aa\2\2"+
		"\u19b4\u19b6\5\u027c\u013f\2\u19b5\u19b3\3\2\2\2\u19b6\u19b9\3\2\2\2\u19b7"+
		"\u19b5\3\2\2\2\u19b7\u19b8\3\2\2\2\u19b8\u19ba\3\2\2\2\u19b9\u19b7\3\2"+
		"\2\2\u19ba\u19bb\7\u02a7\2\2\u19bb\u19d0\3\2\2\2\u19bc\u19be\f\24\2\2"+
		"\u19bd\u19bf\7i\2\2\u19be\u19bd\3\2\2\2\u19be\u19bf\3\2\2\2\u19bf\u19c0"+
		"\3\2\2\2\u19c0\u19c1\7W\2\2\u19c1\u19c4\5\u027c\u013f\2\u19c2\u19c3\7"+
		"\u0139\2\2\u19c3\u19c5\5\u027c\u013f\2\u19c4\u19c2\3\2\2\2\u19c4\u19c5"+
		"\3\2\2\2\u19c5\u19d0\3\2\2\2\u19c6\u19c7\f\21\2\2\u19c7\u19c9\7N\2\2\u19c8"+
		"\u19ca\7i\2\2\u19c9\u19c8\3\2\2\2\u19c9\u19ca\3\2\2\2\u19ca\u19cb\3\2"+
		"\2\2\u19cb\u19d0\7k\2\2\u19cc\u19cd\f\r\2\2\u19cd\u19ce\7\u02a5\2\2\u19ce"+
		"\u19d0\5\u0252\u012a\2\u19cf\u1955\3\2\2\2\u19cf\u1958\3\2\2\2\u19cf\u195b"+
		"\3\2\2\2\u19cf\u195e\3\2\2\2\u19cf\u1961\3\2\2\2\u19cf\u1964\3\2\2\2\u19cf"+
		"\u1967\3\2\2\2\u19cf\u196a\3\2\2\2\u19cf\u196e\3\2\2\2\u19cf\u1972\3\2"+
		"\2\2\u19cf\u1978\3\2\2\2\u19cf\u197e\3\2\2\2\u19cf\u1987\3\2\2\2\u19cf"+
		"\u198a\3\2\2\2\u19cf\u198d\3\2\2\2\u19cf\u1990\3\2\2\2\u19cf\u1993\3\2"+
		"\2\2\u19cf\u1996\3\2\2\2\u19cf\u19a6\3\2\2\2\u19cf\u19ac\3\2\2\2\u19cf"+
		"\u19bc\3\2\2\2\u19cf\u19c6\3\2\2\2\u19cf\u19cc\3\2\2\2\u19d0\u19d3\3\2"+
		"\2\2\u19d1\u19cf\3\2\2\2\u19d1\u19d2\3\2\2\2\u19d2\u027d\3\2\2\2\u19d3"+
		"\u19d1\3\2\2\2\u19d4\u19e4\7\u0299\2\2\u19d5\u19e4\7\u029f\2\2\u19d6\u19e4"+
		"\7\u029e\2\2\u19d7\u19d8\7\u02a0\2\2\u19d8\u19e4\7\u0299\2\2\u19d9\u19da"+
		"\7\u029a\2\2\u19da\u19e4\7\u029b\2\2\u19db\u19e4\7\u029b\2\2\u19dc\u19e4"+
		"\7\u029d\2\2\u19dd\u19de\7\u029b\2\2\u19de\u19e4\7\u0299\2\2\u19df\u19e4"+
		"\7\u029a\2\2\u19e0\u19e4\7\u029c\2\2\u19e1\u19e2\7\u029a\2\2\u19e2\u19e4"+
		"\7\u0299\2\2\u19e3\u19d4\3\2\2\2\u19e3\u19d5\3\2\2\2\u19e3\u19d6\3\2\2"+
		"\2\u19e3\u19d7\3\2\2\2\u19e3\u19d9\3\2\2\2\u19e3\u19db\3\2\2\2\u19e3\u19dc"+
		"\3\2\2\2\u19e3\u19dd\3\2\2\2\u19e3\u19df\3\2\2\2\u19e3\u19e0\3\2\2\2\u19e3"+
		"\u19e1\3\2\2\2\u19e4\u027f\3\2\2\2\u19e5\u19e6\7&\2\2\u19e6\u19e7\5\u027c"+
		"\u013f\2\u19e7\u0281\3\2\2\2\u19e8\u19ea\7\u00fe\2\2\u19e9\u19eb\7\u0299"+
		"\2\2\u19ea\u19e9\3\2\2\2\u19ea\u19eb\3\2\2\2\u19eb\u19ec\3\2\2\2\u19ec"+
		"\u19ed\5\u027c\u013f\2\u19ed\u0283\3\2\2\2\u19ee\u19f0\7\u00ff\2\2\u19ef"+
		"\u19f1\7\u0299\2\2\u19f0\u19ef\3\2\2\2\u19f0\u19f1\3\2\2\2\u19f1\u19f2"+
		"\3\2\2\2\u19f2\u19f3\5\u027c\u013f\2\u19f3\u0285\3\2\2\2\u19f4\u19f6\7"+
		"&\2\2\u19f5\u19f4\3\2\2\2\u19f5\u19f6\3\2\2\2\u19f6\u19f7\3\2\2\2\u19f7"+
		"\u19f8\7\27\2\2\u19f8\u19fa\7\u0090\2\2\u19f9\u19fb\7\u0299\2\2\u19fa"+
		"\u19f9\3\2\2\2\u19fa\u19fb\3\2\2\2\u19fb\u19fc\3\2\2\2\u19fc\u19fd\5\u0252"+
		"\u012a\2\u19fd\u0287\3\2\2\2\u19fe\u1a00\7&\2\2\u19ff\u19fe\3\2\2\2\u19ff"+
		"\u1a00\3\2\2\2\u1a00\u1a01\3\2\2\2\u1a01\u1a03\7\u0282\2\2\u1a02\u1a04"+
		"\7\u0299\2\2\u1a03\u1a02\3\2\2\2\u1a03\u1a04\3\2\2\2\u1a04\u1a05\3\2\2"+
		"\2\u1a05\u1a06\5\u0252\u012a\2\u1a06\u0289\3\2\2\2\u1a07\u1a09\7\u010c"+
		"\2\2\u1a08\u1a0a\7\u0299\2\2\u1a09\u1a08\3\2\2\2\u1a09\u1a0a\3\2\2\2\u1a0a"+
		"\u1a0b\3\2\2\2\u1a0b\u1a0c\5\u027c\u013f\2\u1a0c\u028b\3\2\2\2\u1a0d\u1a0f"+
		"\7&\2\2\u1a0e\u1a0d\3\2\2\2\u1a0e\u1a0f\3\2\2\2\u1a0f\u1a10\3\2\2\2\u1a10"+
		"\u1a12\7\31\2\2\u1a11\u1a13\7\u0299\2\2\u1a12\u1a11\3\2\2\2\u1a12\u1a13"+
		"\3\2\2\2\u1a13\u1a14\3\2\2\2\u1a14\u1a15\5\u0252\u012a\2\u1a15\u028d\3"+
		"\2\2\2\u1a16\u1a18\7\u0114\2\2\u1a17\u1a19\7\u0299\2\2\u1a18\u1a17\3\2"+
		"\2\2\u1a18\u1a19\3\2\2\2\u1a19\u1a1a\3\2\2\2\u1a1a\u1a1b\5\u027c\u013f"+
		"\2\u1a1b\u028f\3\2\2\2\u1a1c\u1a1e\7\u0119\2\2\u1a1d\u1a1f\7\u0299\2\2"+
		"\u1a1e\u1a1d\3\2\2\2\u1a1e\u1a1f\3\2\2\2\u1a1f\u1a20\3\2\2\2\u1a20\u1a21"+
		"\5\u027c\u013f\2\u1a21\u0291\3\2\2\2\u1a22\u1a24\7\u011b\2\2\u1a23\u1a25"+
		"\7\u0299\2\2\u1a24\u1a23\3\2\2\2\u1a24\u1a25\3\2\2\2\u1a25\u1a26\3\2\2"+
		"\2\u1a26\u1a27\5\u027c\u013f\2\u1a27\u0293\3\2\2\2\u1a28\u1a29\7\u0122"+
		"\2\2\u1a29\u1a2b\7\u0129\2\2\u1a2a\u1a2c\7\u0299\2\2\u1a2b\u1a2a\3\2\2"+
		"\2\u1a2b\u1a2c\3\2\2\2\u1a2c\u1a2d\3\2\2\2\u1a2d\u1a2e\5\u027c\u013f\2"+
		"\u1a2e\u0295\3\2\2\2\u1a2f\u1a30\7F\2\2\u1a30\u1a32\7\u0129\2\2\u1a31"+
		"\u1a33\7\u0299\2\2\u1a32\u1a31\3\2\2\2\u1a32\u1a33\3\2\2\2\u1a33\u1a34"+
		"\3\2\2\2\u1a34\u1a35\5\u027c\u013f\2\u1a35\u0297\3\2\2\2\u1a36\u1a38\7"+
		"\u0127\2\2\u1a37\u1a39\7\u0299\2\2\u1a38\u1a37\3\2\2\2\u1a38\u1a39\3\2"+
		"\2\2\u1a39\u1a3a\3\2\2\2\u1a3a\u1a3b\5\u027c\u013f\2\u1a3b\u0299\3\2\2"+
		"\2\u1a3c\u1a3e\7\u0132\2\2\u1a3d\u1a3f\7\u0299\2\2\u1a3e\u1a3d\3\2\2\2"+
		"\u1a3e\u1a3f\3\2\2\2\u1a3f\u1a40\3\2\2\2\u1a40\u1a41\5\u027c\u013f\2\u1a41"+
		"\u029b\3\2\2\2\u1a42\u1a44\7\u0135\2\2\u1a43\u1a45\7\u0299\2\2\u1a44\u1a43"+
		"\3\2\2\2\u1a44\u1a45\3\2\2\2\u1a45\u1a46\3\2\2\2\u1a46\u1a47\5\u027c\u013f"+
		"\2\u1a47\u029d\3\2\2\2\u1a48\u1a4a\7\u0160\2\2\u1a49\u1a4b\7\u0299\2\2"+
		"\u1a4a\u1a49\3\2\2\2\u1a4a\u1a4b\3\2\2\2\u1a4b\u1a4c\3\2\2\2\u1a4c\u1a4d"+
		"\tQ\2\2\u1a4d\u029f\3\2\2\2\u1a4e\u1a50\7\u016a\2\2\u1a4f\u1a51\7\u0299"+
		"\2\2\u1a50\u1a4f\3\2\2\2\u1a50\u1a51\3\2\2\2\u1a51\u1a52\3\2\2\2\u1a52"+
		"\u1a53\5\u027c\u013f\2\u1a53\u02a1\3\2\2\2\u1a54\u1a56\7\u018b\2\2\u1a55"+
		"\u1a57\7\u0299\2\2\u1a56\u1a55\3\2\2\2\u1a56\u1a57\3\2\2\2\u1a57\u1a58"+
		"\3\2\2\2\u1a58\u1a59\5\u027c\u013f\2\u1a59\u02a3\3\2\2\2\u1a5a\u1a5c\7"+
		"\u0192\2\2\u1a5b\u1a5d\7\u0299\2\2\u1a5c\u1a5b\3\2\2\2\u1a5c\u1a5d\3\2"+
		"\2\2\u1a5d\u1a5e\3\2\2\2\u1a5e\u1a5f\5\u027c\u013f\2\u1a5f\u02a5\3\2\2"+
		"\2\u1a60\u1a62\7\u01aa\2\2\u1a61\u1a63\7\u0299\2\2\u1a62\u1a61\3\2\2\2"+
		"\u1a62\u1a63\3\2\2\2\u1a63\u1a64\3\2\2\2\u1a64\u1a65\5\u027c\u013f\2\u1a65"+
		"\u02a7\3\2\2\2\u1a66\u1a68\7\u01b0\2\2\u1a67\u1a69\7\u0299\2\2\u1a68\u1a67"+
		"\3\2\2\2\u1a68\u1a69\3\2\2\2\u1a69\u1a6a\3\2\2\2\u1a6a\u1a6b\5\u027c\u013f"+
		"\2\u1a6b\u02a9\3\2\2\2\u1a6c\u1a6e\7\u01dc\2\2\u1a6d\u1a6f\7\u0299\2\2"+
		"\u1a6e\u1a6d\3\2\2\2\u1a6e\u1a6f\3\2\2\2\u1a6f\u1a70\3\2\2\2\u1a70\u1a71"+
		"\tR\2\2\u1a71\u02ab\3\2\2\2\u1a72\u1a74\7\u01f7\2\2\u1a73\u1a75\7\u0299"+
		"\2\2\u1a74\u1a73\3\2\2\2\u1a74\u1a75\3\2\2\2\u1a75\u1a76\3\2\2\2\u1a76"+
		"\u1a77\5\u027c\u013f\2\u1a77\u02ad\3\2\2\2\u1a78\u1a7a\7\u01f8\2\2\u1a79"+
		"\u1a7b\7\u0299\2\2\u1a7a\u1a79\3\2\2\2\u1a7a\u1a7b\3\2\2\2\u1a7b\u1a7c"+
		"\3\2\2\2\u1a7c\u1a7d\5\u027c\u013f\2\u1a7d\u02af\3\2\2\2\u1a7e\u1a80\7"+
		"\u01f9\2\2\u1a7f\u1a81\7\u0299\2\2\u1a80\u1a7f\3\2\2\2\u1a80\u1a81\3\2"+
		"\2\2\u1a81\u1a82\3\2\2\2\u1a82\u1a83\5\u027c\u013f\2\u1a83\u02b1\3\2\2"+
		"\2\u1a84\u1a85\7\u0204\2\2\u1a85\u1a88\5\u0252\u012a\2\u1a86\u1a87\7\u01fc"+
		"\2\2\u1a87\u1a89\t\5\2\2\u1a88\u1a86\3\2\2\2\u1a88\u1a89\3\2\2\2\u1a89"+
		"\u02b3\3\2\2\2\u1a8a\u1a8c\7\u00a7\2\2\u1a8b\u1a8d\7\u0299\2\2\u1a8c\u1a8b"+
		"\3\2\2\2\u1a8c\u1a8d\3\2\2\2\u1a8d\u1a8e\3\2\2\2\u1a8e\u1a8f\5\u027c\u013f"+
		"\2\u1a8f\u02b5\3\2\2\2\u1a90\u1a91\5\u027c\u013f\2\u1a91\u1a92\7\u0299"+
		"\2\2\u1a92\u1a93\5\u027c\u013f\2\u1a93\u02b7\3\2\2\2\u1a94\u1a95\7&\2"+
		"\2\u1a95\u02b9\3\2\2\2\u1a96\u1a97\7\b\2\2\u1a97\u02bb\3\2\2\2\u1a98\u1a99"+
		"\7\u019e\2\2\u1a99\u02bd\3\2\2\2\u1a9a\u1a9b\7c\2\2\u1a9b\u02bf\3\2\2"+
		"\2\u1a9c\u1a9f\5\u02c2\u0162\2\u1a9d\u1a9f\5\u02c8\u0165\2\u1a9e\u1a9c"+
		"\3\2\2\2\u1a9e\u1a9d\3\2\2\2\u1a9f\u02c1\3\2\2\2\u1aa0\u1aa1\7i\2\2\u1aa1"+
		"\u1aa2\5\u027c\u013f\2\u1aa2\u02c3\3\2\2\2\u1aa3\u1aa4\7\u02ce\2\2\u1aa4"+
		"\u1aa5\7\u0169\2\2\u1aa5\u02c5\3\2\2\2\u1aa6\u1aa8\5\u027c\u013f\2\u1aa7"+
		"\u1aa9\7\f\2\2\u1aa8\u1aa7\3\2\2\2\u1aa8\u1aa9\3\2\2\2\u1aa9\u1aac\3\2"+
		"\2\2\u1aaa\u1aad\5\u027c\u013f\2\u1aab\u1aad\5\u0240\u0121\2\u1aac\u1aaa"+
		"\3\2\2\2\u1aac\u1aab\3\2\2\2\u1aad\u02c7\3\2\2\2\u1aae\u1aaf\7\65\2\2"+
		"\u1aaf\u1ab0\7\u02a6\2\2\u1ab0\u1ab1\5\u00be`\2\u1ab1\u1ab2\7\u02a7\2"+
		"\2\u1ab2\u02c9\3\2\2\2\u1ab3\u1ab4\7\25\2\2\u1ab4\u1ab5\7\u02a6\2\2\u1ab5"+
		"\u1ab6\5\u027c\u013f\2\u1ab6\u1ab7\7\f\2\2\u1ab7\u1ab8\5\u0240\u0121\2"+
		"\u1ab8\u1ab9\7\u02a7\2\2\u1ab9\u1b1b\3\2\2\2\u1aba\u1abb\7\u00c9\2\2\u1abb"+
		"\u1abc\7\u02a6\2\2\u1abc\u1ac1\5\u027c\u013f\2\u1abd\u1abe\7\u02aa\2\2"+
		"\u1abe\u1ac0\5\u027c\u013f\2\u1abf\u1abd\3\2\2\2\u1ac0\u1ac3\3\2\2\2\u1ac1"+
		"\u1abf\3\2\2\2\u1ac1\u1ac2\3\2\2\2\u1ac2\u1ac6\3\2\2\2\u1ac3\u1ac1\3\2"+
		"\2\2\u1ac4\u1ac5\7\u00ae\2\2\u1ac5\u1ac7\5\u027c\u013f\2\u1ac6\u1ac4\3"+
		"\2\2\2\u1ac6\u1ac7\3\2\2\2\u1ac7\u1ac8\3\2\2\2\u1ac8\u1ac9\7\u02a7\2\2"+
		"\u1ac9\u1b1b\3\2\2\2\u1aca\u1acb\7\36\2\2\u1acb\u1acc\7\u02a6\2\2\u1acc"+
		"\u1acd\5\u027c\u013f\2\u1acd\u1ace\7\u02aa\2\2\u1ace\u1acf\5\u0222\u0112"+
		"\2\u1acf\u1ad0\7\u02a7\2\2\u1ad0\u1b1b\3\2\2\2\u1ad1\u1ad2\7\36\2\2\u1ad2"+
		"\u1ad3\7\u02a6\2\2\u1ad3\u1ad4\5\u027c\u013f\2\u1ad4\u1ad5\7\u00ae\2\2"+
		"\u1ad5\u1ad6\5\u027c\u013f\2\u1ad6\u1ad7\7\u02a7\2\2\u1ad7\u1b1b\3\2\2"+
		"\2\u1ad8\u1ad9\7\u00af\2\2\u1ad9\u1ada\7\u02a6\2\2\u1ada\u1adb\5\u027c"+
		"\u013f\2\u1adb\u1adc\7\u02a7\2\2\u1adc\u1b1b\3\2\2\2\u1add\u1ade\7\u00ec"+
		"\2\2\u1ade\u1adf\7\u02a6\2\2\u1adf\u1ae0\5\u027c\u013f\2\u1ae0\u1ae3\7"+
		"E\2\2\u1ae1\u1ae4\5\u027c\u013f\2\u1ae2\u1ae4\5\u027c\u013f\2\u1ae3\u1ae1"+
		"\3\2\2\2\u1ae3\u1ae2\3\2\2\2\u1ae4\u1ae5\3\2\2\2\u1ae5\u1ae6\7\u02a7\2"+
		"\2\u1ae6\u1b1b\3\2\2\2\u1ae7\u1ae8\tS\2\2\u1ae8\u1ae9\7\u02a6\2\2\u1ae9"+
		"\u1aea\5\u027c\u013f\2\u1aea\u1aeb\7=\2\2\u1aeb\u1aee\5\u027c\u013f\2"+
		"\u1aec\u1aed\7:\2\2\u1aed\u1aef\5\u027c\u013f\2\u1aee\u1aec\3\2\2\2\u1aee"+
		"\u1aef\3\2\2\2\u1aef\u1af0\3\2\2\2\u1af0\u1af1\7\u02a7\2\2\u1af1\u1b1b"+
		"\3\2\2\2\u1af2\u1af3\7\u00ef\2\2\u1af3\u1af4\7\u02a6\2\2\u1af4\u1af6\t"+
		"T\2\2\u1af5\u1af7\5\u027c\u013f\2\u1af6\u1af5\3\2\2\2\u1af6\u1af7\3\2"+
		"\2\2\u1af7\u1af8\3\2\2\2\u1af8\u1af9\7=\2\2\u1af9\u1afa\5\u027c\u013f"+
		"\2\u1afa\u1afb\7\u02a7\2\2\u1afb\u1b1b\3\2\2\2\u1afc\u1afd\7\u00ef\2\2"+
		"\u1afd\u1afe\7\u02a6\2\2\u1afe\u1aff\5\u027c\u013f\2\u1aff\u1b00\7=\2"+
		"\2\u1b00\u1b01\5\u027c\u013f\2\u1b01\u1b02\7\u02a7\2\2\u1b02\u1b1b\3\2"+
		"\2\2\u1b03\u1b04\7\u0286\2\2\u1b04\u1b05\7\u02a6\2\2\u1b05\u1b0c\5\u027c"+
		"\u013f\2\u1b06\u1b07\7\f\2\2\u1b07\u1b08\tU\2\2\u1b08\u1b09\7\u02a6\2"+
		"\2\u1b09\u1b0a\5\u027c\u013f\2\u1b0a\u1b0b\7\u02a7\2\2\u1b0b\u1b0d\3\2"+
		"\2\2\u1b0c\u1b06\3\2\2\2\u1b0c\u1b0d\3\2\2\2\u1b0d\u1b0f\3\2\2\2\u1b0e"+
		"\u1b10\5\u022e\u0118\2\u1b0f\u1b0e\3\2\2\2\u1b0f\u1b10\3\2\2\2\u1b10\u1b11"+
		"\3\2\2\2\u1b11\u1b12\7\u02a7\2\2\u1b12\u1b1b\3\2\2\2\u1b13\u1b14\7\u0283"+
		"\2\2\u1b14\u1b15\7\u02a6\2\2\u1b15\u1b16\t?\2\2\u1b16\u1b17\7\u02aa\2"+
		"\2\u1b17\u1b18\5\u027c\u013f\2\u1b18\u1b19\7\u02a7\2\2\u1b19\u1b1b\3\2"+
		"\2\2\u1b1a\u1ab3\3\2\2\2\u1b1a\u1aba\3\2\2\2\u1b1a\u1aca\3\2\2\2\u1b1a"+
		"\u1ad1\3\2\2\2\u1b1a\u1ad8\3\2\2\2\u1b1a\u1add\3\2\2\2\u1b1a\u1ae7\3\2"+
		"\2\2\u1b1a\u1af2\3\2\2\2\u1b1a\u1afc\3\2\2\2\u1b1a\u1b03\3\2\2\2\u1b1a"+
		"\u1b13\3\2\2\2\u1b1b\u02cb\3\2\2\2\u1b1c\u1b29\5\u02ca\u0166\2\u1b1d\u1b29"+
		"\5\u02d6\u016c\2\u1b1e\u1b29\5\u02da\u016e\2\u1b1f\u1b29\5\u02dc\u016f"+
		"\2\u1b20\u1b29\5\u02de\u0170\2\u1b21\u1b29\5\u02e2\u0172\2\u1b22\u1b29"+
		"\5\u02fc\u017f\2\u1b23\u1b29\5\u0302\u0182\2\u1b24\u1b29\5\u0304\u0183"+
		"\2\u1b25\u1b29\5\u0306\u0184\2\u1b26\u1b29\5\u031e\u0190\2\u1b27\u1b29"+
		"\5\u030a\u0186\2\u1b28\u1b1c\3\2\2\2\u1b28\u1b1d\3\2\2\2\u1b28\u1b1e\3"+
		"\2\2\2\u1b28\u1b1f\3\2\2\2\u1b28\u1b20\3\2\2\2\u1b28\u1b21\3\2\2\2\u1b28"+
		"\u1b22\3\2\2\2\u1b28\u1b23\3\2\2\2\u1b28\u1b24\3\2\2\2\u1b28\u1b25\3\2"+
		"\2\2\u1b28\u1b26\3\2\2\2\u1b28\u1b27\3\2\2\2\u1b29\u02cd\3\2\2\2\u1b2a"+
		"\u1b2b\tV\2\2\u1b2b\u02cf\3\2\2\2\u1b2c\u1b2d\7\u00ec\2\2\u1b2d\u1b2e"+
		"\7\u02a6\2\2\u1b2e\u1b2f\5\u027c\u013f\2\u1b2f\u1b30\7E\2\2\u1b30\u1b31"+
		"\5\u027c\u013f\2\u1b31\u1b32\7\u02a7\2\2\u1b32\u02d1\3\2\2\2\u1b33\u1b34"+
		"\7\u00ed\2\2\u1b34\u1b35\7\u02a6\2\2\u1b35\u1b36\5\u027c\u013f\2\u1b36"+
		"\u1b37\7=\2\2\u1b37\u1b3a\5\u027c\u013f\2\u1b38\u1b39\7:\2\2\u1b39\u1b3b"+
		"\5\u027c\u013f\2\u1b3a\u1b38\3\2\2\2\u1b3a\u1b3b\3\2\2\2\u1b3b\u1b3c\3"+
		"\2\2\2\u1b3c\u1b3d\7\u02a7\2\2\u1b3d\u02d3\3\2\2\2\u1b3e\u1b3f\7\u00ee"+
		"\2\2\u1b3f\u1b40\7\u02a6\2\2\u1b40\u1b41\5\u027c\u013f\2\u1b41\u1b42\7"+
		"=\2\2\u1b42\u1b45\5\u027c\u013f\2\u1b43\u1b44\7:\2\2\u1b44\u1b46\5\u027c"+
		"\u013f\2\u1b45\u1b43\3\2\2\2\u1b45\u1b46\3\2\2\2\u1b46\u1b47\3\2\2\2\u1b47"+
		"\u1b48\7\u02a7\2\2\u1b48\u02d5\3\2\2\2\u1b49\u1b4a\7\u00ef\2\2\u1b4a\u1b52"+
		"\7\u02a6\2\2\u1b4b\u1b4d\tT\2\2\u1b4c\u1b4b\3\2\2\2\u1b4c\u1b4d\3\2\2"+
		"\2\u1b4d\u1b4f\3\2\2\2\u1b4e\u1b50\5\u027c\u013f\2\u1b4f\u1b4e\3\2\2\2"+
		"\u1b4f\u1b50\3\2\2\2\u1b50\u1b51\3\2\2\2\u1b51\u1b53\7=\2\2\u1b52\u1b4c"+
		"\3\2\2\2\u1b52\u1b53\3\2\2\2\u1b53\u1b54\3\2\2\2\u1b54\u1b55\5\u027c\u013f"+
		"\2\u1b55\u1b56\7\u02a7\2\2\u1b56\u02d7\3\2\2\2\u1b57\u1b58\7\u0286\2\2"+
		"\u1b58\u1b59\7\u02a6\2\2\u1b59\u1b5c\5\u027c\u013f\2\u1b5a\u1b5b\7\f\2"+
		"\2\u1b5b\u1b5d\5\u0240\u0121\2\u1b5c";
	private static final String _serializedATNSegment3 =
		"\u1b5a\3\2\2\2\u1b5c\u1b5d\3\2\2\2\u1b5d\u1b5e\3\2\2\2\u1b5e\u1b5f\7\u02a7"+
		"\2\2\u1b5f\u02d9\3\2\2\2\u1b60\u1b61\7\u00ea\2\2\u1b61\u1b62\7\u02a6\2"+
		"\2\u1b62\u1b63\5\u0256\u012c\2\u1b63\u1b64\7=\2\2\u1b64\u1b65\5\u027c"+
		"\u013f\2\u1b65\u1b66\7\u02a7\2\2\u1b66\u02db\3\2\2\2\u1b67\u1b68\7\u02d1"+
		"\2\2\u1b68\u1b69\7\u02a6\2\2\u1b69\u1b6a\5\u027c\u013f\2\u1b6a\u1b6c\7"+
		"\f\2\2\u1b6b\u1b6d\7\u02d2\2\2\u1b6c\u1b6b\3\2\2\2\u1b6c\u1b6d\3\2\2\2"+
		"\u1b6d\u1b6e\3\2\2\2\u1b6e\u1b6f\5\u0240\u0121\2\u1b6f\u1b70\7\u02a7\2"+
		"\2\u1b70\u02dd\3\2\2\2\u1b71\u1b72\7\36\2\2\u1b72\u1b73\7\u02a6\2\2\u1b73"+
		"\u1b74\5\u027c\u013f\2\u1b74\u1b75\7\u00ae\2\2\u1b75\u1b76\5\u0252\u012a"+
		"\2\u1b76\u1b77\7\u02a7\2\2\u1b77\u02df\3\2\2\2\u1b78\u1b79\7\u02d3\2\2"+
		"\u1b79\u1b7b\7\u02d4\2\2\u1b7a\u1b7c\7\u02d5\2\2\u1b7b\u1b7a\3\2\2\2\u1b7b"+
		"\u1b7c\3\2\2\2\u1b7c\u1b93\3\2\2\2\u1b7d\u1b7e\7\u02d3\2\2\u1b7e\u1b7f"+
		"\7\u02a6\2\2\u1b7f\u1b84\5\u027c\u013f\2\u1b80\u1b81\7\u02aa\2\2\u1b81"+
		"\u1b83\5\u027c\u013f\2\u1b82\u1b80\3\2\2\2\u1b83\u1b86\3\2\2\2\u1b84\u1b82"+
		"\3\2\2\2\u1b84\u1b85\3\2\2\2\u1b85\u1b87\3\2\2\2\u1b86\u1b84\3\2\2\2\u1b87"+
		"\u1b88\7\u02a7\2\2\u1b88\u1b89\7\u00af\2\2\u1b89\u1b8a\7\u02a6\2\2\u1b8a"+
		"\u1b8f\5\u027c\u013f\2\u1b8b\u1b8c\7\u02aa\2\2\u1b8c\u1b8e\5\u027c\u013f"+
		"\2\u1b8d\u1b8b\3\2\2\2\u1b8e\u1b91\3\2\2\2\u1b8f\u1b8d\3\2\2\2\u1b8f\u1b90"+
		"\3\2\2\2\u1b90\u1b93\3\2\2\2\u1b91\u1b8f\3\2\2\2\u1b92\u1b78\3\2\2\2\u1b92"+
		"\u1b7d\3\2\2\2\u1b93\u02e1\3\2\2\2\u1b94\u1b95\5\u02e4\u0173\2\u1b95\u1b96"+
		"\7\u02a6\2\2\u1b96\u1b9b\5\u027c\u013f\2\u1b97\u1b98\7\u02aa\2\2\u1b98"+
		"\u1b9a\5\u027c\u013f\2\u1b99\u1b97\3\2\2\2\u1b9a\u1b9d\3\2\2\2\u1b9b\u1b99"+
		"\3\2\2\2\u1b9b\u1b9c\3\2\2\2\u1b9c\u1b9f\3\2\2\2\u1b9d\u1b9b\3\2\2\2\u1b9e"+
		"\u1ba0\5\u00eex\2\u1b9f\u1b9e\3\2\2\2\u1b9f\u1ba0\3\2\2\2\u1ba0\u1ba2"+
		"\3\2\2\2\u1ba1\u1ba3\5\u02ec\u0177\2\u1ba2\u1ba1\3\2\2\2\u1ba2\u1ba3\3"+
		"\2\2\2\u1ba3\u1ba5\3\2\2\2\u1ba4\u1ba6\5\u02ee\u0178\2\u1ba5\u1ba4\3\2"+
		"\2\2\u1ba5\u1ba6\3\2\2\2\u1ba6\u1ba8\3\2\2\2\u1ba7\u1ba9\7\u02d6\2\2\u1ba8"+
		"\u1ba7\3\2\2\2\u1ba8\u1ba9\3\2\2\2\u1ba9\u1bab\3\2\2\2\u1baa\u1bac\5\u02f0"+
		"\u0179\2\u1bab\u1baa\3\2\2\2\u1bab\u1bac\3\2\2\2\u1bac\u1bae\3\2\2\2\u1bad"+
		"\u1baf\5\u02f2\u017a\2\u1bae\u1bad\3\2\2\2\u1bae\u1baf\3\2\2\2\u1baf\u1bb1"+
		"\3\2\2\2\u1bb0\u1bb2\5\u02f4\u017b\2\u1bb1\u1bb0\3\2\2\2\u1bb1\u1bb2\3"+
		"\2\2\2\u1bb2\u1bb4\3\2\2\2\u1bb3\u1bb5\5\u02f6\u017c\2\u1bb4\u1bb3\3\2"+
		"\2\2\u1bb4\u1bb5\3\2\2\2\u1bb5\u1bb7\3\2\2\2\u1bb6\u1bb8\5\u02f8\u017d"+
		"\2\u1bb7\u1bb6\3\2\2\2\u1bb7\u1bb8\3\2\2\2\u1bb8\u1bb9\3\2\2\2\u1bb9\u1bba"+
		"\7\u02a7\2\2\u1bba\u02e3\3\2\2\2\u1bbb\u1bbc\tW\2\2\u1bbc\u02e5\3\2\2"+
		"\2\u1bbd\u1bc1\5\u027c\u013f\2\u1bbe\u1bc1\5\u02e8\u0175\2\u1bbf\u1bc1"+
		"\5\u02ea\u0176\2\u1bc0\u1bbd\3\2\2\2\u1bc0\u1bbe\3\2\2\2\u1bc0\u1bbf\3"+
		"\2\2\2\u1bc1\u02e7\3\2\2\2\u1bc2\u1bc3\5\u027c\u013f\2\u1bc3\u1bc4\5\u02c4"+
		"\u0163\2\u1bc4\u02e9\3\2\2\2\u1bc5\u1bc7\7Q\2\2\u1bc6\u1bc5\3\2\2\2\u1bc6"+
		"\u1bc7\3\2\2\2\u1bc7\u1bc8\3\2\2\2\u1bc8\u1bc9\5\u027c\u013f\2\u1bc9\u1bca"+
		"\7\u0217\2\2\u1bca\u1bcb\5\u027c\u013f\2\u1bcb\u02eb\3\2\2\2\u1bcc\u1bcd"+
		"\tX\2\2\u1bcd\u1bce\7n\2\2\u1bce\u1bcf\7\u02dc\2\2\u1bcf\u02ed\3\2\2\2"+
		"\u1bd0\u1bd1\7\u02de\2\2\u1bd1\u1bd3\5\u0240\u0121\2\u1bd2\u1bd0\3\2\2"+
		"\2\u1bd2\u1bd3\3\2\2\2\u1bd3\u1bd5\3\2\2\2\u1bd4\u1bd6\7\u02df\2\2\u1bd5"+
		"\u1bd4\3\2\2\2\u1bd5\u1bd6\3\2\2\2\u1bd6\u1bd8\3\2\2\2\u1bd7\u1bd9\7\u0244"+
		"\2\2\u1bd8\u1bd7\3\2\2\2\u1bd8\u1bd9\3\2\2\2\u1bd9\u02ef\3\2\2\2\u1bda"+
		"\u1bdb\7\u00b4\2\2\u1bdb\u1bdc\7\u00a8\2\2\u1bdc\u1bdd\7R\2\2\u1bdd\u02f1"+
		"\3\2\2\2\u1bde\u1be0\7\u021c\2\2\u1bdf\u1be1\7\u02e0\2\2\u1be0\u1bdf\3"+
		"\2\2\2\u1be0\u1be1\3\2\2\2\u1be1\u1be2\3\2\2\2\u1be2\u1bec\7\u021e\2\2"+
		"\u1be3\u1be5\7\u00b4\2\2\u1be4\u1be6\tY\2\2\u1be5\u1be4\3\2\2\2\u1be5"+
		"\u1be6\3\2\2\2\u1be6\u1be8\3\2\2\2\u1be7\u1be9\7\u02e0\2\2\u1be8\u1be7"+
		"\3\2\2\2\u1be8\u1be9\3\2\2\2\u1be9\u1bea\3\2\2\2\u1bea\u1bec\7\u021e\2"+
		"\2\u1beb\u1bde\3\2\2\2\u1beb\u1be3\3\2\2\2\u1bec\u02f3\3\2\2\2\u1bed\u1bf7"+
		"\7\u0137\2\2\u1bee\u1bf7\7\u02dc\2\2\u1bef\u1bf7\7\u02e3\2\2\u1bf0\u1bf1"+
		"\7\u02e3\2\2\u1bf1\u1bf7\7\u02e0\2\2\u1bf2\u1bf3\7\u02e3\2\2\u1bf3\u1bf7"+
		"\7\u02e4\2\2\u1bf4\u1bf5\7&\2\2\u1bf5\u1bf7\5\u027c\u013f\2\u1bf6\u1bed"+
		"\3\2\2\2\u1bf6\u1bee\3\2\2\2\u1bf6\u1bef\3\2\2\2\u1bf6\u1bf0\3\2\2\2\u1bf6"+
		"\u1bf2\3\2\2\2\u1bf6\u1bf4\3\2\2\2\u1bf7\u1bf8\3\2\2\2\u1bf8\u1bf9\7n"+
		"\2\2\u1bf9\u1bfa\7\u0137\2\2\u1bfa\u02f5\3\2\2\2\u1bfb\u1c05\7\u0137\2"+
		"\2\u1bfc\u1c05\7\u02dc\2\2\u1bfd\u1c05\7\u02e3\2\2\u1bfe\u1bff\7\u02e3"+
		"\2\2\u1bff\u1c05\7\u02e0\2\2\u1c00\u1c01\7\u02e3\2\2\u1c01\u1c05\7\u02e4"+
		"\2\2\u1c02\u1c03\7&\2\2\u1c03\u1c05\5\u027c\u013f\2\u1c04\u1bfb\3\2\2"+
		"\2\u1c04\u1bfc\3\2\2\2\u1c04\u1bfd\3\2\2\2\u1c04\u1bfe\3\2\2\2\u1c04\u1c00"+
		"\3\2\2\2\u1c04\u1c02\3\2\2\2\u1c05\u1c06\3\2\2\2\u1c06\u1c07\7n\2\2\u1c07"+
		"\u1c08\7\u02e3\2\2\u1c08\u02f7\3\2\2\2\u1c09\u1c0a\7\u0112\2\2\u1c0a\u1c0b"+
		"\7\u02a6\2\2\u1c0b\u1c10\5\u02fa\u017e\2\u1c0c\u1c0d\7\u02aa\2\2\u1c0d"+
		"\u1c0f\5\u02fa\u017e\2\u1c0e\u1c0c\3\2\2\2\u1c0f\u1c12\3\2\2\2\u1c10\u1c0e"+
		"\3\2\2\2\u1c10\u1c11\3\2\2\2\u1c11\u1c13\3\2\2\2\u1c12\u1c10\3\2\2\2\u1c13"+
		"\u1c14\7\u02a7\2\2\u1c14\u02f9\3\2\2\2\u1c15\u1c16\5\u0252\u012a\2\u1c16"+
		"\u1c17\5\u0240\u0121\2\u1c17\u1c1a\7\65\2\2\u1c18\u1c19\7\u02e5\2\2\u1c19"+
		"\u1c1b\5\u027c\u013f\2\u1c1a\u1c18\3\2\2\2\u1c1a\u1c1b\3\2\2\2\u1c1b\u1c1d"+
		"\3\2\2\2\u1c1c\u1c1e\5\u02f4\u017b\2\u1c1d\u1c1c\3\2\2\2\u1c1d\u1c1e\3"+
		"\2\2\2\u1c1e\u1c42\3\2\2\2\u1c1f\u1c20\5\u0252\u012a\2\u1c20\u1c21\5\u0240"+
		"\u0121\2\u1c21\u1c23\5\u02c4\u0163\2\u1c22\u1c24\5\u02f2\u017a\2\u1c23"+
		"\u1c22\3\2\2\2\u1c23\u1c24\3\2\2\2\u1c24\u1c27\3\2\2\2\u1c25\u1c26\7\u02e5"+
		"\2\2\u1c26\u1c28\5\u027c\u013f\2\u1c27\u1c25\3\2\2\2\u1c27\u1c28\3\2\2"+
		"\2\u1c28\u1c2a\3\2\2\2\u1c29\u1c2b\5\u02f4\u017b\2\u1c2a\u1c29\3\2\2\2"+
		"\u1c2a\u1c2b\3\2\2\2\u1c2b\u1c42\3\2\2\2\u1c2c\u1c2d\5\u0252\u012a\2\u1c2d"+
		"\u1c2e\5\u0240\u0121\2\u1c2e\u1c31\7\65\2\2\u1c2f\u1c30\7\u02e5\2\2\u1c30"+
		"\u1c32\5\u027c\u013f\2\u1c31\u1c2f\3\2\2\2\u1c31\u1c32\3\2\2\2\u1c32\u1c34"+
		"\3\2\2\2\u1c33\u1c35\5\u02f4\u017b\2\u1c34\u1c33\3\2\2\2\u1c34\u1c35\3"+
		"\2\2\2\u1c35\u1c42\3\2\2\2\u1c36\u1c38\7\u02e6\2\2\u1c37\u1c39\7\u02e5"+
		"\2\2\u1c38\u1c37\3\2\2\2\u1c38\u1c39\3\2\2\2\u1c39\u1c3a\3\2\2\2\u1c3a"+
		"\u1c3b\5\u027c\u013f\2\u1c3b\u1c3c\5\u02f8\u017d\2\u1c3c\u1c42\3\2\2\2"+
		"\u1c3d\u1c3e\5\u0252\u012a\2\u1c3e\u1c3f\7:\2\2\u1c3f\u1c40\7\u02e7\2"+
		"\2\u1c40\u1c42\3\2\2\2\u1c41\u1c15\3\2\2\2\u1c41\u1c1f\3\2\2\2\u1c41\u1c2c"+
		"\3\2\2\2\u1c41\u1c36\3\2\2\2\u1c41\u1c3d\3\2\2\2\u1c42\u02fb\3\2\2\2\u1c43"+
		"\u1c44\5\u02fe\u0180\2\u1c44\u1c52\7\u02a6\2\2\u1c45\u1c47\5\u00caf\2"+
		"\u1c46\u1c45\3\2\2\2\u1c46\u1c47\3\2\2\2\u1c47\u1c48\3\2\2\2\u1c48\u1c4a"+
		"\5\u027c\u013f\2\u1c49\u1c4b\7+\2\2\u1c4a\u1c49\3\2\2\2\u1c4a\u1c4b\3"+
		"\2\2\2\u1c4b\u1c4d\3\2\2\2\u1c4c\u1c4e\5\u0314\u018b\2\u1c4d\u1c4c\3\2"+
		"\2\2\u1c4d\u1c4e\3\2\2\2\u1c4e\u1c50\3\2\2\2\u1c4f\u1c51\5\u00eex\2\u1c50"+
		"\u1c4f\3\2\2\2\u1c50\u1c51\3\2\2\2\u1c51\u1c53\3\2\2\2\u1c52\u1c46\3\2"+
		"\2\2\u1c52\u1c53\3\2\2\2\u1c53\u1c58\3\2\2\2\u1c54\u1c55\7\u02aa\2\2\u1c55"+
		"\u1c57\5\u027c\u013f\2\u1c56\u1c54\3\2\2\2\u1c57\u1c5a\3\2\2\2\u1c58\u1c56"+
		"\3\2\2\2\u1c58\u1c59\3\2\2\2\u1c59\u1c5c\3\2\2\2\u1c5a\u1c58\3\2\2\2\u1c5b"+
		"\u1c5d\5\u0300\u0181\2\u1c5c\u1c5b\3\2\2\2\u1c5c\u1c5d\3\2\2\2\u1c5d\u1c5f"+
		"\3\2\2\2\u1c5e\u1c60\5\u0310\u0189\2\u1c5f\u1c5e\3\2\2\2\u1c5f\u1c60\3"+
		"\2\2\2\u1c60\u1c61\3\2\2\2\u1c61\u1c62\7\u02a7\2\2\u1c62\u02fd\3\2\2\2"+
		"\u1c63\u1c64\tZ\2\2\u1c64\u02ff\3\2\2\2\u1c65\u1c66\7\u031c\2\2\u1c66"+
		"\u1c67\7@\2\2\u1c67\u1c68\7\u02a6\2\2\u1c68\u1c69\5\u00eex\2\u1c69\u1c6a"+
		"\7\u02a7\2\2\u1c6a\u0301\3\2\2\2\u1c6b\u1c6c\5\u02fc\u017f\2\u1c6c\u1c6d"+
		"\7\u031d\2\2\u1c6d\u1c6e\7\u02a6\2\2\u1c6e\u1c6f\7\u02f9\2\2\u1c6f\u1c70"+
		"\7\u014a\2\2\u1c70\u1c71\5\u00eex\2\u1c71\u1c73\7\u02a7\2\2\u1c72\u1c74"+
		"\5\u0310\u0189\2\u1c73\u1c72\3\2\2\2\u1c73\u1c74\3\2\2\2\u1c74\u0303\3"+
		"\2\2\2\u1c75\u1c76\5\u02fc\u017f\2\u1c76\u1c77\7\u031d\2\2\u1c77\u1c78"+
		"\7\u02a6\2\2\u1c78\u1c79\7\u02f9\2\2\u1c79\u1c7a\7\u016c\2\2\u1c7a\u1c7b"+
		"\5\u00eex\2\u1c7b\u1c7d\7\u02a7\2\2\u1c7c\u1c7e\5\u0310\u0189\2\u1c7d"+
		"\u1c7c\3\2\2\2\u1c7d\u1c7e\3\2\2\2\u1c7e\u0305\3\2\2\2\u1c7f\u1c80\7\u031e"+
		"\2\2\u1c80\u1c82\7\u02a6\2\2\u1c81\u1c83\5\u00caf\2\u1c82\u1c81\3\2\2"+
		"\2\u1c82\u1c83\3\2\2\2\u1c83\u1c84\3\2\2\2\u1c84\u1c87\5\u027c\u013f\2"+
		"\u1c85\u1c86\7\u02aa\2\2\u1c86\u1c88\5\u027c\u013f\2\u1c87\u1c85\3\2\2"+
		"\2\u1c87\u1c88\3\2\2\2\u1c88\u1c8a\3\2\2\2\u1c89\u1c8b\5\u0308\u0185\2"+
		"\u1c8a\u1c89\3\2\2\2\u1c8a\u1c8b\3\2\2\2\u1c8b\u1c8c\3\2\2\2\u1c8c\u1c8d"+
		"\7\u02a7\2\2\u1c8d\u1c8f\5\u0300\u0181\2\u1c8e\u1c90\5\u0310\u0189\2\u1c8f"+
		"\u1c8e\3\2\2\2\u1c8f\u1c90\3\2\2\2\u1c90\u0307\3\2\2\2\u1c91\u1c92\7n"+
		"\2\2\u1c92\u1c93\7\u031f\2\2\u1c93\u1c9f\7\u0137\2\2\u1c94\u1c95\7n\2"+
		"\2\u1c95\u1c96\7\u031f\2\2\u1c96\u1c98\7\u020b\2\2\u1c97\u1c99\5\u027c"+
		"\u013f\2\u1c98\u1c97\3\2\2\2\u1c98\u1c99\3\2\2\2\u1c99\u1c9c\3\2\2\2\u1c9a"+
		"\u1c9b\t[\2\2\u1c9b\u1c9d\7\u00da\2\2\u1c9c\u1c9a\3\2\2\2\u1c9c\u1c9d"+
		"\3\2\2\2\u1c9d\u1c9f\3\2\2\2\u1c9e\u1c91\3\2\2\2\u1c9e\u1c94\3\2\2\2\u1c9f"+
		"\u0309\3\2\2\2\u1ca0\u1ca1\5\u0252\u012a\2\u1ca1\u1cb0\7\u02a6\2\2\u1ca2"+
		"\u1ca4\5\u00caf\2\u1ca3\u1ca2\3\2\2\2\u1ca3\u1ca4\3\2\2\2\u1ca4\u1ca5"+
		"\3\2\2\2\u1ca5\u1ca7\5\u027c\u013f\2\u1ca6\u1ca8\5\u030c\u0187\2\u1ca7"+
		"\u1ca6\3\2\2\2\u1ca7\u1ca8\3\2\2\2\u1ca8\u1cad\3\2\2\2\u1ca9\u1caa\7\u02aa"+
		"\2\2\u1caa\u1cac\5\u027c\u013f\2\u1cab\u1ca9\3\2\2\2\u1cac\u1caf\3\2\2"+
		"\2\u1cad\u1cab\3\2\2\2\u1cad\u1cae\3\2\2\2\u1cae\u1cb1\3\2\2\2\u1caf\u1cad"+
		"\3\2\2\2\u1cb0\u1ca3\3\2\2\2\u1cb0\u1cb1\3\2\2\2\u1cb1\u1cb2\3\2\2\2\u1cb2"+
		"\u1cb4\7\u02a7\2\2\u1cb3\u1cb5\5\u030e\u0188\2\u1cb4\u1cb3\3\2\2\2\u1cb4"+
		"\u1cb5\3\2\2\2\u1cb5\u1cb7\3\2\2\2\u1cb6\u1cb8\5\u030c\u0187\2\u1cb7\u1cb6"+
		"\3\2\2\2\u1cb7\u1cb8\3\2\2\2\u1cb8\u1cb9\3\2\2\2\u1cb9\u1cba\5\u0310\u0189"+
		"\2\u1cba\u030b\3\2\2\2\u1cbb\u1cbc\t\\\2\2\u1cbc\u1cbd\7\u0321\2\2\u1cbd"+
		"\u030d\3\2\2\2\u1cbe\u1cbf\7=\2\2\u1cbf\u1cc0\t]\2\2\u1cc0\u030f\3\2\2"+
		"\2\u1cc1\u1cc2\7\u0322\2\2\u1cc2\u1cc3\7\u02a6\2\2\u1cc3\u1cc4\5\u0312"+
		"\u018a\2\u1cc4\u1cc5\7\u02a7\2\2\u1cc5\u0311\3\2\2\2\u1cc6\u1cc8\5\u0314"+
		"\u018b\2\u1cc7\u1cc6\3\2\2\2\u1cc7\u1cc8\3\2\2\2\u1cc8\u1ccd\3\2\2\2\u1cc9"+
		"\u1ccb\5\u00eex\2\u1cca\u1ccc\5\u0316\u018c\2\u1ccb\u1cca\3\2\2\2\u1ccb"+
		"\u1ccc\3\2\2\2\u1ccc\u1cce\3\2\2\2\u1ccd\u1cc9\3\2\2\2\u1ccd\u1cce\3\2"+
		"\2\2\u1cce\u0313\3\2\2\2\u1ccf\u1cd0\7w\2\2\u1cd0\u1cd1\7\21\2\2\u1cd1"+
		"\u1cd6\5\u027c\u013f\2\u1cd2\u1cd3\7\u02aa\2\2\u1cd3\u1cd5\5\u027c\u013f"+
		"\2\u1cd4\u1cd2\3\2\2\2\u1cd5\u1cd8\3\2\2\2\u1cd6\u1cd4\3\2\2\2\u1cd6\u1cd7"+
		"\3\2\2\2\u1cd7\u0315\3\2\2\2\u1cd8\u1cd6\3\2\2\2\u1cd9\u1cda\5\u0318\u018d"+
		"\2\u1cda\u1cdb\5\u031a\u018e\2\u1cdb\u0317\3\2\2\2\u1cdc\u1cdd\t^\2\2"+
		"\u1cdd\u0319\3\2\2\2\u1cde\u1cdf\7\17\2\2\u1cdf\u1ce0\5\u031c\u018f\2"+
		"\u1ce0\u1ce1\7\13\2\2\u1ce1\u1ce2\5\u031c\u018f\2\u1ce2\u1ce5\3\2\2\2"+
		"\u1ce3\u1ce5\5\u031c\u018f\2\u1ce4\u1cde\3\2\2\2\u1ce4\u1ce3\3\2\2\2\u1ce5"+
		"\u031b\3\2\2\2\u1ce6\u1ce7\7\u0323\2\2\u1ce7\u1cee\7\u0324\2\2\u1ce8\u1ce9"+
		"\7\u0325\2\2\u1ce9\u1cee\7\u01da\2\2\u1cea\u1ceb\5\u027c\u013f\2\u1ceb"+
		"\u1cec\t_\2\2\u1cec\u1cee\3\2\2\2\u1ced\u1ce6\3\2\2\2\u1ced\u1ce8\3\2"+
		"\2\2\u1ced\u1cea\3\2\2\2\u1cee\u031d\3\2\2\2\u1cef\u1cf0\7\u0327\2\2\u1cf0"+
		"\u1cf1\7\u02a6\2\2\u1cf1\u1cf2\7\u0328\2\2\u1cf2\u1cf6\5\u0252\u012a\2"+
		"\u1cf3\u1cf5\5\u0320\u0191\2\u1cf4\u1cf3\3\2\2\2\u1cf5\u1cf8\3\2\2\2\u1cf6"+
		"\u1cf4\3\2\2\2\u1cf6\u1cf7\3\2\2\2\u1cf7\u1cf9\3\2\2\2\u1cf8\u1cf6\3\2"+
		"\2\2\u1cf9\u1cfa\7\u0328\2\2\u1cfa\u1cfb\7\u02a7\2\2\u1cfb\u031f\3\2\2"+
		"\2\u1cfc\u1cfe\t`\2\2\u1cfd\u1cff\5\u0252\u012a\2\u1cfe\u1cfd\3\2\2\2"+
		"\u1cfe\u1cff\3\2\2\2\u1cff\u1d00\3\2\2\2\u1d00\u1d01\5\u0252\u012a\2\u1d01"+
		"\u0321\3\2\2\2\u1d02\u1d03\7r\2\2\u1d03\u1d04\7\u0085\2\2\u1d04\u0323"+
		"\3\2\2\2\u1d05\u1d06\7C\2\2\u1d06\u1d07\7\65\2\2\u1d07\u0325\3\2\2\2\u1d08"+
		"\u1d09\7C\2\2\u1d09\u1d0a\7i\2\2\u1d0a\u1d0b\7\65\2\2\u1d0b\u0327\3\2"+
		"\2\2\u1d0c\u1d0d\7\u00b4\2\2\u1d0d\u1d0e\7\u01d8\2\2\u1d0e\u0329\3\2\2"+
		"\2\u1d0f\u1d10\ta\2\2\u1d10\u032b\3\2\2\2\u1d11\u1d12\tb\2\2\u1d12\u032d"+
		"\3\2\2\2\u1d13\u1d14\tc\2\2\u1d14\u032f\3\2\2\2\u1d15\u1d16\t\31\2\2\u1d16"+
		"\u0331\3\2\2\2\u1d17\u1d18\td\2\2\u1d18\u0333\3\2\2\2\u1d19\u1d1a\7\u00ae"+
		"\2\2\u1d1a\u1d1b\te\2\2\u1d1b\u0335\3\2\2\2\u1d1c\u1d1d\t[\2\2\u1d1d\u0337"+
		"\3\2\2\2\u1d1e\u1d1f\tf\2\2\u1d1f\u0339\3\2\2\2\u1d20\u1d21\tg\2\2\u1d21"+
		"\u033b\3\2\2\2\u03e5\u033f\u0342\u0346\u034a\u0356\u0380\u038d\u039e\u03a9"+
		"\u03ae\u03ba\u03d5\u03db\u03e0\u03e6\u03ec\u03f2\u03f7\u03fb\u0404\u0407"+
		"\u040a\u040e\u0415\u0418\u041d\u0427\u042e\u0436\u0439\u043e\u0442\u0448"+
		"\u0455\u0458\u045c\u045f\u0463\u0466\u046a\u046d\u0470\u0474\u0477\u047b"+
		"\u0481\u0487\u048d\u0494\u049b\u04a1\u04a7\u04b0\u04c3\u04d6\u04da\u04de"+
		"\u04e2\u04e9\u04ed\u04ef\u04f3\u04f8\u04fb\u04fe\u0501\u0504\u0507\u050c"+
		"\u0510\u0515\u0520\u0525\u0535\u053b\u0540\u0543\u0547\u0549\u054e\u0556"+
		"\u055d\u0562\u0565\u056d\u0574\u0579\u057c\u0584\u058b\u0590\u0592\u0596"+
		"\u0599\u059c\u05a4\u05ab\u05b0\u05b3\u05bb\u05c2\u05c7\u05ca\u05d2\u05d9"+
		"\u05de\u05e0\u05e5\u05ed\u05f9\u05ff\u0604\u060c\u0613\u0616\u0620\u0628"+
		"\u0644\u0649\u0651\u0654\u065c\u0661\u0666\u066c\u0674\u067a\u067d\u0685"+
		"\u068a\u068f\u0697\u069a\u06a2\u06a7\u06ac\u06b6\u06bc\u06bf\u06c7\u06cc"+
		"\u06d1\u06d9\u06dc\u06e4\u06e9\u06ee\u06f8\u06fe\u0701\u0709\u070e\u0710"+
		"\u0715\u071d\u0722\u0728\u0730\u0736\u0738\u073d\u0742\u074b\u0750\u075b"+
		"\u076c\u0771\u0778\u077c\u0780\u0785\u078b\u0791\u0796\u079b\u07a0\u07a5"+
		"\u07a8\u07ac\u07b7\u07bb\u07be\u07cc\u07cf\u07d3\u07d6\u07da\u07dd\u07e1"+
		"\u07e4\u07e8\u07eb\u07ee\u07f2\u07f5\u07f9\u07ff\u080b\u0814\u0817\u081e"+
		"\u0821\u0824\u0829\u0833\u0838\u083d\u0841\u0848\u084f\u0855\u085d\u0860"+
		"\u0867\u086a\u086c\u0872\u0879\u0882\u0886\u089c\u08a6\u08b3\u08b8\u08bd"+
		"\u08c2\u08cc\u08d1\u08d6\u08e0\u08e4\u08eb\u08f0\u08f3\u08f8\u08fb\u08ff"+
		"\u0903\u090b\u091e\u0921\u0924\u0928\u0932\u093f\u0946\u0949\u0952\u0956"+
		"\u095b\u0961\u0965\u096d\u0976\u097b\u0987\u098c\u098f\u0998\u09a1\u09ad"+
		"\u09c0\u09c5\u09cb\u09d4\u09eb\u09fc\u0a06\u0a12\u0a1e\u0a2b\u0a35\u0a43"+
		"\u0a4c\u0a56\u0a60\u0a6a\u0a74\u0a7b\u0a80\u0a87\u0a8b\u0a96\u0a99\u0a9d"+
		"\u0aa5\u0aa8\u0aad\u0ab7\u0abc\u0ac2\u0ac6\u0acb\u0ad2\u0ad9\u0ae0\u0ae8"+
		"\u0aed\u0afa\u0b01\u0b08\u0b0e\u0b12\u0b19\u0b1d\u0b24\u0b27\u0b2c\u0b33"+
		"\u0b3a\u0b3e\u0b47\u0b50\u0b58\u0b5c\u0b60\u0b63\u0b66\u0b69\u0b6c\u0b6f"+
		"\u0b72\u0b75\u0b7c\u0b80\u0b83\u0b86\u0b89\u0b8c\u0b8f\u0b92\u0b9a\u0b9d"+
		"\u0ba0\u0ba8\u0bab\u0bae\u0bb1\u0bb7\u0bbb\u0bbe\u0bc2\u0bc9\u0bcd\u0bd0"+
		"\u0bd8\u0bdb\u0bdd\u0be3\u0bec\u0bf1\u0bfc\u0c02\u0c0b\u0c14\u0c1c\u0c25"+
		"\u0c2d\u0c36\u0c3e\u0c47\u0c4f\u0c58\u0c60\u0c69\u0c71\u0c76\u0c7d\u0c84"+
		"\u0c8f\u0c94\u0ca0\u0ca4\u0ca6\u0ca9\u0cb7\u0cbb\u0cbf\u0cc5\u0ccc\u0cd4"+
		"\u0cde\u0ce4\u0ce6\u0cec\u0cee\u0cf0\u0cfa\u0cfd\u0d00\u0d06\u0d0b\u0d0f"+
		"\u0d12\u0d15\u0d18\u0d1b\u0d1e\u0d21\u0d24\u0d2b\u0d34\u0d38\u0d3b\u0d3e"+
		"\u0d41\u0d44\u0d47\u0d4a\u0d50\u0d53\u0d56\u0d5f\u0d64\u0d68\u0d6d\u0d75"+
		"\u0d7e\u0d8c\u0d91\u0d94\u0d98\u0d9b\u0d9e\u0da1\u0da9\u0db2\u0db5\u0db8"+
		"\u0dbd\u0dc0\u0dc3\u0dc6\u0dcd\u0dd0\u0dd9\u0dde\u0de5\u0ded\u0df0\u0df5"+
		"\u0e01\u0e06\u0e0b\u0e11\u0e13\u0e19\u0e1b\u0e21\u0e29\u0e2e\u0e31\u0e36"+
		"\u0e39\u0e3e\u0e46\u0e4f\u0e55\u0e5d\u0e62\u0e65\u0e6d\u0e73\u0e79\u0e7c"+
		"\u0e82\u0e8b\u0e90\u0e93\u0e96\u0e99\u0ea3\u0eab\u0eb3\u0ebc\u0ebf\u0ec8"+
		"\u0ecc\u0ed0\u0ed4\u0ed7\u0eda\u0edd\u0ee1\u0ee5\u0ee8\u0eeb\u0eee\u0ef5"+
		"\u0ef9\u0f08\u0f0d\u0f10\u0f16\u0f19\u0f1c\u0f2d\u0f36\u0f40\u0f44\u0f4e"+
		"\u0f58\u0f60\u0f63\u0f6c\u0f6f\u0f73\u0f78\u0f7c\u0f85\u0f88\u0fa7\u0faa"+
		"\u0fad\u0fc1\u0fce\u0fdb\u0fe8\u1001\u1006\u1024\u1032\u1039\u103d\u1043"+
		"\u104b\u104d\u1058\u1062\u106d\u1079\u107f\u1084\u108d\u1092\u1095\u10a3"+
		"\u10ab\u10b0\u10b7\u10b9\u10c4\u10cf\u10d5\u10da\u10df\u10e5\u10ec\u10f4"+
		"\u10fc\u1101\u1107\u110a\u1113\u1118\u111e\u1126\u1133\u1136\u1147\u114f"+
		"\u1157\u115c\u1163\u1169\u1170\u1177\u117c\u117f\u1181\u1187\u1189\u118d"+
		"\u118f\u1192\u1197\u119e\u11a5\u11aa\u11ad\u11af\u11b5\u11b7\u11bb\u11bd"+
		"\u11c3\u11ca\u11d3\u11d8\u11e1\u11e8\u11ed\u11f0\u11f2\u11f8\u11fa\u11fd"+
		"\u1209\u120f\u1218\u1221\u1226\u122f\u1235\u1240\u1243\u124f\u125f\u126a"+
		"\u126d\u1277\u1281\u128b\u1297\u129c\u12a0\u12a4\u12ad\u12c8\u12d7\u12df"+
		"\u12e7\u12f1\u12f7\u1301\u1305\u1309\u1311\u1316\u131e\u1322\u1325\u1328"+
		"\u1331\u1335\u1350\u1359\u1360\u1366\u136e\u137d\u1385\u1389\u138e\u1398"+
		"\u139c\u13a2\u13a5\u13aa\u13ae\u13b5\u13b8\u13be\u13d6\u13e3\u13e6\u13f0"+
		"\u13f8\u13fc\u1404\u1408\u1410\u1414\u141b\u141e\u1427\u142d\u1433\u143d"+
		"\u143f\u144b\u144e\u1454\u1457\u145f\u1467\u146d\u1471\u147f\u148b\u1495"+
		"\u1499\u149c\u14a3\u14aa\u14af\u14b4\u14bf\u14ca\u14d2\u14d7\u14dc\u14e9"+
		"\u14eb\u14f0\u14f8\u14fc\u14fe\u1505\u150f\u1513\u1516\u1519\u1521\u1526"+
		"\u152a\u1530\u1536\u1545\u154a\u155e\u1565\u1567\u156e\u1570\u1574\u157d"+
		"\u1581\u1584\u1589\u158d\u158f\u159f\u15a8\u15b0\u15b9\u15c1\u15c5\u15ca"+
		"\u15d1\u15da\u15e1\u15e4\u15ef\u15f7\u15fe\u1606\u160d\u1611\u1615\u1619"+
		"\u1633\u163c\u1643\u164a\u164d\u1650\u1657\u165a\u165d\u1664\u1667\u166a"+
		"\u1671\u1674\u1677\u167e\u1681\u1684\u168b\u168e\u1691\u1698\u169c\u169f"+
		"\u16a2\u16a9\u16ad\u16b0\u16b3\u16ba\u16be\u16c1\u16c4\u16cb\u16cf\u16d2"+
		"\u16d5\u16de\u16e3\u16e6\u16e9\u16f2\u16f7\u16fa\u16fd\u1707\u170c\u170f"+
		"\u1712\u171b\u1720\u1723\u1726\u1728\u172f\u1732\u1735\u173d\u1740\u1743"+
		"\u174a\u174d\u1750\u1758\u175b\u175e\u1765\u176c\u1771\u1774\u177b\u1782"+
		"\u1785\u1788\u178d\u1790\u1795\u1798\u17a1\u17a6\u17a9\u17ac\u17b5\u17ba"+
		"\u17bd\u17c0\u17c2\u17ca\u17d1\u17d8\u17df\u17e1\u17eb\u17ef\u17f6\u17fc"+
		"\u1800\u1808\u1810\u1812\u181a\u181e\u1830\u1835\u183a\u184c\u1855\u185e"+
		"\u1867\u1872\u1878\u187c\u1885\u188d\u18a2\u18a6\u18ab\u18ae\u18b4\u18c2"+
		"\u18d7\u18fb\u18fe\u1901\u1953\u1974\u197a\u1980\u1999\u19a0\u19a3\u19a9"+
		"\u19ae\u19b7\u19be\u19c4\u19c9\u19cf\u19d1\u19e3\u19ea\u19f0\u19f5\u19fa"+
		"\u19ff\u1a03\u1a09\u1a0e\u1a12\u1a18\u1a1e\u1a24\u1a2b\u1a32\u1a38\u1a3e"+
		"\u1a44\u1a4a\u1a50\u1a56\u1a5c\u1a62\u1a68\u1a6e\u1a74\u1a7a\u1a80\u1a88"+
		"\u1a8c\u1a9e\u1aa8\u1aac\u1ac1\u1ac6\u1ae3\u1aee\u1af6\u1b0c\u1b0f\u1b1a"+
		"\u1b28\u1b3a\u1b45\u1b4c\u1b4f\u1b52\u1b5c\u1b6c\u1b7b\u1b84\u1b8f\u1b92"+
		"\u1b9b\u1b9f\u1ba2\u1ba5\u1ba8\u1bab\u1bae\u1bb1\u1bb4\u1bb7\u1bc0\u1bc6"+
		"\u1bd2\u1bd5\u1bd8\u1be0\u1be5\u1be8\u1beb\u1bf6\u1c04\u1c10\u1c1a\u1c1d"+
		"\u1c23\u1c27\u1c2a\u1c31\u1c34\u1c38\u1c41\u1c46\u1c4a\u1c4d\u1c50\u1c52"+
		"\u1c58\u1c5c\u1c5f\u1c73\u1c7d\u1c82\u1c87\u1c8a\u1c8f\u1c98\u1c9c\u1c9e"+
		"\u1ca3\u1ca7\u1cad\u1cb0\u1cb4\u1cb7\u1cc7\u1ccb\u1ccd\u1cd6\u1ce4\u1ced"+
		"\u1cf6\u1cfe";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}